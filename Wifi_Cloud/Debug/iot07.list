
iot07.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ab50  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008a0  0800ace0  0800ace0  0001ace0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b580  0800b580  000201fc  2**0
                  CONTENTS
  4 .ARM          00000008  0800b580  0800b580  0001b580  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b588  0800b588  000201fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b588  0800b588  0001b588  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b58c  0800b58c  0001b58c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  0800b590  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a20  200001fc  0800b78c  000201fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000c1c  0800b78c  00020c1c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001deae  00000000  00000000  0002022c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000387b  00000000  00000000  0003e0da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013a0  00000000  00000000  00041958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001228  00000000  00000000  00042cf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000293b0  00000000  00000000  00043f20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017e75  00000000  00000000  0006d2d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f01a8  00000000  00000000  00085145  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001752ed  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006324  00000000  00000000  00175340  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001fc 	.word	0x200001fc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800acc8 	.word	0x0800acc8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000200 	.word	0x20000200
 80001cc:	0800acc8 	.word	0x0800acc8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96e 	b.w	8000e9c <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468c      	mov	ip, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	f040 8083 	bne.w	8000cee <__udivmoddi4+0x116>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d947      	bls.n	8000c7e <__udivmoddi4+0xa6>
 8000bee:	fab2 f282 	clz	r2, r2
 8000bf2:	b142      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	f1c2 0020 	rsb	r0, r2, #32
 8000bf8:	fa24 f000 	lsr.w	r0, r4, r0
 8000bfc:	4091      	lsls	r1, r2
 8000bfe:	4097      	lsls	r7, r2
 8000c00:	ea40 0c01 	orr.w	ip, r0, r1
 8000c04:	4094      	lsls	r4, r2
 8000c06:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c0a:	0c23      	lsrs	r3, r4, #16
 8000c0c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c10:	fa1f fe87 	uxth.w	lr, r7
 8000c14:	fb08 c116 	mls	r1, r8, r6, ip
 8000c18:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c20:	4299      	cmp	r1, r3
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x60>
 8000c24:	18fb      	adds	r3, r7, r3
 8000c26:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2a:	f080 8119 	bcs.w	8000e60 <__udivmoddi4+0x288>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 8116 	bls.w	8000e60 <__udivmoddi4+0x288>
 8000c34:	3e02      	subs	r6, #2
 8000c36:	443b      	add	r3, r7
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c40:	fb08 3310 	mls	r3, r8, r0, r3
 8000c44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c48:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c4c:	45a6      	cmp	lr, r4
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x8c>
 8000c50:	193c      	adds	r4, r7, r4
 8000c52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c56:	f080 8105 	bcs.w	8000e64 <__udivmoddi4+0x28c>
 8000c5a:	45a6      	cmp	lr, r4
 8000c5c:	f240 8102 	bls.w	8000e64 <__udivmoddi4+0x28c>
 8000c60:	3802      	subs	r0, #2
 8000c62:	443c      	add	r4, r7
 8000c64:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c68:	eba4 040e 	sub.w	r4, r4, lr
 8000c6c:	2600      	movs	r6, #0
 8000c6e:	b11d      	cbz	r5, 8000c78 <__udivmoddi4+0xa0>
 8000c70:	40d4      	lsrs	r4, r2
 8000c72:	2300      	movs	r3, #0
 8000c74:	e9c5 4300 	strd	r4, r3, [r5]
 8000c78:	4631      	mov	r1, r6
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	b902      	cbnz	r2, 8000c82 <__udivmoddi4+0xaa>
 8000c80:	deff      	udf	#255	; 0xff
 8000c82:	fab2 f282 	clz	r2, r2
 8000c86:	2a00      	cmp	r2, #0
 8000c88:	d150      	bne.n	8000d2c <__udivmoddi4+0x154>
 8000c8a:	1bcb      	subs	r3, r1, r7
 8000c8c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c90:	fa1f f887 	uxth.w	r8, r7
 8000c94:	2601      	movs	r6, #1
 8000c96:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c9a:	0c21      	lsrs	r1, r4, #16
 8000c9c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ca0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ca4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ca8:	428b      	cmp	r3, r1
 8000caa:	d907      	bls.n	8000cbc <__udivmoddi4+0xe4>
 8000cac:	1879      	adds	r1, r7, r1
 8000cae:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cb2:	d202      	bcs.n	8000cba <__udivmoddi4+0xe2>
 8000cb4:	428b      	cmp	r3, r1
 8000cb6:	f200 80e9 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cba:	4684      	mov	ip, r0
 8000cbc:	1ac9      	subs	r1, r1, r3
 8000cbe:	b2a3      	uxth	r3, r4
 8000cc0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cc4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cc8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ccc:	fb08 f800 	mul.w	r8, r8, r0
 8000cd0:	45a0      	cmp	r8, r4
 8000cd2:	d907      	bls.n	8000ce4 <__udivmoddi4+0x10c>
 8000cd4:	193c      	adds	r4, r7, r4
 8000cd6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cda:	d202      	bcs.n	8000ce2 <__udivmoddi4+0x10a>
 8000cdc:	45a0      	cmp	r8, r4
 8000cde:	f200 80d9 	bhi.w	8000e94 <__udivmoddi4+0x2bc>
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	eba4 0408 	sub.w	r4, r4, r8
 8000ce8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cec:	e7bf      	b.n	8000c6e <__udivmoddi4+0x96>
 8000cee:	428b      	cmp	r3, r1
 8000cf0:	d909      	bls.n	8000d06 <__udivmoddi4+0x12e>
 8000cf2:	2d00      	cmp	r5, #0
 8000cf4:	f000 80b1 	beq.w	8000e5a <__udivmoddi4+0x282>
 8000cf8:	2600      	movs	r6, #0
 8000cfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000cfe:	4630      	mov	r0, r6
 8000d00:	4631      	mov	r1, r6
 8000d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d06:	fab3 f683 	clz	r6, r3
 8000d0a:	2e00      	cmp	r6, #0
 8000d0c:	d14a      	bne.n	8000da4 <__udivmoddi4+0x1cc>
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d302      	bcc.n	8000d18 <__udivmoddi4+0x140>
 8000d12:	4282      	cmp	r2, r0
 8000d14:	f200 80b8 	bhi.w	8000e88 <__udivmoddi4+0x2b0>
 8000d18:	1a84      	subs	r4, r0, r2
 8000d1a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d1e:	2001      	movs	r0, #1
 8000d20:	468c      	mov	ip, r1
 8000d22:	2d00      	cmp	r5, #0
 8000d24:	d0a8      	beq.n	8000c78 <__udivmoddi4+0xa0>
 8000d26:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d2a:	e7a5      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000d2c:	f1c2 0320 	rsb	r3, r2, #32
 8000d30:	fa20 f603 	lsr.w	r6, r0, r3
 8000d34:	4097      	lsls	r7, r2
 8000d36:	fa01 f002 	lsl.w	r0, r1, r2
 8000d3a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d3e:	40d9      	lsrs	r1, r3
 8000d40:	4330      	orrs	r0, r6
 8000d42:	0c03      	lsrs	r3, r0, #16
 8000d44:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d48:	fa1f f887 	uxth.w	r8, r7
 8000d4c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d50:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d54:	fb06 f108 	mul.w	r1, r6, r8
 8000d58:	4299      	cmp	r1, r3
 8000d5a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x19c>
 8000d60:	18fb      	adds	r3, r7, r3
 8000d62:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d66:	f080 808d 	bcs.w	8000e84 <__udivmoddi4+0x2ac>
 8000d6a:	4299      	cmp	r1, r3
 8000d6c:	f240 808a 	bls.w	8000e84 <__udivmoddi4+0x2ac>
 8000d70:	3e02      	subs	r6, #2
 8000d72:	443b      	add	r3, r7
 8000d74:	1a5b      	subs	r3, r3, r1
 8000d76:	b281      	uxth	r1, r0
 8000d78:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d7c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d84:	fb00 f308 	mul.w	r3, r0, r8
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x1c4>
 8000d8c:	1879      	adds	r1, r7, r1
 8000d8e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d92:	d273      	bcs.n	8000e7c <__udivmoddi4+0x2a4>
 8000d94:	428b      	cmp	r3, r1
 8000d96:	d971      	bls.n	8000e7c <__udivmoddi4+0x2a4>
 8000d98:	3802      	subs	r0, #2
 8000d9a:	4439      	add	r1, r7
 8000d9c:	1acb      	subs	r3, r1, r3
 8000d9e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000da2:	e778      	b.n	8000c96 <__udivmoddi4+0xbe>
 8000da4:	f1c6 0c20 	rsb	ip, r6, #32
 8000da8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dac:	fa22 f30c 	lsr.w	r3, r2, ip
 8000db0:	431c      	orrs	r4, r3
 8000db2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000db6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dba:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dbe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dc2:	431f      	orrs	r7, r3
 8000dc4:	0c3b      	lsrs	r3, r7, #16
 8000dc6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dca:	fa1f f884 	uxth.w	r8, r4
 8000dce:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dd2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dd6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dda:	458a      	cmp	sl, r1
 8000ddc:	fa02 f206 	lsl.w	r2, r2, r6
 8000de0:	fa00 f306 	lsl.w	r3, r0, r6
 8000de4:	d908      	bls.n	8000df8 <__udivmoddi4+0x220>
 8000de6:	1861      	adds	r1, r4, r1
 8000de8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dec:	d248      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000dee:	458a      	cmp	sl, r1
 8000df0:	d946      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000df2:	f1a9 0902 	sub.w	r9, r9, #2
 8000df6:	4421      	add	r1, r4
 8000df8:	eba1 010a 	sub.w	r1, r1, sl
 8000dfc:	b2bf      	uxth	r7, r7
 8000dfe:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e02:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e06:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e0a:	fb00 f808 	mul.w	r8, r0, r8
 8000e0e:	45b8      	cmp	r8, r7
 8000e10:	d907      	bls.n	8000e22 <__udivmoddi4+0x24a>
 8000e12:	19e7      	adds	r7, r4, r7
 8000e14:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e18:	d22e      	bcs.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1a:	45b8      	cmp	r8, r7
 8000e1c:	d92c      	bls.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1e:	3802      	subs	r0, #2
 8000e20:	4427      	add	r7, r4
 8000e22:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e26:	eba7 0708 	sub.w	r7, r7, r8
 8000e2a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e2e:	454f      	cmp	r7, r9
 8000e30:	46c6      	mov	lr, r8
 8000e32:	4649      	mov	r1, r9
 8000e34:	d31a      	bcc.n	8000e6c <__udivmoddi4+0x294>
 8000e36:	d017      	beq.n	8000e68 <__udivmoddi4+0x290>
 8000e38:	b15d      	cbz	r5, 8000e52 <__udivmoddi4+0x27a>
 8000e3a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e3e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e42:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e46:	40f2      	lsrs	r2, r6
 8000e48:	ea4c 0202 	orr.w	r2, ip, r2
 8000e4c:	40f7      	lsrs	r7, r6
 8000e4e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e52:	2600      	movs	r6, #0
 8000e54:	4631      	mov	r1, r6
 8000e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e5a:	462e      	mov	r6, r5
 8000e5c:	4628      	mov	r0, r5
 8000e5e:	e70b      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000e60:	4606      	mov	r6, r0
 8000e62:	e6e9      	b.n	8000c38 <__udivmoddi4+0x60>
 8000e64:	4618      	mov	r0, r3
 8000e66:	e6fd      	b.n	8000c64 <__udivmoddi4+0x8c>
 8000e68:	4543      	cmp	r3, r8
 8000e6a:	d2e5      	bcs.n	8000e38 <__udivmoddi4+0x260>
 8000e6c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e70:	eb69 0104 	sbc.w	r1, r9, r4
 8000e74:	3801      	subs	r0, #1
 8000e76:	e7df      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	e7d2      	b.n	8000e22 <__udivmoddi4+0x24a>
 8000e7c:	4660      	mov	r0, ip
 8000e7e:	e78d      	b.n	8000d9c <__udivmoddi4+0x1c4>
 8000e80:	4681      	mov	r9, r0
 8000e82:	e7b9      	b.n	8000df8 <__udivmoddi4+0x220>
 8000e84:	4666      	mov	r6, ip
 8000e86:	e775      	b.n	8000d74 <__udivmoddi4+0x19c>
 8000e88:	4630      	mov	r0, r6
 8000e8a:	e74a      	b.n	8000d22 <__udivmoddi4+0x14a>
 8000e8c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e90:	4439      	add	r1, r7
 8000e92:	e713      	b.n	8000cbc <__udivmoddi4+0xe4>
 8000e94:	3802      	subs	r0, #2
 8000e96:	443c      	add	r4, r7
 8000e98:	e724      	b.n	8000ce4 <__udivmoddi4+0x10c>
 8000e9a:	bf00      	nop

08000e9c <__aeabi_idiv0>:
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop

08000ea0 <Hex2Num>:
  * @brief  Convert char in Hex format to integer.
  * @param  a: character to convert
  * @retval integer value.
  */
static  uint8_t Hex2Num(char a)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b083      	sub	sp, #12
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	71fb      	strb	r3, [r7, #7]
    if (a >= '0' && a <= '9') {                             /* Char is num */
 8000eaa:	79fb      	ldrb	r3, [r7, #7]
 8000eac:	2b2f      	cmp	r3, #47	; 0x2f
 8000eae:	d906      	bls.n	8000ebe <Hex2Num+0x1e>
 8000eb0:	79fb      	ldrb	r3, [r7, #7]
 8000eb2:	2b39      	cmp	r3, #57	; 0x39
 8000eb4:	d803      	bhi.n	8000ebe <Hex2Num+0x1e>
        return a - '0';
 8000eb6:	79fb      	ldrb	r3, [r7, #7]
 8000eb8:	3b30      	subs	r3, #48	; 0x30
 8000eba:	b2db      	uxtb	r3, r3
 8000ebc:	e014      	b.n	8000ee8 <Hex2Num+0x48>
    } else if (a >= 'a' && a <= 'f') {                      /* Char is lowercase character A - Z (hex) */
 8000ebe:	79fb      	ldrb	r3, [r7, #7]
 8000ec0:	2b60      	cmp	r3, #96	; 0x60
 8000ec2:	d906      	bls.n	8000ed2 <Hex2Num+0x32>
 8000ec4:	79fb      	ldrb	r3, [r7, #7]
 8000ec6:	2b66      	cmp	r3, #102	; 0x66
 8000ec8:	d803      	bhi.n	8000ed2 <Hex2Num+0x32>
        return (a - 'a') + 10;
 8000eca:	79fb      	ldrb	r3, [r7, #7]
 8000ecc:	3b57      	subs	r3, #87	; 0x57
 8000ece:	b2db      	uxtb	r3, r3
 8000ed0:	e00a      	b.n	8000ee8 <Hex2Num+0x48>
    } else if (a >= 'A' && a <= 'F') {                      /* Char is uppercase character A - Z (hex) */
 8000ed2:	79fb      	ldrb	r3, [r7, #7]
 8000ed4:	2b40      	cmp	r3, #64	; 0x40
 8000ed6:	d906      	bls.n	8000ee6 <Hex2Num+0x46>
 8000ed8:	79fb      	ldrb	r3, [r7, #7]
 8000eda:	2b46      	cmp	r3, #70	; 0x46
 8000edc:	d803      	bhi.n	8000ee6 <Hex2Num+0x46>
        return (a - 'A') + 10;
 8000ede:	79fb      	ldrb	r3, [r7, #7]
 8000ee0:	3b37      	subs	r3, #55	; 0x37
 8000ee2:	b2db      	uxtb	r3, r3
 8000ee4:	e000      	b.n	8000ee8 <Hex2Num+0x48>
    }

    return 0;
 8000ee6:	2300      	movs	r3, #0
}
 8000ee8:	4618      	mov	r0, r3
 8000eea:	370c      	adds	r7, #12
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr

08000ef4 <ParseHexNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval Hex value.
  */
static uint32_t ParseHexNumber(char* ptr, uint8_t* cnt)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b084      	sub	sp, #16
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
 8000efc:	6039      	str	r1, [r7, #0]
    uint32_t sum = 0;
 8000efe:	2300      	movs	r3, #0
 8000f00:	60fb      	str	r3, [r7, #12]
    uint8_t i = 0;
 8000f02:	2300      	movs	r3, #0
 8000f04:	72fb      	strb	r3, [r7, #11]

    while (CHARISHEXNUM(*ptr)) {                            /* Parse number */
 8000f06:	e012      	b.n	8000f2e <ParseHexNumber+0x3a>
        sum <<= 4;
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	011b      	lsls	r3, r3, #4
 8000f0c:	60fb      	str	r3, [r7, #12]
        sum += Hex2Num(*ptr);
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	781b      	ldrb	r3, [r3, #0]
 8000f12:	4618      	mov	r0, r3
 8000f14:	f7ff ffc4 	bl	8000ea0 <Hex2Num>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	461a      	mov	r2, r3
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	4413      	add	r3, r2
 8000f20:	60fb      	str	r3, [r7, #12]
        ptr++;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	3301      	adds	r3, #1
 8000f26:	607b      	str	r3, [r7, #4]
        i++;
 8000f28:	7afb      	ldrb	r3, [r7, #11]
 8000f2a:	3301      	adds	r3, #1
 8000f2c:	72fb      	strb	r3, [r7, #11]
    while (CHARISHEXNUM(*ptr)) {                            /* Parse number */
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	781b      	ldrb	r3, [r3, #0]
 8000f32:	2b2f      	cmp	r3, #47	; 0x2f
 8000f34:	d903      	bls.n	8000f3e <ParseHexNumber+0x4a>
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	781b      	ldrb	r3, [r3, #0]
 8000f3a:	2b39      	cmp	r3, #57	; 0x39
 8000f3c:	d9e4      	bls.n	8000f08 <ParseHexNumber+0x14>
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	781b      	ldrb	r3, [r3, #0]
 8000f42:	2b60      	cmp	r3, #96	; 0x60
 8000f44:	d903      	bls.n	8000f4e <ParseHexNumber+0x5a>
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	781b      	ldrb	r3, [r3, #0]
 8000f4a:	2b66      	cmp	r3, #102	; 0x66
 8000f4c:	d9dc      	bls.n	8000f08 <ParseHexNumber+0x14>
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	781b      	ldrb	r3, [r3, #0]
 8000f52:	2b40      	cmp	r3, #64	; 0x40
 8000f54:	d903      	bls.n	8000f5e <ParseHexNumber+0x6a>
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	2b46      	cmp	r3, #70	; 0x46
 8000f5c:	d9d4      	bls.n	8000f08 <ParseHexNumber+0x14>
    }

    if (cnt != NULL) {                                      /* Save number of characters used for number */
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d002      	beq.n	8000f6a <ParseHexNumber+0x76>
        *cnt = i;
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	7afa      	ldrb	r2, [r7, #11]
 8000f68:	701a      	strb	r2, [r3, #0]
    }
    return sum;                                             /* Return number */
 8000f6a:	68fb      	ldr	r3, [r7, #12]
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	3710      	adds	r7, #16
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}

08000f74 <ParseNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval integer value.
  */
static int32_t ParseNumber(char* ptr, uint8_t* cnt)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b085      	sub	sp, #20
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
 8000f7c:	6039      	str	r1, [r7, #0]
    uint8_t minus = 0, i = 0;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	73fb      	strb	r3, [r7, #15]
 8000f82:	2300      	movs	r3, #0
 8000f84:	73bb      	strb	r3, [r7, #14]
    int32_t sum = 0;
 8000f86:	2300      	movs	r3, #0
 8000f88:	60bb      	str	r3, [r7, #8]

    if (*ptr == '-') {                                      /* Check for minus character */
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	2b2d      	cmp	r3, #45	; 0x2d
 8000f90:	d119      	bne.n	8000fc6 <ParseNumber+0x52>
        minus = 1;
 8000f92:	2301      	movs	r3, #1
 8000f94:	73fb      	strb	r3, [r7, #15]
        ptr++;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	3301      	adds	r3, #1
 8000f9a:	607b      	str	r3, [r7, #4]
        i++;
 8000f9c:	7bbb      	ldrb	r3, [r7, #14]
 8000f9e:	3301      	adds	r3, #1
 8000fa0:	73bb      	strb	r3, [r7, #14]
    }
    while (CHARISNUM(*ptr)) {                               /* Parse number */
 8000fa2:	e010      	b.n	8000fc6 <ParseNumber+0x52>
        sum = 10 * sum + CHAR2NUM(*ptr);
 8000fa4:	68ba      	ldr	r2, [r7, #8]
 8000fa6:	4613      	mov	r3, r2
 8000fa8:	009b      	lsls	r3, r3, #2
 8000faa:	4413      	add	r3, r2
 8000fac:	005b      	lsls	r3, r3, #1
 8000fae:	461a      	mov	r2, r3
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	3b30      	subs	r3, #48	; 0x30
 8000fb6:	4413      	add	r3, r2
 8000fb8:	60bb      	str	r3, [r7, #8]
        ptr++;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	3301      	adds	r3, #1
 8000fbe:	607b      	str	r3, [r7, #4]
        i++;
 8000fc0:	7bbb      	ldrb	r3, [r7, #14]
 8000fc2:	3301      	adds	r3, #1
 8000fc4:	73bb      	strb	r3, [r7, #14]
    while (CHARISNUM(*ptr)) {                               /* Parse number */
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	2b2f      	cmp	r3, #47	; 0x2f
 8000fcc:	d903      	bls.n	8000fd6 <ParseNumber+0x62>
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	2b39      	cmp	r3, #57	; 0x39
 8000fd4:	d9e6      	bls.n	8000fa4 <ParseNumber+0x30>
    }
    if (cnt != NULL) {                                      /* Save number of characters used for number */
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d002      	beq.n	8000fe2 <ParseNumber+0x6e>
        *cnt = i;
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	7bba      	ldrb	r2, [r7, #14]
 8000fe0:	701a      	strb	r2, [r3, #0]
    }
    if (minus) {                                            /* Minus detected */
 8000fe2:	7bfb      	ldrb	r3, [r7, #15]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d002      	beq.n	8000fee <ParseNumber+0x7a>
        return 0 - sum;
 8000fe8:	68bb      	ldr	r3, [r7, #8]
 8000fea:	425b      	negs	r3, r3
 8000fec:	e000      	b.n	8000ff0 <ParseNumber+0x7c>
    }
    return sum;                                             /* Return number */
 8000fee:	68bb      	ldr	r3, [r7, #8]
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	3714      	adds	r7, #20
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr

08000ffc <ParseMAC>:
  * @param  ptr: pointer to string
  * @param  arr: pointer to MAC array
  * @retval None.
  */
static void ParseMAC(char* ptr, uint8_t* arr)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b084      	sub	sp, #16
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
 8001004:	6039      	str	r1, [r7, #0]
  uint8_t hexnum = 0, hexcnt;
 8001006:	2300      	movs	r3, #0
 8001008:	73fb      	strb	r3, [r7, #15]

  while(* ptr) {
 800100a:	e019      	b.n	8001040 <ParseMAC+0x44>
    hexcnt = 1;
 800100c:	2301      	movs	r3, #1
 800100e:	73bb      	strb	r3, [r7, #14]
    if(*ptr != ':')
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	2b3a      	cmp	r3, #58	; 0x3a
 8001016:	d00e      	beq.n	8001036 <ParseMAC+0x3a>
    {
      arr[hexnum++] = ParseHexNumber(ptr, &hexcnt);
 8001018:	f107 030e 	add.w	r3, r7, #14
 800101c:	4619      	mov	r1, r3
 800101e:	6878      	ldr	r0, [r7, #4]
 8001020:	f7ff ff68 	bl	8000ef4 <ParseHexNumber>
 8001024:	4601      	mov	r1, r0
 8001026:	7bfb      	ldrb	r3, [r7, #15]
 8001028:	1c5a      	adds	r2, r3, #1
 800102a:	73fa      	strb	r2, [r7, #15]
 800102c:	461a      	mov	r2, r3
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	4413      	add	r3, r2
 8001032:	b2ca      	uxtb	r2, r1
 8001034:	701a      	strb	r2, [r3, #0]
    }
    ptr = ptr + hexcnt;
 8001036:	7bbb      	ldrb	r3, [r7, #14]
 8001038:	461a      	mov	r2, r3
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	4413      	add	r3, r2
 800103e:	607b      	str	r3, [r7, #4]
  while(* ptr) {
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d1e1      	bne.n	800100c <ParseMAC+0x10>
  }
}
 8001048:	bf00      	nop
 800104a:	bf00      	nop
 800104c:	3710      	adds	r7, #16
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}

08001052 <ParseIP>:
  * @param  ptr: pointer to string
  * @param  arr: pointer to IP array
  * @retval None.
  */
static  void ParseIP(char* ptr, uint8_t* arr)
{
 8001052:	b580      	push	{r7, lr}
 8001054:	b084      	sub	sp, #16
 8001056:	af00      	add	r7, sp, #0
 8001058:	6078      	str	r0, [r7, #4]
 800105a:	6039      	str	r1, [r7, #0]
  uint8_t hexnum = 0, hexcnt;
 800105c:	2300      	movs	r3, #0
 800105e:	73fb      	strb	r3, [r7, #15]

  while(* ptr) {
 8001060:	e019      	b.n	8001096 <ParseIP+0x44>
    hexcnt = 1;
 8001062:	2301      	movs	r3, #1
 8001064:	73bb      	strb	r3, [r7, #14]
    if(*ptr != '.')
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	2b2e      	cmp	r3, #46	; 0x2e
 800106c:	d00e      	beq.n	800108c <ParseIP+0x3a>
    {
      arr[hexnum++] = ParseNumber(ptr, &hexcnt);
 800106e:	f107 030e 	add.w	r3, r7, #14
 8001072:	4619      	mov	r1, r3
 8001074:	6878      	ldr	r0, [r7, #4]
 8001076:	f7ff ff7d 	bl	8000f74 <ParseNumber>
 800107a:	4601      	mov	r1, r0
 800107c:	7bfb      	ldrb	r3, [r7, #15]
 800107e:	1c5a      	adds	r2, r3, #1
 8001080:	73fa      	strb	r2, [r7, #15]
 8001082:	461a      	mov	r2, r3
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	4413      	add	r3, r2
 8001088:	b2ca      	uxtb	r2, r1
 800108a:	701a      	strb	r2, [r3, #0]
    }
    ptr = ptr + hexcnt;
 800108c:	7bbb      	ldrb	r3, [r7, #14]
 800108e:	461a      	mov	r2, r3
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	4413      	add	r3, r2
 8001094:	607b      	str	r3, [r7, #4]
  while(* ptr) {
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d1e1      	bne.n	8001062 <ParseIP+0x10>
  }
}
 800109e:	bf00      	nop
 80010a0:	bf00      	nop
 80010a2:	3710      	adds	r7, #16
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}

080010a8 <AT_ParseInfo>:
  * @param  Obj: pointer to module handle
  * @param  ptr: pointer to string
  * @retval None.
  */
static void AT_ParseInfo(ES_WIFIObject_t *Obj,uint8_t *pdata)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b084      	sub	sp, #16
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
 80010b0:	6039      	str	r1, [r7, #0]
  char *ptr;
  uint8_t num = 0;
 80010b2:	2300      	movs	r3, #0
 80010b4:	72fb      	strb	r3, [r7, #11]

  ptr = strtok((char *)pdata + 2, ",");
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	3302      	adds	r3, #2
 80010ba:	4934      	ldr	r1, [pc, #208]	; (800118c <AT_ParseInfo+0xe4>)
 80010bc:	4618      	mov	r0, r3
 80010be:	f007 fba7 	bl	8008810 <strtok>
 80010c2:	60f8      	str	r0, [r7, #12]

  while (ptr != NULL){
 80010c4:	e05a      	b.n	800117c <AT_ParseInfo+0xd4>
    switch (num++) {
 80010c6:	7afb      	ldrb	r3, [r7, #11]
 80010c8:	1c5a      	adds	r2, r3, #1
 80010ca:	72fa      	strb	r2, [r7, #11]
 80010cc:	2b06      	cmp	r3, #6
 80010ce:	d84f      	bhi.n	8001170 <AT_ParseInfo+0xc8>
 80010d0:	a201      	add	r2, pc, #4	; (adr r2, 80010d8 <AT_ParseInfo+0x30>)
 80010d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010d6:	bf00      	nop
 80010d8:	080010f5 	.word	0x080010f5
 80010dc:	08001103 	.word	0x08001103
 80010e0:	08001113 	.word	0x08001113
 80010e4:	08001123 	.word	0x08001123
 80010e8:	08001133 	.word	0x08001133
 80010ec:	08001143 	.word	0x08001143
 80010f0:	08001157 	.word	0x08001157
    case 0:
      strncpy((char *)Obj->Product_ID,  ptr, ES_WIFI_PRODUCT_ID_SIZE);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2220      	movs	r2, #32
 80010f8:	68f9      	ldr	r1, [r7, #12]
 80010fa:	4618      	mov	r0, r3
 80010fc:	f007 fb5e 	bl	80087bc <strncpy>
      break;
 8001100:	e037      	b.n	8001172 <AT_ParseInfo+0xca>

    case 1:
      strncpy((char *)Obj->FW_Rev,  ptr, ES_WIFI_FW_REV_SIZE );
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	3320      	adds	r3, #32
 8001106:	2210      	movs	r2, #16
 8001108:	68f9      	ldr	r1, [r7, #12]
 800110a:	4618      	mov	r0, r3
 800110c:	f007 fb56 	bl	80087bc <strncpy>
      break;
 8001110:	e02f      	b.n	8001172 <AT_ParseInfo+0xca>

    case 2:
      strncpy((char *)Obj->API_Rev,  ptr, ES_WIFI_API_REV_SIZE);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	3330      	adds	r3, #48	; 0x30
 8001116:	2210      	movs	r2, #16
 8001118:	68f9      	ldr	r1, [r7, #12]
 800111a:	4618      	mov	r0, r3
 800111c:	f007 fb4e 	bl	80087bc <strncpy>
      break;
 8001120:	e027      	b.n	8001172 <AT_ParseInfo+0xca>

    case 3:
      strncpy((char *)Obj->Stack_Rev,  ptr, ES_WIFI_STACK_REV_SIZE);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	3340      	adds	r3, #64	; 0x40
 8001126:	2210      	movs	r2, #16
 8001128:	68f9      	ldr	r1, [r7, #12]
 800112a:	4618      	mov	r0, r3
 800112c:	f007 fb46 	bl	80087bc <strncpy>
      break;
 8001130:	e01f      	b.n	8001172 <AT_ParseInfo+0xca>

    case 4:
      strncpy((char *)Obj->RTOS_Rev,  ptr, ES_WIFI_RTOS_REV_SIZE);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	3350      	adds	r3, #80	; 0x50
 8001136:	2210      	movs	r2, #16
 8001138:	68f9      	ldr	r1, [r7, #12]
 800113a:	4618      	mov	r0, r3
 800113c:	f007 fb3e 	bl	80087bc <strncpy>
      break;
 8001140:	e017      	b.n	8001172 <AT_ParseInfo+0xca>

    case 5:
      Obj->CPU_Clock = ParseNumber(ptr, NULL);
 8001142:	2100      	movs	r1, #0
 8001144:	68f8      	ldr	r0, [r7, #12]
 8001146:	f7ff ff15 	bl	8000f74 <ParseNumber>
 800114a:	4603      	mov	r3, r0
 800114c:	461a      	mov	r2, r3
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      break;
 8001154:	e00d      	b.n	8001172 <AT_ParseInfo+0xca>

    case 6:
      ptr = strtok(ptr, "\r");
 8001156:	490e      	ldr	r1, [pc, #56]	; (8001190 <AT_ParseInfo+0xe8>)
 8001158:	68f8      	ldr	r0, [r7, #12]
 800115a:	f007 fb59 	bl	8008810 <strtok>
 800115e:	60f8      	str	r0, [r7, #12]
      strncpy((char *)Obj->Product_Name,  ptr, ES_WIFI_PRODUCT_NAME_SIZE);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	3360      	adds	r3, #96	; 0x60
 8001164:	2220      	movs	r2, #32
 8001166:	68f9      	ldr	r1, [r7, #12]
 8001168:	4618      	mov	r0, r3
 800116a:	f007 fb27 	bl	80087bc <strncpy>
      break;
 800116e:	e000      	b.n	8001172 <AT_ParseInfo+0xca>

    default: break;
 8001170:	bf00      	nop
    }
    ptr = strtok(NULL, ",");
 8001172:	4906      	ldr	r1, [pc, #24]	; (800118c <AT_ParseInfo+0xe4>)
 8001174:	2000      	movs	r0, #0
 8001176:	f007 fb4b 	bl	8008810 <strtok>
 800117a:	60f8      	str	r0, [r7, #12]
  while (ptr != NULL){
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d1a1      	bne.n	80010c6 <AT_ParseInfo+0x1e>
  }
}
 8001182:	bf00      	nop
 8001184:	bf00      	nop
 8001186:	3710      	adds	r7, #16
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	0800ad10 	.word	0x0800ad10
 8001190:	0800ad14 	.word	0x0800ad14

08001194 <AT_ParseConnSettings>:
  * @param  NetSettings: settings
  * @param  pdata: pointer to data
  * @retval None.
  */
static void AT_ParseConnSettings(char *pdata, ES_WIFI_Network_t *NetSettings)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b084      	sub	sp, #16
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	6039      	str	r1, [r7, #0]
  uint8_t num = 0;
 800119e:	2300      	movs	r3, #0
 80011a0:	73fb      	strb	r3, [r7, #15]
  char *ptr;

  ptr = strtok(pdata + 2, ",");
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	3302      	adds	r3, #2
 80011a6:	4952      	ldr	r1, [pc, #328]	; (80012f0 <AT_ParseConnSettings+0x15c>)
 80011a8:	4618      	mov	r0, r3
 80011aa:	f007 fb31 	bl	8008810 <strtok>
 80011ae:	60b8      	str	r0, [r7, #8]

  while (ptr != NULL) {
 80011b0:	e095      	b.n	80012de <AT_ParseConnSettings+0x14a>
    switch (num++) {
 80011b2:	7bfb      	ldrb	r3, [r7, #15]
 80011b4:	1c5a      	adds	r2, r3, #1
 80011b6:	73fa      	strb	r2, [r7, #15]
 80011b8:	2b0b      	cmp	r3, #11
 80011ba:	d87f      	bhi.n	80012bc <AT_ParseConnSettings+0x128>
 80011bc:	a201      	add	r2, pc, #4	; (adr r2, 80011c4 <AT_ParseConnSettings+0x30>)
 80011be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011c2:	bf00      	nop
 80011c4:	080011f5 	.word	0x080011f5
 80011c8:	08001203 	.word	0x08001203
 80011cc:	08001213 	.word	0x08001213
 80011d0:	08001227 	.word	0x08001227
 80011d4:	0800123b 	.word	0x0800123b
 80011d8:	0800124f 	.word	0x0800124f
 80011dc:	0800125d 	.word	0x0800125d
 80011e0:	0800126b 	.word	0x0800126b
 80011e4:	08001279 	.word	0x08001279
 80011e8:	08001287 	.word	0x08001287
 80011ec:	08001295 	.word	0x08001295
 80011f0:	080012a9 	.word	0x080012a9
    case 0:
      strncpy((char *)NetSettings->SSID,  ptr, ES_WIFI_MAX_SSID_NAME_SIZE + 1);
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	2221      	movs	r2, #33	; 0x21
 80011f8:	68b9      	ldr	r1, [r7, #8]
 80011fa:	4618      	mov	r0, r3
 80011fc:	f007 fade 	bl	80087bc <strncpy>
      break;
 8001200:	e05d      	b.n	80012be <AT_ParseConnSettings+0x12a>

    case 1:
      strncpy((char *)NetSettings->pswd,  ptr, ES_WIFI_MAX_PSWD_NAME_SIZE + 1);
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	3321      	adds	r3, #33	; 0x21
 8001206:	2221      	movs	r2, #33	; 0x21
 8001208:	68b9      	ldr	r1, [r7, #8]
 800120a:	4618      	mov	r0, r3
 800120c:	f007 fad6 	bl	80087bc <strncpy>
      break;
 8001210:	e055      	b.n	80012be <AT_ParseConnSettings+0x12a>

    case 2:
        NetSettings->Security = (ES_WIFI_SecurityType_t)ParseNumber(ptr, NULL);
 8001212:	2100      	movs	r1, #0
 8001214:	68b8      	ldr	r0, [r7, #8]
 8001216:	f7ff fead 	bl	8000f74 <ParseNumber>
 800121a:	4603      	mov	r3, r0
 800121c:	b2da      	uxtb	r2, r3
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        break;
 8001224:	e04b      	b.n	80012be <AT_ParseConnSettings+0x12a>

    case 3:
      NetSettings->DHCP_IsEnabled = ParseNumber(ptr, NULL);
 8001226:	2100      	movs	r1, #0
 8001228:	68b8      	ldr	r0, [r7, #8]
 800122a:	f7ff fea3 	bl	8000f74 <ParseNumber>
 800122e:	4603      	mov	r3, r0
 8001230:	b2da      	uxtb	r2, r3
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      break;
 8001238:	e041      	b.n	80012be <AT_ParseConnSettings+0x12a>

    case 4:
      NetSettings->IP_Ver = (ES_WIFI_IPVer_t)ParseNumber(ptr, NULL);
 800123a:	2100      	movs	r1, #0
 800123c:	68b8      	ldr	r0, [r7, #8]
 800123e:	f7ff fe99 	bl	8000f74 <ParseNumber>
 8001242:	4603      	mov	r3, r0
 8001244:	b2da      	uxtb	r2, r3
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
      break;
 800124c:	e037      	b.n	80012be <AT_ParseConnSettings+0x12a>

    case 5:
      ParseIP(ptr, NetSettings->IP_Addr);
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	3348      	adds	r3, #72	; 0x48
 8001252:	4619      	mov	r1, r3
 8001254:	68b8      	ldr	r0, [r7, #8]
 8001256:	f7ff fefc 	bl	8001052 <ParseIP>
      break;
 800125a:	e030      	b.n	80012be <AT_ParseConnSettings+0x12a>

    case 6:
      ParseIP(ptr, NetSettings->IP_Mask);
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	334c      	adds	r3, #76	; 0x4c
 8001260:	4619      	mov	r1, r3
 8001262:	68b8      	ldr	r0, [r7, #8]
 8001264:	f7ff fef5 	bl	8001052 <ParseIP>
      break;
 8001268:	e029      	b.n	80012be <AT_ParseConnSettings+0x12a>

    case 7:
      ParseIP(ptr, NetSettings->Gateway_Addr);
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	3350      	adds	r3, #80	; 0x50
 800126e:	4619      	mov	r1, r3
 8001270:	68b8      	ldr	r0, [r7, #8]
 8001272:	f7ff feee 	bl	8001052 <ParseIP>
      break;
 8001276:	e022      	b.n	80012be <AT_ParseConnSettings+0x12a>

    case 8:
      ParseIP(ptr, NetSettings->DNS1);
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	3354      	adds	r3, #84	; 0x54
 800127c:	4619      	mov	r1, r3
 800127e:	68b8      	ldr	r0, [r7, #8]
 8001280:	f7ff fee7 	bl	8001052 <ParseIP>
      break;
 8001284:	e01b      	b.n	80012be <AT_ParseConnSettings+0x12a>

    case 9:
      ParseIP(ptr, NetSettings->DNS2);
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	3358      	adds	r3, #88	; 0x58
 800128a:	4619      	mov	r1, r3
 800128c:	68b8      	ldr	r0, [r7, #8]
 800128e:	f7ff fee0 	bl	8001052 <ParseIP>
      break;
 8001292:	e014      	b.n	80012be <AT_ParseConnSettings+0x12a>

    case 10:
      NetSettings->JoinRetries = ParseNumber(ptr, NULL);
 8001294:	2100      	movs	r1, #0
 8001296:	68b8      	ldr	r0, [r7, #8]
 8001298:	f7ff fe6c 	bl	8000f74 <ParseNumber>
 800129c:	4603      	mov	r3, r0
 800129e:	b2da      	uxtb	r2, r3
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      break;
 80012a6:	e00a      	b.n	80012be <AT_ParseConnSettings+0x12a>

    case 11:
      NetSettings->AutoConnect = ParseNumber(ptr, NULL);
 80012a8:	2100      	movs	r1, #0
 80012aa:	68b8      	ldr	r0, [r7, #8]
 80012ac:	f7ff fe62 	bl	8000f74 <ParseNumber>
 80012b0:	4603      	mov	r3, r0
 80012b2:	b2da      	uxtb	r2, r3
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
      break;
 80012ba:	e000      	b.n	80012be <AT_ParseConnSettings+0x12a>

    default:
      break;
 80012bc:	bf00      	nop
    }
    ptr = strtok(NULL, ",");
 80012be:	490c      	ldr	r1, [pc, #48]	; (80012f0 <AT_ParseConnSettings+0x15c>)
 80012c0:	2000      	movs	r0, #0
 80012c2:	f007 faa5 	bl	8008810 <strtok>
 80012c6:	60b8      	str	r0, [r7, #8]
    if ((ptr != NULL) && (ptr[-1] == ','))
 80012c8:	68bb      	ldr	r3, [r7, #8]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d007      	beq.n	80012de <AT_ParseConnSettings+0x14a>
 80012ce:	68bb      	ldr	r3, [r7, #8]
 80012d0:	3b01      	subs	r3, #1
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	2b2c      	cmp	r3, #44	; 0x2c
 80012d6:	d102      	bne.n	80012de <AT_ParseConnSettings+0x14a>
    { /* Ignore empty fields */
      num++;
 80012d8:	7bfb      	ldrb	r3, [r7, #15]
 80012da:	3301      	adds	r3, #1
 80012dc:	73fb      	strb	r3, [r7, #15]
  while (ptr != NULL) {
 80012de:	68bb      	ldr	r3, [r7, #8]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	f47f af66 	bne.w	80011b2 <AT_ParseConnSettings+0x1e>
    }
  }
}
 80012e6:	bf00      	nop
 80012e8:	bf00      	nop
 80012ea:	3710      	adds	r7, #16
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	0800ad10 	.word	0x0800ad10

080012f4 <AT_ExecuteCommand>:
  * @param  cmd: pointer to command string
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_ExecuteCommand(ES_WIFIObject_t *Obj, uint8_t* cmd, uint8_t *pdata)
{
 80012f4:	b590      	push	{r4, r7, lr}
 80012f6:	b087      	sub	sp, #28
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	60f8      	str	r0, [r7, #12]
 80012fc:	60b9      	str	r1, [r7, #8]
 80012fe:	607a      	str	r2, [r7, #4]
  if(Obj->fops.IO_Send(cmd, strlen((char*)cmd), Obj->Timeout) > 0)
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	f8d3 4118 	ldr.w	r4, [r3, #280]	; 0x118
 8001306:	68b8      	ldr	r0, [r7, #8]
 8001308:	f7fe ff62 	bl	80001d0 <strlen>
 800130c:	4603      	mov	r3, r0
 800130e:	b299      	uxth	r1, r3
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	f8d3 3760 	ldr.w	r3, [r3, #1888]	; 0x760
 8001316:	461a      	mov	r2, r3
 8001318:	68b8      	ldr	r0, [r7, #8]
 800131a:	47a0      	blx	r4
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	dd26      	ble.n	8001370 <AT_ExecuteCommand+0x7c>
  {
    int16_t n=Obj->fops.IO_Receive(pdata, 0, Obj->Timeout);
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8001328:	68fa      	ldr	r2, [r7, #12]
 800132a:	f8d2 2760 	ldr.w	r2, [r2, #1888]	; 0x760
 800132e:	2100      	movs	r1, #0
 8001330:	6878      	ldr	r0, [r7, #4]
 8001332:	4798      	blx	r3
 8001334:	4603      	mov	r3, r0
 8001336:	82fb      	strh	r3, [r7, #22]
    if(n > 0)
 8001338:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800133c:	2b00      	cmp	r3, #0
 800133e:	dd17      	ble.n	8001370 <AT_ExecuteCommand+0x7c>
    {
      *(pdata+n)=0;
 8001340:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001344:	687a      	ldr	r2, [r7, #4]
 8001346:	4413      	add	r3, r2
 8001348:	2200      	movs	r2, #0
 800134a:	701a      	strb	r2, [r3, #0]
      if(strstr((char *)pdata, AT_OK_STRING))
 800134c:	490b      	ldr	r1, [pc, #44]	; (800137c <AT_ExecuteCommand+0x88>)
 800134e:	6878      	ldr	r0, [r7, #4]
 8001350:	f007 fa47 	bl	80087e2 <strstr>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <AT_ExecuteCommand+0x6a>
      {
        return ES_WIFI_STATUS_OK;
 800135a:	2300      	movs	r3, #0
 800135c:	e009      	b.n	8001372 <AT_ExecuteCommand+0x7e>
      }
      else if(strstr((char *)pdata, AT_ERROR_STRING))
 800135e:	4908      	ldr	r1, [pc, #32]	; (8001380 <AT_ExecuteCommand+0x8c>)
 8001360:	6878      	ldr	r0, [r7, #4]
 8001362:	f007 fa3e 	bl	80087e2 <strstr>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <AT_ExecuteCommand+0x7c>
      {
        return ES_WIFI_STATUS_ERROR;
 800136c:	2302      	movs	r3, #2
 800136e:	e000      	b.n	8001372 <AT_ExecuteCommand+0x7e>
      }
    }
  }
  return ES_WIFI_STATUS_IO_ERROR;
 8001370:	2304      	movs	r3, #4
}
 8001372:	4618      	mov	r0, r3
 8001374:	371c      	adds	r7, #28
 8001376:	46bd      	mov	sp, r7
 8001378:	bd90      	pop	{r4, r7, pc}
 800137a:	bf00      	nop
 800137c:	0800ad18 	.word	0x0800ad18
 8001380:	0800ad24 	.word	0x0800ad24

08001384 <AT_RequestSendData>:
  * @param  len: binary data length
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_RequestSendData(ES_WIFIObject_t *Obj, uint8_t* cmd, uint8_t *pcmd_data, uint16_t len, uint8_t *pdata)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b086      	sub	sp, #24
 8001388:	af00      	add	r7, sp, #0
 800138a:	60f8      	str	r0, [r7, #12]
 800138c:	60b9      	str	r1, [r7, #8]
 800138e:	607a      	str	r2, [r7, #4]
 8001390:	807b      	strh	r3, [r7, #2]
  /* can send only even number of byte on first send */
  uint16_t n=strlen((char*)cmd);
 8001392:	68b8      	ldr	r0, [r7, #8]
 8001394:	f7fe ff1c 	bl	80001d0 <strlen>
 8001398:	4603      	mov	r3, r0
 800139a:	82fb      	strh	r3, [r7, #22]
  if (n &1 ) return ES_WIFI_STATUS_ERROR;
 800139c:	8afb      	ldrh	r3, [r7, #22]
 800139e:	f003 0301 	and.w	r3, r3, #1
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <AT_RequestSendData+0x26>
 80013a6:	2302      	movs	r3, #2
 80013a8:	e047      	b.n	800143a <AT_RequestSendData+0xb6>
  if(Obj->fops.IO_Send(cmd, n, Obj->Timeout) == n)
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 80013b0:	68fa      	ldr	r2, [r7, #12]
 80013b2:	f8d2 2760 	ldr.w	r2, [r2, #1888]	; 0x760
 80013b6:	8af9      	ldrh	r1, [r7, #22]
 80013b8:	68b8      	ldr	r0, [r7, #8]
 80013ba:	4798      	blx	r3
 80013bc:	4603      	mov	r3, r0
 80013be:	461a      	mov	r2, r3
 80013c0:	8afb      	ldrh	r3, [r7, #22]
 80013c2:	429a      	cmp	r2, r3
 80013c4:	d138      	bne.n	8001438 <AT_RequestSendData+0xb4>
  {
    int16_t n=Obj->fops.IO_Send(pcmd_data, len, Obj->Timeout);
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 80013cc:	68fa      	ldr	r2, [r7, #12]
 80013ce:	f8d2 2760 	ldr.w	r2, [r2, #1888]	; 0x760
 80013d2:	8879      	ldrh	r1, [r7, #2]
 80013d4:	6878      	ldr	r0, [r7, #4]
 80013d6:	4798      	blx	r3
 80013d8:	4603      	mov	r3, r0
 80013da:	82bb      	strh	r3, [r7, #20]
    if(n == len)
 80013dc:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80013e0:	887b      	ldrh	r3, [r7, #2]
 80013e2:	429a      	cmp	r2, r3
 80013e4:	d126      	bne.n	8001434 <AT_RequestSendData+0xb0>
    {
      n = Obj->fops.IO_Receive(pdata, 0, Obj->Timeout);
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 80013ec:	68fa      	ldr	r2, [r7, #12]
 80013ee:	f8d2 2760 	ldr.w	r2, [r2, #1888]	; 0x760
 80013f2:	2100      	movs	r1, #0
 80013f4:	6a38      	ldr	r0, [r7, #32]
 80013f6:	4798      	blx	r3
 80013f8:	4603      	mov	r3, r0
 80013fa:	82bb      	strh	r3, [r7, #20]
      if(n > 0)
 80013fc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001400:	2b00      	cmp	r3, #0
 8001402:	dd19      	ble.n	8001438 <AT_RequestSendData+0xb4>
      {
        *(pdata+n)=0;
 8001404:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001408:	6a3a      	ldr	r2, [r7, #32]
 800140a:	4413      	add	r3, r2
 800140c:	2200      	movs	r2, #0
 800140e:	701a      	strb	r2, [r3, #0]
        if(strstr((char *)pdata, AT_OK_STRING))
 8001410:	490c      	ldr	r1, [pc, #48]	; (8001444 <AT_RequestSendData+0xc0>)
 8001412:	6a38      	ldr	r0, [r7, #32]
 8001414:	f007 f9e5 	bl	80087e2 <strstr>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <AT_RequestSendData+0x9e>
        {
          return ES_WIFI_STATUS_OK;
 800141e:	2300      	movs	r3, #0
 8001420:	e00b      	b.n	800143a <AT_RequestSendData+0xb6>
        }
        else if(strstr((char *)pdata, AT_ERROR_STRING))
 8001422:	4909      	ldr	r1, [pc, #36]	; (8001448 <AT_RequestSendData+0xc4>)
 8001424:	6a38      	ldr	r0, [r7, #32]
 8001426:	f007 f9dc 	bl	80087e2 <strstr>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d003      	beq.n	8001438 <AT_RequestSendData+0xb4>
        {
          return ES_WIFI_STATUS_ERROR;
 8001430:	2302      	movs	r3, #2
 8001432:	e002      	b.n	800143a <AT_RequestSendData+0xb6>
        }
      }
    }
    else
    {
      return ES_WIFI_STATUS_ERROR;
 8001434:	2302      	movs	r3, #2
 8001436:	e000      	b.n	800143a <AT_RequestSendData+0xb6>
    }
  }
  return ES_WIFI_STATUS_IO_ERROR;
 8001438:	2304      	movs	r3, #4
}
 800143a:	4618      	mov	r0, r3
 800143c:	3718      	adds	r7, #24
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	0800ad18 	.word	0x0800ad18
 8001448:	0800ad24 	.word	0x0800ad24

0800144c <ES_WIFI_Init>:
  * @brief  Initialize WIFI module.
  * @param  Obj: pointer to module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t  ES_WIFI_Init(ES_WIFIObject_t *Obj)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b084      	sub	sp, #16
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 8001454:	2302      	movs	r3, #2
 8001456:	73fb      	strb	r3, [r7, #15]

  Obj->Timeout = ES_WIFI_TIMEOUT;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800145e:	f8c3 2760 	str.w	r2, [r3, #1888]	; 0x760

  if (Obj->fops.IO_Init() == 0)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8001468:	4798      	blx	r3
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d113      	bne.n	8001498 <ES_WIFI_Init+0x4c>
  {
    ret = AT_ExecuteCommand(Obj,(uint8_t*)"I?\r\n", Obj->CmdData);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8001476:	461a      	mov	r2, r3
 8001478:	490a      	ldr	r1, [pc, #40]	; (80014a4 <ES_WIFI_Init+0x58>)
 800147a:	6878      	ldr	r0, [r7, #4]
 800147c:	f7ff ff3a 	bl	80012f4 <AT_ExecuteCommand>
 8001480:	4603      	mov	r3, r0
 8001482:	73fb      	strb	r3, [r7, #15]

    if(ret == ES_WIFI_STATUS_OK)
 8001484:	7bfb      	ldrb	r3, [r7, #15]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d106      	bne.n	8001498 <ES_WIFI_Init+0x4c>
    {
      AT_ParseInfo (Obj, Obj->CmdData);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8001490:	4619      	mov	r1, r3
 8001492:	6878      	ldr	r0, [r7, #4]
 8001494:	f7ff fe08 	bl	80010a8 <AT_ParseInfo>
    }
  }
  return ret;
 8001498:	7bfb      	ldrb	r3, [r7, #15]
}
 800149a:	4618      	mov	r0, r3
 800149c:	3710      	adds	r7, #16
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	0800ad2c 	.word	0x0800ad2c

080014a8 <ES_WIFI_RegisterBusIO>:
ES_WIFI_Status_t  ES_WIFI_RegisterBusIO(ES_WIFIObject_t *Obj, IO_Init_Func IO_Init,
                                                              IO_DeInit_Func  IO_DeInit,
                                                              IO_Delay_Func   IO_Delay,
                                                              IO_Send_Func    IO_Send,
                                                              IO_Receive_Func  IO_Receive)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b085      	sub	sp, #20
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	60f8      	str	r0, [r7, #12]
 80014b0:	60b9      	str	r1, [r7, #8]
 80014b2:	607a      	str	r2, [r7, #4]
 80014b4:	603b      	str	r3, [r7, #0]
  if(!Obj || !IO_Init || !IO_DeInit || !IO_Send || !IO_Receive)
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d00b      	beq.n	80014d4 <ES_WIFI_RegisterBusIO+0x2c>
 80014bc:	68bb      	ldr	r3, [r7, #8]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d008      	beq.n	80014d4 <ES_WIFI_RegisterBusIO+0x2c>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d005      	beq.n	80014d4 <ES_WIFI_RegisterBusIO+0x2c>
 80014c8:	69bb      	ldr	r3, [r7, #24]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d002      	beq.n	80014d4 <ES_WIFI_RegisterBusIO+0x2c>
 80014ce:	69fb      	ldr	r3, [r7, #28]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d101      	bne.n	80014d8 <ES_WIFI_RegisterBusIO+0x30>
  {
    return ES_WIFI_STATUS_ERROR;
 80014d4:	2302      	movs	r3, #2
 80014d6:	e010      	b.n	80014fa <ES_WIFI_RegisterBusIO+0x52>
  }

  Obj->fops.IO_Init = IO_Init;
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	68ba      	ldr	r2, [r7, #8]
 80014dc:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
  Obj->fops.IO_Send = IO_Send;
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	69ba      	ldr	r2, [r7, #24]
 80014e4:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
  Obj->fops.IO_Receive = IO_Receive;
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	69fa      	ldr	r2, [r7, #28]
 80014ec:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
  Obj->fops.IO_Delay = IO_Delay;
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	683a      	ldr	r2, [r7, #0]
 80014f4:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  return ES_WIFI_STATUS_OK;
 80014f8:	2300      	movs	r3, #0
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	3714      	adds	r7, #20
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr
	...

08001508 <ES_WIFI_Connect>:
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_Connect(ES_WIFIObject_t *Obj, const char* SSID,
                                         const char* Password,
                                         ES_WIFI_SecurityType_t SecType)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b086      	sub	sp, #24
 800150c:	af00      	add	r7, sp, #0
 800150e:	60f8      	str	r0, [r7, #12]
 8001510:	60b9      	str	r1, [r7, #8]
 8001512:	607a      	str	r2, [r7, #4]
 8001514:	70fb      	strb	r3, [r7, #3]
  ES_WIFI_Status_t ret;

  sprintf((char*)Obj->CmdData,"C1=%s\r", SSID);
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800151c:	68ba      	ldr	r2, [r7, #8]
 800151e:	4932      	ldr	r1, [pc, #200]	; (80015e8 <ES_WIFI_Connect+0xe0>)
 8001520:	4618      	mov	r0, r3
 8001522:	f007 f92b 	bl	800877c <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	f503 7190 	add.w	r1, r3, #288	; 0x120
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8001532:	461a      	mov	r2, r3
 8001534:	68f8      	ldr	r0, [r7, #12]
 8001536:	f7ff fedd 	bl	80012f4 <AT_ExecuteCommand>
 800153a:	4603      	mov	r3, r0
 800153c:	75fb      	strb	r3, [r7, #23]
  if(ret == ES_WIFI_STATUS_OK)
 800153e:	7dfb      	ldrb	r3, [r7, #23]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d14b      	bne.n	80015dc <ES_WIFI_Connect+0xd4>
  {
    sprintf((char*)Obj->CmdData,"C2=%s\r", Password);
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800154a:	687a      	ldr	r2, [r7, #4]
 800154c:	4927      	ldr	r1, [pc, #156]	; (80015ec <ES_WIFI_Connect+0xe4>)
 800154e:	4618      	mov	r0, r3
 8001550:	f007 f914 	bl	800877c <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	f503 7190 	add.w	r1, r3, #288	; 0x120
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8001560:	461a      	mov	r2, r3
 8001562:	68f8      	ldr	r0, [r7, #12]
 8001564:	f7ff fec6 	bl	80012f4 <AT_ExecuteCommand>
 8001568:	4603      	mov	r3, r0
 800156a:	75fb      	strb	r3, [r7, #23]

    if(ret == ES_WIFI_STATUS_OK)
 800156c:	7dfb      	ldrb	r3, [r7, #23]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d134      	bne.n	80015dc <ES_WIFI_Connect+0xd4>
    {
      Obj->Security = SecType;
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	78fa      	ldrb	r2, [r7, #3]
 8001576:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
      sprintf((char*)Obj->CmdData,"C3=%d\r", (uint8_t)SecType);
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8001580:	78fa      	ldrb	r2, [r7, #3]
 8001582:	491b      	ldr	r1, [pc, #108]	; (80015f0 <ES_WIFI_Connect+0xe8>)
 8001584:	4618      	mov	r0, r3
 8001586:	f007 f8f9 	bl	800877c <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	f503 7190 	add.w	r1, r3, #288	; 0x120
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8001596:	461a      	mov	r2, r3
 8001598:	68f8      	ldr	r0, [r7, #12]
 800159a:	f7ff feab 	bl	80012f4 <AT_ExecuteCommand>
 800159e:	4603      	mov	r3, r0
 80015a0:	75fb      	strb	r3, [r7, #23]

      if(ret == ES_WIFI_STATUS_OK)
 80015a2:	7dfb      	ldrb	r3, [r7, #23]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d119      	bne.n	80015dc <ES_WIFI_Connect+0xd4>
      {
        sprintf((char*)Obj->CmdData,"C0\r");
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	f503 7390 	add.w	r3, r3, #288	; 0x120
 80015ae:	4911      	ldr	r1, [pc, #68]	; (80015f4 <ES_WIFI_Connect+0xec>)
 80015b0:	4618      	mov	r0, r3
 80015b2:	f007 f8e3 	bl	800877c <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	f503 7190 	add.w	r1, r3, #288	; 0x120
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	f503 7390 	add.w	r3, r3, #288	; 0x120
 80015c2:	461a      	mov	r2, r3
 80015c4:	68f8      	ldr	r0, [r7, #12]
 80015c6:	f7ff fe95 	bl	80012f4 <AT_ExecuteCommand>
 80015ca:	4603      	mov	r3, r0
 80015cc:	75fb      	strb	r3, [r7, #23]
        if(ret == ES_WIFI_STATUS_OK)
 80015ce:	7dfb      	ldrb	r3, [r7, #23]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d103      	bne.n	80015dc <ES_WIFI_Connect+0xd4>
        {
           Obj->NetSettings.IsConnected = 1;
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	2201      	movs	r2, #1
 80015d8:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
        }
      }
    }
  }
  return ret;
 80015dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80015de:	4618      	mov	r0, r3
 80015e0:	3718      	adds	r7, #24
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	0800ad38 	.word	0x0800ad38
 80015ec:	0800ad40 	.word	0x0800ad40
 80015f0:	0800ad48 	.word	0x0800ad48
 80015f4:	0800ad50 	.word	0x0800ad50

080015f8 <ES_WIFI_GetNetworkSettings>:
  * @param  Obj: pointer to module handle
  * @param  Pointer to network setting structure.
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_GetNetworkSettings(ES_WIFIObject_t *Obj)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b084      	sub	sp, #16
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret;
  sprintf((char*)Obj->CmdData,"C?\r");
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8001606:	4910      	ldr	r1, [pc, #64]	; (8001648 <ES_WIFI_GetNetworkSettings+0x50>)
 8001608:	4618      	mov	r0, r3
 800160a:	f007 f8b7 	bl	800877c <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	f503 7190 	add.w	r1, r3, #288	; 0x120
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800161a:	461a      	mov	r2, r3
 800161c:	6878      	ldr	r0, [r7, #4]
 800161e:	f7ff fe69 	bl	80012f4 <AT_ExecuteCommand>
 8001622:	4603      	mov	r3, r0
 8001624:	73fb      	strb	r3, [r7, #15]
  if(ret == ES_WIFI_STATUS_OK)
 8001626:	7bfb      	ldrb	r3, [r7, #15]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d108      	bne.n	800163e <ES_WIFI_GetNetworkSettings+0x46>
  {
    AT_ParseConnSettings((char *)Obj->CmdData, &Obj->NetSettings);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	f503 7290 	add.w	r2, r3, #288	; 0x120
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	3385      	adds	r3, #133	; 0x85
 8001636:	4619      	mov	r1, r3
 8001638:	4610      	mov	r0, r2
 800163a:	f7ff fdab 	bl	8001194 <AT_ParseConnSettings>
  }
  return ret;
 800163e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001640:	4618      	mov	r0, r3
 8001642:	3710      	adds	r7, #16
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}
 8001648:	0800ad58 	.word	0x0800ad58

0800164c <ES_WIFI_GetMACAddress>:
  * @param  Obj: pointer to module handle
  * @param  mac: pointer to the MAC address array.
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_GetMACAddress(ES_WIFIObject_t *Obj, uint8_t *mac)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b084      	sub	sp, #16
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
 8001654:	6039      	str	r1, [r7, #0]
  ES_WIFI_Status_t ret ;
  char *ptr;

  sprintf((char*)Obj->CmdData,"Z5\r");
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800165c:	4912      	ldr	r1, [pc, #72]	; (80016a8 <ES_WIFI_GetMACAddress+0x5c>)
 800165e:	4618      	mov	r0, r3
 8001660:	f007 f88c 	bl	800877c <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	f503 7190 	add.w	r1, r3, #288	; 0x120
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8001670:	461a      	mov	r2, r3
 8001672:	6878      	ldr	r0, [r7, #4]
 8001674:	f7ff fe3e 	bl	80012f4 <AT_ExecuteCommand>
 8001678:	4603      	mov	r3, r0
 800167a:	73fb      	strb	r3, [r7, #15]
  if(ret == ES_WIFI_STATUS_OK)
 800167c:	7bfb      	ldrb	r3, [r7, #15]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d10c      	bne.n	800169c <ES_WIFI_GetMACAddress+0x50>
  {
    ptr = strtok((char *)(Obj->CmdData + 2), "\r\n");
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8001688:	3302      	adds	r3, #2
 800168a:	4908      	ldr	r1, [pc, #32]	; (80016ac <ES_WIFI_GetMACAddress+0x60>)
 800168c:	4618      	mov	r0, r3
 800168e:	f007 f8bf 	bl	8008810 <strtok>
 8001692:	60b8      	str	r0, [r7, #8]
    ParseMAC(ptr, mac) ;
 8001694:	6839      	ldr	r1, [r7, #0]
 8001696:	68b8      	ldr	r0, [r7, #8]
 8001698:	f7ff fcb0 	bl	8000ffc <ParseMAC>
  }
  return ret;
 800169c:	7bfb      	ldrb	r3, [r7, #15]
}
 800169e:	4618      	mov	r0, r3
 80016a0:	3710      	adds	r7, #16
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	0800adb8 	.word	0x0800adb8
 80016ac:	0800adbc 	.word	0x0800adbc

080016b0 <ES_WIFI_DNS_LookUp>:
  * @param  url: Domain Name.
  * @param  ipaddress: IP address.
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_DNS_LookUp(ES_WIFIObject_t *Obj, const char *url, uint8_t *ipaddress)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b086      	sub	sp, #24
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	60f8      	str	r0, [r7, #12]
 80016b8:	60b9      	str	r1, [r7, #8]
 80016ba:	607a      	str	r2, [r7, #4]
  ES_WIFI_Status_t ret;
  char *ptr;

  sprintf((char*)Obj->CmdData,"D0=%s\r", url);
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	f503 7390 	add.w	r3, r3, #288	; 0x120
 80016c2:	68ba      	ldr	r2, [r7, #8]
 80016c4:	4912      	ldr	r1, [pc, #72]	; (8001710 <ES_WIFI_DNS_LookUp+0x60>)
 80016c6:	4618      	mov	r0, r3
 80016c8:	f007 f858 	bl	800877c <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	f503 7190 	add.w	r1, r3, #288	; 0x120
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	f503 7390 	add.w	r3, r3, #288	; 0x120
 80016d8:	461a      	mov	r2, r3
 80016da:	68f8      	ldr	r0, [r7, #12]
 80016dc:	f7ff fe0a 	bl	80012f4 <AT_ExecuteCommand>
 80016e0:	4603      	mov	r3, r0
 80016e2:	75fb      	strb	r3, [r7, #23]

  if(ret == ES_WIFI_STATUS_OK)
 80016e4:	7dfb      	ldrb	r3, [r7, #23]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d10c      	bne.n	8001704 <ES_WIFI_DNS_LookUp+0x54>
  {
    ptr = strtok((char *)Obj->CmdData + 2, "\r");
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	f503 7390 	add.w	r3, r3, #288	; 0x120
 80016f0:	3302      	adds	r3, #2
 80016f2:	4908      	ldr	r1, [pc, #32]	; (8001714 <ES_WIFI_DNS_LookUp+0x64>)
 80016f4:	4618      	mov	r0, r3
 80016f6:	f007 f88b 	bl	8008810 <strtok>
 80016fa:	6138      	str	r0, [r7, #16]
    ParseIP(ptr, ipaddress);
 80016fc:	6879      	ldr	r1, [r7, #4]
 80016fe:	6938      	ldr	r0, [r7, #16]
 8001700:	f7ff fca7 	bl	8001052 <ParseIP>
  }
  return ret;
 8001704:	7dfb      	ldrb	r3, [r7, #23]
}
 8001706:	4618      	mov	r0, r3
 8001708:	3718      	adds	r7, #24
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	0800ae18 	.word	0x0800ae18
 8001714:	0800ad14 	.word	0x0800ad14

08001718 <ES_WIFI_StartClientConnection>:
  * @param  Obj: pointer to module handle
  * @param  conn: pointer to the connection structure
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_StartClientConnection(ES_WIFIObject_t *Obj, ES_WIFI_Conn_t *conn)
{
 8001718:	b590      	push	{r4, r7, lr}
 800171a:	b087      	sub	sp, #28
 800171c:	af02      	add	r7, sp, #8
 800171e:	6078      	str	r0, [r7, #4]
 8001720:	6039      	str	r1, [r7, #0]
  ES_WIFI_Status_t ret;

  sprintf((char*)Obj->CmdData,"P0=%d\r", conn->Number);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	f503 7090 	add.w	r0, r3, #288	; 0x120
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	785b      	ldrb	r3, [r3, #1]
 800172c:	461a      	mov	r2, r3
 800172e:	494f      	ldr	r1, [pc, #316]	; (800186c <ES_WIFI_StartClientConnection+0x154>)
 8001730:	f007 f824 	bl	800877c <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	f503 7190 	add.w	r1, r3, #288	; 0x120
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8001740:	461a      	mov	r2, r3
 8001742:	6878      	ldr	r0, [r7, #4]
 8001744:	f7ff fdd6 	bl	80012f4 <AT_ExecuteCommand>
 8001748:	4603      	mov	r3, r0
 800174a:	73fb      	strb	r3, [r7, #15]

  if(ret == ES_WIFI_STATUS_OK)
 800174c:	7bfb      	ldrb	r3, [r7, #15]
 800174e:	2b00      	cmp	r3, #0
 8001750:	f040 8087 	bne.w	8001862 <ES_WIFI_StartClientConnection+0x14a>
  {
    sprintf((char*)Obj->CmdData,"P1=%d\r", conn->Type);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	f503 7090 	add.w	r0, r3, #288	; 0x120
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	461a      	mov	r2, r3
 8001760:	4943      	ldr	r1, [pc, #268]	; (8001870 <ES_WIFI_StartClientConnection+0x158>)
 8001762:	f007 f80b 	bl	800877c <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	f503 7190 	add.w	r1, r3, #288	; 0x120
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8001772:	461a      	mov	r2, r3
 8001774:	6878      	ldr	r0, [r7, #4]
 8001776:	f7ff fdbd 	bl	80012f4 <AT_ExecuteCommand>
 800177a:	4603      	mov	r3, r0
 800177c:	73fb      	strb	r3, [r7, #15]
    if(ret == ES_WIFI_STATUS_OK)
 800177e:	7bfb      	ldrb	r3, [r7, #15]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d16e      	bne.n	8001862 <ES_WIFI_StartClientConnection+0x14a>
    {
      if ((conn->Type == ES_WIFI_UDP_CONNECTION) && (conn->LocalPort > 0))
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	2b01      	cmp	r3, #1
 800178a:	d11b      	bne.n	80017c4 <ES_WIFI_StartClientConnection+0xac>
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	889b      	ldrh	r3, [r3, #4]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d017      	beq.n	80017c4 <ES_WIFI_StartClientConnection+0xac>
      {
        sprintf((char*)Obj->CmdData,"P2=%d\r", conn->RemotePort);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	f503 7090 	add.w	r0, r3, #288	; 0x120
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	885b      	ldrh	r3, [r3, #2]
 800179e:	461a      	mov	r2, r3
 80017a0:	4934      	ldr	r1, [pc, #208]	; (8001874 <ES_WIFI_StartClientConnection+0x15c>)
 80017a2:	f006 ffeb 	bl	800877c <siprintf>
        if(AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData) == ES_WIFI_STATUS_ERROR)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	f503 7190 	add.w	r1, r3, #288	; 0x120
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	f503 7390 	add.w	r3, r3, #288	; 0x120
 80017b2:	461a      	mov	r2, r3
 80017b4:	6878      	ldr	r0, [r7, #4]
 80017b6:	f7ff fd9d 	bl	80012f4 <AT_ExecuteCommand>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b02      	cmp	r3, #2
 80017be:	d101      	bne.n	80017c4 <ES_WIFI_StartClientConnection+0xac>
        {
          return ES_WIFI_STATUS_ERROR;
 80017c0:	2302      	movs	r3, #2
 80017c2:	e04f      	b.n	8001864 <ES_WIFI_StartClientConnection+0x14c>
        }
      }
      sprintf((char*)Obj->CmdData,"P4=%d\r", conn->RemotePort);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	f503 7090 	add.w	r0, r3, #288	; 0x120
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	885b      	ldrh	r3, [r3, #2]
 80017ce:	461a      	mov	r2, r3
 80017d0:	4929      	ldr	r1, [pc, #164]	; (8001878 <ES_WIFI_StartClientConnection+0x160>)
 80017d2:	f006 ffd3 	bl	800877c <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	f503 7190 	add.w	r1, r3, #288	; 0x120
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	f503 7390 	add.w	r3, r3, #288	; 0x120
 80017e2:	461a      	mov	r2, r3
 80017e4:	6878      	ldr	r0, [r7, #4]
 80017e6:	f7ff fd85 	bl	80012f4 <AT_ExecuteCommand>
 80017ea:	4603      	mov	r3, r0
 80017ec:	73fb      	strb	r3, [r7, #15]

      if(ret == ES_WIFI_STATUS_OK)
 80017ee:	7bfb      	ldrb	r3, [r7, #15]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d136      	bne.n	8001862 <ES_WIFI_StartClientConnection+0x14a>
      {
        sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	f503 7090 	add.w	r0, r3, #288	; 0x120
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	799b      	ldrb	r3, [r3, #6]
 80017fe:	4619      	mov	r1, r3
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	79db      	ldrb	r3, [r3, #7]
 8001804:	461c      	mov	r4, r3
                conn->RemoteIP[2],conn->RemoteIP[3]);
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	7a1b      	ldrb	r3, [r3, #8]
        sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
 800180a:	461a      	mov	r2, r3
                conn->RemoteIP[2],conn->RemoteIP[3]);
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	7a5b      	ldrb	r3, [r3, #9]
        sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
 8001810:	9301      	str	r3, [sp, #4]
 8001812:	9200      	str	r2, [sp, #0]
 8001814:	4623      	mov	r3, r4
 8001816:	460a      	mov	r2, r1
 8001818:	4918      	ldr	r1, [pc, #96]	; (800187c <ES_WIFI_StartClientConnection+0x164>)
 800181a:	f006 ffaf 	bl	800877c <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	f503 7190 	add.w	r1, r3, #288	; 0x120
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800182a:	461a      	mov	r2, r3
 800182c:	6878      	ldr	r0, [r7, #4]
 800182e:	f7ff fd61 	bl	80012f4 <AT_ExecuteCommand>
 8001832:	4603      	mov	r3, r0
 8001834:	73fb      	strb	r3, [r7, #15]
        if(ret == ES_WIFI_STATUS_OK)
 8001836:	7bfb      	ldrb	r3, [r7, #15]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d112      	bne.n	8001862 <ES_WIFI_StartClientConnection+0x14a>
        {
          sprintf((char*)Obj->CmdData,"P6=1\r");
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8001842:	490f      	ldr	r1, [pc, #60]	; (8001880 <ES_WIFI_StartClientConnection+0x168>)
 8001844:	4618      	mov	r0, r3
 8001846:	f006 ff99 	bl	800877c <siprintf>
          ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	f503 7190 	add.w	r1, r3, #288	; 0x120
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8001856:	461a      	mov	r2, r3
 8001858:	6878      	ldr	r0, [r7, #4]
 800185a:	f7ff fd4b 	bl	80012f4 <AT_ExecuteCommand>
 800185e:	4603      	mov	r3, r0
 8001860:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
  return ret;
 8001862:	7bfb      	ldrb	r3, [r7, #15]
}
 8001864:	4618      	mov	r0, r3
 8001866:	3714      	adds	r7, #20
 8001868:	46bd      	mov	sp, r7
 800186a:	bd90      	pop	{r4, r7, pc}
 800186c:	0800ae20 	.word	0x0800ae20
 8001870:	0800ae28 	.word	0x0800ae28
 8001874:	0800ae30 	.word	0x0800ae30
 8001878:	0800ae38 	.word	0x0800ae38
 800187c:	0800ae40 	.word	0x0800ae40
 8001880:	0800ae50 	.word	0x0800ae50

08001884 <ES_WIFI_StopClientConnection>:
  * @brief  Stop Client connection.
  * @param  Obj: pointer to module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_StopClientConnection(ES_WIFIObject_t *Obj, ES_WIFI_Conn_t *conn)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b084      	sub	sp, #16
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
 800188c:	6039      	str	r1, [r7, #0]
  ES_WIFI_Status_t ret;

  sprintf((char*)Obj->CmdData,"P0=%d\r", conn->Number);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	f503 7090 	add.w	r0, r3, #288	; 0x120
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	785b      	ldrb	r3, [r3, #1]
 8001898:	461a      	mov	r2, r3
 800189a:	4915      	ldr	r1, [pc, #84]	; (80018f0 <ES_WIFI_StopClientConnection+0x6c>)
 800189c:	f006 ff6e 	bl	800877c <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	f503 7190 	add.w	r1, r3, #288	; 0x120
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	f503 7390 	add.w	r3, r3, #288	; 0x120
 80018ac:	461a      	mov	r2, r3
 80018ae:	6878      	ldr	r0, [r7, #4]
 80018b0:	f7ff fd20 	bl	80012f4 <AT_ExecuteCommand>
 80018b4:	4603      	mov	r3, r0
 80018b6:	73fb      	strb	r3, [r7, #15]

  if(ret == ES_WIFI_STATUS_OK)
 80018b8:	7bfb      	ldrb	r3, [r7, #15]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d112      	bne.n	80018e4 <ES_WIFI_StopClientConnection+0x60>
  {
    sprintf((char*)Obj->CmdData,"P6=0\r");
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	f503 7390 	add.w	r3, r3, #288	; 0x120
 80018c4:	490b      	ldr	r1, [pc, #44]	; (80018f4 <ES_WIFI_StopClientConnection+0x70>)
 80018c6:	4618      	mov	r0, r3
 80018c8:	f006 ff58 	bl	800877c <siprintf>
    ret =  AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	f503 7190 	add.w	r1, r3, #288	; 0x120
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	f503 7390 	add.w	r3, r3, #288	; 0x120
 80018d8:	461a      	mov	r2, r3
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	f7ff fd0a 	bl	80012f4 <AT_ExecuteCommand>
 80018e0:	4603      	mov	r3, r0
 80018e2:	73fb      	strb	r3, [r7, #15]
  }
  return ret;
 80018e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	3710      	adds	r7, #16
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	0800ae20 	.word	0x0800ae20
 80018f4:	0800ae58 	.word	0x0800ae58

080018f8 <ES_WIFI_SendData>:
  * @param  pdata: pointer to data
  * @param  len : length of the data to be sent
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_SendData(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *pdata, uint16_t Reqlen , uint16_t *SentLen , uint32_t Timeout)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b088      	sub	sp, #32
 80018fc:	af02      	add	r7, sp, #8
 80018fe:	60f8      	str	r0, [r7, #12]
 8001900:	607a      	str	r2, [r7, #4]
 8001902:	461a      	mov	r2, r3
 8001904:	460b      	mov	r3, r1
 8001906:	72fb      	strb	r3, [r7, #11]
 8001908:	4613      	mov	r3, r2
 800190a:	813b      	strh	r3, [r7, #8]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 800190c:	2302      	movs	r3, #2
 800190e:	75fb      	strb	r3, [r7, #23]

  if(Reqlen >= ES_WIFI_PAYLOAD_SIZE ) Reqlen= ES_WIFI_PAYLOAD_SIZE;
 8001910:	893b      	ldrh	r3, [r7, #8]
 8001912:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 8001916:	d302      	bcc.n	800191e <ES_WIFI_SendData+0x26>
 8001918:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 800191c:	813b      	strh	r3, [r7, #8]

  *SentLen = Reqlen;
 800191e:	6a3b      	ldr	r3, [r7, #32]
 8001920:	893a      	ldrh	r2, [r7, #8]
 8001922:	801a      	strh	r2, [r3, #0]
  sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800192a:	7afa      	ldrb	r2, [r7, #11]
 800192c:	492d      	ldr	r1, [pc, #180]	; (80019e4 <ES_WIFI_SendData+0xec>)
 800192e:	4618      	mov	r0, r3
 8001930:	f006 ff24 	bl	800877c <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	f503 7190 	add.w	r1, r3, #288	; 0x120
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8001940:	461a      	mov	r2, r3
 8001942:	68f8      	ldr	r0, [r7, #12]
 8001944:	f7ff fcd6 	bl	80012f4 <AT_ExecuteCommand>
 8001948:	4603      	mov	r3, r0
 800194a:	75fb      	strb	r3, [r7, #23]
  if(ret == ES_WIFI_STATUS_OK)
 800194c:	7dfb      	ldrb	r3, [r7, #23]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d13c      	bne.n	80019cc <ES_WIFI_SendData+0xd4>
  {
    sprintf((char*)Obj->CmdData,"S2=%lu\r",Timeout);
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8001958:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800195a:	4923      	ldr	r1, [pc, #140]	; (80019e8 <ES_WIFI_SendData+0xf0>)
 800195c:	4618      	mov	r0, r3
 800195e:	f006 ff0d 	bl	800877c <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	f503 7190 	add.w	r1, r3, #288	; 0x120
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800196e:	461a      	mov	r2, r3
 8001970:	68f8      	ldr	r0, [r7, #12]
 8001972:	f7ff fcbf 	bl	80012f4 <AT_ExecuteCommand>
 8001976:	4603      	mov	r3, r0
 8001978:	75fb      	strb	r3, [r7, #23]

    if(ret == ES_WIFI_STATUS_OK)
 800197a:	7dfb      	ldrb	r3, [r7, #23]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d125      	bne.n	80019cc <ES_WIFI_SendData+0xd4>
    {
      sprintf((char *)Obj->CmdData,"S3=%04d\r",Reqlen);
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8001986:	893a      	ldrh	r2, [r7, #8]
 8001988:	4918      	ldr	r1, [pc, #96]	; (80019ec <ES_WIFI_SendData+0xf4>)
 800198a:	4618      	mov	r0, r3
 800198c:	f006 fef6 	bl	800877c <siprintf>
      ret = AT_RequestSendData(Obj, Obj->CmdData, pdata, Reqlen, Obj->CmdData);
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	f503 7190 	add.w	r1, r3, #288	; 0x120
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800199c:	893a      	ldrh	r2, [r7, #8]
 800199e:	9300      	str	r3, [sp, #0]
 80019a0:	4613      	mov	r3, r2
 80019a2:	687a      	ldr	r2, [r7, #4]
 80019a4:	68f8      	ldr	r0, [r7, #12]
 80019a6:	f7ff fced 	bl	8001384 <AT_RequestSendData>
 80019aa:	4603      	mov	r3, r0
 80019ac:	75fb      	strb	r3, [r7, #23]

      if(ret == ES_WIFI_STATUS_OK)
 80019ae:	7dfb      	ldrb	r3, [r7, #23]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d10b      	bne.n	80019cc <ES_WIFI_SendData+0xd4>
      {
        if(strstr((char *)Obj->CmdData,"-1\r\n"))
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	f503 7390 	add.w	r3, r3, #288	; 0x120
 80019ba:	490d      	ldr	r1, [pc, #52]	; (80019f0 <ES_WIFI_SendData+0xf8>)
 80019bc:	4618      	mov	r0, r3
 80019be:	f006 ff10 	bl	80087e2 <strstr>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d001      	beq.n	80019cc <ES_WIFI_SendData+0xd4>
        {
          ret = ES_WIFI_STATUS_ERROR;
 80019c8:	2302      	movs	r3, #2
 80019ca:	75fb      	strb	r3, [r7, #23]
        }
      }
    }
  }

  if (ret == ES_WIFI_STATUS_ERROR) *SentLen = 0;
 80019cc:	7dfb      	ldrb	r3, [r7, #23]
 80019ce:	2b02      	cmp	r3, #2
 80019d0:	d102      	bne.n	80019d8 <ES_WIFI_SendData+0xe0>
 80019d2:	6a3b      	ldr	r3, [r7, #32]
 80019d4:	2200      	movs	r2, #0
 80019d6:	801a      	strh	r2, [r3, #0]
  return ret;
 80019d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3718      	adds	r7, #24
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	0800ae20 	.word	0x0800ae20
 80019e8:	0800aebc 	.word	0x0800aebc
 80019ec:	0800aec4 	.word	0x0800aec4
 80019f0:	0800aed0 	.word	0x0800aed0

080019f4 <SPI_WIFI_MspInit>:
  * @brief  Initialize SPI MSP
  * @param  hspi: SPI handle
  * @retval None
  */
void SPI_WIFI_MspInit(SPI_HandleTypeDef* hspi)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b08c      	sub	sp, #48	; 0x30
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  
  GPIO_InitTypeDef GPIO_Init;
  
  __HAL_RCC_SPI3_CLK_ENABLE();
 80019fc:	4b57      	ldr	r3, [pc, #348]	; (8001b5c <SPI_WIFI_MspInit+0x168>)
 80019fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a00:	4a56      	ldr	r2, [pc, #344]	; (8001b5c <SPI_WIFI_MspInit+0x168>)
 8001a02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a06:	6593      	str	r3, [r2, #88]	; 0x58
 8001a08:	4b54      	ldr	r3, [pc, #336]	; (8001b5c <SPI_WIFI_MspInit+0x168>)
 8001a0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a10:	61bb      	str	r3, [r7, #24]
 8001a12:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a14:	4b51      	ldr	r3, [pc, #324]	; (8001b5c <SPI_WIFI_MspInit+0x168>)
 8001a16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a18:	4a50      	ldr	r2, [pc, #320]	; (8001b5c <SPI_WIFI_MspInit+0x168>)
 8001a1a:	f043 0302 	orr.w	r3, r3, #2
 8001a1e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a20:	4b4e      	ldr	r3, [pc, #312]	; (8001b5c <SPI_WIFI_MspInit+0x168>)
 8001a22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a24:	f003 0302 	and.w	r3, r3, #2
 8001a28:	617b      	str	r3, [r7, #20]
 8001a2a:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a2c:	4b4b      	ldr	r3, [pc, #300]	; (8001b5c <SPI_WIFI_MspInit+0x168>)
 8001a2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a30:	4a4a      	ldr	r2, [pc, #296]	; (8001b5c <SPI_WIFI_MspInit+0x168>)
 8001a32:	f043 0304 	orr.w	r3, r3, #4
 8001a36:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a38:	4b48      	ldr	r3, [pc, #288]	; (8001b5c <SPI_WIFI_MspInit+0x168>)
 8001a3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a3c:	f003 0304 	and.w	r3, r3, #4
 8001a40:	613b      	str	r3, [r7, #16]
 8001a42:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a44:	4b45      	ldr	r3, [pc, #276]	; (8001b5c <SPI_WIFI_MspInit+0x168>)
 8001a46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a48:	4a44      	ldr	r2, [pc, #272]	; (8001b5c <SPI_WIFI_MspInit+0x168>)
 8001a4a:	f043 0310 	orr.w	r3, r3, #16
 8001a4e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a50:	4b42      	ldr	r3, [pc, #264]	; (8001b5c <SPI_WIFI_MspInit+0x168>)
 8001a52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a54:	f003 0310 	and.w	r3, r3, #16
 8001a58:	60fb      	str	r3, [r7, #12]
 8001a5a:	68fb      	ldr	r3, [r7, #12]
  
  /* configure Wake up pin */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET ); 
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a62:	483f      	ldr	r0, [pc, #252]	; (8001b60 <SPI_WIFI_MspInit+0x16c>)
 8001a64:	f002 f95e 	bl	8003d24 <HAL_GPIO_WritePin>
  GPIO_Init.Pin       = GPIO_PIN_13;
 8001a68:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a6c:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8001a72:	2300      	movs	r3, #0
 8001a74:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 8001a76:	2300      	movs	r3, #0
 8001a78:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_Init );
 8001a7a:	f107 031c 	add.w	r3, r7, #28
 8001a7e:	4619      	mov	r1, r3
 8001a80:	4837      	ldr	r0, [pc, #220]	; (8001b60 <SPI_WIFI_MspInit+0x16c>)
 8001a82:	f001 fe99 	bl	80037b8 <HAL_GPIO_Init>

  /* configure Data ready pin */
  GPIO_Init.Pin       = GPIO_PIN_1;
 8001a86:	2302      	movs	r3, #2
 8001a88:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_IT_RISING;
 8001a8a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001a8e:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8001a90:	2300      	movs	r3, #0
 8001a92:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 8001a94:	2300      	movs	r3, #0
 8001a96:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 8001a98:	f107 031c 	add.w	r3, r7, #28
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	4831      	ldr	r0, [pc, #196]	; (8001b64 <SPI_WIFI_MspInit+0x170>)
 8001aa0:	f001 fe8a 	bl	80037b8 <HAL_GPIO_Init>

  /* configure Reset pin */
  GPIO_Init.Pin       = GPIO_PIN_8;
 8001aa4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001aa8:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = 0;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 8001aba:	f107 031c 	add.w	r3, r7, #28
 8001abe:	4619      	mov	r1, r3
 8001ac0:	4828      	ldr	r0, [pc, #160]	; (8001b64 <SPI_WIFI_MspInit+0x170>)
 8001ac2:	f001 fe79 	bl	80037b8 <HAL_GPIO_Init>
  
  /* configure SPI NSS pin pin */
  HAL_GPIO_WritePin( GPIOE, GPIO_PIN_0, GPIO_PIN_SET ); 
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	2101      	movs	r1, #1
 8001aca:	4826      	ldr	r0, [pc, #152]	; (8001b64 <SPI_WIFI_MspInit+0x170>)
 8001acc:	f002 f92a 	bl	8003d24 <HAL_GPIO_WritePin>
  GPIO_Init.Pin       = GPIO_PIN_0;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8001adc:	2301      	movs	r3, #1
 8001ade:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init( GPIOE, &GPIO_Init );
 8001ae0:	f107 031c 	add.w	r3, r7, #28
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	481f      	ldr	r0, [pc, #124]	; (8001b64 <SPI_WIFI_MspInit+0x170>)
 8001ae8:	f001 fe66 	bl	80037b8 <HAL_GPIO_Init>
  
  /* configure SPI CLK pin */
  GPIO_Init.Pin       = GPIO_PIN_10;
 8001aec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001af0:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8001af2:	2302      	movs	r3, #2
 8001af4:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8001af6:	2300      	movs	r3, #0
 8001af8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8001afa:	2301      	movs	r3, #1
 8001afc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8001afe:	2306      	movs	r3, #6
 8001b00:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init( GPIOC, &GPIO_Init );
 8001b02:	f107 031c 	add.w	r3, r7, #28
 8001b06:	4619      	mov	r1, r3
 8001b08:	4817      	ldr	r0, [pc, #92]	; (8001b68 <SPI_WIFI_MspInit+0x174>)
 8001b0a:	f001 fe55 	bl	80037b8 <HAL_GPIO_Init>
  
  /* configure SPI MOSI pin */
  GPIO_Init.Pin       = GPIO_PIN_12;
 8001b0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b12:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8001b14:	2302      	movs	r3, #2
 8001b16:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8001b20:	2306      	movs	r3, #6
 8001b22:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init( GPIOC, &GPIO_Init );
 8001b24:	f107 031c 	add.w	r3, r7, #28
 8001b28:	4619      	mov	r1, r3
 8001b2a:	480f      	ldr	r0, [pc, #60]	; (8001b68 <SPI_WIFI_MspInit+0x174>)
 8001b2c:	f001 fe44 	bl	80037b8 <HAL_GPIO_Init>
  
  /* configure SPI MISO pin */
  GPIO_Init.Pin       = GPIO_PIN_11;
 8001b30:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001b34:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8001b36:	2302      	movs	r3, #2
 8001b38:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_PULLUP;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8001b42:	2306      	movs	r3, #6
 8001b44:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init( GPIOC, &GPIO_Init );
 8001b46:	f107 031c 	add.w	r3, r7, #28
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	4806      	ldr	r0, [pc, #24]	; (8001b68 <SPI_WIFI_MspInit+0x174>)
 8001b4e:	f001 fe33 	bl	80037b8 <HAL_GPIO_Init>
}
 8001b52:	bf00      	nop
 8001b54:	3730      	adds	r7, #48	; 0x30
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	40021000 	.word	0x40021000
 8001b60:	48000400 	.word	0x48000400
 8001b64:	48001000 	.word	0x48001000
 8001b68:	48000800 	.word	0x48000800

08001b6c <SPI_WIFI_Init>:
  * @brief  Initialize the SPI3
  * @param  None
  * @retval None
  */
int8_t SPI_WIFI_Init(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b084      	sub	sp, #16
 8001b70:	af00      	add	r7, sp, #0
  uint32_t tickstart = HAL_GetTick();
 8001b72:	f001 fc6d 	bl	8003450 <HAL_GetTick>
 8001b76:	60b8      	str	r0, [r7, #8]
  uint8_t Prompt[6];
  uint8_t count = 0;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	73fb      	strb	r3, [r7, #15]
  HAL_StatusTypeDef  Status;
  
  hspi.Instance               = SPI3;
 8001b7c:	4b51      	ldr	r3, [pc, #324]	; (8001cc4 <SPI_WIFI_Init+0x158>)
 8001b7e:	4a52      	ldr	r2, [pc, #328]	; (8001cc8 <SPI_WIFI_Init+0x15c>)
 8001b80:	601a      	str	r2, [r3, #0]
  SPI_WIFI_MspInit(&hspi);
 8001b82:	4850      	ldr	r0, [pc, #320]	; (8001cc4 <SPI_WIFI_Init+0x158>)
 8001b84:	f7ff ff36 	bl	80019f4 <SPI_WIFI_MspInit>
  
  hspi.Init.Mode              = SPI_MODE_MASTER;
 8001b88:	4b4e      	ldr	r3, [pc, #312]	; (8001cc4 <SPI_WIFI_Init+0x158>)
 8001b8a:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001b8e:	605a      	str	r2, [r3, #4]
  hspi.Init.Direction         = SPI_DIRECTION_2LINES;
 8001b90:	4b4c      	ldr	r3, [pc, #304]	; (8001cc4 <SPI_WIFI_Init+0x158>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	609a      	str	r2, [r3, #8]
  hspi.Init.DataSize          = SPI_DATASIZE_16BIT;
 8001b96:	4b4b      	ldr	r3, [pc, #300]	; (8001cc4 <SPI_WIFI_Init+0x158>)
 8001b98:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 8001b9c:	60da      	str	r2, [r3, #12]
  hspi.Init.CLKPolarity       = SPI_POLARITY_LOW;
 8001b9e:	4b49      	ldr	r3, [pc, #292]	; (8001cc4 <SPI_WIFI_Init+0x158>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	611a      	str	r2, [r3, #16]
  hspi.Init.CLKPhase          = SPI_PHASE_1EDGE;
 8001ba4:	4b47      	ldr	r3, [pc, #284]	; (8001cc4 <SPI_WIFI_Init+0x158>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	615a      	str	r2, [r3, #20]
  hspi.Init.NSS               = SPI_NSS_SOFT;
 8001baa:	4b46      	ldr	r3, [pc, #280]	; (8001cc4 <SPI_WIFI_Init+0x158>)
 8001bac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bb0:	619a      	str	r2, [r3, #24]
  hspi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;  /* 80/8= 10MHz (Inventek WIFI module supportes up to 20MHz)*/
 8001bb2:	4b44      	ldr	r3, [pc, #272]	; (8001cc4 <SPI_WIFI_Init+0x158>)
 8001bb4:	2210      	movs	r2, #16
 8001bb6:	61da      	str	r2, [r3, #28]
  hspi.Init.FirstBit          = SPI_FIRSTBIT_MSB;
 8001bb8:	4b42      	ldr	r3, [pc, #264]	; (8001cc4 <SPI_WIFI_Init+0x158>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	621a      	str	r2, [r3, #32]
  hspi.Init.TIMode            = SPI_TIMODE_DISABLE;
 8001bbe:	4b41      	ldr	r3, [pc, #260]	; (8001cc4 <SPI_WIFI_Init+0x158>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi.Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLE;
 8001bc4:	4b3f      	ldr	r3, [pc, #252]	; (8001cc4 <SPI_WIFI_Init+0x158>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi.Init.CRCPolynomial     = 0;
 8001bca:	4b3e      	ldr	r3, [pc, #248]	; (8001cc4 <SPI_WIFI_Init+0x158>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	62da      	str	r2, [r3, #44]	; 0x2c
  
  if(HAL_SPI_Init( &hspi ) != HAL_OK)
 8001bd0:	483c      	ldr	r0, [pc, #240]	; (8001cc4 <SPI_WIFI_Init+0x158>)
 8001bd2:	f004 fa33 	bl	800603c <HAL_SPI_Init>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d002      	beq.n	8001be2 <SPI_WIFI_Init+0x76>
  {
    return -1;
 8001bdc:	f04f 33ff 	mov.w	r3, #4294967295
 8001be0:	e06c      	b.n	8001cbc <SPI_WIFI_Init+0x150>
  }
  
  WIFI_RESET_MODULE();
 8001be2:	2200      	movs	r2, #0
 8001be4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001be8:	4838      	ldr	r0, [pc, #224]	; (8001ccc <SPI_WIFI_Init+0x160>)
 8001bea:	f002 f89b 	bl	8003d24 <HAL_GPIO_WritePin>
 8001bee:	200a      	movs	r0, #10
 8001bf0:	f001 fc3a 	bl	8003468 <HAL_Delay>
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001bfa:	4834      	ldr	r0, [pc, #208]	; (8001ccc <SPI_WIFI_Init+0x160>)
 8001bfc:	f002 f892 	bl	8003d24 <HAL_GPIO_WritePin>
 8001c00:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001c04:	f001 fc30 	bl	8003468 <HAL_Delay>
  
  WIFI_ENABLE_NSS(); 
 8001c08:	2200      	movs	r2, #0
 8001c0a:	2101      	movs	r1, #1
 8001c0c:	482f      	ldr	r0, [pc, #188]	; (8001ccc <SPI_WIFI_Init+0x160>)
 8001c0e:	f002 f889 	bl	8003d24 <HAL_GPIO_WritePin>
 8001c12:	200a      	movs	r0, #10
 8001c14:	f001 fc28 	bl	8003468 <HAL_Delay>
  
  while (WIFI_IS_CMDDATA_READY())
 8001c18:	e023      	b.n	8001c62 <SPI_WIFI_Init+0xf6>
  {
    Status = HAL_SPI_Receive(&hspi , &Prompt[count], 1, 0xFFFF);  
 8001c1a:	7bfb      	ldrb	r3, [r7, #15]
 8001c1c:	463a      	mov	r2, r7
 8001c1e:	18d1      	adds	r1, r2, r3
 8001c20:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c24:	2201      	movs	r2, #1
 8001c26:	4827      	ldr	r0, [pc, #156]	; (8001cc4 <SPI_WIFI_Init+0x158>)
 8001c28:	f004 fc41 	bl	80064ae <HAL_SPI_Receive>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	71fb      	strb	r3, [r7, #7]
    count += 2;
 8001c30:	7bfb      	ldrb	r3, [r7, #15]
 8001c32:	3302      	adds	r3, #2
 8001c34:	73fb      	strb	r3, [r7, #15]
    if(((HAL_GetTick() - tickstart ) > 0xFFFF) || (Status != HAL_OK))
 8001c36:	f001 fc0b 	bl	8003450 <HAL_GetTick>
 8001c3a:	4602      	mov	r2, r0
 8001c3c:	68bb      	ldr	r3, [r7, #8]
 8001c3e:	1ad3      	subs	r3, r2, r3
 8001c40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c44:	d202      	bcs.n	8001c4c <SPI_WIFI_Init+0xe0>
 8001c46:	79fb      	ldrb	r3, [r7, #7]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d00a      	beq.n	8001c62 <SPI_WIFI_Init+0xf6>
    {
      WIFI_DISABLE_NSS(); 
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	2101      	movs	r1, #1
 8001c50:	481e      	ldr	r0, [pc, #120]	; (8001ccc <SPI_WIFI_Init+0x160>)
 8001c52:	f002 f867 	bl	8003d24 <HAL_GPIO_WritePin>
 8001c56:	200a      	movs	r0, #10
 8001c58:	f001 fc06 	bl	8003468 <HAL_Delay>
      return -1;
 8001c5c:	f04f 33ff 	mov.w	r3, #4294967295
 8001c60:	e02c      	b.n	8001cbc <SPI_WIFI_Init+0x150>
  while (WIFI_IS_CMDDATA_READY())
 8001c62:	2102      	movs	r1, #2
 8001c64:	4819      	ldr	r0, [pc, #100]	; (8001ccc <SPI_WIFI_Init+0x160>)
 8001c66:	f002 f845 	bl	8003cf4 <HAL_GPIO_ReadPin>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	2b01      	cmp	r3, #1
 8001c6e:	d0d4      	beq.n	8001c1a <SPI_WIFI_Init+0xae>
    }    
  }
  
  if((Prompt[0] != 0x15) ||(Prompt[1] != 0x15) ||(Prompt[2] != '\r')||
 8001c70:	783b      	ldrb	r3, [r7, #0]
 8001c72:	2b15      	cmp	r3, #21
 8001c74:	d10e      	bne.n	8001c94 <SPI_WIFI_Init+0x128>
 8001c76:	787b      	ldrb	r3, [r7, #1]
 8001c78:	2b15      	cmp	r3, #21
 8001c7a:	d10b      	bne.n	8001c94 <SPI_WIFI_Init+0x128>
 8001c7c:	78bb      	ldrb	r3, [r7, #2]
 8001c7e:	2b0d      	cmp	r3, #13
 8001c80:	d108      	bne.n	8001c94 <SPI_WIFI_Init+0x128>
       (Prompt[3] != '\n') ||(Prompt[4] != '>') ||(Prompt[5] != ' '))
 8001c82:	78fb      	ldrb	r3, [r7, #3]
  if((Prompt[0] != 0x15) ||(Prompt[1] != 0x15) ||(Prompt[2] != '\r')||
 8001c84:	2b0a      	cmp	r3, #10
 8001c86:	d105      	bne.n	8001c94 <SPI_WIFI_Init+0x128>
       (Prompt[3] != '\n') ||(Prompt[4] != '>') ||(Prompt[5] != ' '))
 8001c88:	793b      	ldrb	r3, [r7, #4]
 8001c8a:	2b3e      	cmp	r3, #62	; 0x3e
 8001c8c:	d102      	bne.n	8001c94 <SPI_WIFI_Init+0x128>
 8001c8e:	797b      	ldrb	r3, [r7, #5]
 8001c90:	2b20      	cmp	r3, #32
 8001c92:	d00a      	beq.n	8001caa <SPI_WIFI_Init+0x13e>
  {
    WIFI_DISABLE_NSS(); 
 8001c94:	2201      	movs	r2, #1
 8001c96:	2101      	movs	r1, #1
 8001c98:	480c      	ldr	r0, [pc, #48]	; (8001ccc <SPI_WIFI_Init+0x160>)
 8001c9a:	f002 f843 	bl	8003d24 <HAL_GPIO_WritePin>
 8001c9e:	200a      	movs	r0, #10
 8001ca0:	f001 fbe2 	bl	8003468 <HAL_Delay>
    return -1;
 8001ca4:	f04f 33ff 	mov.w	r3, #4294967295
 8001ca8:	e008      	b.n	8001cbc <SPI_WIFI_Init+0x150>
  }    
   
  WIFI_DISABLE_NSS(); 
 8001caa:	2201      	movs	r2, #1
 8001cac:	2101      	movs	r1, #1
 8001cae:	4807      	ldr	r0, [pc, #28]	; (8001ccc <SPI_WIFI_Init+0x160>)
 8001cb0:	f002 f838 	bl	8003d24 <HAL_GPIO_WritePin>
 8001cb4:	200a      	movs	r0, #10
 8001cb6:	f001 fbd7 	bl	8003468 <HAL_Delay>
  return 0;
 8001cba:	2300      	movs	r3, #0
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	3710      	adds	r7, #16
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	2000022c 	.word	0x2000022c
 8001cc8:	40003c00 	.word	0x40003c00
 8001ccc:	48001000 	.word	0x48001000

08001cd0 <SPI_WIFI_DeInit>:
  * @brief  DeInitialize the SPI
  * @param  None
  * @retval None
  */
int8_t SPI_WIFI_DeInit(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	af00      	add	r7, sp, #0
  HAL_SPI_DeInit( &hspi );
 8001cd4:	4802      	ldr	r0, [pc, #8]	; (8001ce0 <SPI_WIFI_DeInit+0x10>)
 8001cd6:	f004 fa54 	bl	8006182 <HAL_SPI_DeInit>
  return 0;
 8001cda:	2300      	movs	r3, #0
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	2000022c 	.word	0x2000022c

08001ce4 <SPI_WIFI_ReceiveData>:
  * @param  len : Data length
  * @param  timeout : send timeout in mS
  * @retval Length of received data (payload)
  */
int16_t SPI_WIFI_ReceiveData(uint8_t *pData, uint16_t len, uint32_t timeout)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b088      	sub	sp, #32
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	60f8      	str	r0, [r7, #12]
 8001cec:	460b      	mov	r3, r1
 8001cee:	607a      	str	r2, [r7, #4]
 8001cf0:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 8001cf2:	f001 fbad 	bl	8003450 <HAL_GetTick>
 8001cf6:	61b8      	str	r0, [r7, #24]
  int16_t length = 0;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	83fb      	strh	r3, [r7, #30]
  uint8_t tmp[2];
  
  HAL_SPIEx_FlushRxFifo(&hspi);
 8001cfc:	4842      	ldr	r0, [pc, #264]	; (8001e08 <SPI_WIFI_ReceiveData+0x124>)
 8001cfe:	f005 f9f5 	bl	80070ec <HAL_SPIEx_FlushRxFifo>
  
  WIFI_DISABLE_NSS(); 
 8001d02:	2201      	movs	r2, #1
 8001d04:	2101      	movs	r1, #1
 8001d06:	4841      	ldr	r0, [pc, #260]	; (8001e0c <SPI_WIFI_ReceiveData+0x128>)
 8001d08:	f002 f80c 	bl	8003d24 <HAL_GPIO_WritePin>
 8001d0c:	200a      	movs	r0, #10
 8001d0e:	f001 fbab 	bl	8003468 <HAL_Delay>
  
  while (!WIFI_IS_CMDDATA_READY())
 8001d12:	e00a      	b.n	8001d2a <SPI_WIFI_ReceiveData+0x46>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 8001d14:	f001 fb9c 	bl	8003450 <HAL_GetTick>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	69bb      	ldr	r3, [r7, #24]
 8001d1c:	1ad3      	subs	r3, r2, r3
 8001d1e:	687a      	ldr	r2, [r7, #4]
 8001d20:	429a      	cmp	r2, r3
 8001d22:	d202      	bcs.n	8001d2a <SPI_WIFI_ReceiveData+0x46>
    {
      return -1;
 8001d24:	f04f 33ff 	mov.w	r3, #4294967295
 8001d28:	e06a      	b.n	8001e00 <SPI_WIFI_ReceiveData+0x11c>
  while (!WIFI_IS_CMDDATA_READY())
 8001d2a:	2102      	movs	r1, #2
 8001d2c:	4837      	ldr	r0, [pc, #220]	; (8001e0c <SPI_WIFI_ReceiveData+0x128>)
 8001d2e:	f001 ffe1 	bl	8003cf4 <HAL_GPIO_ReadPin>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2b01      	cmp	r3, #1
 8001d36:	d1ed      	bne.n	8001d14 <SPI_WIFI_ReceiveData+0x30>
    }
  }
  
  WIFI_ENABLE_NSS(); 
 8001d38:	2200      	movs	r2, #0
 8001d3a:	2101      	movs	r1, #1
 8001d3c:	4833      	ldr	r0, [pc, #204]	; (8001e0c <SPI_WIFI_ReceiveData+0x128>)
 8001d3e:	f001 fff1 	bl	8003d24 <HAL_GPIO_WritePin>
 8001d42:	200a      	movs	r0, #10
 8001d44:	f001 fb90 	bl	8003468 <HAL_Delay>
  
  while (WIFI_IS_CMDDATA_READY())
 8001d48:	e049      	b.n	8001dde <SPI_WIFI_ReceiveData+0xfa>
  {
    if((length < len) || (!len))
 8001d4a:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8001d4e:	897b      	ldrh	r3, [r7, #10]
 8001d50:	429a      	cmp	r2, r3
 8001d52:	db02      	blt.n	8001d5a <SPI_WIFI_ReceiveData+0x76>
 8001d54:	897b      	ldrh	r3, [r7, #10]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d148      	bne.n	8001dec <SPI_WIFI_ReceiveData+0x108>
    {
      HAL_SPI_Receive(&hspi, tmp, 1, timeout) ;    
 8001d5a:	f107 0114 	add.w	r1, r7, #20
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2201      	movs	r2, #1
 8001d62:	4829      	ldr	r0, [pc, #164]	; (8001e08 <SPI_WIFI_ReceiveData+0x124>)
 8001d64:	f004 fba3 	bl	80064ae <HAL_SPI_Receive>
      /* let some time to hardware to change CMDDATA signal */
      if(tmp[1] == 0x15)
 8001d68:	7d7b      	ldrb	r3, [r7, #21]
 8001d6a:	2b15      	cmp	r3, #21
 8001d6c:	d102      	bne.n	8001d74 <SPI_WIFI_ReceiveData+0x90>
      {
       SPI_WIFI_Delay(1);
 8001d6e:	2001      	movs	r0, #1
 8001d70:	f000 f8c0 	bl	8001ef4 <SPI_WIFI_Delay>
      }
      /*This the last data */
      if(!WIFI_IS_CMDDATA_READY())
 8001d74:	2102      	movs	r1, #2
 8001d76:	4825      	ldr	r0, [pc, #148]	; (8001e0c <SPI_WIFI_ReceiveData+0x128>)
 8001d78:	f001 ffbc 	bl	8003cf4 <HAL_GPIO_ReadPin>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b01      	cmp	r3, #1
 8001d80:	d00c      	beq.n	8001d9c <SPI_WIFI_ReceiveData+0xb8>
      {
        if(tmp[1] == 0x15)
 8001d82:	7d7b      	ldrb	r3, [r7, #21]
 8001d84:	2b15      	cmp	r3, #21
 8001d86:	d109      	bne.n	8001d9c <SPI_WIFI_ReceiveData+0xb8>
        {
          pData[0] = tmp[0];
 8001d88:	7d3a      	ldrb	r2, [r7, #20]
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	701a      	strb	r2, [r3, #0]
          length++;
 8001d8e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001d92:	b29b      	uxth	r3, r3
 8001d94:	3301      	adds	r3, #1
 8001d96:	b29b      	uxth	r3, r3
 8001d98:	83fb      	strh	r3, [r7, #30]
          break;
 8001d9a:	e027      	b.n	8001dec <SPI_WIFI_ReceiveData+0x108>
        }     
      }
      
      pData[0] = tmp[0];
 8001d9c:	7d3a      	ldrb	r2, [r7, #20]
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	701a      	strb	r2, [r3, #0]
      pData[1] = tmp[1];
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	3301      	adds	r3, #1
 8001da6:	7d7a      	ldrb	r2, [r7, #21]
 8001da8:	701a      	strb	r2, [r3, #0]
      length += 2;
 8001daa:	8bfb      	ldrh	r3, [r7, #30]
 8001dac:	3302      	adds	r3, #2
 8001dae:	b29b      	uxth	r3, r3
 8001db0:	83fb      	strh	r3, [r7, #30]
      pData  += 2;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	3302      	adds	r3, #2
 8001db6:	60fb      	str	r3, [r7, #12]
      
      if((HAL_GetTick() - tickstart ) > timeout)
 8001db8:	f001 fb4a 	bl	8003450 <HAL_GetTick>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	69bb      	ldr	r3, [r7, #24]
 8001dc0:	1ad3      	subs	r3, r2, r3
 8001dc2:	687a      	ldr	r2, [r7, #4]
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d20a      	bcs.n	8001dde <SPI_WIFI_ReceiveData+0xfa>
      {
        WIFI_DISABLE_NSS(); 
 8001dc8:	2201      	movs	r2, #1
 8001dca:	2101      	movs	r1, #1
 8001dcc:	480f      	ldr	r0, [pc, #60]	; (8001e0c <SPI_WIFI_ReceiveData+0x128>)
 8001dce:	f001 ffa9 	bl	8003d24 <HAL_GPIO_WritePin>
 8001dd2:	200a      	movs	r0, #10
 8001dd4:	f001 fb48 	bl	8003468 <HAL_Delay>
        return -1;
 8001dd8:	f04f 33ff 	mov.w	r3, #4294967295
 8001ddc:	e010      	b.n	8001e00 <SPI_WIFI_ReceiveData+0x11c>
  while (WIFI_IS_CMDDATA_READY())
 8001dde:	2102      	movs	r1, #2
 8001de0:	480a      	ldr	r0, [pc, #40]	; (8001e0c <SPI_WIFI_ReceiveData+0x128>)
 8001de2:	f001 ff87 	bl	8003cf4 <HAL_GPIO_ReadPin>
 8001de6:	4603      	mov	r3, r0
 8001de8:	2b01      	cmp	r3, #1
 8001dea:	d0ae      	beq.n	8001d4a <SPI_WIFI_ReceiveData+0x66>
    {
      break;
    }
  }
  
  WIFI_DISABLE_NSS(); 
 8001dec:	2201      	movs	r2, #1
 8001dee:	2101      	movs	r1, #1
 8001df0:	4806      	ldr	r0, [pc, #24]	; (8001e0c <SPI_WIFI_ReceiveData+0x128>)
 8001df2:	f001 ff97 	bl	8003d24 <HAL_GPIO_WritePin>
 8001df6:	200a      	movs	r0, #10
 8001df8:	f001 fb36 	bl	8003468 <HAL_Delay>
  return length;
 8001dfc:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	3720      	adds	r7, #32
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	2000022c 	.word	0x2000022c
 8001e0c:	48001000 	.word	0x48001000

08001e10 <SPI_WIFI_SendData>:
  * @param  len : Data length
  * @param  timeout : send timeout in mS
  * @retval Length of sent data
  */
int16_t SPI_WIFI_SendData( uint8_t *pdata,  uint16_t len, uint32_t timeout)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b086      	sub	sp, #24
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	60f8      	str	r0, [r7, #12]
 8001e18:	460b      	mov	r3, r1
 8001e1a:	607a      	str	r2, [r7, #4]
 8001e1c:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 8001e1e:	f001 fb17 	bl	8003450 <HAL_GetTick>
 8001e22:	6178      	str	r0, [r7, #20]
  uint8_t Padding[2];
  
  while (!WIFI_IS_CMDDATA_READY())
 8001e24:	e012      	b.n	8001e4c <SPI_WIFI_SendData+0x3c>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 8001e26:	f001 fb13 	bl	8003450 <HAL_GetTick>
 8001e2a:	4602      	mov	r2, r0
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	1ad3      	subs	r3, r2, r3
 8001e30:	687a      	ldr	r2, [r7, #4]
 8001e32:	429a      	cmp	r2, r3
 8001e34:	d20a      	bcs.n	8001e4c <SPI_WIFI_SendData+0x3c>
    {
      WIFI_DISABLE_NSS();       
 8001e36:	2201      	movs	r2, #1
 8001e38:	2101      	movs	r1, #1
 8001e3a:	482c      	ldr	r0, [pc, #176]	; (8001eec <SPI_WIFI_SendData+0xdc>)
 8001e3c:	f001 ff72 	bl	8003d24 <HAL_GPIO_WritePin>
 8001e40:	200a      	movs	r0, #10
 8001e42:	f001 fb11 	bl	8003468 <HAL_Delay>
      return -1;
 8001e46:	f04f 33ff 	mov.w	r3, #4294967295
 8001e4a:	e04b      	b.n	8001ee4 <SPI_WIFI_SendData+0xd4>
  while (!WIFI_IS_CMDDATA_READY())
 8001e4c:	2102      	movs	r1, #2
 8001e4e:	4827      	ldr	r0, [pc, #156]	; (8001eec <SPI_WIFI_SendData+0xdc>)
 8001e50:	f001 ff50 	bl	8003cf4 <HAL_GPIO_ReadPin>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b01      	cmp	r3, #1
 8001e58:	d1e5      	bne.n	8001e26 <SPI_WIFI_SendData+0x16>
    }
  }
  
  WIFI_ENABLE_NSS(); 
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	2101      	movs	r1, #1
 8001e5e:	4823      	ldr	r0, [pc, #140]	; (8001eec <SPI_WIFI_SendData+0xdc>)
 8001e60:	f001 ff60 	bl	8003d24 <HAL_GPIO_WritePin>
 8001e64:	200a      	movs	r0, #10
 8001e66:	f001 faff 	bl	8003468 <HAL_Delay>
  if (len > 1)
 8001e6a:	897b      	ldrh	r3, [r7, #10]
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	d915      	bls.n	8001e9c <SPI_WIFI_SendData+0x8c>
  {
   if( HAL_SPI_Transmit(&hspi, (uint8_t *)pdata , len/2, timeout) != HAL_OK)
 8001e70:	897b      	ldrh	r3, [r7, #10]
 8001e72:	085b      	lsrs	r3, r3, #1
 8001e74:	b29a      	uxth	r2, r3
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	68f9      	ldr	r1, [r7, #12]
 8001e7a:	481d      	ldr	r0, [pc, #116]	; (8001ef0 <SPI_WIFI_SendData+0xe0>)
 8001e7c:	f004 f9a9 	bl	80061d2 <HAL_SPI_Transmit>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d00a      	beq.n	8001e9c <SPI_WIFI_SendData+0x8c>
   {
     WIFI_DISABLE_NSS(); 
 8001e86:	2201      	movs	r2, #1
 8001e88:	2101      	movs	r1, #1
 8001e8a:	4818      	ldr	r0, [pc, #96]	; (8001eec <SPI_WIFI_SendData+0xdc>)
 8001e8c:	f001 ff4a 	bl	8003d24 <HAL_GPIO_WritePin>
 8001e90:	200a      	movs	r0, #10
 8001e92:	f001 fae9 	bl	8003468 <HAL_Delay>
     return -1;
 8001e96:	f04f 33ff 	mov.w	r3, #4294967295
 8001e9a:	e023      	b.n	8001ee4 <SPI_WIFI_SendData+0xd4>
   }
  }
  
  if ( len & 1)
 8001e9c:	897b      	ldrh	r3, [r7, #10]
 8001e9e:	f003 0301 	and.w	r3, r3, #1
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d01c      	beq.n	8001ee0 <SPI_WIFI_SendData+0xd0>
  {
    Padding[0] = pdata[len-1];
 8001ea6:	897b      	ldrh	r3, [r7, #10]
 8001ea8:	3b01      	subs	r3, #1
 8001eaa:	68fa      	ldr	r2, [r7, #12]
 8001eac:	4413      	add	r3, r2
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	743b      	strb	r3, [r7, #16]
    Padding[1] = '\n';
 8001eb2:	230a      	movs	r3, #10
 8001eb4:	747b      	strb	r3, [r7, #17]
    
    if( HAL_SPI_Transmit(&hspi, Padding, 1, timeout) != HAL_OK)
 8001eb6:	f107 0110 	add.w	r1, r7, #16
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	480c      	ldr	r0, [pc, #48]	; (8001ef0 <SPI_WIFI_SendData+0xe0>)
 8001ec0:	f004 f987 	bl	80061d2 <HAL_SPI_Transmit>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d00a      	beq.n	8001ee0 <SPI_WIFI_SendData+0xd0>
    {
      WIFI_DISABLE_NSS();       
 8001eca:	2201      	movs	r2, #1
 8001ecc:	2101      	movs	r1, #1
 8001ece:	4807      	ldr	r0, [pc, #28]	; (8001eec <SPI_WIFI_SendData+0xdc>)
 8001ed0:	f001 ff28 	bl	8003d24 <HAL_GPIO_WritePin>
 8001ed4:	200a      	movs	r0, #10
 8001ed6:	f001 fac7 	bl	8003468 <HAL_Delay>
      return -1;
 8001eda:	f04f 33ff 	mov.w	r3, #4294967295
 8001ede:	e001      	b.n	8001ee4 <SPI_WIFI_SendData+0xd4>
    }
  }
  
  return len;
 8001ee0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	3718      	adds	r7, #24
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	48001000 	.word	0x48001000
 8001ef0:	2000022c 	.word	0x2000022c

08001ef4 <SPI_WIFI_Delay>:
  * @brief  Delay
  * @param  Delay in ms
  * @retval None
  */
void SPI_WIFI_Delay(uint32_t Delay)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b082      	sub	sp, #8
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8001efc:	6878      	ldr	r0, [r7, #4]
 8001efe:	f001 fab3 	bl	8003468 <HAL_Delay>
}
 8001f02:	bf00      	nop
 8001f04:	3708      	adds	r7, #8
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
	...

08001f0c <User_LED>:
uint8_t IP_Addr[4];

ES_WIFIObject_t EsWifiObj;

void User_LED(uint32_t interval)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b082      	sub	sp, #8
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(USER_LED_GPIO_Port, USER_LED_Pin);
 8001f14:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001f18:	4804      	ldr	r0, [pc, #16]	; (8001f2c <User_LED+0x20>)
 8001f1a:	f001 ff1b 	bl	8003d54 <HAL_GPIO_TogglePin>
	HAL_Delay(interval);
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	f001 faa2 	bl	8003468 <HAL_Delay>
}
 8001f24:	bf00      	nop
 8001f26:	3708      	adds	r7, #8
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	48000400 	.word	0x48000400

08001f30 <__io_putchar>:

int __io_putchar(int ch)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b082      	sub	sp, #8
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
	while (HAL_OK != HAL_UART_Transmit(&huart1, (uint8_t *) &ch, 1, 30000))
 8001f38:	bf00      	nop
 8001f3a:	1d39      	adds	r1, r7, #4
 8001f3c:	f247 5330 	movw	r3, #30000	; 0x7530
 8001f40:	2201      	movs	r2, #1
 8001f42:	4805      	ldr	r0, [pc, #20]	; (8001f58 <__io_putchar+0x28>)
 8001f44:	f005 f942 	bl	80071cc <HAL_UART_Transmit>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d1f5      	bne.n	8001f3a <__io_putchar+0xa>
	{

	}
	return ch;
 8001f4e:	687b      	ldr	r3, [r7, #4]
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	3708      	adds	r7, #8
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	20000ab4 	.word	0x20000ab4

08001f5c <__io_getchar>:

int __io_getchar(void)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b082      	sub	sp, #8
 8001f60:	af00      	add	r7, sp, #0
	uint8_t ch = 0;
 8001f62:	2300      	movs	r3, #0
 8001f64:	71fb      	strb	r3, [r7, #7]
	while (HAL_OK != HAL_UART_Receive(&huart1, (uint8_t *) &ch, 1, 30000))
 8001f66:	bf00      	nop
 8001f68:	1df9      	adds	r1, r7, #7
 8001f6a:	f247 5330 	movw	r3, #30000	; 0x7530
 8001f6e:	2201      	movs	r2, #1
 8001f70:	4805      	ldr	r0, [pc, #20]	; (8001f88 <__io_getchar+0x2c>)
 8001f72:	f005 f9bf 	bl	80072f4 <HAL_UART_Receive>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d1f5      	bne.n	8001f68 <__io_getchar+0xc>
	{

	}
	return ch;
 8001f7c:	79fb      	ldrb	r3, [r7, #7]
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3708      	adds	r7, #8
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	20000ab4 	.word	0x20000ab4

08001f8c <Temperature_Test>:

float Temperature_Test(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b082      	sub	sp, #8
 8001f90:	af00      	add	r7, sp, #0
	float temp_value = 0;
 8001f92:	f04f 0300 	mov.w	r3, #0
 8001f96:	607b      	str	r3, [r7, #4]

	BSP_TSENSOR_Init();
 8001f98:	f001 f836 	bl	8003008 <BSP_TSENSOR_Init>
	temp_value = BSP_TSENSOR_ReadTemp();
 8001f9c:	f001 f850 	bl	8003040 <BSP_TSENSOR_ReadTemp>
 8001fa0:	ed87 0a01 	vstr	s0, [r7, #4]

	return temp_value;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	ee07 3a90 	vmov	s15, r3
}
 8001faa:	eeb0 0a67 	vmov.f32	s0, s15
 8001fae:	3708      	adds	r7, #8
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}

08001fb4 <Humidity_Test>:

float Humidity_Test(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b082      	sub	sp, #8
 8001fb8:	af00      	add	r7, sp, #0
	float humidity_value = 0;
 8001fba:	f04f 0300 	mov.w	r3, #0
 8001fbe:	607b      	str	r3, [r7, #4]

	BSP_HSENSOR_Init();
 8001fc0:	f000 fff4 	bl	8002fac <BSP_HSENSOR_Init>
	humidity_value = BSP_HSENSOR_ReadHumidity();
 8001fc4:	f001 f812 	bl	8002fec <BSP_HSENSOR_ReadHumidity>
 8001fc8:	ed87 0a01 	vstr	s0, [r7, #4]

	return humidity_value;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	ee07 3a90 	vmov	s15, r3
}
 8001fd2:	eeb0 0a67 	vmov.f32	s0, s15
 8001fd6:	3708      	adds	r7, #8
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}

08001fdc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001fdc:	b5b0      	push	{r4, r5, r7, lr}
 8001fde:	f5ad 6d87 	sub.w	sp, sp, #1080	; 0x438
 8001fe2:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001fe4:	f001 f9cc 	bl	8003380 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001fe8:	f000 f948 	bl	800227c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001fec:	f000 fa46 	bl	800247c <MX_GPIO_Init>
  MX_I2C2_Init();
 8001ff0:	f000 f996 	bl	8002320 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 8001ff4:	f000 fa12 	bl	800241c <MX_USART1_UART_Init>
  MX_SPI3_Init();
 8001ff8:	f000 f9d2 	bl	80023a0 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */
  printf("wifi-init\r\n");
 8001ffc:	488b      	ldr	r0, [pc, #556]	; (800222c <main+0x250>)
 8001ffe:	f006 fbb5 	bl	800876c <puts>
  WIFI_Status_t ret = WIFI_Init();
 8002002:	f000 fd49 	bl	8002a98 <WIFI_Init>
 8002006:	4603      	mov	r3, r0
 8002008:	f887 341f 	strb.w	r3, [r7, #1055]	; 0x41f
  if(ret != WIFI_STATUS_OK) {
 800200c:	f897 341f 	ldrb.w	r3, [r7, #1055]	; 0x41f
 8002010:	2b00      	cmp	r3, #0
 8002012:	d005      	beq.n	8002020 <main+0x44>
	  printf("Failed to initialize Wi-Fi [%d] \r\n", ret);
 8002014:	f897 341f 	ldrb.w	r3, [r7, #1055]	; 0x41f
 8002018:	4619      	mov	r1, r3
 800201a:	4885      	ldr	r0, [pc, #532]	; (8002230 <main+0x254>)
 800201c:	f006 fb20 	bl	8008660 <iprintf>
  }
  uint8_t MAC_Addr[6];
  if(WIFI_GetMAC_Address(MAC_Addr) == WIFI_STATUS_OK)
 8002020:	f207 430c 	addw	r3, r7, #1036	; 0x40c
 8002024:	4618      	mov	r0, r3
 8002026:	f000 fd85 	bl	8002b34 <WIFI_GetMAC_Address>
 800202a:	4603      	mov	r3, r0
 800202c:	2b00      	cmp	r3, #0
 800202e:	d118      	bne.n	8002062 <main+0x86>
  {
	  printf("> es-wifi module MAC Address : %X:%X:%X:%X:%X:%X\r\n",
		MAC_Addr[0],
 8002030:	f897 340c 	ldrb.w	r3, [r7, #1036]	; 0x40c
	  printf("> es-wifi module MAC Address : %X:%X:%X:%X:%X:%X\r\n",
 8002034:	4618      	mov	r0, r3
		MAC_Addr[1],
 8002036:	f897 340d 	ldrb.w	r3, [r7, #1037]	; 0x40d
	  printf("> es-wifi module MAC Address : %X:%X:%X:%X:%X:%X\r\n",
 800203a:	461c      	mov	r4, r3
		MAC_Addr[2],
 800203c:	f897 340e 	ldrb.w	r3, [r7, #1038]	; 0x40e
	  printf("> es-wifi module MAC Address : %X:%X:%X:%X:%X:%X\r\n",
 8002040:	461d      	mov	r5, r3
		MAC_Addr[3],
 8002042:	f897 340f 	ldrb.w	r3, [r7, #1039]	; 0x40f
		MAC_Addr[4],
 8002046:	f897 2410 	ldrb.w	r2, [r7, #1040]	; 0x410
		MAC_Addr[5]);
 800204a:	f897 1411 	ldrb.w	r1, [r7, #1041]	; 0x411
	  printf("> es-wifi module MAC Address : %X:%X:%X:%X:%X:%X\r\n",
 800204e:	9102      	str	r1, [sp, #8]
 8002050:	9201      	str	r2, [sp, #4]
 8002052:	9300      	str	r3, [sp, #0]
 8002054:	462b      	mov	r3, r5
 8002056:	4622      	mov	r2, r4
 8002058:	4601      	mov	r1, r0
 800205a:	4876      	ldr	r0, [pc, #472]	; (8002234 <main+0x258>)
 800205c:	f006 fb00 	bl	8008660 <iprintf>
 8002060:	e002      	b.n	8002068 <main+0x8c>
  }
  else
  {
	  printf("> ERROR : CANNOT got MAC address\r\n");
 8002062:	4875      	ldr	r0, [pc, #468]	; (8002238 <main+0x25c>)
 8002064:	f006 fb82 	bl	800876c <puts>
  }

  printf("wifi-ssid-pass-connect\r\n");
 8002068:	4874      	ldr	r0, [pc, #464]	; (800223c <main+0x260>)
 800206a:	f006 fb7f 	bl	800876c <puts>
  ret = WIFI_Connect("Test", "12345678", WIFI_ECN_WPA2_PSK);
 800206e:	2203      	movs	r2, #3
 8002070:	4973      	ldr	r1, [pc, #460]	; (8002240 <main+0x264>)
 8002072:	4874      	ldr	r0, [pc, #464]	; (8002244 <main+0x268>)
 8002074:	f000 fd3c 	bl	8002af0 <WIFI_Connect>
 8002078:	4603      	mov	r3, r0
 800207a:	f887 341f 	strb.w	r3, [r7, #1055]	; 0x41f
  if(ret != WIFI_STATUS_OK)
 800207e:	f897 341f 	ldrb.w	r3, [r7, #1055]	; 0x41f
 8002082:	2b00      	cmp	r3, #0
 8002084:	d005      	beq.n	8002092 <main+0xb6>
  {
	  printf("failed to connect AP [%d]\r\n", ret);
 8002086:	f897 341f 	ldrb.w	r3, [r7, #1055]	; 0x41f
 800208a:	4619      	mov	r1, r3
 800208c:	486e      	ldr	r0, [pc, #440]	; (8002248 <main+0x26c>)
 800208e:	f006 fae7 	bl	8008660 <iprintf>
  }

  uint8_t IP_Addr[4];
  if(WIFI_GetIP_Address(IP_Addr) == WIFI_STATUS_OK)
 8002092:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8002096:	4618      	mov	r0, r3
 8002098:	f000 fd62 	bl	8002b60 <WIFI_GetIP_Address>
 800209c:	4603      	mov	r3, r0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d10f      	bne.n	80020c2 <main+0xe6>
  {
	  printf(">es-wifi module got IP Address : %d.%d.%d.%d.\r\n",
		IP_Addr[0],
 80020a2:	f897 3408 	ldrb.w	r3, [r7, #1032]	; 0x408
	  printf(">es-wifi module got IP Address : %d.%d.%d.%d.\r\n",
 80020a6:	4619      	mov	r1, r3
		IP_Addr[2],
 80020a8:	f897 340a 	ldrb.w	r3, [r7, #1034]	; 0x40a
	  printf(">es-wifi module got IP Address : %d.%d.%d.%d.\r\n",
 80020ac:	461a      	mov	r2, r3
		IP_Addr[3],
 80020ae:	f897 340b 	ldrb.w	r3, [r7, #1035]	; 0x40b
	  printf(">es-wifi module got IP Address : %d.%d.%d.%d.\r\n",
 80020b2:	4618      	mov	r0, r3
		IP_Addr[4]);
 80020b4:	f897 340c 	ldrb.w	r3, [r7, #1036]	; 0x40c
	  printf(">es-wifi module got IP Address : %d.%d.%d.%d.\r\n",
 80020b8:	9300      	str	r3, [sp, #0]
 80020ba:	4603      	mov	r3, r0
 80020bc:	4863      	ldr	r0, [pc, #396]	; (800224c <main+0x270>)
 80020be:	f006 facf 	bl	8008660 <iprintf>
  }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  printf("cloud connect\r\n");
 80020c2:	4863      	ldr	r0, [pc, #396]	; (8002250 <main+0x274>)
 80020c4:	f006 fb52 	bl	800876c <puts>

  float tmp = 0.0;
 80020c8:	f04f 0300 	mov.w	r3, #0
 80020cc:	f507 6283 	add.w	r2, r7, #1048	; 0x418
 80020d0:	6013      	str	r3, [r2, #0]
  float hum = 0.0;
 80020d2:	f04f 0300 	mov.w	r3, #0
 80020d6:	f207 4214 	addw	r2, r7, #1044	; 0x414
 80020da:	6013      	str	r3, [r2, #0]

  uint8_t req_data[BUF_SZ];
  bzero(req_data, BUF_SZ);
 80020dc:	f107 0308 	add.w	r3, r7, #8
 80020e0:	4618      	mov	r0, r3
 80020e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020e6:	461a      	mov	r2, r3
 80020e8:	2100      	movs	r1, #0
 80020ea:	f005 fe47 	bl	8007d7c <memset>
  uint16_t sent_data_len = 0;
 80020ee:	1dbb      	adds	r3, r7, #6
 80020f0:	2200      	movs	r2, #0
 80020f2:	801a      	strh	r2, [r3, #0]
  float field1 = 0.0;
 80020f4:	f04f 0300 	mov.w	r3, #0
 80020f8:	f207 4224 	addw	r2, r7, #1060	; 0x424
 80020fc:	6013      	str	r3, [r2, #0]
  float field2 = 0.0;
 80020fe:	f04f 0300 	mov.w	r3, #0
 8002102:	f507 6284 	add.w	r2, r7, #1056	; 0x420
 8002106:	6013      	str	r3, [r2, #0]

  while (1)
  {
	  User_LED(30000);
 8002108:	f247 5030 	movw	r0, #30000	; 0x7530
 800210c:	f7ff fefe 	bl	8001f0c <User_LED>

	  if(cmddata_rdy_rising_event==1)
 8002110:	4b50      	ldr	r3, [pc, #320]	; (8002254 <main+0x278>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	2b01      	cmp	r3, #1
 8002116:	d158      	bne.n	80021ca <main+0x1ee>
	  {
		  uint8_t ipAddr[4];
		  ret = WIFI_GetHostAddress("api.thingspark.co.kr", ipAddr);
 8002118:	463b      	mov	r3, r7
 800211a:	4619      	mov	r1, r3
 800211c:	484e      	ldr	r0, [pc, #312]	; (8002258 <main+0x27c>)
 800211e:	f000 fd3b 	bl	8002b98 <WIFI_GetHostAddress>
 8002122:	4603      	mov	r3, r0
 8002124:	f887 341f 	strb.w	r3, [r7, #1055]	; 0x41f
		  if(ret != WIFI_STATUS_OK)
 8002128:	f897 341f 	ldrb.w	r3, [r7, #1055]	; 0x41f
 800212c:	2b00      	cmp	r3, #0
 800212e:	d005      	beq.n	800213c <main+0x160>
		  {
			  printf("Failed to get host address [%d]\r\n", ret);
 8002130:	f897 341f 	ldrb.w	r3, [r7, #1055]	; 0x41f
 8002134:	4619      	mov	r1, r3
 8002136:	4849      	ldr	r0, [pc, #292]	; (800225c <main+0x280>)
 8002138:	f006 fa92 	bl	8008660 <iprintf>
		  }
		  printf("wifi-thinspark-connect\r\n");
 800213c:	4848      	ldr	r0, [pc, #288]	; (8002260 <main+0x284>)
 800213e:	f006 fb15 	bl	800876c <puts>
		  ret=WIFI_OpenClientConnection(SOCKET_NUM, WIFI_TCP_PROTOCOL, "cloud-connect", ipAddr, 8480, 0);
 8002142:	463b      	mov	r3, r7
 8002144:	2200      	movs	r2, #0
 8002146:	9201      	str	r2, [sp, #4]
 8002148:	f242 1220 	movw	r2, #8480	; 0x2120
 800214c:	9200      	str	r2, [sp, #0]
 800214e:	4a45      	ldr	r2, [pc, #276]	; (8002264 <main+0x288>)
 8002150:	2100      	movs	r1, #0
 8002152:	2000      	movs	r0, #0
 8002154:	f000 fd38 	bl	8002bc8 <WIFI_OpenClientConnection>
 8002158:	4603      	mov	r3, r0
 800215a:	f887 341f 	strb.w	r3, [r7, #1055]	; 0x41f
		  HAL_Delay(1000);
 800215e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002162:	f001 f981 	bl	8003468 <HAL_Delay>
		  if(ret != WIFI_STATUS_OK)
 8002166:	f897 341f 	ldrb.w	r3, [r7, #1055]	; 0x41f
 800216a:	2b00      	cmp	r3, #0
 800216c:	d005      	beq.n	800217a <main+0x19e>
		  {
			  printf("Failed to connect to server [%d]\r\n", ret);
 800216e:	f897 341f 	ldrb.w	r3, [r7, #1055]	; 0x41f
 8002172:	4619      	mov	r1, r3
 8002174:	483c      	ldr	r0, [pc, #240]	; (8002268 <main+0x28c>)
 8002176:	f006 fa73 	bl	8008660 <iprintf>
		  }

		  sprintf(req_data, "GET /update?apiKey=R9djRGr0ErxHMZTb&field1=%f&field2=%f\r\n",field1,field2);
 800217a:	f207 4324 	addw	r3, r7, #1060	; 0x424
 800217e:	6818      	ldr	r0, [r3, #0]
 8002180:	f7fe f9e2 	bl	8000548 <__aeabi_f2d>
 8002184:	4604      	mov	r4, r0
 8002186:	460d      	mov	r5, r1
 8002188:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800218c:	6818      	ldr	r0, [r3, #0]
 800218e:	f7fe f9db 	bl	8000548 <__aeabi_f2d>
 8002192:	4602      	mov	r2, r0
 8002194:	460b      	mov	r3, r1
 8002196:	f107 0008 	add.w	r0, r7, #8
 800219a:	e9cd 2300 	strd	r2, r3, [sp]
 800219e:	4622      	mov	r2, r4
 80021a0:	462b      	mov	r3, r5
 80021a2:	4932      	ldr	r1, [pc, #200]	; (800226c <main+0x290>)
 80021a4:	f006 faea 	bl	800877c <siprintf>
		  WIFI_SendData(SOCKET_NUM, req_data, sizeof(req_data), &sent_data_len, TIMEOUT);
 80021a8:	1dbb      	adds	r3, r7, #6
 80021aa:	f107 0108 	add.w	r1, r7, #8
 80021ae:	2214      	movs	r2, #20
 80021b0:	9200      	str	r2, [sp, #0]
 80021b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80021b6:	2000      	movs	r0, #0
 80021b8:	f000 fd5c 	bl	8002c74 <WIFI_SendData>
		  HAL_Delay(1000);
 80021bc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80021c0:	f001 f952 	bl	8003468 <HAL_Delay>
		  WIFI_CloseClientConnection(SOCKET_NUM);
 80021c4:	2000      	movs	r0, #0
 80021c6:	f000 fd39 	bl	8002c3c <WIFI_CloseClientConnection>

	  }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  	  printf("loop\r\n");
 80021ca:	4829      	ldr	r0, [pc, #164]	; (8002270 <main+0x294>)
 80021cc:	f006 face 	bl	800876c <puts>

	  	  tmp = Temperature_Test();
 80021d0:	f7ff fedc 	bl	8001f8c <Temperature_Test>
 80021d4:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 80021d8:	ed83 0a00 	vstr	s0, [r3]
	  	  hum = Humidity_Test();
 80021dc:	f7ff feea 	bl	8001fb4 <Humidity_Test>
 80021e0:	f207 4314 	addw	r3, r7, #1044	; 0x414
 80021e4:	ed83 0a00 	vstr	s0, [r3]

	  	  printf("Temperature: %.2f\r\n",tmp);
 80021e8:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 80021ec:	6818      	ldr	r0, [r3, #0]
 80021ee:	f7fe f9ab 	bl	8000548 <__aeabi_f2d>
 80021f2:	4602      	mov	r2, r0
 80021f4:	460b      	mov	r3, r1
 80021f6:	481f      	ldr	r0, [pc, #124]	; (8002274 <main+0x298>)
 80021f8:	f006 fa32 	bl	8008660 <iprintf>
	  	  field1 = tmp;
 80021fc:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f207 4224 	addw	r2, r7, #1060	; 0x424
 8002206:	6013      	str	r3, [r2, #0]
	  	  field2 = hum;
 8002208:	f207 4314 	addw	r3, r7, #1044	; 0x414
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f507 6284 	add.w	r2, r7, #1056	; 0x420
 8002212:	6013      	str	r3, [r2, #0]
	  	  printf("humidity: %.2f\r\n",hum);
 8002214:	f207 4314 	addw	r3, r7, #1044	; 0x414
 8002218:	6818      	ldr	r0, [r3, #0]
 800221a:	f7fe f995 	bl	8000548 <__aeabi_f2d>
 800221e:	4602      	mov	r2, r0
 8002220:	460b      	mov	r3, r1
 8002222:	4815      	ldr	r0, [pc, #84]	; (8002278 <main+0x29c>)
 8002224:	f006 fa1c 	bl	8008660 <iprintf>
	  User_LED(30000);
 8002228:	e76e      	b.n	8002108 <main+0x12c>
 800222a:	bf00      	nop
 800222c:	0800aef0 	.word	0x0800aef0
 8002230:	0800aefc 	.word	0x0800aefc
 8002234:	0800af20 	.word	0x0800af20
 8002238:	0800af54 	.word	0x0800af54
 800223c:	0800af78 	.word	0x0800af78
 8002240:	0800af90 	.word	0x0800af90
 8002244:	0800af9c 	.word	0x0800af9c
 8002248:	0800afa4 	.word	0x0800afa4
 800224c:	0800afc0 	.word	0x0800afc0
 8002250:	0800aff0 	.word	0x0800aff0
 8002254:	20000000 	.word	0x20000000
 8002258:	0800b000 	.word	0x0800b000
 800225c:	0800b018 	.word	0x0800b018
 8002260:	0800b03c 	.word	0x0800b03c
 8002264:	0800b054 	.word	0x0800b054
 8002268:	0800b064 	.word	0x0800b064
 800226c:	0800b088 	.word	0x0800b088
 8002270:	0800b0c4 	.word	0x0800b0c4
 8002274:	0800b0cc 	.word	0x0800b0cc
 8002278:	0800b0e0 	.word	0x0800b0e0

0800227c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b096      	sub	sp, #88	; 0x58
 8002280:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002282:	f107 0314 	add.w	r3, r7, #20
 8002286:	2244      	movs	r2, #68	; 0x44
 8002288:	2100      	movs	r1, #0
 800228a:	4618      	mov	r0, r3
 800228c:	f005 fd76 	bl	8007d7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002290:	463b      	mov	r3, r7
 8002292:	2200      	movs	r2, #0
 8002294:	601a      	str	r2, [r3, #0]
 8002296:	605a      	str	r2, [r3, #4]
 8002298:	609a      	str	r2, [r3, #8]
 800229a:	60da      	str	r2, [r3, #12]
 800229c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800229e:	f44f 7000 	mov.w	r0, #512	; 0x200
 80022a2:	f002 fbcd 	bl	8004a40 <HAL_PWREx_ControlVoltageScaling>
 80022a6:	4603      	mov	r3, r0
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d001      	beq.n	80022b0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80022ac:	f000 f968 	bl	8002580 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80022b0:	2310      	movs	r3, #16
 80022b2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80022b4:	2301      	movs	r3, #1
 80022b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80022b8:	2300      	movs	r3, #0
 80022ba:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80022bc:	2360      	movs	r3, #96	; 0x60
 80022be:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80022c0:	2302      	movs	r3, #2
 80022c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80022c4:	2301      	movs	r3, #1
 80022c6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80022c8:	2301      	movs	r3, #1
 80022ca:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 30;
 80022cc:	231e      	movs	r3, #30
 80022ce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80022d0:	2307      	movs	r3, #7
 80022d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80022d4:	2302      	movs	r3, #2
 80022d6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80022d8:	2302      	movs	r3, #2
 80022da:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80022dc:	f107 0314 	add.w	r3, r7, #20
 80022e0:	4618      	mov	r0, r3
 80022e2:	f002 fc03 	bl	8004aec <HAL_RCC_OscConfig>
 80022e6:	4603      	mov	r3, r0
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d001      	beq.n	80022f0 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80022ec:	f000 f948 	bl	8002580 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80022f0:	230f      	movs	r3, #15
 80022f2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80022f4:	2303      	movs	r3, #3
 80022f6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80022f8:	2300      	movs	r3, #0
 80022fa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80022fc:	2300      	movs	r3, #0
 80022fe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002300:	2300      	movs	r3, #0
 8002302:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002304:	463b      	mov	r3, r7
 8002306:	2103      	movs	r1, #3
 8002308:	4618      	mov	r0, r3
 800230a:	f002 ffd5 	bl	80052b8 <HAL_RCC_ClockConfig>
 800230e:	4603      	mov	r3, r0
 8002310:	2b00      	cmp	r3, #0
 8002312:	d001      	beq.n	8002318 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8002314:	f000 f934 	bl	8002580 <Error_Handler>
  }
}
 8002318:	bf00      	nop
 800231a:	3758      	adds	r7, #88	; 0x58
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}

08002320 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002324:	4b1b      	ldr	r3, [pc, #108]	; (8002394 <MX_I2C2_Init+0x74>)
 8002326:	4a1c      	ldr	r2, [pc, #112]	; (8002398 <MX_I2C2_Init+0x78>)
 8002328:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x107075B0;
 800232a:	4b1a      	ldr	r3, [pc, #104]	; (8002394 <MX_I2C2_Init+0x74>)
 800232c:	4a1b      	ldr	r2, [pc, #108]	; (800239c <MX_I2C2_Init+0x7c>)
 800232e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8002330:	4b18      	ldr	r3, [pc, #96]	; (8002394 <MX_I2C2_Init+0x74>)
 8002332:	2200      	movs	r2, #0
 8002334:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002336:	4b17      	ldr	r3, [pc, #92]	; (8002394 <MX_I2C2_Init+0x74>)
 8002338:	2201      	movs	r2, #1
 800233a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800233c:	4b15      	ldr	r3, [pc, #84]	; (8002394 <MX_I2C2_Init+0x74>)
 800233e:	2200      	movs	r2, #0
 8002340:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8002342:	4b14      	ldr	r3, [pc, #80]	; (8002394 <MX_I2C2_Init+0x74>)
 8002344:	2200      	movs	r2, #0
 8002346:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002348:	4b12      	ldr	r3, [pc, #72]	; (8002394 <MX_I2C2_Init+0x74>)
 800234a:	2200      	movs	r2, #0
 800234c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800234e:	4b11      	ldr	r3, [pc, #68]	; (8002394 <MX_I2C2_Init+0x74>)
 8002350:	2200      	movs	r2, #0
 8002352:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002354:	4b0f      	ldr	r3, [pc, #60]	; (8002394 <MX_I2C2_Init+0x74>)
 8002356:	2200      	movs	r2, #0
 8002358:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800235a:	480e      	ldr	r0, [pc, #56]	; (8002394 <MX_I2C2_Init+0x74>)
 800235c:	f001 fd37 	bl	8003dce <HAL_I2C_Init>
 8002360:	4603      	mov	r3, r0
 8002362:	2b00      	cmp	r3, #0
 8002364:	d001      	beq.n	800236a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8002366:	f000 f90b 	bl	8002580 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800236a:	2100      	movs	r1, #0
 800236c:	4809      	ldr	r0, [pc, #36]	; (8002394 <MX_I2C2_Init+0x74>)
 800236e:	f002 fac1 	bl	80048f4 <HAL_I2CEx_ConfigAnalogFilter>
 8002372:	4603      	mov	r3, r0
 8002374:	2b00      	cmp	r3, #0
 8002376:	d001      	beq.n	800237c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8002378:	f000 f902 	bl	8002580 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800237c:	2100      	movs	r1, #0
 800237e:	4805      	ldr	r0, [pc, #20]	; (8002394 <MX_I2C2_Init+0x74>)
 8002380:	f002 fb03 	bl	800498a <HAL_I2CEx_ConfigDigitalFilter>
 8002384:	4603      	mov	r3, r0
 8002386:	2b00      	cmp	r3, #0
 8002388:	d001      	beq.n	800238e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800238a:	f000 f8f9 	bl	8002580 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800238e:	bf00      	nop
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	20000a04 	.word	0x20000a04
 8002398:	40005800 	.word	0x40005800
 800239c:	107075b0 	.word	0x107075b0

080023a0 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80023a4:	4b1b      	ldr	r3, [pc, #108]	; (8002414 <MX_SPI3_Init+0x74>)
 80023a6:	4a1c      	ldr	r2, [pc, #112]	; (8002418 <MX_SPI3_Init+0x78>)
 80023a8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80023aa:	4b1a      	ldr	r3, [pc, #104]	; (8002414 <MX_SPI3_Init+0x74>)
 80023ac:	f44f 7282 	mov.w	r2, #260	; 0x104
 80023b0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80023b2:	4b18      	ldr	r3, [pc, #96]	; (8002414 <MX_SPI3_Init+0x74>)
 80023b4:	2200      	movs	r2, #0
 80023b6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 80023b8:	4b16      	ldr	r3, [pc, #88]	; (8002414 <MX_SPI3_Init+0x74>)
 80023ba:	f44f 7240 	mov.w	r2, #768	; 0x300
 80023be:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80023c0:	4b14      	ldr	r3, [pc, #80]	; (8002414 <MX_SPI3_Init+0x74>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80023c6:	4b13      	ldr	r3, [pc, #76]	; (8002414 <MX_SPI3_Init+0x74>)
 80023c8:	2200      	movs	r2, #0
 80023ca:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80023cc:	4b11      	ldr	r3, [pc, #68]	; (8002414 <MX_SPI3_Init+0x74>)
 80023ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023d2:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80023d4:	4b0f      	ldr	r3, [pc, #60]	; (8002414 <MX_SPI3_Init+0x74>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80023da:	4b0e      	ldr	r3, [pc, #56]	; (8002414 <MX_SPI3_Init+0x74>)
 80023dc:	2200      	movs	r2, #0
 80023de:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80023e0:	4b0c      	ldr	r3, [pc, #48]	; (8002414 <MX_SPI3_Init+0x74>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80023e6:	4b0b      	ldr	r3, [pc, #44]	; (8002414 <MX_SPI3_Init+0x74>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80023ec:	4b09      	ldr	r3, [pc, #36]	; (8002414 <MX_SPI3_Init+0x74>)
 80023ee:	2207      	movs	r2, #7
 80023f0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80023f2:	4b08      	ldr	r3, [pc, #32]	; (8002414 <MX_SPI3_Init+0x74>)
 80023f4:	2200      	movs	r2, #0
 80023f6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80023f8:	4b06      	ldr	r3, [pc, #24]	; (8002414 <MX_SPI3_Init+0x74>)
 80023fa:	2208      	movs	r2, #8
 80023fc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80023fe:	4805      	ldr	r0, [pc, #20]	; (8002414 <MX_SPI3_Init+0x74>)
 8002400:	f003 fe1c 	bl	800603c <HAL_SPI_Init>
 8002404:	4603      	mov	r3, r0
 8002406:	2b00      	cmp	r3, #0
 8002408:	d001      	beq.n	800240e <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800240a:	f000 f8b9 	bl	8002580 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800240e:	bf00      	nop
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	20000a50 	.word	0x20000a50
 8002418:	40003c00 	.word	0x40003c00

0800241c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002420:	4b14      	ldr	r3, [pc, #80]	; (8002474 <MX_USART1_UART_Init+0x58>)
 8002422:	4a15      	ldr	r2, [pc, #84]	; (8002478 <MX_USART1_UART_Init+0x5c>)
 8002424:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002426:	4b13      	ldr	r3, [pc, #76]	; (8002474 <MX_USART1_UART_Init+0x58>)
 8002428:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800242c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800242e:	4b11      	ldr	r3, [pc, #68]	; (8002474 <MX_USART1_UART_Init+0x58>)
 8002430:	2200      	movs	r2, #0
 8002432:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002434:	4b0f      	ldr	r3, [pc, #60]	; (8002474 <MX_USART1_UART_Init+0x58>)
 8002436:	2200      	movs	r2, #0
 8002438:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800243a:	4b0e      	ldr	r3, [pc, #56]	; (8002474 <MX_USART1_UART_Init+0x58>)
 800243c:	2200      	movs	r2, #0
 800243e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002440:	4b0c      	ldr	r3, [pc, #48]	; (8002474 <MX_USART1_UART_Init+0x58>)
 8002442:	220c      	movs	r2, #12
 8002444:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002446:	4b0b      	ldr	r3, [pc, #44]	; (8002474 <MX_USART1_UART_Init+0x58>)
 8002448:	2200      	movs	r2, #0
 800244a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800244c:	4b09      	ldr	r3, [pc, #36]	; (8002474 <MX_USART1_UART_Init+0x58>)
 800244e:	2200      	movs	r2, #0
 8002450:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002452:	4b08      	ldr	r3, [pc, #32]	; (8002474 <MX_USART1_UART_Init+0x58>)
 8002454:	2200      	movs	r2, #0
 8002456:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002458:	4b06      	ldr	r3, [pc, #24]	; (8002474 <MX_USART1_UART_Init+0x58>)
 800245a:	2200      	movs	r2, #0
 800245c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800245e:	4805      	ldr	r0, [pc, #20]	; (8002474 <MX_USART1_UART_Init+0x58>)
 8002460:	f004 fe66 	bl	8007130 <HAL_UART_Init>
 8002464:	4603      	mov	r3, r0
 8002466:	2b00      	cmp	r3, #0
 8002468:	d001      	beq.n	800246e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800246a:	f000 f889 	bl	8002580 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800246e:	bf00      	nop
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	20000ab4 	.word	0x20000ab4
 8002478:	40013800 	.word	0x40013800

0800247c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b08a      	sub	sp, #40	; 0x28
 8002480:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002482:	f107 0314 	add.w	r3, r7, #20
 8002486:	2200      	movs	r2, #0
 8002488:	601a      	str	r2, [r3, #0]
 800248a:	605a      	str	r2, [r3, #4]
 800248c:	609a      	str	r2, [r3, #8]
 800248e:	60da      	str	r2, [r3, #12]
 8002490:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002492:	4b38      	ldr	r3, [pc, #224]	; (8002574 <MX_GPIO_Init+0xf8>)
 8002494:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002496:	4a37      	ldr	r2, [pc, #220]	; (8002574 <MX_GPIO_Init+0xf8>)
 8002498:	f043 0302 	orr.w	r3, r3, #2
 800249c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800249e:	4b35      	ldr	r3, [pc, #212]	; (8002574 <MX_GPIO_Init+0xf8>)
 80024a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024a2:	f003 0302 	and.w	r3, r3, #2
 80024a6:	613b      	str	r3, [r7, #16]
 80024a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80024aa:	4b32      	ldr	r3, [pc, #200]	; (8002574 <MX_GPIO_Init+0xf8>)
 80024ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024ae:	4a31      	ldr	r2, [pc, #196]	; (8002574 <MX_GPIO_Init+0xf8>)
 80024b0:	f043 0301 	orr.w	r3, r3, #1
 80024b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024b6:	4b2f      	ldr	r3, [pc, #188]	; (8002574 <MX_GPIO_Init+0xf8>)
 80024b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024ba:	f003 0301 	and.w	r3, r3, #1
 80024be:	60fb      	str	r3, [r7, #12]
 80024c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80024c2:	4b2c      	ldr	r3, [pc, #176]	; (8002574 <MX_GPIO_Init+0xf8>)
 80024c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024c6:	4a2b      	ldr	r2, [pc, #172]	; (8002574 <MX_GPIO_Init+0xf8>)
 80024c8:	f043 0304 	orr.w	r3, r3, #4
 80024cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024ce:	4b29      	ldr	r3, [pc, #164]	; (8002574 <MX_GPIO_Init+0xf8>)
 80024d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024d2:	f003 0304 	and.w	r3, r3, #4
 80024d6:	60bb      	str	r3, [r7, #8]
 80024d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80024da:	4b26      	ldr	r3, [pc, #152]	; (8002574 <MX_GPIO_Init+0xf8>)
 80024dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024de:	4a25      	ldr	r2, [pc, #148]	; (8002574 <MX_GPIO_Init+0xf8>)
 80024e0:	f043 0310 	orr.w	r3, r3, #16
 80024e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024e6:	4b23      	ldr	r3, [pc, #140]	; (8002574 <MX_GPIO_Init+0xf8>)
 80024e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024ea:	f003 0310 	and.w	r3, r3, #16
 80024ee:	607b      	str	r3, [r7, #4]
 80024f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, WIFI_BOOT0_Pin|WIFI_WAKEUP_Pin|USER_LED_Pin, GPIO_PIN_RESET);
 80024f2:	2200      	movs	r2, #0
 80024f4:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 80024f8:	481f      	ldr	r0, [pc, #124]	; (8002578 <MX_GPIO_Init+0xfc>)
 80024fa:	f001 fc13 	bl	8003d24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WIFI_CS_GPIO_Port, WIFI_CS_Pin, GPIO_PIN_RESET);
 80024fe:	2200      	movs	r2, #0
 8002500:	2101      	movs	r1, #1
 8002502:	481e      	ldr	r0, [pc, #120]	; (800257c <MX_GPIO_Init+0x100>)
 8002504:	f001 fc0e 	bl	8003d24 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : WIFI_BOOT0_Pin WIFI_WAKEUP_Pin USER_LED_Pin */
  GPIO_InitStruct.Pin = WIFI_BOOT0_Pin|WIFI_WAKEUP_Pin|USER_LED_Pin;
 8002508:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 800250c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800250e:	2301      	movs	r3, #1
 8002510:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002512:	2300      	movs	r3, #0
 8002514:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002516:	2300      	movs	r3, #0
 8002518:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800251a:	f107 0314 	add.w	r3, r7, #20
 800251e:	4619      	mov	r1, r3
 8002520:	4815      	ldr	r0, [pc, #84]	; (8002578 <MX_GPIO_Init+0xfc>)
 8002522:	f001 f949 	bl	80037b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : WIFI_CS_Pin */
  GPIO_InitStruct.Pin = WIFI_CS_Pin;
 8002526:	2301      	movs	r3, #1
 8002528:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800252a:	2301      	movs	r3, #1
 800252c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800252e:	2300      	movs	r3, #0
 8002530:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002532:	2300      	movs	r3, #0
 8002534:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(WIFI_CS_GPIO_Port, &GPIO_InitStruct);
 8002536:	f107 0314 	add.w	r3, r7, #20
 800253a:	4619      	mov	r1, r3
 800253c:	480f      	ldr	r0, [pc, #60]	; (800257c <MX_GPIO_Init+0x100>)
 800253e:	f001 f93b 	bl	80037b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : WIFI_INT_Pin */
  GPIO_InitStruct.Pin = WIFI_INT_Pin;
 8002542:	2302      	movs	r3, #2
 8002544:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002546:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800254a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800254c:	2300      	movs	r3, #0
 800254e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(WIFI_INT_GPIO_Port, &GPIO_InitStruct);
 8002550:	f107 0314 	add.w	r3, r7, #20
 8002554:	4619      	mov	r1, r3
 8002556:	4809      	ldr	r0, [pc, #36]	; (800257c <MX_GPIO_Init+0x100>)
 8002558:	f001 f92e 	bl	80037b8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 13, 0);
 800255c:	2200      	movs	r2, #0
 800255e:	210d      	movs	r1, #13
 8002560:	2007      	movs	r0, #7
 8002562:	f001 f8a4 	bl	80036ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002566:	2007      	movs	r0, #7
 8002568:	f001 f8bd 	bl	80036e6 <HAL_NVIC_EnableIRQ>

}
 800256c:	bf00      	nop
 800256e:	3728      	adds	r7, #40	; 0x28
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}
 8002574:	40021000 	.word	0x40021000
 8002578:	48000400 	.word	0x48000400
 800257c:	48001000 	.word	0x48001000

08002580 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002580:	b480      	push	{r7}
 8002582:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002584:	b672      	cpsid	i
}
 8002586:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002588:	e7fe      	b.n	8002588 <Error_Handler+0x8>
	...

0800258c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800258c:	b480      	push	{r7}
 800258e:	b083      	sub	sp, #12
 8002590:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002592:	4b0f      	ldr	r3, [pc, #60]	; (80025d0 <HAL_MspInit+0x44>)
 8002594:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002596:	4a0e      	ldr	r2, [pc, #56]	; (80025d0 <HAL_MspInit+0x44>)
 8002598:	f043 0301 	orr.w	r3, r3, #1
 800259c:	6613      	str	r3, [r2, #96]	; 0x60
 800259e:	4b0c      	ldr	r3, [pc, #48]	; (80025d0 <HAL_MspInit+0x44>)
 80025a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025a2:	f003 0301 	and.w	r3, r3, #1
 80025a6:	607b      	str	r3, [r7, #4]
 80025a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80025aa:	4b09      	ldr	r3, [pc, #36]	; (80025d0 <HAL_MspInit+0x44>)
 80025ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025ae:	4a08      	ldr	r2, [pc, #32]	; (80025d0 <HAL_MspInit+0x44>)
 80025b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025b4:	6593      	str	r3, [r2, #88]	; 0x58
 80025b6:	4b06      	ldr	r3, [pc, #24]	; (80025d0 <HAL_MspInit+0x44>)
 80025b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025be:	603b      	str	r3, [r7, #0]
 80025c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025c2:	bf00      	nop
 80025c4:	370c      	adds	r7, #12
 80025c6:	46bd      	mov	sp, r7
 80025c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025cc:	4770      	bx	lr
 80025ce:	bf00      	nop
 80025d0:	40021000 	.word	0x40021000

080025d4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b0ac      	sub	sp, #176	; 0xb0
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025dc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80025e0:	2200      	movs	r2, #0
 80025e2:	601a      	str	r2, [r3, #0]
 80025e4:	605a      	str	r2, [r3, #4]
 80025e6:	609a      	str	r2, [r3, #8]
 80025e8:	60da      	str	r2, [r3, #12]
 80025ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80025ec:	f107 0314 	add.w	r3, r7, #20
 80025f0:	2288      	movs	r2, #136	; 0x88
 80025f2:	2100      	movs	r1, #0
 80025f4:	4618      	mov	r0, r3
 80025f6:	f005 fbc1 	bl	8007d7c <memset>
  if(hi2c->Instance==I2C2)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a21      	ldr	r2, [pc, #132]	; (8002684 <HAL_I2C_MspInit+0xb0>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d13b      	bne.n	800267c <HAL_I2C_MspInit+0xa8>
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002604:	2380      	movs	r3, #128	; 0x80
 8002606:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8002608:	2300      	movs	r3, #0
 800260a:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800260c:	f107 0314 	add.w	r3, r7, #20
 8002610:	4618      	mov	r0, r3
 8002612:	f003 f857 	bl	80056c4 <HAL_RCCEx_PeriphCLKConfig>
 8002616:	4603      	mov	r3, r0
 8002618:	2b00      	cmp	r3, #0
 800261a:	d001      	beq.n	8002620 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800261c:	f7ff ffb0 	bl	8002580 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002620:	4b19      	ldr	r3, [pc, #100]	; (8002688 <HAL_I2C_MspInit+0xb4>)
 8002622:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002624:	4a18      	ldr	r2, [pc, #96]	; (8002688 <HAL_I2C_MspInit+0xb4>)
 8002626:	f043 0302 	orr.w	r3, r3, #2
 800262a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800262c:	4b16      	ldr	r3, [pc, #88]	; (8002688 <HAL_I2C_MspInit+0xb4>)
 800262e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002630:	f003 0302 	and.w	r3, r3, #2
 8002634:	613b      	str	r3, [r7, #16]
 8002636:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002638:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800263c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002640:	2312      	movs	r3, #18
 8002642:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002646:	2300      	movs	r3, #0
 8002648:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800264c:	2303      	movs	r3, #3
 800264e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002652:	2304      	movs	r3, #4
 8002654:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002658:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800265c:	4619      	mov	r1, r3
 800265e:	480b      	ldr	r0, [pc, #44]	; (800268c <HAL_I2C_MspInit+0xb8>)
 8002660:	f001 f8aa 	bl	80037b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002664:	4b08      	ldr	r3, [pc, #32]	; (8002688 <HAL_I2C_MspInit+0xb4>)
 8002666:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002668:	4a07      	ldr	r2, [pc, #28]	; (8002688 <HAL_I2C_MspInit+0xb4>)
 800266a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800266e:	6593      	str	r3, [r2, #88]	; 0x58
 8002670:	4b05      	ldr	r3, [pc, #20]	; (8002688 <HAL_I2C_MspInit+0xb4>)
 8002672:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002674:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002678:	60fb      	str	r3, [r7, #12]
 800267a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800267c:	bf00      	nop
 800267e:	37b0      	adds	r7, #176	; 0xb0
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}
 8002684:	40005800 	.word	0x40005800
 8002688:	40021000 	.word	0x40021000
 800268c:	48000400 	.word	0x48000400

08002690 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b082      	sub	sp, #8
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a0b      	ldr	r2, [pc, #44]	; (80026cc <HAL_I2C_MspDeInit+0x3c>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d10f      	bne.n	80026c2 <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 80026a2:	4b0b      	ldr	r3, [pc, #44]	; (80026d0 <HAL_I2C_MspDeInit+0x40>)
 80026a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026a6:	4a0a      	ldr	r2, [pc, #40]	; (80026d0 <HAL_I2C_MspDeInit+0x40>)
 80026a8:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80026ac:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 80026ae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80026b2:	4808      	ldr	r0, [pc, #32]	; (80026d4 <HAL_I2C_MspDeInit+0x44>)
 80026b4:	f001 fa2a 	bl	8003b0c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_11);
 80026b8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80026bc:	4805      	ldr	r0, [pc, #20]	; (80026d4 <HAL_I2C_MspDeInit+0x44>)
 80026be:	f001 fa25 	bl	8003b0c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 80026c2:	bf00      	nop
 80026c4:	3708      	adds	r7, #8
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	40005800 	.word	0x40005800
 80026d0:	40021000 	.word	0x40021000
 80026d4:	48000400 	.word	0x48000400

080026d8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b08a      	sub	sp, #40	; 0x28
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026e0:	f107 0314 	add.w	r3, r7, #20
 80026e4:	2200      	movs	r2, #0
 80026e6:	601a      	str	r2, [r3, #0]
 80026e8:	605a      	str	r2, [r3, #4]
 80026ea:	609a      	str	r2, [r3, #8]
 80026ec:	60da      	str	r2, [r3, #12]
 80026ee:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a1b      	ldr	r2, [pc, #108]	; (8002764 <HAL_SPI_MspInit+0x8c>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d130      	bne.n	800275c <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80026fa:	4b1b      	ldr	r3, [pc, #108]	; (8002768 <HAL_SPI_MspInit+0x90>)
 80026fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026fe:	4a1a      	ldr	r2, [pc, #104]	; (8002768 <HAL_SPI_MspInit+0x90>)
 8002700:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002704:	6593      	str	r3, [r2, #88]	; 0x58
 8002706:	4b18      	ldr	r3, [pc, #96]	; (8002768 <HAL_SPI_MspInit+0x90>)
 8002708:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800270a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800270e:	613b      	str	r3, [r7, #16]
 8002710:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002712:	4b15      	ldr	r3, [pc, #84]	; (8002768 <HAL_SPI_MspInit+0x90>)
 8002714:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002716:	4a14      	ldr	r2, [pc, #80]	; (8002768 <HAL_SPI_MspInit+0x90>)
 8002718:	f043 0304 	orr.w	r3, r3, #4
 800271c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800271e:	4b12      	ldr	r3, [pc, #72]	; (8002768 <HAL_SPI_MspInit+0x90>)
 8002720:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002722:	f003 0304 	and.w	r3, r3, #4
 8002726:	60fb      	str	r3, [r7, #12]
 8002728:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800272a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800272e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002730:	2302      	movs	r3, #2
 8002732:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002734:	2300      	movs	r3, #0
 8002736:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002738:	2303      	movs	r3, #3
 800273a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800273c:	2306      	movs	r3, #6
 800273e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002740:	f107 0314 	add.w	r3, r7, #20
 8002744:	4619      	mov	r1, r3
 8002746:	4809      	ldr	r0, [pc, #36]	; (800276c <HAL_SPI_MspInit+0x94>)
 8002748:	f001 f836 	bl	80037b8 <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 3, 0);
 800274c:	2200      	movs	r2, #0
 800274e:	2103      	movs	r1, #3
 8002750:	2033      	movs	r0, #51	; 0x33
 8002752:	f000 ffac 	bl	80036ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8002756:	2033      	movs	r0, #51	; 0x33
 8002758:	f000 ffc5 	bl	80036e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800275c:	bf00      	nop
 800275e:	3728      	adds	r7, #40	; 0x28
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}
 8002764:	40003c00 	.word	0x40003c00
 8002768:	40021000 	.word	0x40021000
 800276c:	48000800 	.word	0x48000800

08002770 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b082      	sub	sp, #8
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI3)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a0a      	ldr	r2, [pc, #40]	; (80027a8 <HAL_SPI_MspDeInit+0x38>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d10d      	bne.n	800279e <HAL_SPI_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN SPI3_MspDeInit 0 */

  /* USER CODE END SPI3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI3_CLK_DISABLE();
 8002782:	4b0a      	ldr	r3, [pc, #40]	; (80027ac <HAL_SPI_MspDeInit+0x3c>)
 8002784:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002786:	4a09      	ldr	r2, [pc, #36]	; (80027ac <HAL_SPI_MspDeInit+0x3c>)
 8002788:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800278c:	6593      	str	r3, [r2, #88]	; 0x58
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12);
 800278e:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8002792:	4807      	ldr	r0, [pc, #28]	; (80027b0 <HAL_SPI_MspDeInit+0x40>)
 8002794:	f001 f9ba 	bl	8003b0c <HAL_GPIO_DeInit>

    /* SPI3 interrupt DeInit */
    HAL_NVIC_DisableIRQ(SPI3_IRQn);
 8002798:	2033      	movs	r0, #51	; 0x33
 800279a:	f000 ffb2 	bl	8003702 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN SPI3_MspDeInit 1 */

  /* USER CODE END SPI3_MspDeInit 1 */
  }

}
 800279e:	bf00      	nop
 80027a0:	3708      	adds	r7, #8
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	40003c00 	.word	0x40003c00
 80027ac:	40021000 	.word	0x40021000
 80027b0:	48000800 	.word	0x48000800

080027b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b0ac      	sub	sp, #176	; 0xb0
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027bc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80027c0:	2200      	movs	r2, #0
 80027c2:	601a      	str	r2, [r3, #0]
 80027c4:	605a      	str	r2, [r3, #4]
 80027c6:	609a      	str	r2, [r3, #8]
 80027c8:	60da      	str	r2, [r3, #12]
 80027ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80027cc:	f107 0314 	add.w	r3, r7, #20
 80027d0:	2288      	movs	r2, #136	; 0x88
 80027d2:	2100      	movs	r1, #0
 80027d4:	4618      	mov	r0, r3
 80027d6:	f005 fad1 	bl	8007d7c <memset>
  if(huart->Instance==USART1)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a21      	ldr	r2, [pc, #132]	; (8002864 <HAL_UART_MspInit+0xb0>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d13a      	bne.n	800285a <HAL_UART_MspInit+0xa6>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80027e4:	2301      	movs	r3, #1
 80027e6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80027e8:	2300      	movs	r3, #0
 80027ea:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80027ec:	f107 0314 	add.w	r3, r7, #20
 80027f0:	4618      	mov	r0, r3
 80027f2:	f002 ff67 	bl	80056c4 <HAL_RCCEx_PeriphCLKConfig>
 80027f6:	4603      	mov	r3, r0
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d001      	beq.n	8002800 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80027fc:	f7ff fec0 	bl	8002580 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002800:	4b19      	ldr	r3, [pc, #100]	; (8002868 <HAL_UART_MspInit+0xb4>)
 8002802:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002804:	4a18      	ldr	r2, [pc, #96]	; (8002868 <HAL_UART_MspInit+0xb4>)
 8002806:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800280a:	6613      	str	r3, [r2, #96]	; 0x60
 800280c:	4b16      	ldr	r3, [pc, #88]	; (8002868 <HAL_UART_MspInit+0xb4>)
 800280e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002810:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002814:	613b      	str	r3, [r7, #16]
 8002816:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002818:	4b13      	ldr	r3, [pc, #76]	; (8002868 <HAL_UART_MspInit+0xb4>)
 800281a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800281c:	4a12      	ldr	r2, [pc, #72]	; (8002868 <HAL_UART_MspInit+0xb4>)
 800281e:	f043 0302 	orr.w	r3, r3, #2
 8002822:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002824:	4b10      	ldr	r3, [pc, #64]	; (8002868 <HAL_UART_MspInit+0xb4>)
 8002826:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002828:	f003 0302 	and.w	r3, r3, #2
 800282c:	60fb      	str	r3, [r7, #12]
 800282e:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = Debug_Tx_Pin|Debug_Rx_Pin;
 8002830:	23c0      	movs	r3, #192	; 0xc0
 8002832:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002836:	2302      	movs	r3, #2
 8002838:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800283c:	2300      	movs	r3, #0
 800283e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002842:	2303      	movs	r3, #3
 8002844:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002848:	2307      	movs	r3, #7
 800284a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800284e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002852:	4619      	mov	r1, r3
 8002854:	4805      	ldr	r0, [pc, #20]	; (800286c <HAL_UART_MspInit+0xb8>)
 8002856:	f000 ffaf 	bl	80037b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800285a:	bf00      	nop
 800285c:	37b0      	adds	r7, #176	; 0xb0
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}
 8002862:	bf00      	nop
 8002864:	40013800 	.word	0x40013800
 8002868:	40021000 	.word	0x40021000
 800286c:	48000400 	.word	0x48000400

08002870 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002870:	b480      	push	{r7}
 8002872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002874:	e7fe      	b.n	8002874 <NMI_Handler+0x4>

08002876 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002876:	b480      	push	{r7}
 8002878:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800287a:	e7fe      	b.n	800287a <HardFault_Handler+0x4>

0800287c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800287c:	b480      	push	{r7}
 800287e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002880:	e7fe      	b.n	8002880 <MemManage_Handler+0x4>

08002882 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002882:	b480      	push	{r7}
 8002884:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002886:	e7fe      	b.n	8002886 <BusFault_Handler+0x4>

08002888 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002888:	b480      	push	{r7}
 800288a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800288c:	e7fe      	b.n	800288c <UsageFault_Handler+0x4>

0800288e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800288e:	b480      	push	{r7}
 8002890:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002892:	bf00      	nop
 8002894:	46bd      	mov	sp, r7
 8002896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289a:	4770      	bx	lr

0800289c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800289c:	b480      	push	{r7}
 800289e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80028a0:	bf00      	nop
 80028a2:	46bd      	mov	sp, r7
 80028a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a8:	4770      	bx	lr

080028aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80028aa:	b480      	push	{r7}
 80028ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80028ae:	bf00      	nop
 80028b0:	46bd      	mov	sp, r7
 80028b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b6:	4770      	bx	lr

080028b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80028bc:	f000 fdb4 	bl	8003428 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80028c0:	bf00      	nop
 80028c2:	bd80      	pop	{r7, pc}

080028c4 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80028c8:	2002      	movs	r0, #2
 80028ca:	f001 fa5d 	bl	8003d88 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80028ce:	bf00      	nop
 80028d0:	bd80      	pop	{r7, pc}
	...

080028d4 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 80028d8:	4802      	ldr	r0, [pc, #8]	; (80028e4 <SPI3_IRQHandler+0x10>)
 80028da:	f004 f92b 	bl	8006b34 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 80028de:	bf00      	nop
 80028e0:	bd80      	pop	{r7, pc}
 80028e2:	bf00      	nop
 80028e4:	20000a50 	.word	0x20000a50

080028e8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80028e8:	b480      	push	{r7}
 80028ea:	af00      	add	r7, sp, #0
	return 1;
 80028ec:	2301      	movs	r3, #1
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr

080028f8 <_kill>:

int _kill(int pid, int sig)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b082      	sub	sp, #8
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
 8002900:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002902:	f005 fa03 	bl	8007d0c <__errno>
 8002906:	4603      	mov	r3, r0
 8002908:	2216      	movs	r2, #22
 800290a:	601a      	str	r2, [r3, #0]
	return -1;
 800290c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002910:	4618      	mov	r0, r3
 8002912:	3708      	adds	r7, #8
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}

08002918 <_exit>:

void _exit (int status)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b082      	sub	sp, #8
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002920:	f04f 31ff 	mov.w	r1, #4294967295
 8002924:	6878      	ldr	r0, [r7, #4]
 8002926:	f7ff ffe7 	bl	80028f8 <_kill>
	while (1) {}		/* Make sure we hang here */
 800292a:	e7fe      	b.n	800292a <_exit+0x12>

0800292c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b086      	sub	sp, #24
 8002930:	af00      	add	r7, sp, #0
 8002932:	60f8      	str	r0, [r7, #12]
 8002934:	60b9      	str	r1, [r7, #8]
 8002936:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002938:	2300      	movs	r3, #0
 800293a:	617b      	str	r3, [r7, #20]
 800293c:	e00a      	b.n	8002954 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800293e:	f7ff fb0d 	bl	8001f5c <__io_getchar>
 8002942:	4601      	mov	r1, r0
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	1c5a      	adds	r2, r3, #1
 8002948:	60ba      	str	r2, [r7, #8]
 800294a:	b2ca      	uxtb	r2, r1
 800294c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	3301      	adds	r3, #1
 8002952:	617b      	str	r3, [r7, #20]
 8002954:	697a      	ldr	r2, [r7, #20]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	429a      	cmp	r2, r3
 800295a:	dbf0      	blt.n	800293e <_read+0x12>
	}

return len;
 800295c:	687b      	ldr	r3, [r7, #4]
}
 800295e:	4618      	mov	r0, r3
 8002960:	3718      	adds	r7, #24
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}

08002966 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002966:	b580      	push	{r7, lr}
 8002968:	b086      	sub	sp, #24
 800296a:	af00      	add	r7, sp, #0
 800296c:	60f8      	str	r0, [r7, #12]
 800296e:	60b9      	str	r1, [r7, #8]
 8002970:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002972:	2300      	movs	r3, #0
 8002974:	617b      	str	r3, [r7, #20]
 8002976:	e009      	b.n	800298c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	1c5a      	adds	r2, r3, #1
 800297c:	60ba      	str	r2, [r7, #8]
 800297e:	781b      	ldrb	r3, [r3, #0]
 8002980:	4618      	mov	r0, r3
 8002982:	f7ff fad5 	bl	8001f30 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	3301      	adds	r3, #1
 800298a:	617b      	str	r3, [r7, #20]
 800298c:	697a      	ldr	r2, [r7, #20]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	429a      	cmp	r2, r3
 8002992:	dbf1      	blt.n	8002978 <_write+0x12>
	}
	return len;
 8002994:	687b      	ldr	r3, [r7, #4]
}
 8002996:	4618      	mov	r0, r3
 8002998:	3718      	adds	r7, #24
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}

0800299e <_close>:

int _close(int file)
{
 800299e:	b480      	push	{r7}
 80029a0:	b083      	sub	sp, #12
 80029a2:	af00      	add	r7, sp, #0
 80029a4:	6078      	str	r0, [r7, #4]
	return -1;
 80029a6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	370c      	adds	r7, #12
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr

080029b6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80029b6:	b480      	push	{r7}
 80029b8:	b083      	sub	sp, #12
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	6078      	str	r0, [r7, #4]
 80029be:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80029c6:	605a      	str	r2, [r3, #4]
	return 0;
 80029c8:	2300      	movs	r3, #0
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	370c      	adds	r7, #12
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr

080029d6 <_isatty>:

int _isatty(int file)
{
 80029d6:	b480      	push	{r7}
 80029d8:	b083      	sub	sp, #12
 80029da:	af00      	add	r7, sp, #0
 80029dc:	6078      	str	r0, [r7, #4]
	return 1;
 80029de:	2301      	movs	r3, #1
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	370c      	adds	r7, #12
 80029e4:	46bd      	mov	sp, r7
 80029e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ea:	4770      	bx	lr

080029ec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b085      	sub	sp, #20
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	60f8      	str	r0, [r7, #12]
 80029f4:	60b9      	str	r1, [r7, #8]
 80029f6:	607a      	str	r2, [r7, #4]
	return 0;
 80029f8:	2300      	movs	r3, #0
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	3714      	adds	r7, #20
 80029fe:	46bd      	mov	sp, r7
 8002a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a04:	4770      	bx	lr
	...

08002a08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b086      	sub	sp, #24
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002a10:	4a14      	ldr	r2, [pc, #80]	; (8002a64 <_sbrk+0x5c>)
 8002a12:	4b15      	ldr	r3, [pc, #84]	; (8002a68 <_sbrk+0x60>)
 8002a14:	1ad3      	subs	r3, r2, r3
 8002a16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002a1c:	4b13      	ldr	r3, [pc, #76]	; (8002a6c <_sbrk+0x64>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d102      	bne.n	8002a2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a24:	4b11      	ldr	r3, [pc, #68]	; (8002a6c <_sbrk+0x64>)
 8002a26:	4a12      	ldr	r2, [pc, #72]	; (8002a70 <_sbrk+0x68>)
 8002a28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a2a:	4b10      	ldr	r3, [pc, #64]	; (8002a6c <_sbrk+0x64>)
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	4413      	add	r3, r2
 8002a32:	693a      	ldr	r2, [r7, #16]
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d207      	bcs.n	8002a48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002a38:	f005 f968 	bl	8007d0c <__errno>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	220c      	movs	r2, #12
 8002a40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002a42:	f04f 33ff 	mov.w	r3, #4294967295
 8002a46:	e009      	b.n	8002a5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a48:	4b08      	ldr	r3, [pc, #32]	; (8002a6c <_sbrk+0x64>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a4e:	4b07      	ldr	r3, [pc, #28]	; (8002a6c <_sbrk+0x64>)
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	4413      	add	r3, r2
 8002a56:	4a05      	ldr	r2, [pc, #20]	; (8002a6c <_sbrk+0x64>)
 8002a58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	3718      	adds	r7, #24
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}
 8002a64:	20018000 	.word	0x20018000
 8002a68:	00000400 	.word	0x00000400
 8002a6c:	20000218 	.word	0x20000218
 8002a70:	20000c20 	.word	0x20000c20

08002a74 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002a74:	b480      	push	{r7}
 8002a76:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002a78:	4b06      	ldr	r3, [pc, #24]	; (8002a94 <SystemInit+0x20>)
 8002a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a7e:	4a05      	ldr	r2, [pc, #20]	; (8002a94 <SystemInit+0x20>)
 8002a80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002a84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002a88:	bf00      	nop
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a90:	4770      	bx	lr
 8002a92:	bf00      	nop
 8002a94:	e000ed00 	.word	0xe000ed00

08002a98 <WIFI_Init>:
  * @brief  Initialiaze the WIFI core
  * @param  None
  * @retval Operation status
  */
WIFI_Status_t WIFI_Init(void)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b084      	sub	sp, #16
 8002a9c:	af02      	add	r7, sp, #8
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	71fb      	strb	r3, [r7, #7]

  if(ES_WIFI_RegisterBusIO(&EsWifiObj,
 8002aa2:	4b0d      	ldr	r3, [pc, #52]	; (8002ad8 <WIFI_Init+0x40>)
 8002aa4:	9301      	str	r3, [sp, #4]
 8002aa6:	4b0d      	ldr	r3, [pc, #52]	; (8002adc <WIFI_Init+0x44>)
 8002aa8:	9300      	str	r3, [sp, #0]
 8002aaa:	4b0d      	ldr	r3, [pc, #52]	; (8002ae0 <WIFI_Init+0x48>)
 8002aac:	4a0d      	ldr	r2, [pc, #52]	; (8002ae4 <WIFI_Init+0x4c>)
 8002aae:	490e      	ldr	r1, [pc, #56]	; (8002ae8 <WIFI_Init+0x50>)
 8002ab0:	480e      	ldr	r0, [pc, #56]	; (8002aec <WIFI_Init+0x54>)
 8002ab2:	f7fe fcf9 	bl	80014a8 <ES_WIFI_RegisterBusIO>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d107      	bne.n	8002acc <WIFI_Init+0x34>
                           SPI_WIFI_Delay,
                           SPI_WIFI_SendData,
                           SPI_WIFI_ReceiveData) == ES_WIFI_STATUS_OK)
  {

    if(ES_WIFI_Init(&EsWifiObj) == ES_WIFI_STATUS_OK)
 8002abc:	480b      	ldr	r0, [pc, #44]	; (8002aec <WIFI_Init+0x54>)
 8002abe:	f7fe fcc5 	bl	800144c <ES_WIFI_Init>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d101      	bne.n	8002acc <WIFI_Init+0x34>
    {
      ret = WIFI_STATUS_OK;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	71fb      	strb	r3, [r7, #7]
    }
  }
  return ret;
 8002acc:	79fb      	ldrb	r3, [r7, #7]
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3708      	adds	r7, #8
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	08001ce5 	.word	0x08001ce5
 8002adc:	08001e11 	.word	0x08001e11
 8002ae0:	08001ef5 	.word	0x08001ef5
 8002ae4:	08001cd1 	.word	0x08001cd1
 8002ae8:	08001b6d 	.word	0x08001b6d
 8002aec:	20000298 	.word	0x20000298

08002af0 <WIFI_Connect>:
  */
WIFI_Status_t WIFI_Connect(
                             const char* SSID,
                             const char* Password,
                             WIFI_Ecn_t ecn)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b086      	sub	sp, #24
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	60f8      	str	r0, [r7, #12]
 8002af8:	60b9      	str	r1, [r7, #8]
 8002afa:	4613      	mov	r3, r2
 8002afc:	71fb      	strb	r3, [r7, #7]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	75fb      	strb	r3, [r7, #23]

  if(ES_WIFI_Connect(&EsWifiObj, SSID, Password, (ES_WIFI_SecurityType_t) ecn) == ES_WIFI_STATUS_OK)
 8002b02:	79fb      	ldrb	r3, [r7, #7]
 8002b04:	68ba      	ldr	r2, [r7, #8]
 8002b06:	68f9      	ldr	r1, [r7, #12]
 8002b08:	4809      	ldr	r0, [pc, #36]	; (8002b30 <WIFI_Connect+0x40>)
 8002b0a:	f7fe fcfd 	bl	8001508 <ES_WIFI_Connect>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d107      	bne.n	8002b24 <WIFI_Connect+0x34>
  {
    if(ES_WIFI_GetNetworkSettings(&EsWifiObj) == ES_WIFI_STATUS_OK)
 8002b14:	4806      	ldr	r0, [pc, #24]	; (8002b30 <WIFI_Connect+0x40>)
 8002b16:	f7fe fd6f 	bl	80015f8 <ES_WIFI_GetNetworkSettings>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d101      	bne.n	8002b24 <WIFI_Connect+0x34>
    {
       ret = WIFI_STATUS_OK;
 8002b20:	2300      	movs	r3, #0
 8002b22:	75fb      	strb	r3, [r7, #23]
    }

  }
  return ret;
 8002b24:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	3718      	adds	r7, #24
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}
 8002b2e:	bf00      	nop
 8002b30:	20000298 	.word	0x20000298

08002b34 <WIFI_GetMAC_Address>:
/**
  * @brief  This function retrieves the WiFi interface's MAC address.
  * @retval Operation Status.
  */
WIFI_Status_t WIFI_GetMAC_Address(uint8_t  *mac)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b084      	sub	sp, #16
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	73fb      	strb	r3, [r7, #15]

  if(ES_WIFI_GetMACAddress(&EsWifiObj, mac) == ES_WIFI_STATUS_OK)
 8002b40:	6879      	ldr	r1, [r7, #4]
 8002b42:	4806      	ldr	r0, [pc, #24]	; (8002b5c <WIFI_GetMAC_Address+0x28>)
 8002b44:	f7fe fd82 	bl	800164c <ES_WIFI_GetMACAddress>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d101      	bne.n	8002b52 <WIFI_GetMAC_Address+0x1e>
  {
    ret = WIFI_STATUS_OK;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	73fb      	strb	r3, [r7, #15]
  }
  return ret;
 8002b52:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	3710      	adds	r7, #16
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}
 8002b5c:	20000298 	.word	0x20000298

08002b60 <WIFI_GetIP_Address>:
/**
  * @brief  This function retrieves the WiFi interface's IP address.
  * @retval Operation Status.
  */
WIFI_Status_t WIFI_GetIP_Address (uint8_t  *ipaddr)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b085      	sub	sp, #20
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	73fb      	strb	r3, [r7, #15]

  if(EsWifiObj.NetSettings.IsConnected)
 8002b6c:	4b09      	ldr	r3, [pc, #36]	; (8002b94 <WIFI_GetIP_Address+0x34>)
 8002b6e:	f893 30ca 	ldrb.w	r3, [r3, #202]	; 0xca
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d007      	beq.n	8002b86 <WIFI_GetIP_Address+0x26>
 8002b76:	4b07      	ldr	r3, [pc, #28]	; (8002b94 <WIFI_GetIP_Address+0x34>)
 8002b78:	f8d3 30cd 	ldr.w	r3, [r3, #205]	; 0xcd
 8002b7c:	461a      	mov	r2, r3
  {
    memcpy(ipaddr, EsWifiObj.NetSettings.IP_Addr, 4);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	601a      	str	r2, [r3, #0]
    ret = WIFI_STATUS_OK;
 8002b82:	2300      	movs	r3, #0
 8002b84:	73fb      	strb	r3, [r7, #15]
  }
  return ret;
 8002b86:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	3714      	adds	r7, #20
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b92:	4770      	bx	lr
 8002b94:	20000298 	.word	0x20000298

08002b98 <WIFI_GetHostAddress>:
  * @param  location : Host URL
  * @param  ipaddr : array of the IP address
  * @retval Operation status
  */
WIFI_Status_t WIFI_GetHostAddress( char* location, uint8_t* ipaddr)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b084      	sub	sp, #16
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
 8002ba0:	6039      	str	r1, [r7, #0]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	73fb      	strb	r3, [r7, #15]

  if (ES_WIFI_DNS_LookUp(&EsWifiObj, location, ipaddr) == ES_WIFI_STATUS_OK)
 8002ba6:	683a      	ldr	r2, [r7, #0]
 8002ba8:	6879      	ldr	r1, [r7, #4]
 8002baa:	4806      	ldr	r0, [pc, #24]	; (8002bc4 <WIFI_GetHostAddress+0x2c>)
 8002bac:	f7fe fd80 	bl	80016b0 <ES_WIFI_DNS_LookUp>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d101      	bne.n	8002bba <WIFI_GetHostAddress+0x22>
  {
    return WIFI_STATUS_OK;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	e000      	b.n	8002bbc <WIFI_GetHostAddress+0x24>
  }

  return ret;
 8002bba:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	3710      	adds	r7, #16
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}
 8002bc4:	20000298 	.word	0x20000298

08002bc8 <WIFI_OpenClientConnection>:
  * @param  port : Remote port
  * @param  local_port : Local port
  * @retval Operation status
  */
WIFI_Status_t WIFI_OpenClientConnection(uint32_t socket, WIFI_Protocol_t type, const char* name, uint8_t* ipaddr, uint16_t port, uint16_t local_port)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b08a      	sub	sp, #40	; 0x28
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	60f8      	str	r0, [r7, #12]
 8002bd0:	607a      	str	r2, [r7, #4]
 8002bd2:	603b      	str	r3, [r7, #0]
 8002bd4:	460b      	mov	r3, r1
 8002bd6:	72fb      	strb	r3, [r7, #11]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  ES_WIFI_Conn_t conn;

  conn.Number = socket;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	757b      	strb	r3, [r7, #21]
  conn.RemotePort = port;
 8002be4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8002be6:	82fb      	strh	r3, [r7, #22]
  conn.LocalPort = local_port;
 8002be8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8002bea:	833b      	strh	r3, [r7, #24]
  conn.Type = (type == WIFI_TCP_PROTOCOL)? ES_WIFI_TCP_CONNECTION : ES_WIFI_UDP_CONNECTION;
 8002bec:	7afb      	ldrb	r3, [r7, #11]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	bf14      	ite	ne
 8002bf2:	2301      	movne	r3, #1
 8002bf4:	2300      	moveq	r3, #0
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	753b      	strb	r3, [r7, #20]
  conn.RemoteIP[0] = ipaddr[0];
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	781b      	ldrb	r3, [r3, #0]
 8002bfe:	76bb      	strb	r3, [r7, #26]
  conn.RemoteIP[1] = ipaddr[1];
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	785b      	ldrb	r3, [r3, #1]
 8002c04:	76fb      	strb	r3, [r7, #27]
  conn.RemoteIP[2] = ipaddr[2];
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	789b      	ldrb	r3, [r3, #2]
 8002c0a:	773b      	strb	r3, [r7, #28]
  conn.RemoteIP[3] = ipaddr[3];
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	78db      	ldrb	r3, [r3, #3]
 8002c10:	777b      	strb	r3, [r7, #29]
  if(ES_WIFI_StartClientConnection(&EsWifiObj, &conn)== ES_WIFI_STATUS_OK)
 8002c12:	f107 0314 	add.w	r3, r7, #20
 8002c16:	4619      	mov	r1, r3
 8002c18:	4807      	ldr	r0, [pc, #28]	; (8002c38 <WIFI_OpenClientConnection+0x70>)
 8002c1a:	f7fe fd7d 	bl	8001718 <ES_WIFI_StartClientConnection>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d102      	bne.n	8002c2a <WIFI_OpenClientConnection+0x62>
  {
    ret = WIFI_STATUS_OK;
 8002c24:	2300      	movs	r3, #0
 8002c26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 8002c2a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	3728      	adds	r7, #40	; 0x28
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	bf00      	nop
 8002c38:	20000298 	.word	0x20000298

08002c3c <WIFI_CloseClientConnection>:
  * @param  port : Remote port
  * @param  local_port : Local port
  * @retval Operation status
  */
WIFI_Status_t WIFI_CloseClientConnection(uint32_t socket)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b088      	sub	sp, #32
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	77fb      	strb	r3, [r7, #31]
  ES_WIFI_Conn_t conn;
  conn.Number = socket;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	b2db      	uxtb	r3, r3
 8002c4c:	737b      	strb	r3, [r7, #13]

  if(ES_WIFI_StopClientConnection(&EsWifiObj, &conn)== ES_WIFI_STATUS_OK)
 8002c4e:	f107 030c 	add.w	r3, r7, #12
 8002c52:	4619      	mov	r1, r3
 8002c54:	4806      	ldr	r0, [pc, #24]	; (8002c70 <WIFI_CloseClientConnection+0x34>)
 8002c56:	f7fe fe15 	bl	8001884 <ES_WIFI_StopClientConnection>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d101      	bne.n	8002c64 <WIFI_CloseClientConnection+0x28>
  {
    ret = WIFI_STATUS_OK;
 8002c60:	2300      	movs	r3, #0
 8002c62:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 8002c64:	7ffb      	ldrb	r3, [r7, #31]
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	3720      	adds	r7, #32
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	bf00      	nop
 8002c70:	20000298 	.word	0x20000298

08002c74 <WIFI_SendData>:
  * @param  pdata : pointer to data to be sent
  * @param  len : length of data to be sent
  * @retval Operation status
  */
WIFI_Status_t WIFI_SendData(uint8_t socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *SentDatalen, uint32_t Timeout)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b088      	sub	sp, #32
 8002c78:	af02      	add	r7, sp, #8
 8002c7a:	60b9      	str	r1, [r7, #8]
 8002c7c:	607b      	str	r3, [r7, #4]
 8002c7e:	4603      	mov	r3, r0
 8002c80:	73fb      	strb	r3, [r7, #15]
 8002c82:	4613      	mov	r3, r2
 8002c84:	81bb      	strh	r3, [r7, #12]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	75fb      	strb	r3, [r7, #23]

    if(ES_WIFI_SendData(&EsWifiObj, socket, pdata, Reqlen, SentDatalen, Timeout) == ES_WIFI_STATUS_OK)
 8002c8a:	89ba      	ldrh	r2, [r7, #12]
 8002c8c:	7bf9      	ldrb	r1, [r7, #15]
 8002c8e:	6a3b      	ldr	r3, [r7, #32]
 8002c90:	9301      	str	r3, [sp, #4]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	9300      	str	r3, [sp, #0]
 8002c96:	4613      	mov	r3, r2
 8002c98:	68ba      	ldr	r2, [r7, #8]
 8002c9a:	4806      	ldr	r0, [pc, #24]	; (8002cb4 <WIFI_SendData+0x40>)
 8002c9c:	f7fe fe2c 	bl	80018f8 <ES_WIFI_SendData>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d101      	bne.n	8002caa <WIFI_SendData+0x36>
    {
      ret = WIFI_STATUS_OK;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	75fb      	strb	r3, [r7, #23]
    }

  return ret;
 8002caa:	7dfb      	ldrb	r3, [r7, #23]
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	3718      	adds	r7, #24
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}
 8002cb4:	20000298 	.word	0x20000298

08002cb8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002cb8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002cf0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002cbc:	f7ff feda 	bl	8002a74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002cc0:	480c      	ldr	r0, [pc, #48]	; (8002cf4 <LoopForever+0x6>)
  ldr r1, =_edata
 8002cc2:	490d      	ldr	r1, [pc, #52]	; (8002cf8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002cc4:	4a0d      	ldr	r2, [pc, #52]	; (8002cfc <LoopForever+0xe>)
  movs r3, #0
 8002cc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002cc8:	e002      	b.n	8002cd0 <LoopCopyDataInit>

08002cca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002cca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ccc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002cce:	3304      	adds	r3, #4

08002cd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002cd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002cd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002cd4:	d3f9      	bcc.n	8002cca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002cd6:	4a0a      	ldr	r2, [pc, #40]	; (8002d00 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002cd8:	4c0a      	ldr	r4, [pc, #40]	; (8002d04 <LoopForever+0x16>)
  movs r3, #0
 8002cda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002cdc:	e001      	b.n	8002ce2 <LoopFillZerobss>

08002cde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002cde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ce0:	3204      	adds	r2, #4

08002ce2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ce2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ce4:	d3fb      	bcc.n	8002cde <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002ce6:	f005 f817 	bl	8007d18 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002cea:	f7ff f977 	bl	8001fdc <main>

08002cee <LoopForever>:

LoopForever:
    b LoopForever
 8002cee:	e7fe      	b.n	8002cee <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002cf0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002cf4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002cf8:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 8002cfc:	0800b590 	.word	0x0800b590
  ldr r2, =_sbss
 8002d00:	200001fc 	.word	0x200001fc
  ldr r4, =_ebss
 8002d04:	20000c1c 	.word	0x20000c1c

08002d08 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002d08:	e7fe      	b.n	8002d08 <ADC1_2_IRQHandler>
	...

08002d0c <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b08a      	sub	sp, #40	; 0x28
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8002d14:	4b27      	ldr	r3, [pc, #156]	; (8002db4 <I2Cx_MspInit+0xa8>)
 8002d16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d18:	4a26      	ldr	r2, [pc, #152]	; (8002db4 <I2Cx_MspInit+0xa8>)
 8002d1a:	f043 0302 	orr.w	r3, r3, #2
 8002d1e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d20:	4b24      	ldr	r3, [pc, #144]	; (8002db4 <I2Cx_MspInit+0xa8>)
 8002d22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d24:	f003 0302 	and.w	r3, r3, #2
 8002d28:	613b      	str	r3, [r7, #16]
 8002d2a:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8002d2c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002d30:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8002d32:	2312      	movs	r3, #18
 8002d34:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8002d36:	2301      	movs	r3, #1
 8002d38:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d3a:	2303      	movs	r3, #3
 8002d3c:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8002d3e:	2304      	movs	r3, #4
 8002d40:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002d42:	f107 0314 	add.w	r3, r7, #20
 8002d46:	4619      	mov	r1, r3
 8002d48:	481b      	ldr	r0, [pc, #108]	; (8002db8 <I2Cx_MspInit+0xac>)
 8002d4a:	f000 fd35 	bl	80037b8 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002d4e:	f107 0314 	add.w	r3, r7, #20
 8002d52:	4619      	mov	r1, r3
 8002d54:	4818      	ldr	r0, [pc, #96]	; (8002db8 <I2Cx_MspInit+0xac>)
 8002d56:	f000 fd2f 	bl	80037b8 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8002d5a:	4b16      	ldr	r3, [pc, #88]	; (8002db4 <I2Cx_MspInit+0xa8>)
 8002d5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d5e:	4a15      	ldr	r2, [pc, #84]	; (8002db4 <I2Cx_MspInit+0xa8>)
 8002d60:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002d64:	6593      	str	r3, [r2, #88]	; 0x58
 8002d66:	4b13      	ldr	r3, [pc, #76]	; (8002db4 <I2Cx_MspInit+0xa8>)
 8002d68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d6e:	60fb      	str	r3, [r7, #12]
 8002d70:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8002d72:	4b10      	ldr	r3, [pc, #64]	; (8002db4 <I2Cx_MspInit+0xa8>)
 8002d74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d76:	4a0f      	ldr	r2, [pc, #60]	; (8002db4 <I2Cx_MspInit+0xa8>)
 8002d78:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002d7c:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8002d7e:	4b0d      	ldr	r3, [pc, #52]	; (8002db4 <I2Cx_MspInit+0xa8>)
 8002d80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d82:	4a0c      	ldr	r2, [pc, #48]	; (8002db4 <I2Cx_MspInit+0xa8>)
 8002d84:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002d88:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	210f      	movs	r1, #15
 8002d8e:	2021      	movs	r0, #33	; 0x21
 8002d90:	f000 fc8d 	bl	80036ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8002d94:	2021      	movs	r0, #33	; 0x21
 8002d96:	f000 fca6 	bl	80036e6 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	210f      	movs	r1, #15
 8002d9e:	2022      	movs	r0, #34	; 0x22
 8002da0:	f000 fc85 	bl	80036ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8002da4:	2022      	movs	r0, #34	; 0x22
 8002da6:	f000 fc9e 	bl	80036e6 <HAL_NVIC_EnableIRQ>
}
 8002daa:	bf00      	nop
 8002dac:	3728      	adds	r7, #40	; 0x28
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}
 8002db2:	bf00      	nop
 8002db4:	40021000 	.word	0x40021000
 8002db8:	48000400 	.word	0x48000400

08002dbc <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b082      	sub	sp, #8
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	4a12      	ldr	r2, [pc, #72]	; (8002e10 <I2Cx_Init+0x54>)
 8002dc8:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	4a11      	ldr	r2, [pc, #68]	; (8002e14 <I2Cx_Init+0x58>)
 8002dce:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2201      	movs	r2, #1
 8002dda:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2200      	movs	r2, #0
 8002de0:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2200      	movs	r2, #0
 8002de6:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2200      	movs	r2, #0
 8002dec:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2200      	movs	r2, #0
 8002df2:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8002df4:	6878      	ldr	r0, [r7, #4]
 8002df6:	f7ff ff89 	bl	8002d0c <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	f000 ffe7 	bl	8003dce <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8002e00:	2100      	movs	r1, #0
 8002e02:	6878      	ldr	r0, [r7, #4]
 8002e04:	f001 fd76 	bl	80048f4 <HAL_I2CEx_ConfigAnalogFilter>
}
 8002e08:	bf00      	nop
 8002e0a:	3708      	adds	r7, #8
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}
 8002e10:	40005800 	.word	0x40005800
 8002e14:	00702681 	.word	0x00702681

08002e18 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b08a      	sub	sp, #40	; 0x28
 8002e1c:	af04      	add	r7, sp, #16
 8002e1e:	60f8      	str	r0, [r7, #12]
 8002e20:	4608      	mov	r0, r1
 8002e22:	4611      	mov	r1, r2
 8002e24:	461a      	mov	r2, r3
 8002e26:	4603      	mov	r3, r0
 8002e28:	72fb      	strb	r3, [r7, #11]
 8002e2a:	460b      	mov	r3, r1
 8002e2c:	813b      	strh	r3, [r7, #8]
 8002e2e:	4613      	mov	r3, r2
 8002e30:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002e32:	2300      	movs	r3, #0
 8002e34:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002e36:	7afb      	ldrb	r3, [r7, #11]
 8002e38:	b299      	uxth	r1, r3
 8002e3a:	88f8      	ldrh	r0, [r7, #6]
 8002e3c:	893a      	ldrh	r2, [r7, #8]
 8002e3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e42:	9302      	str	r3, [sp, #8]
 8002e44:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002e46:	9301      	str	r3, [sp, #4]
 8002e48:	6a3b      	ldr	r3, [r7, #32]
 8002e4a:	9300      	str	r3, [sp, #0]
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	68f8      	ldr	r0, [r7, #12]
 8002e50:	f001 f990 	bl	8004174 <HAL_I2C_Mem_Read>
 8002e54:	4603      	mov	r3, r0
 8002e56:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8002e58:	7dfb      	ldrb	r3, [r7, #23]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d004      	beq.n	8002e68 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8002e5e:	7afb      	ldrb	r3, [r7, #11]
 8002e60:	4619      	mov	r1, r3
 8002e62:	68f8      	ldr	r0, [r7, #12]
 8002e64:	f000 f832 	bl	8002ecc <I2Cx_Error>
  }
  return status;
 8002e68:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3718      	adds	r7, #24
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}

08002e72 <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8002e72:	b580      	push	{r7, lr}
 8002e74:	b08a      	sub	sp, #40	; 0x28
 8002e76:	af04      	add	r7, sp, #16
 8002e78:	60f8      	str	r0, [r7, #12]
 8002e7a:	4608      	mov	r0, r1
 8002e7c:	4611      	mov	r1, r2
 8002e7e:	461a      	mov	r2, r3
 8002e80:	4603      	mov	r3, r0
 8002e82:	72fb      	strb	r3, [r7, #11]
 8002e84:	460b      	mov	r3, r1
 8002e86:	813b      	strh	r3, [r7, #8]
 8002e88:	4613      	mov	r3, r2
 8002e8a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002e90:	7afb      	ldrb	r3, [r7, #11]
 8002e92:	b299      	uxth	r1, r3
 8002e94:	88f8      	ldrh	r0, [r7, #6]
 8002e96:	893a      	ldrh	r2, [r7, #8]
 8002e98:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e9c:	9302      	str	r3, [sp, #8]
 8002e9e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002ea0:	9301      	str	r3, [sp, #4]
 8002ea2:	6a3b      	ldr	r3, [r7, #32]
 8002ea4:	9300      	str	r3, [sp, #0]
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	68f8      	ldr	r0, [r7, #12]
 8002eaa:	f001 f84f 	bl	8003f4c <HAL_I2C_Mem_Write>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8002eb2:	7dfb      	ldrb	r3, [r7, #23]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d004      	beq.n	8002ec2 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8002eb8:	7afb      	ldrb	r3, [r7, #11]
 8002eba:	4619      	mov	r1, r3
 8002ebc:	68f8      	ldr	r0, [r7, #12]
 8002ebe:	f000 f805 	bl	8002ecc <I2Cx_Error>
  }
  return status;
 8002ec2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	3718      	adds	r7, #24
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}

08002ecc <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b082      	sub	sp, #8
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
 8002ed4:	460b      	mov	r3, r1
 8002ed6:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8002ed8:	6878      	ldr	r0, [r7, #4]
 8002eda:	f001 f807 	bl	8003eec <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	f7ff ff6c 	bl	8002dbc <I2Cx_Init>
}
 8002ee4:	bf00      	nop
 8002ee6:	3708      	adds	r7, #8
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}

08002eec <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8002ef0:	4802      	ldr	r0, [pc, #8]	; (8002efc <SENSOR_IO_Init+0x10>)
 8002ef2:	f7ff ff63 	bl	8002dbc <I2Cx_Init>
}
 8002ef6:	bf00      	nop
 8002ef8:	bd80      	pop	{r7, pc}
 8002efa:	bf00      	nop
 8002efc:	20000bbc 	.word	0x20000bbc

08002f00 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b084      	sub	sp, #16
 8002f04:	af02      	add	r7, sp, #8
 8002f06:	4603      	mov	r3, r0
 8002f08:	71fb      	strb	r3, [r7, #7]
 8002f0a:	460b      	mov	r3, r1
 8002f0c:	71bb      	strb	r3, [r7, #6]
 8002f0e:	4613      	mov	r3, r2
 8002f10:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8002f12:	79bb      	ldrb	r3, [r7, #6]
 8002f14:	b29a      	uxth	r2, r3
 8002f16:	79f9      	ldrb	r1, [r7, #7]
 8002f18:	2301      	movs	r3, #1
 8002f1a:	9301      	str	r3, [sp, #4]
 8002f1c:	1d7b      	adds	r3, r7, #5
 8002f1e:	9300      	str	r3, [sp, #0]
 8002f20:	2301      	movs	r3, #1
 8002f22:	4803      	ldr	r0, [pc, #12]	; (8002f30 <SENSOR_IO_Write+0x30>)
 8002f24:	f7ff ffa5 	bl	8002e72 <I2Cx_WriteMultiple>
}
 8002f28:	bf00      	nop
 8002f2a:	3708      	adds	r7, #8
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}
 8002f30:	20000bbc 	.word	0x20000bbc

08002f34 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b086      	sub	sp, #24
 8002f38:	af02      	add	r7, sp, #8
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	460a      	mov	r2, r1
 8002f3e:	71fb      	strb	r3, [r7, #7]
 8002f40:	4613      	mov	r3, r2
 8002f42:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8002f44:	2300      	movs	r3, #0
 8002f46:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8002f48:	79bb      	ldrb	r3, [r7, #6]
 8002f4a:	b29a      	uxth	r2, r3
 8002f4c:	79f9      	ldrb	r1, [r7, #7]
 8002f4e:	2301      	movs	r3, #1
 8002f50:	9301      	str	r3, [sp, #4]
 8002f52:	f107 030f 	add.w	r3, r7, #15
 8002f56:	9300      	str	r3, [sp, #0]
 8002f58:	2301      	movs	r3, #1
 8002f5a:	4804      	ldr	r0, [pc, #16]	; (8002f6c <SENSOR_IO_Read+0x38>)
 8002f5c:	f7ff ff5c 	bl	8002e18 <I2Cx_ReadMultiple>

  return read_value;
 8002f60:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	3710      	adds	r7, #16
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}
 8002f6a:	bf00      	nop
 8002f6c:	20000bbc 	.word	0x20000bbc

08002f70 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b084      	sub	sp, #16
 8002f74:	af02      	add	r7, sp, #8
 8002f76:	603a      	str	r2, [r7, #0]
 8002f78:	461a      	mov	r2, r3
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	71fb      	strb	r3, [r7, #7]
 8002f7e:	460b      	mov	r3, r1
 8002f80:	71bb      	strb	r3, [r7, #6]
 8002f82:	4613      	mov	r3, r2
 8002f84:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8002f86:	79bb      	ldrb	r3, [r7, #6]
 8002f88:	b29a      	uxth	r2, r3
 8002f8a:	79f9      	ldrb	r1, [r7, #7]
 8002f8c:	88bb      	ldrh	r3, [r7, #4]
 8002f8e:	9301      	str	r3, [sp, #4]
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	9300      	str	r3, [sp, #0]
 8002f94:	2301      	movs	r3, #1
 8002f96:	4804      	ldr	r0, [pc, #16]	; (8002fa8 <SENSOR_IO_ReadMultiple+0x38>)
 8002f98:	f7ff ff3e 	bl	8002e18 <I2Cx_ReadMultiple>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	b29b      	uxth	r3, r3
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	3708      	adds	r7, #8
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}
 8002fa8:	20000bbc 	.word	0x20000bbc

08002fac <BSP_HSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Humidity Sensor driver.
  * @retval HSENSOR status
  */
uint32_t BSP_HSENSOR_Init(void)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b082      	sub	sp, #8
 8002fb0:	af00      	add	r7, sp, #0
  uint32_t ret;
  
  if(HTS221_H_Drv.ReadID(HTS221_I2C_ADDRESS) != HTS221_WHO_AM_I_VAL)
 8002fb2:	4b0c      	ldr	r3, [pc, #48]	; (8002fe4 <BSP_HSENSOR_Init+0x38>)
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	20be      	movs	r0, #190	; 0xbe
 8002fb8:	4798      	blx	r3
 8002fba:	4603      	mov	r3, r0
 8002fbc:	2bbc      	cmp	r3, #188	; 0xbc
 8002fbe:	d002      	beq.n	8002fc6 <BSP_HSENSOR_Init+0x1a>
  {
    ret = HSENSOR_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	607b      	str	r3, [r7, #4]
 8002fc4:	e009      	b.n	8002fda <BSP_HSENSOR_Init+0x2e>
  }
  else
  {
    Hsensor_drv = &HTS221_H_Drv;
 8002fc6:	4b08      	ldr	r3, [pc, #32]	; (8002fe8 <BSP_HSENSOR_Init+0x3c>)
 8002fc8:	4a06      	ldr	r2, [pc, #24]	; (8002fe4 <BSP_HSENSOR_Init+0x38>)
 8002fca:	601a      	str	r2, [r3, #0]
    /* HSENSOR Init */   
    Hsensor_drv->Init(HTS221_I2C_ADDRESS);
 8002fcc:	4b06      	ldr	r3, [pc, #24]	; (8002fe8 <BSP_HSENSOR_Init+0x3c>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	20be      	movs	r0, #190	; 0xbe
 8002fd4:	4798      	blx	r3
    ret = HSENSOR_OK;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 8002fda:	687b      	ldr	r3, [r7, #4]
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	3708      	adds	r7, #8
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}
 8002fe4:	20000008 	.word	0x20000008
 8002fe8:	2000021c 	.word	0x2000021c

08002fec <BSP_HSENSOR_ReadHumidity>:
/**
  * @brief  Read Humidity register of HTS221.
  * @retval HTS221 measured humidity value.
  */
float BSP_HSENSOR_ReadHumidity(void)
{ 
 8002fec:	b580      	push	{r7, lr}
 8002fee:	af00      	add	r7, sp, #0
  return Hsensor_drv->ReadHumidity(HTS221_I2C_ADDRESS);
 8002ff0:	4b04      	ldr	r3, [pc, #16]	; (8003004 <BSP_HSENSOR_ReadHumidity+0x18>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	20be      	movs	r0, #190	; 0xbe
 8002ff8:	4798      	blx	r3
 8002ffa:	eef0 7a40 	vmov.f32	s15, s0
}
 8002ffe:	eeb0 0a67 	vmov.f32	s0, s15
 8003002:	bd80      	pop	{r7, pc}
 8003004:	2000021c 	.word	0x2000021c

08003008 <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 8003008:	b580      	push	{r7, lr}
 800300a:	b082      	sub	sp, #8
 800300c:	af00      	add	r7, sp, #0
  uint8_t ret = TSENSOR_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	71fb      	strb	r3, [r7, #7]

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 8003012:	4b09      	ldr	r3, [pc, #36]	; (8003038 <BSP_TSENSOR_Init+0x30>)
 8003014:	4a09      	ldr	r2, [pc, #36]	; (800303c <BSP_TSENSOR_Init+0x34>)
 8003016:	601a      	str	r2, [r3, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 8003018:	f7ff ff68 	bl	8002eec <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 800301c:	4b06      	ldr	r3, [pc, #24]	; (8003038 <BSP_TSENSOR_Init+0x30>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	2100      	movs	r1, #0
 8003024:	20be      	movs	r0, #190	; 0xbe
 8003026:	4798      	blx	r3

  ret = TSENSOR_OK;
 8003028:	2300      	movs	r3, #0
 800302a:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 800302c:	79fb      	ldrb	r3, [r7, #7]
}
 800302e:	4618      	mov	r0, r3
 8003030:	3708      	adds	r7, #8
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}
 8003036:	bf00      	nop
 8003038:	20000220 	.word	0x20000220
 800303c:	20000014 	.word	0x20000014

08003040 <BSP_TSENSOR_ReadTemp>:
/**
  * @brief  Read Temperature register of TS751.
  * @retval STTS751 measured temperature value.
  */
float BSP_TSENSOR_ReadTemp(void)
{ 
 8003040:	b580      	push	{r7, lr}
 8003042:	af00      	add	r7, sp, #0
  return tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 8003044:	4b04      	ldr	r3, [pc, #16]	; (8003058 <BSP_TSENSOR_ReadTemp+0x18>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	68db      	ldr	r3, [r3, #12]
 800304a:	20be      	movs	r0, #190	; 0xbe
 800304c:	4798      	blx	r3
 800304e:	eef0 7a40 	vmov.f32	s15, s0
}
 8003052:	eeb0 0a67 	vmov.f32	s0, s15
 8003056:	bd80      	pop	{r7, pc}
 8003058:	20000220 	.word	0x20000220

0800305c <HTS221_H_Init>:
  */
/**
  * @brief  Set HTS221 humidity sensor Initialization.
  */
void HTS221_H_Init(uint16_t DeviceAddr)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b084      	sub	sp, #16
 8003060:	af00      	add	r7, sp, #0
 8003062:	4603      	mov	r3, r0
 8003064:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8003066:	88fb      	ldrh	r3, [r7, #6]
 8003068:	b2db      	uxtb	r3, r3
 800306a:	2120      	movs	r1, #32
 800306c:	4618      	mov	r0, r3
 800306e:	f7ff ff61 	bl	8002f34 <SENSOR_IO_Read>
 8003072:	4603      	mov	r3, r0
 8003074:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 8003076:	7bfb      	ldrb	r3, [r7, #15]
 8003078:	f023 0304 	bic.w	r3, r3, #4
 800307c:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 800307e:	7bfb      	ldrb	r3, [r7, #15]
 8003080:	f043 0304 	orr.w	r3, r3, #4
 8003084:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8003086:	7bfb      	ldrb	r3, [r7, #15]
 8003088:	f023 0303 	bic.w	r3, r3, #3
 800308c:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 800308e:	7bfb      	ldrb	r3, [r7, #15]
 8003090:	f043 0301 	orr.w	r3, r3, #1
 8003094:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 8003096:	7bfb      	ldrb	r3, [r7, #15]
 8003098:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800309c:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 800309e:	88fb      	ldrh	r3, [r7, #6]
 80030a0:	b2db      	uxtb	r3, r3
 80030a2:	7bfa      	ldrb	r2, [r7, #15]
 80030a4:	2120      	movs	r1, #32
 80030a6:	4618      	mov	r0, r3
 80030a8:	f7ff ff2a 	bl	8002f00 <SENSOR_IO_Write>
}
 80030ac:	bf00      	nop
 80030ae:	3710      	adds	r7, #16
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}

080030b4 <HTS221_H_ReadID>:
/**
  * @brief  Read HTS221 ID.
  * @retval ID 
  */
uint8_t HTS221_H_ReadID(uint16_t DeviceAddr)
{  
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b084      	sub	sp, #16
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	4603      	mov	r3, r0
 80030bc:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80030be:	2300      	movs	r3, #0
 80030c0:	73fb      	strb	r3, [r7, #15]
 
  /* IO interface initialization */
  SENSOR_IO_Init(); 
 80030c2:	f7ff ff13 	bl	8002eec <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, HTS221_WHO_AM_I_REG);
 80030c6:	88fb      	ldrh	r3, [r7, #6]
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	210f      	movs	r1, #15
 80030cc:	4618      	mov	r0, r3
 80030ce:	f7ff ff31 	bl	8002f34 <SENSOR_IO_Read>
 80030d2:	4603      	mov	r3, r0
 80030d4:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 80030d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80030d8:	4618      	mov	r0, r3
 80030da:	3710      	adds	r7, #16
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd80      	pop	{r7, pc}

080030e0 <HTS221_H_ReadHumidity>:
/**
  * @brief  Read humidity value of HTS221
  * @retval humidity value;
  */
float HTS221_H_ReadHumidity(uint16_t DeviceAddr)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b088      	sub	sp, #32
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	4603      	mov	r3, r0
 80030e8:	80fb      	strh	r3, [r7, #6]
  int16_t H0_T0_out, H1_T0_out, H_T_out;
  int16_t H0_rh, H1_rh;
  uint8_t buffer[2];
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_RH_X2 | 0x80), buffer, 2);
 80030ea:	88fb      	ldrh	r3, [r7, #6]
 80030ec:	b2d8      	uxtb	r0, r3
 80030ee:	f107 020c 	add.w	r2, r7, #12
 80030f2:	2302      	movs	r3, #2
 80030f4:	21b0      	movs	r1, #176	; 0xb0
 80030f6:	f7ff ff3b 	bl	8002f70 <SENSOR_IO_ReadMultiple>

  H0_rh = buffer[0] >> 1;
 80030fa:	7b3b      	ldrb	r3, [r7, #12]
 80030fc:	085b      	lsrs	r3, r3, #1
 80030fe:	b2db      	uxtb	r3, r3
 8003100:	83fb      	strh	r3, [r7, #30]
  H1_rh = buffer[1] >> 1;
 8003102:	7b7b      	ldrb	r3, [r7, #13]
 8003104:	085b      	lsrs	r3, r3, #1
 8003106:	b2db      	uxtb	r3, r3
 8003108:	83bb      	strh	r3, [r7, #28]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_T0_OUT_L | 0x80), buffer, 2);
 800310a:	88fb      	ldrh	r3, [r7, #6]
 800310c:	b2d8      	uxtb	r0, r3
 800310e:	f107 020c 	add.w	r2, r7, #12
 8003112:	2302      	movs	r3, #2
 8003114:	21b6      	movs	r1, #182	; 0xb6
 8003116:	f7ff ff2b 	bl	8002f70 <SENSOR_IO_ReadMultiple>

  H0_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 800311a:	7b7b      	ldrb	r3, [r7, #13]
 800311c:	021b      	lsls	r3, r3, #8
 800311e:	b21a      	sxth	r2, r3
 8003120:	7b3b      	ldrb	r3, [r7, #12]
 8003122:	b21b      	sxth	r3, r3
 8003124:	4313      	orrs	r3, r2
 8003126:	837b      	strh	r3, [r7, #26]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H1_T0_OUT_L | 0x80), buffer, 2);
 8003128:	88fb      	ldrh	r3, [r7, #6]
 800312a:	b2d8      	uxtb	r0, r3
 800312c:	f107 020c 	add.w	r2, r7, #12
 8003130:	2302      	movs	r3, #2
 8003132:	21ba      	movs	r1, #186	; 0xba
 8003134:	f7ff ff1c 	bl	8002f70 <SENSOR_IO_ReadMultiple>

  H1_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8003138:	7b7b      	ldrb	r3, [r7, #13]
 800313a:	021b      	lsls	r3, r3, #8
 800313c:	b21a      	sxth	r2, r3
 800313e:	7b3b      	ldrb	r3, [r7, #12]
 8003140:	b21b      	sxth	r3, r3
 8003142:	4313      	orrs	r3, r2
 8003144:	833b      	strh	r3, [r7, #24]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_HR_OUT_L_REG | 0x80), buffer, 2);
 8003146:	88fb      	ldrh	r3, [r7, #6]
 8003148:	b2d8      	uxtb	r0, r3
 800314a:	f107 020c 	add.w	r2, r7, #12
 800314e:	2302      	movs	r3, #2
 8003150:	21a8      	movs	r1, #168	; 0xa8
 8003152:	f7ff ff0d 	bl	8002f70 <SENSOR_IO_ReadMultiple>

  H_T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8003156:	7b7b      	ldrb	r3, [r7, #13]
 8003158:	021b      	lsls	r3, r3, #8
 800315a:	b21a      	sxth	r2, r3
 800315c:	7b3b      	ldrb	r3, [r7, #12]
 800315e:	b21b      	sxth	r3, r3
 8003160:	4313      	orrs	r3, r2
 8003162:	82fb      	strh	r3, [r7, #22]

  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 8003164:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003168:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800316c:	1ad3      	subs	r3, r2, r3
 800316e:	ee07 3a90 	vmov	s15, r3
 8003172:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003176:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800317a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800317e:	1ad3      	subs	r3, r2, r3
 8003180:	ee07 3a90 	vmov	s15, r3
 8003184:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003188:	ee67 6a27 	vmul.f32	s13, s14, s15
 800318c:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8003190:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	ee07 3a90 	vmov	s15, r3
 800319a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800319e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80031a2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80031a6:	ee07 3a90 	vmov	s15, r3
 80031aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80031ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031b2:	edc7 7a04 	vstr	s15, [r7, #16]
  tmp_f *= 10.0f;
 80031b6:	edd7 7a04 	vldr	s15, [r7, #16]
 80031ba:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80031be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80031c2:	edc7 7a04 	vstr	s15, [r7, #16]

  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
        : ( tmp_f <    0.0f ) ?    0.0f
 80031c6:	edd7 7a04 	vldr	s15, [r7, #16]
 80031ca:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8003210 <HTS221_H_ReadHumidity+0x130>
 80031ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031d6:	dd01      	ble.n	80031dc <HTS221_H_ReadHumidity+0xfc>
 80031d8:	4b0e      	ldr	r3, [pc, #56]	; (8003214 <HTS221_H_ReadHumidity+0x134>)
 80031da:	e00a      	b.n	80031f2 <HTS221_H_ReadHumidity+0x112>
        : tmp_f;
 80031dc:	edd7 7a04 	vldr	s15, [r7, #16]
 80031e0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80031e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031e8:	d502      	bpl.n	80031f0 <HTS221_H_ReadHumidity+0x110>
 80031ea:	f04f 0300 	mov.w	r3, #0
 80031ee:	e000      	b.n	80031f2 <HTS221_H_ReadHumidity+0x112>
 80031f0:	693b      	ldr	r3, [r7, #16]
  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
 80031f2:	613b      	str	r3, [r7, #16]

  return (tmp_f / 10.0f);
 80031f4:	edd7 7a04 	vldr	s15, [r7, #16]
 80031f8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80031fc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003200:	eef0 7a66 	vmov.f32	s15, s13
}
 8003204:	eeb0 0a67 	vmov.f32	s0, s15
 8003208:	3720      	adds	r7, #32
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}
 800320e:	bf00      	nop
 8003210:	447a0000 	.word	0x447a0000
 8003214:	447a0000 	.word	0x447a0000

08003218 <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 8003218:	b580      	push	{r7, lr}
 800321a:	b084      	sub	sp, #16
 800321c:	af00      	add	r7, sp, #0
 800321e:	4603      	mov	r3, r0
 8003220:	6039      	str	r1, [r7, #0]
 8003222:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8003224:	88fb      	ldrh	r3, [r7, #6]
 8003226:	b2db      	uxtb	r3, r3
 8003228:	2120      	movs	r1, #32
 800322a:	4618      	mov	r0, r3
 800322c:	f7ff fe82 	bl	8002f34 <SENSOR_IO_Read>
 8003230:	4603      	mov	r3, r0
 8003232:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 8003234:	7bfb      	ldrb	r3, [r7, #15]
 8003236:	f023 0304 	bic.w	r3, r3, #4
 800323a:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 800323c:	7bfb      	ldrb	r3, [r7, #15]
 800323e:	f043 0304 	orr.w	r3, r3, #4
 8003242:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8003244:	7bfb      	ldrb	r3, [r7, #15]
 8003246:	f023 0303 	bic.w	r3, r3, #3
 800324a:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 800324c:	7bfb      	ldrb	r3, [r7, #15]
 800324e:	f043 0301 	orr.w	r3, r3, #1
 8003252:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 8003254:	7bfb      	ldrb	r3, [r7, #15]
 8003256:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800325a:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 800325c:	88fb      	ldrh	r3, [r7, #6]
 800325e:	b2db      	uxtb	r3, r3
 8003260:	7bfa      	ldrb	r2, [r7, #15]
 8003262:	2120      	movs	r1, #32
 8003264:	4618      	mov	r0, r3
 8003266:	f7ff fe4b 	bl	8002f00 <SENSOR_IO_Write>
}
 800326a:	bf00      	nop
 800326c:	3710      	adds	r7, #16
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}

08003272 <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 8003272:	b580      	push	{r7, lr}
 8003274:	b088      	sub	sp, #32
 8003276:	af00      	add	r7, sp, #0
 8003278:	4603      	mov	r3, r0
 800327a:	80fb      	strh	r3, [r7, #6]
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 800327c:	88fb      	ldrh	r3, [r7, #6]
 800327e:	b2d8      	uxtb	r0, r3
 8003280:	f107 0208 	add.w	r2, r7, #8
 8003284:	2302      	movs	r3, #2
 8003286:	21b2      	movs	r1, #178	; 0xb2
 8003288:	f7ff fe72 	bl	8002f70 <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 800328c:	88fb      	ldrh	r3, [r7, #6]
 800328e:	b2db      	uxtb	r3, r3
 8003290:	2135      	movs	r1, #53	; 0x35
 8003292:	4618      	mov	r0, r3
 8003294:	f7ff fe4e 	bl	8002f34 <SENSOR_IO_Read>
 8003298:	4603      	mov	r3, r0
 800329a:	77fb      	strb	r3, [r7, #31]

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 800329c:	7ffb      	ldrb	r3, [r7, #31]
 800329e:	021b      	lsls	r3, r3, #8
 80032a0:	b21b      	sxth	r3, r3
 80032a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032a6:	b21a      	sxth	r2, r3
 80032a8:	7a3b      	ldrb	r3, [r7, #8]
 80032aa:	b21b      	sxth	r3, r3
 80032ac:	4313      	orrs	r3, r2
 80032ae:	83bb      	strh	r3, [r7, #28]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 80032b0:	7ffb      	ldrb	r3, [r7, #31]
 80032b2:	019b      	lsls	r3, r3, #6
 80032b4:	b21b      	sxth	r3, r3
 80032b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032ba:	b21a      	sxth	r2, r3
 80032bc:	7a7b      	ldrb	r3, [r7, #9]
 80032be:	b21b      	sxth	r3, r3
 80032c0:	4313      	orrs	r3, r2
 80032c2:	837b      	strh	r3, [r7, #26]
  T0_degC = T0_degC_x8_u16 >> 3;
 80032c4:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80032c8:	10db      	asrs	r3, r3, #3
 80032ca:	833b      	strh	r3, [r7, #24]
  T1_degC = T1_degC_x8_u16 >> 3;
 80032cc:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80032d0:	10db      	asrs	r3, r3, #3
 80032d2:	82fb      	strh	r3, [r7, #22]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 80032d4:	88fb      	ldrh	r3, [r7, #6]
 80032d6:	b2d8      	uxtb	r0, r3
 80032d8:	f107 0208 	add.w	r2, r7, #8
 80032dc:	2304      	movs	r3, #4
 80032de:	21bc      	movs	r1, #188	; 0xbc
 80032e0:	f7ff fe46 	bl	8002f70 <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80032e4:	7a7b      	ldrb	r3, [r7, #9]
 80032e6:	021b      	lsls	r3, r3, #8
 80032e8:	b21a      	sxth	r2, r3
 80032ea:	7a3b      	ldrb	r3, [r7, #8]
 80032ec:	b21b      	sxth	r3, r3
 80032ee:	4313      	orrs	r3, r2
 80032f0:	82bb      	strh	r3, [r7, #20]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 80032f2:	7afb      	ldrb	r3, [r7, #11]
 80032f4:	021b      	lsls	r3, r3, #8
 80032f6:	b21a      	sxth	r2, r3
 80032f8:	7abb      	ldrb	r3, [r7, #10]
 80032fa:	b21b      	sxth	r3, r3
 80032fc:	4313      	orrs	r3, r2
 80032fe:	827b      	strh	r3, [r7, #18]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 8003300:	88fb      	ldrh	r3, [r7, #6]
 8003302:	b2d8      	uxtb	r0, r3
 8003304:	f107 0208 	add.w	r2, r7, #8
 8003308:	2302      	movs	r3, #2
 800330a:	21aa      	movs	r1, #170	; 0xaa
 800330c:	f7ff fe30 	bl	8002f70 <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8003310:	7a7b      	ldrb	r3, [r7, #9]
 8003312:	021b      	lsls	r3, r3, #8
 8003314:	b21a      	sxth	r2, r3
 8003316:	7a3b      	ldrb	r3, [r7, #8]
 8003318:	b21b      	sxth	r3, r3
 800331a:	4313      	orrs	r3, r2
 800331c:	823b      	strh	r3, [r7, #16]

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 800331e:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8003322:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003326:	1ad3      	subs	r3, r2, r3
 8003328:	ee07 3a90 	vmov	s15, r3
 800332c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003330:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003334:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8003338:	1ad3      	subs	r3, r2, r3
 800333a:	ee07 3a90 	vmov	s15, r3
 800333e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003342:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003346:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800334a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800334e:	1ad3      	subs	r3, r2, r3
 8003350:	ee07 3a90 	vmov	s15, r3
 8003354:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003358:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800335c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8003360:	ee07 3a90 	vmov	s15, r3
 8003364:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003368:	ee77 7a27 	vadd.f32	s15, s14, s15
 800336c:	edc7 7a03 	vstr	s15, [r7, #12]

  return tmp_f;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	ee07 3a90 	vmov	s15, r3
}
 8003376:	eeb0 0a67 	vmov.f32	s0, s15
 800337a:	3720      	adds	r7, #32
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}

08003380 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b082      	sub	sp, #8
 8003384:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003386:	2300      	movs	r3, #0
 8003388:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800338a:	2003      	movs	r0, #3
 800338c:	f000 f984 	bl	8003698 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003390:	200f      	movs	r0, #15
 8003392:	f000 f80d 	bl	80033b0 <HAL_InitTick>
 8003396:	4603      	mov	r3, r0
 8003398:	2b00      	cmp	r3, #0
 800339a:	d002      	beq.n	80033a2 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	71fb      	strb	r3, [r7, #7]
 80033a0:	e001      	b.n	80033a6 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80033a2:	f7ff f8f3 	bl	800258c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80033a6:	79fb      	ldrb	r3, [r7, #7]
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	3708      	adds	r7, #8
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}

080033b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b084      	sub	sp, #16
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80033b8:	2300      	movs	r3, #0
 80033ba:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80033bc:	4b17      	ldr	r3, [pc, #92]	; (800341c <HAL_InitTick+0x6c>)
 80033be:	781b      	ldrb	r3, [r3, #0]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d023      	beq.n	800340c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80033c4:	4b16      	ldr	r3, [pc, #88]	; (8003420 <HAL_InitTick+0x70>)
 80033c6:	681a      	ldr	r2, [r3, #0]
 80033c8:	4b14      	ldr	r3, [pc, #80]	; (800341c <HAL_InitTick+0x6c>)
 80033ca:	781b      	ldrb	r3, [r3, #0]
 80033cc:	4619      	mov	r1, r3
 80033ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80033d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80033d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80033da:	4618      	mov	r0, r3
 80033dc:	f000 f99f 	bl	800371e <HAL_SYSTICK_Config>
 80033e0:	4603      	mov	r3, r0
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d10f      	bne.n	8003406 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2b0f      	cmp	r3, #15
 80033ea:	d809      	bhi.n	8003400 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80033ec:	2200      	movs	r2, #0
 80033ee:	6879      	ldr	r1, [r7, #4]
 80033f0:	f04f 30ff 	mov.w	r0, #4294967295
 80033f4:	f000 f95b 	bl	80036ae <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80033f8:	4a0a      	ldr	r2, [pc, #40]	; (8003424 <HAL_InitTick+0x74>)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6013      	str	r3, [r2, #0]
 80033fe:	e007      	b.n	8003410 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003400:	2301      	movs	r3, #1
 8003402:	73fb      	strb	r3, [r7, #15]
 8003404:	e004      	b.n	8003410 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	73fb      	strb	r3, [r7, #15]
 800340a:	e001      	b.n	8003410 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003410:	7bfb      	ldrb	r3, [r7, #15]
}
 8003412:	4618      	mov	r0, r3
 8003414:	3710      	adds	r7, #16
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}
 800341a:	bf00      	nop
 800341c:	20000028 	.word	0x20000028
 8003420:	20000004 	.word	0x20000004
 8003424:	20000024 	.word	0x20000024

08003428 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003428:	b480      	push	{r7}
 800342a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800342c:	4b06      	ldr	r3, [pc, #24]	; (8003448 <HAL_IncTick+0x20>)
 800342e:	781b      	ldrb	r3, [r3, #0]
 8003430:	461a      	mov	r2, r3
 8003432:	4b06      	ldr	r3, [pc, #24]	; (800344c <HAL_IncTick+0x24>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4413      	add	r3, r2
 8003438:	4a04      	ldr	r2, [pc, #16]	; (800344c <HAL_IncTick+0x24>)
 800343a:	6013      	str	r3, [r2, #0]
}
 800343c:	bf00      	nop
 800343e:	46bd      	mov	sp, r7
 8003440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003444:	4770      	bx	lr
 8003446:	bf00      	nop
 8003448:	20000028 	.word	0x20000028
 800344c:	20000c08 	.word	0x20000c08

08003450 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003450:	b480      	push	{r7}
 8003452:	af00      	add	r7, sp, #0
  return uwTick;
 8003454:	4b03      	ldr	r3, [pc, #12]	; (8003464 <HAL_GetTick+0x14>)
 8003456:	681b      	ldr	r3, [r3, #0]
}
 8003458:	4618      	mov	r0, r3
 800345a:	46bd      	mov	sp, r7
 800345c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003460:	4770      	bx	lr
 8003462:	bf00      	nop
 8003464:	20000c08 	.word	0x20000c08

08003468 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b084      	sub	sp, #16
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003470:	f7ff ffee 	bl	8003450 <HAL_GetTick>
 8003474:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003480:	d005      	beq.n	800348e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003482:	4b0a      	ldr	r3, [pc, #40]	; (80034ac <HAL_Delay+0x44>)
 8003484:	781b      	ldrb	r3, [r3, #0]
 8003486:	461a      	mov	r2, r3
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	4413      	add	r3, r2
 800348c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800348e:	bf00      	nop
 8003490:	f7ff ffde 	bl	8003450 <HAL_GetTick>
 8003494:	4602      	mov	r2, r0
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	1ad3      	subs	r3, r2, r3
 800349a:	68fa      	ldr	r2, [r7, #12]
 800349c:	429a      	cmp	r2, r3
 800349e:	d8f7      	bhi.n	8003490 <HAL_Delay+0x28>
  {
  }
}
 80034a0:	bf00      	nop
 80034a2:	bf00      	nop
 80034a4:	3710      	adds	r7, #16
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}
 80034aa:	bf00      	nop
 80034ac:	20000028 	.word	0x20000028

080034b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b085      	sub	sp, #20
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	f003 0307 	and.w	r3, r3, #7
 80034be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80034c0:	4b0c      	ldr	r3, [pc, #48]	; (80034f4 <__NVIC_SetPriorityGrouping+0x44>)
 80034c2:	68db      	ldr	r3, [r3, #12]
 80034c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80034c6:	68ba      	ldr	r2, [r7, #8]
 80034c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80034cc:	4013      	ands	r3, r2
 80034ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80034d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80034dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80034e2:	4a04      	ldr	r2, [pc, #16]	; (80034f4 <__NVIC_SetPriorityGrouping+0x44>)
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	60d3      	str	r3, [r2, #12]
}
 80034e8:	bf00      	nop
 80034ea:	3714      	adds	r7, #20
 80034ec:	46bd      	mov	sp, r7
 80034ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f2:	4770      	bx	lr
 80034f4:	e000ed00 	.word	0xe000ed00

080034f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80034f8:	b480      	push	{r7}
 80034fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80034fc:	4b04      	ldr	r3, [pc, #16]	; (8003510 <__NVIC_GetPriorityGrouping+0x18>)
 80034fe:	68db      	ldr	r3, [r3, #12]
 8003500:	0a1b      	lsrs	r3, r3, #8
 8003502:	f003 0307 	and.w	r3, r3, #7
}
 8003506:	4618      	mov	r0, r3
 8003508:	46bd      	mov	sp, r7
 800350a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350e:	4770      	bx	lr
 8003510:	e000ed00 	.word	0xe000ed00

08003514 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003514:	b480      	push	{r7}
 8003516:	b083      	sub	sp, #12
 8003518:	af00      	add	r7, sp, #0
 800351a:	4603      	mov	r3, r0
 800351c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800351e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003522:	2b00      	cmp	r3, #0
 8003524:	db0b      	blt.n	800353e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003526:	79fb      	ldrb	r3, [r7, #7]
 8003528:	f003 021f 	and.w	r2, r3, #31
 800352c:	4907      	ldr	r1, [pc, #28]	; (800354c <__NVIC_EnableIRQ+0x38>)
 800352e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003532:	095b      	lsrs	r3, r3, #5
 8003534:	2001      	movs	r0, #1
 8003536:	fa00 f202 	lsl.w	r2, r0, r2
 800353a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800353e:	bf00      	nop
 8003540:	370c      	adds	r7, #12
 8003542:	46bd      	mov	sp, r7
 8003544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003548:	4770      	bx	lr
 800354a:	bf00      	nop
 800354c:	e000e100 	.word	0xe000e100

08003550 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003550:	b480      	push	{r7}
 8003552:	b083      	sub	sp, #12
 8003554:	af00      	add	r7, sp, #0
 8003556:	4603      	mov	r3, r0
 8003558:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800355a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800355e:	2b00      	cmp	r3, #0
 8003560:	db12      	blt.n	8003588 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003562:	79fb      	ldrb	r3, [r7, #7]
 8003564:	f003 021f 	and.w	r2, r3, #31
 8003568:	490a      	ldr	r1, [pc, #40]	; (8003594 <__NVIC_DisableIRQ+0x44>)
 800356a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800356e:	095b      	lsrs	r3, r3, #5
 8003570:	2001      	movs	r0, #1
 8003572:	fa00 f202 	lsl.w	r2, r0, r2
 8003576:	3320      	adds	r3, #32
 8003578:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800357c:	f3bf 8f4f 	dsb	sy
}
 8003580:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003582:	f3bf 8f6f 	isb	sy
}
 8003586:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003588:	bf00      	nop
 800358a:	370c      	adds	r7, #12
 800358c:	46bd      	mov	sp, r7
 800358e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003592:	4770      	bx	lr
 8003594:	e000e100 	.word	0xe000e100

08003598 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003598:	b480      	push	{r7}
 800359a:	b083      	sub	sp, #12
 800359c:	af00      	add	r7, sp, #0
 800359e:	4603      	mov	r3, r0
 80035a0:	6039      	str	r1, [r7, #0]
 80035a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	db0a      	blt.n	80035c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	b2da      	uxtb	r2, r3
 80035b0:	490c      	ldr	r1, [pc, #48]	; (80035e4 <__NVIC_SetPriority+0x4c>)
 80035b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035b6:	0112      	lsls	r2, r2, #4
 80035b8:	b2d2      	uxtb	r2, r2
 80035ba:	440b      	add	r3, r1
 80035bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80035c0:	e00a      	b.n	80035d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	b2da      	uxtb	r2, r3
 80035c6:	4908      	ldr	r1, [pc, #32]	; (80035e8 <__NVIC_SetPriority+0x50>)
 80035c8:	79fb      	ldrb	r3, [r7, #7]
 80035ca:	f003 030f 	and.w	r3, r3, #15
 80035ce:	3b04      	subs	r3, #4
 80035d0:	0112      	lsls	r2, r2, #4
 80035d2:	b2d2      	uxtb	r2, r2
 80035d4:	440b      	add	r3, r1
 80035d6:	761a      	strb	r2, [r3, #24]
}
 80035d8:	bf00      	nop
 80035da:	370c      	adds	r7, #12
 80035dc:	46bd      	mov	sp, r7
 80035de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e2:	4770      	bx	lr
 80035e4:	e000e100 	.word	0xe000e100
 80035e8:	e000ed00 	.word	0xe000ed00

080035ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b089      	sub	sp, #36	; 0x24
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	60f8      	str	r0, [r7, #12]
 80035f4:	60b9      	str	r1, [r7, #8]
 80035f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	f003 0307 	and.w	r3, r3, #7
 80035fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003600:	69fb      	ldr	r3, [r7, #28]
 8003602:	f1c3 0307 	rsb	r3, r3, #7
 8003606:	2b04      	cmp	r3, #4
 8003608:	bf28      	it	cs
 800360a:	2304      	movcs	r3, #4
 800360c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800360e:	69fb      	ldr	r3, [r7, #28]
 8003610:	3304      	adds	r3, #4
 8003612:	2b06      	cmp	r3, #6
 8003614:	d902      	bls.n	800361c <NVIC_EncodePriority+0x30>
 8003616:	69fb      	ldr	r3, [r7, #28]
 8003618:	3b03      	subs	r3, #3
 800361a:	e000      	b.n	800361e <NVIC_EncodePriority+0x32>
 800361c:	2300      	movs	r3, #0
 800361e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003620:	f04f 32ff 	mov.w	r2, #4294967295
 8003624:	69bb      	ldr	r3, [r7, #24]
 8003626:	fa02 f303 	lsl.w	r3, r2, r3
 800362a:	43da      	mvns	r2, r3
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	401a      	ands	r2, r3
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003634:	f04f 31ff 	mov.w	r1, #4294967295
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	fa01 f303 	lsl.w	r3, r1, r3
 800363e:	43d9      	mvns	r1, r3
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003644:	4313      	orrs	r3, r2
         );
}
 8003646:	4618      	mov	r0, r3
 8003648:	3724      	adds	r7, #36	; 0x24
 800364a:	46bd      	mov	sp, r7
 800364c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003650:	4770      	bx	lr
	...

08003654 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b082      	sub	sp, #8
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	3b01      	subs	r3, #1
 8003660:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003664:	d301      	bcc.n	800366a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003666:	2301      	movs	r3, #1
 8003668:	e00f      	b.n	800368a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800366a:	4a0a      	ldr	r2, [pc, #40]	; (8003694 <SysTick_Config+0x40>)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	3b01      	subs	r3, #1
 8003670:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003672:	210f      	movs	r1, #15
 8003674:	f04f 30ff 	mov.w	r0, #4294967295
 8003678:	f7ff ff8e 	bl	8003598 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800367c:	4b05      	ldr	r3, [pc, #20]	; (8003694 <SysTick_Config+0x40>)
 800367e:	2200      	movs	r2, #0
 8003680:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003682:	4b04      	ldr	r3, [pc, #16]	; (8003694 <SysTick_Config+0x40>)
 8003684:	2207      	movs	r2, #7
 8003686:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003688:	2300      	movs	r3, #0
}
 800368a:	4618      	mov	r0, r3
 800368c:	3708      	adds	r7, #8
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}
 8003692:	bf00      	nop
 8003694:	e000e010 	.word	0xe000e010

08003698 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b082      	sub	sp, #8
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80036a0:	6878      	ldr	r0, [r7, #4]
 80036a2:	f7ff ff05 	bl	80034b0 <__NVIC_SetPriorityGrouping>
}
 80036a6:	bf00      	nop
 80036a8:	3708      	adds	r7, #8
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}

080036ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036ae:	b580      	push	{r7, lr}
 80036b0:	b086      	sub	sp, #24
 80036b2:	af00      	add	r7, sp, #0
 80036b4:	4603      	mov	r3, r0
 80036b6:	60b9      	str	r1, [r7, #8]
 80036b8:	607a      	str	r2, [r7, #4]
 80036ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80036bc:	2300      	movs	r3, #0
 80036be:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80036c0:	f7ff ff1a 	bl	80034f8 <__NVIC_GetPriorityGrouping>
 80036c4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80036c6:	687a      	ldr	r2, [r7, #4]
 80036c8:	68b9      	ldr	r1, [r7, #8]
 80036ca:	6978      	ldr	r0, [r7, #20]
 80036cc:	f7ff ff8e 	bl	80035ec <NVIC_EncodePriority>
 80036d0:	4602      	mov	r2, r0
 80036d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036d6:	4611      	mov	r1, r2
 80036d8:	4618      	mov	r0, r3
 80036da:	f7ff ff5d 	bl	8003598 <__NVIC_SetPriority>
}
 80036de:	bf00      	nop
 80036e0:	3718      	adds	r7, #24
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}

080036e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036e6:	b580      	push	{r7, lr}
 80036e8:	b082      	sub	sp, #8
 80036ea:	af00      	add	r7, sp, #0
 80036ec:	4603      	mov	r3, r0
 80036ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80036f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036f4:	4618      	mov	r0, r3
 80036f6:	f7ff ff0d 	bl	8003514 <__NVIC_EnableIRQ>
}
 80036fa:	bf00      	nop
 80036fc:	3708      	adds	r7, #8
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}

08003702 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003702:	b580      	push	{r7, lr}
 8003704:	b082      	sub	sp, #8
 8003706:	af00      	add	r7, sp, #0
 8003708:	4603      	mov	r3, r0
 800370a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800370c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003710:	4618      	mov	r0, r3
 8003712:	f7ff ff1d 	bl	8003550 <__NVIC_DisableIRQ>
}
 8003716:	bf00      	nop
 8003718:	3708      	adds	r7, #8
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}

0800371e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800371e:	b580      	push	{r7, lr}
 8003720:	b082      	sub	sp, #8
 8003722:	af00      	add	r7, sp, #0
 8003724:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f7ff ff94 	bl	8003654 <SysTick_Config>
 800372c:	4603      	mov	r3, r0
}
 800372e:	4618      	mov	r0, r3
 8003730:	3708      	adds	r7, #8
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}

08003736 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003736:	b580      	push	{r7, lr}
 8003738:	b084      	sub	sp, #16
 800373a:	af00      	add	r7, sp, #0
 800373c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800373e:	2300      	movs	r3, #0
 8003740:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003748:	b2db      	uxtb	r3, r3
 800374a:	2b02      	cmp	r3, #2
 800374c:	d005      	beq.n	800375a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2204      	movs	r2, #4
 8003752:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	73fb      	strb	r3, [r7, #15]
 8003758:	e029      	b.n	80037ae <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	681a      	ldr	r2, [r3, #0]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f022 020e 	bic.w	r2, r2, #14
 8003768:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	681a      	ldr	r2, [r3, #0]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f022 0201 	bic.w	r2, r2, #1
 8003778:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800377e:	f003 021c 	and.w	r2, r3, #28
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003786:	2101      	movs	r1, #1
 8003788:	fa01 f202 	lsl.w	r2, r1, r2
 800378c:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2201      	movs	r2, #1
 8003792:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2200      	movs	r2, #0
 800379a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d003      	beq.n	80037ae <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	4798      	blx	r3
    }
  }
  return status;
 80037ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	3710      	adds	r7, #16
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bd80      	pop	{r7, pc}

080037b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b087      	sub	sp, #28
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
 80037c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80037c2:	2300      	movs	r3, #0
 80037c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80037c6:	e17f      	b.n	8003ac8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	681a      	ldr	r2, [r3, #0]
 80037cc:	2101      	movs	r1, #1
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	fa01 f303 	lsl.w	r3, r1, r3
 80037d4:	4013      	ands	r3, r2
 80037d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	f000 8171 	beq.w	8003ac2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	f003 0303 	and.w	r3, r3, #3
 80037e8:	2b01      	cmp	r3, #1
 80037ea:	d005      	beq.n	80037f8 <HAL_GPIO_Init+0x40>
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	f003 0303 	and.w	r3, r3, #3
 80037f4:	2b02      	cmp	r3, #2
 80037f6:	d130      	bne.n	800385a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	005b      	lsls	r3, r3, #1
 8003802:	2203      	movs	r2, #3
 8003804:	fa02 f303 	lsl.w	r3, r2, r3
 8003808:	43db      	mvns	r3, r3
 800380a:	693a      	ldr	r2, [r7, #16]
 800380c:	4013      	ands	r3, r2
 800380e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	68da      	ldr	r2, [r3, #12]
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	005b      	lsls	r3, r3, #1
 8003818:	fa02 f303 	lsl.w	r3, r2, r3
 800381c:	693a      	ldr	r2, [r7, #16]
 800381e:	4313      	orrs	r3, r2
 8003820:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	693a      	ldr	r2, [r7, #16]
 8003826:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800382e:	2201      	movs	r2, #1
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	fa02 f303 	lsl.w	r3, r2, r3
 8003836:	43db      	mvns	r3, r3
 8003838:	693a      	ldr	r2, [r7, #16]
 800383a:	4013      	ands	r3, r2
 800383c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	091b      	lsrs	r3, r3, #4
 8003844:	f003 0201 	and.w	r2, r3, #1
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	fa02 f303 	lsl.w	r3, r2, r3
 800384e:	693a      	ldr	r2, [r7, #16]
 8003850:	4313      	orrs	r3, r2
 8003852:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	693a      	ldr	r2, [r7, #16]
 8003858:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	f003 0303 	and.w	r3, r3, #3
 8003862:	2b03      	cmp	r3, #3
 8003864:	d118      	bne.n	8003898 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800386a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800386c:	2201      	movs	r2, #1
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	fa02 f303 	lsl.w	r3, r2, r3
 8003874:	43db      	mvns	r3, r3
 8003876:	693a      	ldr	r2, [r7, #16]
 8003878:	4013      	ands	r3, r2
 800387a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	08db      	lsrs	r3, r3, #3
 8003882:	f003 0201 	and.w	r2, r3, #1
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	fa02 f303 	lsl.w	r3, r2, r3
 800388c:	693a      	ldr	r2, [r7, #16]
 800388e:	4313      	orrs	r3, r2
 8003890:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	693a      	ldr	r2, [r7, #16]
 8003896:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	f003 0303 	and.w	r3, r3, #3
 80038a0:	2b03      	cmp	r3, #3
 80038a2:	d017      	beq.n	80038d4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	68db      	ldr	r3, [r3, #12]
 80038a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	005b      	lsls	r3, r3, #1
 80038ae:	2203      	movs	r2, #3
 80038b0:	fa02 f303 	lsl.w	r3, r2, r3
 80038b4:	43db      	mvns	r3, r3
 80038b6:	693a      	ldr	r2, [r7, #16]
 80038b8:	4013      	ands	r3, r2
 80038ba:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	689a      	ldr	r2, [r3, #8]
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	005b      	lsls	r3, r3, #1
 80038c4:	fa02 f303 	lsl.w	r3, r2, r3
 80038c8:	693a      	ldr	r2, [r7, #16]
 80038ca:	4313      	orrs	r3, r2
 80038cc:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	693a      	ldr	r2, [r7, #16]
 80038d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	f003 0303 	and.w	r3, r3, #3
 80038dc:	2b02      	cmp	r3, #2
 80038de:	d123      	bne.n	8003928 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	08da      	lsrs	r2, r3, #3
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	3208      	adds	r2, #8
 80038e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038ec:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	f003 0307 	and.w	r3, r3, #7
 80038f4:	009b      	lsls	r3, r3, #2
 80038f6:	220f      	movs	r2, #15
 80038f8:	fa02 f303 	lsl.w	r3, r2, r3
 80038fc:	43db      	mvns	r3, r3
 80038fe:	693a      	ldr	r2, [r7, #16]
 8003900:	4013      	ands	r3, r2
 8003902:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	691a      	ldr	r2, [r3, #16]
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	f003 0307 	and.w	r3, r3, #7
 800390e:	009b      	lsls	r3, r3, #2
 8003910:	fa02 f303 	lsl.w	r3, r2, r3
 8003914:	693a      	ldr	r2, [r7, #16]
 8003916:	4313      	orrs	r3, r2
 8003918:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	08da      	lsrs	r2, r3, #3
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	3208      	adds	r2, #8
 8003922:	6939      	ldr	r1, [r7, #16]
 8003924:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	005b      	lsls	r3, r3, #1
 8003932:	2203      	movs	r2, #3
 8003934:	fa02 f303 	lsl.w	r3, r2, r3
 8003938:	43db      	mvns	r3, r3
 800393a:	693a      	ldr	r2, [r7, #16]
 800393c:	4013      	ands	r3, r2
 800393e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	f003 0203 	and.w	r2, r3, #3
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	005b      	lsls	r3, r3, #1
 800394c:	fa02 f303 	lsl.w	r3, r2, r3
 8003950:	693a      	ldr	r2, [r7, #16]
 8003952:	4313      	orrs	r3, r2
 8003954:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	693a      	ldr	r2, [r7, #16]
 800395a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003964:	2b00      	cmp	r3, #0
 8003966:	f000 80ac 	beq.w	8003ac2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800396a:	4b5f      	ldr	r3, [pc, #380]	; (8003ae8 <HAL_GPIO_Init+0x330>)
 800396c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800396e:	4a5e      	ldr	r2, [pc, #376]	; (8003ae8 <HAL_GPIO_Init+0x330>)
 8003970:	f043 0301 	orr.w	r3, r3, #1
 8003974:	6613      	str	r3, [r2, #96]	; 0x60
 8003976:	4b5c      	ldr	r3, [pc, #368]	; (8003ae8 <HAL_GPIO_Init+0x330>)
 8003978:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800397a:	f003 0301 	and.w	r3, r3, #1
 800397e:	60bb      	str	r3, [r7, #8]
 8003980:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003982:	4a5a      	ldr	r2, [pc, #360]	; (8003aec <HAL_GPIO_Init+0x334>)
 8003984:	697b      	ldr	r3, [r7, #20]
 8003986:	089b      	lsrs	r3, r3, #2
 8003988:	3302      	adds	r3, #2
 800398a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800398e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	f003 0303 	and.w	r3, r3, #3
 8003996:	009b      	lsls	r3, r3, #2
 8003998:	220f      	movs	r2, #15
 800399a:	fa02 f303 	lsl.w	r3, r2, r3
 800399e:	43db      	mvns	r3, r3
 80039a0:	693a      	ldr	r2, [r7, #16]
 80039a2:	4013      	ands	r3, r2
 80039a4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80039ac:	d025      	beq.n	80039fa <HAL_GPIO_Init+0x242>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	4a4f      	ldr	r2, [pc, #316]	; (8003af0 <HAL_GPIO_Init+0x338>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d01f      	beq.n	80039f6 <HAL_GPIO_Init+0x23e>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	4a4e      	ldr	r2, [pc, #312]	; (8003af4 <HAL_GPIO_Init+0x33c>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d019      	beq.n	80039f2 <HAL_GPIO_Init+0x23a>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	4a4d      	ldr	r2, [pc, #308]	; (8003af8 <HAL_GPIO_Init+0x340>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d013      	beq.n	80039ee <HAL_GPIO_Init+0x236>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	4a4c      	ldr	r2, [pc, #304]	; (8003afc <HAL_GPIO_Init+0x344>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d00d      	beq.n	80039ea <HAL_GPIO_Init+0x232>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	4a4b      	ldr	r2, [pc, #300]	; (8003b00 <HAL_GPIO_Init+0x348>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d007      	beq.n	80039e6 <HAL_GPIO_Init+0x22e>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	4a4a      	ldr	r2, [pc, #296]	; (8003b04 <HAL_GPIO_Init+0x34c>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d101      	bne.n	80039e2 <HAL_GPIO_Init+0x22a>
 80039de:	2306      	movs	r3, #6
 80039e0:	e00c      	b.n	80039fc <HAL_GPIO_Init+0x244>
 80039e2:	2307      	movs	r3, #7
 80039e4:	e00a      	b.n	80039fc <HAL_GPIO_Init+0x244>
 80039e6:	2305      	movs	r3, #5
 80039e8:	e008      	b.n	80039fc <HAL_GPIO_Init+0x244>
 80039ea:	2304      	movs	r3, #4
 80039ec:	e006      	b.n	80039fc <HAL_GPIO_Init+0x244>
 80039ee:	2303      	movs	r3, #3
 80039f0:	e004      	b.n	80039fc <HAL_GPIO_Init+0x244>
 80039f2:	2302      	movs	r3, #2
 80039f4:	e002      	b.n	80039fc <HAL_GPIO_Init+0x244>
 80039f6:	2301      	movs	r3, #1
 80039f8:	e000      	b.n	80039fc <HAL_GPIO_Init+0x244>
 80039fa:	2300      	movs	r3, #0
 80039fc:	697a      	ldr	r2, [r7, #20]
 80039fe:	f002 0203 	and.w	r2, r2, #3
 8003a02:	0092      	lsls	r2, r2, #2
 8003a04:	4093      	lsls	r3, r2
 8003a06:	693a      	ldr	r2, [r7, #16]
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003a0c:	4937      	ldr	r1, [pc, #220]	; (8003aec <HAL_GPIO_Init+0x334>)
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	089b      	lsrs	r3, r3, #2
 8003a12:	3302      	adds	r3, #2
 8003a14:	693a      	ldr	r2, [r7, #16]
 8003a16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003a1a:	4b3b      	ldr	r3, [pc, #236]	; (8003b08 <HAL_GPIO_Init+0x350>)
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	43db      	mvns	r3, r3
 8003a24:	693a      	ldr	r2, [r7, #16]
 8003a26:	4013      	ands	r3, r2
 8003a28:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d003      	beq.n	8003a3e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003a36:	693a      	ldr	r2, [r7, #16]
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003a3e:	4a32      	ldr	r2, [pc, #200]	; (8003b08 <HAL_GPIO_Init+0x350>)
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003a44:	4b30      	ldr	r3, [pc, #192]	; (8003b08 <HAL_GPIO_Init+0x350>)
 8003a46:	68db      	ldr	r3, [r3, #12]
 8003a48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	43db      	mvns	r3, r3
 8003a4e:	693a      	ldr	r2, [r7, #16]
 8003a50:	4013      	ands	r3, r2
 8003a52:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d003      	beq.n	8003a68 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003a60:	693a      	ldr	r2, [r7, #16]
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	4313      	orrs	r3, r2
 8003a66:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003a68:	4a27      	ldr	r2, [pc, #156]	; (8003b08 <HAL_GPIO_Init+0x350>)
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003a6e:	4b26      	ldr	r3, [pc, #152]	; (8003b08 <HAL_GPIO_Init+0x350>)
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	43db      	mvns	r3, r3
 8003a78:	693a      	ldr	r2, [r7, #16]
 8003a7a:	4013      	ands	r3, r2
 8003a7c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d003      	beq.n	8003a92 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003a8a:	693a      	ldr	r2, [r7, #16]
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003a92:	4a1d      	ldr	r2, [pc, #116]	; (8003b08 <HAL_GPIO_Init+0x350>)
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003a98:	4b1b      	ldr	r3, [pc, #108]	; (8003b08 <HAL_GPIO_Init+0x350>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	43db      	mvns	r3, r3
 8003aa2:	693a      	ldr	r2, [r7, #16]
 8003aa4:	4013      	ands	r3, r2
 8003aa6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d003      	beq.n	8003abc <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003ab4:	693a      	ldr	r2, [r7, #16]
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003abc:	4a12      	ldr	r2, [pc, #72]	; (8003b08 <HAL_GPIO_Init+0x350>)
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	3301      	adds	r3, #1
 8003ac6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	681a      	ldr	r2, [r3, #0]
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	fa22 f303 	lsr.w	r3, r2, r3
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	f47f ae78 	bne.w	80037c8 <HAL_GPIO_Init+0x10>
  }
}
 8003ad8:	bf00      	nop
 8003ada:	bf00      	nop
 8003adc:	371c      	adds	r7, #28
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae4:	4770      	bx	lr
 8003ae6:	bf00      	nop
 8003ae8:	40021000 	.word	0x40021000
 8003aec:	40010000 	.word	0x40010000
 8003af0:	48000400 	.word	0x48000400
 8003af4:	48000800 	.word	0x48000800
 8003af8:	48000c00 	.word	0x48000c00
 8003afc:	48001000 	.word	0x48001000
 8003b00:	48001400 	.word	0x48001400
 8003b04:	48001800 	.word	0x48001800
 8003b08:	40010400 	.word	0x40010400

08003b0c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b087      	sub	sp, #28
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
 8003b14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003b16:	2300      	movs	r3, #0
 8003b18:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8003b1a:	e0cd      	b.n	8003cb8 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003b1c:	2201      	movs	r2, #1
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	fa02 f303 	lsl.w	r3, r2, r3
 8003b24:	683a      	ldr	r2, [r7, #0]
 8003b26:	4013      	ands	r3, r2
 8003b28:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	f000 80c0 	beq.w	8003cb2 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8003b32:	4a68      	ldr	r2, [pc, #416]	; (8003cd4 <HAL_GPIO_DeInit+0x1c8>)
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	089b      	lsrs	r3, r3, #2
 8003b38:	3302      	adds	r3, #2
 8003b3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b3e:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	f003 0303 	and.w	r3, r3, #3
 8003b46:	009b      	lsls	r3, r3, #2
 8003b48:	220f      	movs	r2, #15
 8003b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b4e:	68fa      	ldr	r2, [r7, #12]
 8003b50:	4013      	ands	r3, r2
 8003b52:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003b5a:	d025      	beq.n	8003ba8 <HAL_GPIO_DeInit+0x9c>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	4a5e      	ldr	r2, [pc, #376]	; (8003cd8 <HAL_GPIO_DeInit+0x1cc>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d01f      	beq.n	8003ba4 <HAL_GPIO_DeInit+0x98>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	4a5d      	ldr	r2, [pc, #372]	; (8003cdc <HAL_GPIO_DeInit+0x1d0>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d019      	beq.n	8003ba0 <HAL_GPIO_DeInit+0x94>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	4a5c      	ldr	r2, [pc, #368]	; (8003ce0 <HAL_GPIO_DeInit+0x1d4>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d013      	beq.n	8003b9c <HAL_GPIO_DeInit+0x90>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	4a5b      	ldr	r2, [pc, #364]	; (8003ce4 <HAL_GPIO_DeInit+0x1d8>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d00d      	beq.n	8003b98 <HAL_GPIO_DeInit+0x8c>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	4a5a      	ldr	r2, [pc, #360]	; (8003ce8 <HAL_GPIO_DeInit+0x1dc>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d007      	beq.n	8003b94 <HAL_GPIO_DeInit+0x88>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	4a59      	ldr	r2, [pc, #356]	; (8003cec <HAL_GPIO_DeInit+0x1e0>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d101      	bne.n	8003b90 <HAL_GPIO_DeInit+0x84>
 8003b8c:	2306      	movs	r3, #6
 8003b8e:	e00c      	b.n	8003baa <HAL_GPIO_DeInit+0x9e>
 8003b90:	2307      	movs	r3, #7
 8003b92:	e00a      	b.n	8003baa <HAL_GPIO_DeInit+0x9e>
 8003b94:	2305      	movs	r3, #5
 8003b96:	e008      	b.n	8003baa <HAL_GPIO_DeInit+0x9e>
 8003b98:	2304      	movs	r3, #4
 8003b9a:	e006      	b.n	8003baa <HAL_GPIO_DeInit+0x9e>
 8003b9c:	2303      	movs	r3, #3
 8003b9e:	e004      	b.n	8003baa <HAL_GPIO_DeInit+0x9e>
 8003ba0:	2302      	movs	r3, #2
 8003ba2:	e002      	b.n	8003baa <HAL_GPIO_DeInit+0x9e>
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	e000      	b.n	8003baa <HAL_GPIO_DeInit+0x9e>
 8003ba8:	2300      	movs	r3, #0
 8003baa:	697a      	ldr	r2, [r7, #20]
 8003bac:	f002 0203 	and.w	r2, r2, #3
 8003bb0:	0092      	lsls	r2, r2, #2
 8003bb2:	4093      	lsls	r3, r2
 8003bb4:	68fa      	ldr	r2, [r7, #12]
 8003bb6:	429a      	cmp	r2, r3
 8003bb8:	d132      	bne.n	8003c20 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8003bba:	4b4d      	ldr	r3, [pc, #308]	; (8003cf0 <HAL_GPIO_DeInit+0x1e4>)
 8003bbc:	681a      	ldr	r2, [r3, #0]
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	43db      	mvns	r3, r3
 8003bc2:	494b      	ldr	r1, [pc, #300]	; (8003cf0 <HAL_GPIO_DeInit+0x1e4>)
 8003bc4:	4013      	ands	r3, r2
 8003bc6:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8003bc8:	4b49      	ldr	r3, [pc, #292]	; (8003cf0 <HAL_GPIO_DeInit+0x1e4>)
 8003bca:	685a      	ldr	r2, [r3, #4]
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	43db      	mvns	r3, r3
 8003bd0:	4947      	ldr	r1, [pc, #284]	; (8003cf0 <HAL_GPIO_DeInit+0x1e4>)
 8003bd2:	4013      	ands	r3, r2
 8003bd4:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8003bd6:	4b46      	ldr	r3, [pc, #280]	; (8003cf0 <HAL_GPIO_DeInit+0x1e4>)
 8003bd8:	68da      	ldr	r2, [r3, #12]
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	43db      	mvns	r3, r3
 8003bde:	4944      	ldr	r1, [pc, #272]	; (8003cf0 <HAL_GPIO_DeInit+0x1e4>)
 8003be0:	4013      	ands	r3, r2
 8003be2:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8003be4:	4b42      	ldr	r3, [pc, #264]	; (8003cf0 <HAL_GPIO_DeInit+0x1e4>)
 8003be6:	689a      	ldr	r2, [r3, #8]
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	43db      	mvns	r3, r3
 8003bec:	4940      	ldr	r1, [pc, #256]	; (8003cf0 <HAL_GPIO_DeInit+0x1e4>)
 8003bee:	4013      	ands	r3, r2
 8003bf0:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	f003 0303 	and.w	r3, r3, #3
 8003bf8:	009b      	lsls	r3, r3, #2
 8003bfa:	220f      	movs	r2, #15
 8003bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8003c00:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8003c02:	4a34      	ldr	r2, [pc, #208]	; (8003cd4 <HAL_GPIO_DeInit+0x1c8>)
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	089b      	lsrs	r3, r3, #2
 8003c08:	3302      	adds	r3, #2
 8003c0a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	43da      	mvns	r2, r3
 8003c12:	4830      	ldr	r0, [pc, #192]	; (8003cd4 <HAL_GPIO_DeInit+0x1c8>)
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	089b      	lsrs	r3, r3, #2
 8003c18:	400a      	ands	r2, r1
 8003c1a:	3302      	adds	r3, #2
 8003c1c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681a      	ldr	r2, [r3, #0]
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	005b      	lsls	r3, r3, #1
 8003c28:	2103      	movs	r1, #3
 8003c2a:	fa01 f303 	lsl.w	r3, r1, r3
 8003c2e:	431a      	orrs	r2, r3
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	08da      	lsrs	r2, r3, #3
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	3208      	adds	r2, #8
 8003c3c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003c40:	697b      	ldr	r3, [r7, #20]
 8003c42:	f003 0307 	and.w	r3, r3, #7
 8003c46:	009b      	lsls	r3, r3, #2
 8003c48:	220f      	movs	r2, #15
 8003c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c4e:	43db      	mvns	r3, r3
 8003c50:	697a      	ldr	r2, [r7, #20]
 8003c52:	08d2      	lsrs	r2, r2, #3
 8003c54:	4019      	ands	r1, r3
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	3208      	adds	r2, #8
 8003c5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	689a      	ldr	r2, [r3, #8]
 8003c62:	697b      	ldr	r3, [r7, #20]
 8003c64:	005b      	lsls	r3, r3, #1
 8003c66:	2103      	movs	r1, #3
 8003c68:	fa01 f303 	lsl.w	r3, r1, r3
 8003c6c:	43db      	mvns	r3, r3
 8003c6e:	401a      	ands	r2, r3
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	685a      	ldr	r2, [r3, #4]
 8003c78:	2101      	movs	r1, #1
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	fa01 f303 	lsl.w	r3, r1, r3
 8003c80:	43db      	mvns	r3, r3
 8003c82:	401a      	ands	r2, r3
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	68da      	ldr	r2, [r3, #12]
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	005b      	lsls	r3, r3, #1
 8003c90:	2103      	movs	r1, #3
 8003c92:	fa01 f303 	lsl.w	r3, r1, r3
 8003c96:	43db      	mvns	r3, r3
 8003c98:	401a      	ands	r2, r3
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ca2:	2101      	movs	r1, #1
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	fa01 f303 	lsl.w	r3, r1, r3
 8003caa:	43db      	mvns	r3, r3
 8003cac:	401a      	ands	r2, r3
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	3301      	adds	r3, #1
 8003cb6:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8003cb8:	683a      	ldr	r2, [r7, #0]
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	fa22 f303 	lsr.w	r3, r2, r3
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	f47f af2b 	bne.w	8003b1c <HAL_GPIO_DeInit+0x10>
  }
}
 8003cc6:	bf00      	nop
 8003cc8:	bf00      	nop
 8003cca:	371c      	adds	r7, #28
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd2:	4770      	bx	lr
 8003cd4:	40010000 	.word	0x40010000
 8003cd8:	48000400 	.word	0x48000400
 8003cdc:	48000800 	.word	0x48000800
 8003ce0:	48000c00 	.word	0x48000c00
 8003ce4:	48001000 	.word	0x48001000
 8003ce8:	48001400 	.word	0x48001400
 8003cec:	48001800 	.word	0x48001800
 8003cf0:	40010400 	.word	0x40010400

08003cf4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b085      	sub	sp, #20
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
 8003cfc:	460b      	mov	r3, r1
 8003cfe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	691a      	ldr	r2, [r3, #16]
 8003d04:	887b      	ldrh	r3, [r7, #2]
 8003d06:	4013      	ands	r3, r2
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d002      	beq.n	8003d12 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	73fb      	strb	r3, [r7, #15]
 8003d10:	e001      	b.n	8003d16 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003d12:	2300      	movs	r3, #0
 8003d14:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003d16:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	3714      	adds	r7, #20
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d22:	4770      	bx	lr

08003d24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b083      	sub	sp, #12
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
 8003d2c:	460b      	mov	r3, r1
 8003d2e:	807b      	strh	r3, [r7, #2]
 8003d30:	4613      	mov	r3, r2
 8003d32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003d34:	787b      	ldrb	r3, [r7, #1]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d003      	beq.n	8003d42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003d3a:	887a      	ldrh	r2, [r7, #2]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003d40:	e002      	b.n	8003d48 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003d42:	887a      	ldrh	r2, [r7, #2]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003d48:	bf00      	nop
 8003d4a:	370c      	adds	r7, #12
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d52:	4770      	bx	lr

08003d54 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b085      	sub	sp, #20
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
 8003d5c:	460b      	mov	r3, r1
 8003d5e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	695b      	ldr	r3, [r3, #20]
 8003d64:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003d66:	887a      	ldrh	r2, [r7, #2]
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	4013      	ands	r3, r2
 8003d6c:	041a      	lsls	r2, r3, #16
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	43d9      	mvns	r1, r3
 8003d72:	887b      	ldrh	r3, [r7, #2]
 8003d74:	400b      	ands	r3, r1
 8003d76:	431a      	orrs	r2, r3
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	619a      	str	r2, [r3, #24]
}
 8003d7c:	bf00      	nop
 8003d7e:	3714      	adds	r7, #20
 8003d80:	46bd      	mov	sp, r7
 8003d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d86:	4770      	bx	lr

08003d88 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b082      	sub	sp, #8
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	4603      	mov	r3, r0
 8003d90:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003d92:	4b08      	ldr	r3, [pc, #32]	; (8003db4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003d94:	695a      	ldr	r2, [r3, #20]
 8003d96:	88fb      	ldrh	r3, [r7, #6]
 8003d98:	4013      	ands	r3, r2
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d006      	beq.n	8003dac <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003d9e:	4a05      	ldr	r2, [pc, #20]	; (8003db4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003da0:	88fb      	ldrh	r3, [r7, #6]
 8003da2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003da4:	88fb      	ldrh	r3, [r7, #6]
 8003da6:	4618      	mov	r0, r3
 8003da8:	f000 f806 	bl	8003db8 <HAL_GPIO_EXTI_Callback>
  }
}
 8003dac:	bf00      	nop
 8003dae:	3708      	adds	r7, #8
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bd80      	pop	{r7, pc}
 8003db4:	40010400 	.word	0x40010400

08003db8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003db8:	b480      	push	{r7}
 8003dba:	b083      	sub	sp, #12
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003dc2:	bf00      	nop
 8003dc4:	370c      	adds	r7, #12
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dcc:	4770      	bx	lr

08003dce <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003dce:	b580      	push	{r7, lr}
 8003dd0:	b082      	sub	sp, #8
 8003dd2:	af00      	add	r7, sp, #0
 8003dd4:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d101      	bne.n	8003de0 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003ddc:	2301      	movs	r3, #1
 8003dde:	e081      	b.n	8003ee4 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003de6:	b2db      	uxtb	r3, r3
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d106      	bne.n	8003dfa <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2200      	movs	r2, #0
 8003df0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003df4:	6878      	ldr	r0, [r7, #4]
 8003df6:	f7fe fbed 	bl	80025d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2224      	movs	r2, #36	; 0x24
 8003dfe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	681a      	ldr	r2, [r3, #0]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f022 0201 	bic.w	r2, r2, #1
 8003e10:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	685a      	ldr	r2, [r3, #4]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003e1e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	689a      	ldr	r2, [r3, #8]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003e2e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	68db      	ldr	r3, [r3, #12]
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	d107      	bne.n	8003e48 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	689a      	ldr	r2, [r3, #8]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003e44:	609a      	str	r2, [r3, #8]
 8003e46:	e006      	b.n	8003e56 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	689a      	ldr	r2, [r3, #8]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003e54:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	68db      	ldr	r3, [r3, #12]
 8003e5a:	2b02      	cmp	r3, #2
 8003e5c:	d104      	bne.n	8003e68 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003e66:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	687a      	ldr	r2, [r7, #4]
 8003e70:	6812      	ldr	r2, [r2, #0]
 8003e72:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003e76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e7a:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	68da      	ldr	r2, [r3, #12]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003e8a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	691a      	ldr	r2, [r3, #16]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	695b      	ldr	r3, [r3, #20]
 8003e94:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	699b      	ldr	r3, [r3, #24]
 8003e9c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	430a      	orrs	r2, r1
 8003ea4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	69d9      	ldr	r1, [r3, #28]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6a1a      	ldr	r2, [r3, #32]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	430a      	orrs	r2, r1
 8003eb4:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f042 0201 	orr.w	r2, r2, #1
 8003ec4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2220      	movs	r2, #32
 8003ed0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2200      	movs	r2, #0
 8003ede:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003ee2:	2300      	movs	r3, #0
}
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	3708      	adds	r7, #8
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bd80      	pop	{r7, pc}

08003eec <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b082      	sub	sp, #8
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d101      	bne.n	8003efe <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	e021      	b.n	8003f42 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2224      	movs	r2, #36	; 0x24
 8003f02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	681a      	ldr	r2, [r3, #0]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f022 0201 	bic.w	r2, r2, #1
 8003f14:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8003f16:	6878      	ldr	r0, [r7, #4]
 8003f18:	f7fe fbba 	bl	8002690 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2200      	movs	r2, #0
 8003f26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2200      	movs	r2, #0
 8003f34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003f40:	2300      	movs	r3, #0
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	3708      	adds	r7, #8
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}
	...

08003f4c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b088      	sub	sp, #32
 8003f50:	af02      	add	r7, sp, #8
 8003f52:	60f8      	str	r0, [r7, #12]
 8003f54:	4608      	mov	r0, r1
 8003f56:	4611      	mov	r1, r2
 8003f58:	461a      	mov	r2, r3
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	817b      	strh	r3, [r7, #10]
 8003f5e:	460b      	mov	r3, r1
 8003f60:	813b      	strh	r3, [r7, #8]
 8003f62:	4613      	mov	r3, r2
 8003f64:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f6c:	b2db      	uxtb	r3, r3
 8003f6e:	2b20      	cmp	r3, #32
 8003f70:	f040 80f9 	bne.w	8004166 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f74:	6a3b      	ldr	r3, [r7, #32]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d002      	beq.n	8003f80 <HAL_I2C_Mem_Write+0x34>
 8003f7a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d105      	bne.n	8003f8c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f86:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	e0ed      	b.n	8004168 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f92:	2b01      	cmp	r3, #1
 8003f94:	d101      	bne.n	8003f9a <HAL_I2C_Mem_Write+0x4e>
 8003f96:	2302      	movs	r3, #2
 8003f98:	e0e6      	b.n	8004168 <HAL_I2C_Mem_Write+0x21c>
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	2201      	movs	r2, #1
 8003f9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003fa2:	f7ff fa55 	bl	8003450 <HAL_GetTick>
 8003fa6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	9300      	str	r3, [sp, #0]
 8003fac:	2319      	movs	r3, #25
 8003fae:	2201      	movs	r2, #1
 8003fb0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003fb4:	68f8      	ldr	r0, [r7, #12]
 8003fb6:	f000 fac3 	bl	8004540 <I2C_WaitOnFlagUntilTimeout>
 8003fba:	4603      	mov	r3, r0
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d001      	beq.n	8003fc4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	e0d1      	b.n	8004168 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2221      	movs	r2, #33	; 0x21
 8003fc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	2240      	movs	r2, #64	; 0x40
 8003fd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	6a3a      	ldr	r2, [r7, #32]
 8003fde:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003fe4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003fec:	88f8      	ldrh	r0, [r7, #6]
 8003fee:	893a      	ldrh	r2, [r7, #8]
 8003ff0:	8979      	ldrh	r1, [r7, #10]
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	9301      	str	r3, [sp, #4]
 8003ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ff8:	9300      	str	r3, [sp, #0]
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	68f8      	ldr	r0, [r7, #12]
 8003ffe:	f000 f9d3 	bl	80043a8 <I2C_RequestMemoryWrite>
 8004002:	4603      	mov	r3, r0
 8004004:	2b00      	cmp	r3, #0
 8004006:	d005      	beq.n	8004014 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2200      	movs	r2, #0
 800400c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004010:	2301      	movs	r3, #1
 8004012:	e0a9      	b.n	8004168 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004018:	b29b      	uxth	r3, r3
 800401a:	2bff      	cmp	r3, #255	; 0xff
 800401c:	d90e      	bls.n	800403c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	22ff      	movs	r2, #255	; 0xff
 8004022:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004028:	b2da      	uxtb	r2, r3
 800402a:	8979      	ldrh	r1, [r7, #10]
 800402c:	2300      	movs	r3, #0
 800402e:	9300      	str	r3, [sp, #0]
 8004030:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004034:	68f8      	ldr	r0, [r7, #12]
 8004036:	f000 fc2b 	bl	8004890 <I2C_TransferConfig>
 800403a:	e00f      	b.n	800405c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004040:	b29a      	uxth	r2, r3
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800404a:	b2da      	uxtb	r2, r3
 800404c:	8979      	ldrh	r1, [r7, #10]
 800404e:	2300      	movs	r3, #0
 8004050:	9300      	str	r3, [sp, #0]
 8004052:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004056:	68f8      	ldr	r0, [r7, #12]
 8004058:	f000 fc1a 	bl	8004890 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800405c:	697a      	ldr	r2, [r7, #20]
 800405e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004060:	68f8      	ldr	r0, [r7, #12]
 8004062:	f000 faad 	bl	80045c0 <I2C_WaitOnTXISFlagUntilTimeout>
 8004066:	4603      	mov	r3, r0
 8004068:	2b00      	cmp	r3, #0
 800406a:	d001      	beq.n	8004070 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800406c:	2301      	movs	r3, #1
 800406e:	e07b      	b.n	8004168 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004074:	781a      	ldrb	r2, [r3, #0]
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004080:	1c5a      	adds	r2, r3, #1
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800408a:	b29b      	uxth	r3, r3
 800408c:	3b01      	subs	r3, #1
 800408e:	b29a      	uxth	r2, r3
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004098:	3b01      	subs	r3, #1
 800409a:	b29a      	uxth	r2, r3
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040a4:	b29b      	uxth	r3, r3
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d034      	beq.n	8004114 <HAL_I2C_Mem_Write+0x1c8>
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d130      	bne.n	8004114 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	9300      	str	r3, [sp, #0]
 80040b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040b8:	2200      	movs	r2, #0
 80040ba:	2180      	movs	r1, #128	; 0x80
 80040bc:	68f8      	ldr	r0, [r7, #12]
 80040be:	f000 fa3f 	bl	8004540 <I2C_WaitOnFlagUntilTimeout>
 80040c2:	4603      	mov	r3, r0
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d001      	beq.n	80040cc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80040c8:	2301      	movs	r3, #1
 80040ca:	e04d      	b.n	8004168 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040d0:	b29b      	uxth	r3, r3
 80040d2:	2bff      	cmp	r3, #255	; 0xff
 80040d4:	d90e      	bls.n	80040f4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	22ff      	movs	r2, #255	; 0xff
 80040da:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040e0:	b2da      	uxtb	r2, r3
 80040e2:	8979      	ldrh	r1, [r7, #10]
 80040e4:	2300      	movs	r3, #0
 80040e6:	9300      	str	r3, [sp, #0]
 80040e8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80040ec:	68f8      	ldr	r0, [r7, #12]
 80040ee:	f000 fbcf 	bl	8004890 <I2C_TransferConfig>
 80040f2:	e00f      	b.n	8004114 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040f8:	b29a      	uxth	r2, r3
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004102:	b2da      	uxtb	r2, r3
 8004104:	8979      	ldrh	r1, [r7, #10]
 8004106:	2300      	movs	r3, #0
 8004108:	9300      	str	r3, [sp, #0]
 800410a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800410e:	68f8      	ldr	r0, [r7, #12]
 8004110:	f000 fbbe 	bl	8004890 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004118:	b29b      	uxth	r3, r3
 800411a:	2b00      	cmp	r3, #0
 800411c:	d19e      	bne.n	800405c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800411e:	697a      	ldr	r2, [r7, #20]
 8004120:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004122:	68f8      	ldr	r0, [r7, #12]
 8004124:	f000 fa8c 	bl	8004640 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004128:	4603      	mov	r3, r0
 800412a:	2b00      	cmp	r3, #0
 800412c:	d001      	beq.n	8004132 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	e01a      	b.n	8004168 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	2220      	movs	r2, #32
 8004138:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	6859      	ldr	r1, [r3, #4]
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681a      	ldr	r2, [r3, #0]
 8004144:	4b0a      	ldr	r3, [pc, #40]	; (8004170 <HAL_I2C_Mem_Write+0x224>)
 8004146:	400b      	ands	r3, r1
 8004148:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	2220      	movs	r2, #32
 800414e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2200      	movs	r2, #0
 8004156:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2200      	movs	r2, #0
 800415e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004162:	2300      	movs	r3, #0
 8004164:	e000      	b.n	8004168 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004166:	2302      	movs	r3, #2
  }
}
 8004168:	4618      	mov	r0, r3
 800416a:	3718      	adds	r7, #24
 800416c:	46bd      	mov	sp, r7
 800416e:	bd80      	pop	{r7, pc}
 8004170:	fe00e800 	.word	0xfe00e800

08004174 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b088      	sub	sp, #32
 8004178:	af02      	add	r7, sp, #8
 800417a:	60f8      	str	r0, [r7, #12]
 800417c:	4608      	mov	r0, r1
 800417e:	4611      	mov	r1, r2
 8004180:	461a      	mov	r2, r3
 8004182:	4603      	mov	r3, r0
 8004184:	817b      	strh	r3, [r7, #10]
 8004186:	460b      	mov	r3, r1
 8004188:	813b      	strh	r3, [r7, #8]
 800418a:	4613      	mov	r3, r2
 800418c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004194:	b2db      	uxtb	r3, r3
 8004196:	2b20      	cmp	r3, #32
 8004198:	f040 80fd 	bne.w	8004396 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800419c:	6a3b      	ldr	r3, [r7, #32]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d002      	beq.n	80041a8 <HAL_I2C_Mem_Read+0x34>
 80041a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d105      	bne.n	80041b4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80041ae:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80041b0:	2301      	movs	r3, #1
 80041b2:	e0f1      	b.n	8004398 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80041ba:	2b01      	cmp	r3, #1
 80041bc:	d101      	bne.n	80041c2 <HAL_I2C_Mem_Read+0x4e>
 80041be:	2302      	movs	r3, #2
 80041c0:	e0ea      	b.n	8004398 <HAL_I2C_Mem_Read+0x224>
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	2201      	movs	r2, #1
 80041c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80041ca:	f7ff f941 	bl	8003450 <HAL_GetTick>
 80041ce:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80041d0:	697b      	ldr	r3, [r7, #20]
 80041d2:	9300      	str	r3, [sp, #0]
 80041d4:	2319      	movs	r3, #25
 80041d6:	2201      	movs	r2, #1
 80041d8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80041dc:	68f8      	ldr	r0, [r7, #12]
 80041de:	f000 f9af 	bl	8004540 <I2C_WaitOnFlagUntilTimeout>
 80041e2:	4603      	mov	r3, r0
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d001      	beq.n	80041ec <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80041e8:	2301      	movs	r3, #1
 80041ea:	e0d5      	b.n	8004398 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	2222      	movs	r2, #34	; 0x22
 80041f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	2240      	movs	r2, #64	; 0x40
 80041f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	2200      	movs	r2, #0
 8004200:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	6a3a      	ldr	r2, [r7, #32]
 8004206:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800420c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	2200      	movs	r2, #0
 8004212:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004214:	88f8      	ldrh	r0, [r7, #6]
 8004216:	893a      	ldrh	r2, [r7, #8]
 8004218:	8979      	ldrh	r1, [r7, #10]
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	9301      	str	r3, [sp, #4]
 800421e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004220:	9300      	str	r3, [sp, #0]
 8004222:	4603      	mov	r3, r0
 8004224:	68f8      	ldr	r0, [r7, #12]
 8004226:	f000 f913 	bl	8004450 <I2C_RequestMemoryRead>
 800422a:	4603      	mov	r3, r0
 800422c:	2b00      	cmp	r3, #0
 800422e:	d005      	beq.n	800423c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2200      	movs	r2, #0
 8004234:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004238:	2301      	movs	r3, #1
 800423a:	e0ad      	b.n	8004398 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004240:	b29b      	uxth	r3, r3
 8004242:	2bff      	cmp	r3, #255	; 0xff
 8004244:	d90e      	bls.n	8004264 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	22ff      	movs	r2, #255	; 0xff
 800424a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004250:	b2da      	uxtb	r2, r3
 8004252:	8979      	ldrh	r1, [r7, #10]
 8004254:	4b52      	ldr	r3, [pc, #328]	; (80043a0 <HAL_I2C_Mem_Read+0x22c>)
 8004256:	9300      	str	r3, [sp, #0]
 8004258:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800425c:	68f8      	ldr	r0, [r7, #12]
 800425e:	f000 fb17 	bl	8004890 <I2C_TransferConfig>
 8004262:	e00f      	b.n	8004284 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004268:	b29a      	uxth	r2, r3
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004272:	b2da      	uxtb	r2, r3
 8004274:	8979      	ldrh	r1, [r7, #10]
 8004276:	4b4a      	ldr	r3, [pc, #296]	; (80043a0 <HAL_I2C_Mem_Read+0x22c>)
 8004278:	9300      	str	r3, [sp, #0]
 800427a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800427e:	68f8      	ldr	r0, [r7, #12]
 8004280:	f000 fb06 	bl	8004890 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	9300      	str	r3, [sp, #0]
 8004288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800428a:	2200      	movs	r2, #0
 800428c:	2104      	movs	r1, #4
 800428e:	68f8      	ldr	r0, [r7, #12]
 8004290:	f000 f956 	bl	8004540 <I2C_WaitOnFlagUntilTimeout>
 8004294:	4603      	mov	r3, r0
 8004296:	2b00      	cmp	r3, #0
 8004298:	d001      	beq.n	800429e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800429a:	2301      	movs	r3, #1
 800429c:	e07c      	b.n	8004398 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a8:	b2d2      	uxtb	r2, r2
 80042aa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b0:	1c5a      	adds	r2, r3, #1
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042ba:	3b01      	subs	r3, #1
 80042bc:	b29a      	uxth	r2, r3
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042c6:	b29b      	uxth	r3, r3
 80042c8:	3b01      	subs	r3, #1
 80042ca:	b29a      	uxth	r2, r3
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042d4:	b29b      	uxth	r3, r3
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d034      	beq.n	8004344 <HAL_I2C_Mem_Read+0x1d0>
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d130      	bne.n	8004344 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	9300      	str	r3, [sp, #0]
 80042e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042e8:	2200      	movs	r2, #0
 80042ea:	2180      	movs	r1, #128	; 0x80
 80042ec:	68f8      	ldr	r0, [r7, #12]
 80042ee:	f000 f927 	bl	8004540 <I2C_WaitOnFlagUntilTimeout>
 80042f2:	4603      	mov	r3, r0
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d001      	beq.n	80042fc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80042f8:	2301      	movs	r3, #1
 80042fa:	e04d      	b.n	8004398 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004300:	b29b      	uxth	r3, r3
 8004302:	2bff      	cmp	r3, #255	; 0xff
 8004304:	d90e      	bls.n	8004324 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	22ff      	movs	r2, #255	; 0xff
 800430a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004310:	b2da      	uxtb	r2, r3
 8004312:	8979      	ldrh	r1, [r7, #10]
 8004314:	2300      	movs	r3, #0
 8004316:	9300      	str	r3, [sp, #0]
 8004318:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800431c:	68f8      	ldr	r0, [r7, #12]
 800431e:	f000 fab7 	bl	8004890 <I2C_TransferConfig>
 8004322:	e00f      	b.n	8004344 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004328:	b29a      	uxth	r2, r3
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004332:	b2da      	uxtb	r2, r3
 8004334:	8979      	ldrh	r1, [r7, #10]
 8004336:	2300      	movs	r3, #0
 8004338:	9300      	str	r3, [sp, #0]
 800433a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800433e:	68f8      	ldr	r0, [r7, #12]
 8004340:	f000 faa6 	bl	8004890 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004348:	b29b      	uxth	r3, r3
 800434a:	2b00      	cmp	r3, #0
 800434c:	d19a      	bne.n	8004284 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800434e:	697a      	ldr	r2, [r7, #20]
 8004350:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004352:	68f8      	ldr	r0, [r7, #12]
 8004354:	f000 f974 	bl	8004640 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004358:	4603      	mov	r3, r0
 800435a:	2b00      	cmp	r3, #0
 800435c:	d001      	beq.n	8004362 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800435e:	2301      	movs	r3, #1
 8004360:	e01a      	b.n	8004398 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	2220      	movs	r2, #32
 8004368:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	6859      	ldr	r1, [r3, #4]
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681a      	ldr	r2, [r3, #0]
 8004374:	4b0b      	ldr	r3, [pc, #44]	; (80043a4 <HAL_I2C_Mem_Read+0x230>)
 8004376:	400b      	ands	r3, r1
 8004378:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	2220      	movs	r2, #32
 800437e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	2200      	movs	r2, #0
 8004386:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	2200      	movs	r2, #0
 800438e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004392:	2300      	movs	r3, #0
 8004394:	e000      	b.n	8004398 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004396:	2302      	movs	r3, #2
  }
}
 8004398:	4618      	mov	r0, r3
 800439a:	3718      	adds	r7, #24
 800439c:	46bd      	mov	sp, r7
 800439e:	bd80      	pop	{r7, pc}
 80043a0:	80002400 	.word	0x80002400
 80043a4:	fe00e800 	.word	0xfe00e800

080043a8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b086      	sub	sp, #24
 80043ac:	af02      	add	r7, sp, #8
 80043ae:	60f8      	str	r0, [r7, #12]
 80043b0:	4608      	mov	r0, r1
 80043b2:	4611      	mov	r1, r2
 80043b4:	461a      	mov	r2, r3
 80043b6:	4603      	mov	r3, r0
 80043b8:	817b      	strh	r3, [r7, #10]
 80043ba:	460b      	mov	r3, r1
 80043bc:	813b      	strh	r3, [r7, #8]
 80043be:	4613      	mov	r3, r2
 80043c0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80043c2:	88fb      	ldrh	r3, [r7, #6]
 80043c4:	b2da      	uxtb	r2, r3
 80043c6:	8979      	ldrh	r1, [r7, #10]
 80043c8:	4b20      	ldr	r3, [pc, #128]	; (800444c <I2C_RequestMemoryWrite+0xa4>)
 80043ca:	9300      	str	r3, [sp, #0]
 80043cc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80043d0:	68f8      	ldr	r0, [r7, #12]
 80043d2:	f000 fa5d 	bl	8004890 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80043d6:	69fa      	ldr	r2, [r7, #28]
 80043d8:	69b9      	ldr	r1, [r7, #24]
 80043da:	68f8      	ldr	r0, [r7, #12]
 80043dc:	f000 f8f0 	bl	80045c0 <I2C_WaitOnTXISFlagUntilTimeout>
 80043e0:	4603      	mov	r3, r0
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d001      	beq.n	80043ea <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80043e6:	2301      	movs	r3, #1
 80043e8:	e02c      	b.n	8004444 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80043ea:	88fb      	ldrh	r3, [r7, #6]
 80043ec:	2b01      	cmp	r3, #1
 80043ee:	d105      	bne.n	80043fc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80043f0:	893b      	ldrh	r3, [r7, #8]
 80043f2:	b2da      	uxtb	r2, r3
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	629a      	str	r2, [r3, #40]	; 0x28
 80043fa:	e015      	b.n	8004428 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80043fc:	893b      	ldrh	r3, [r7, #8]
 80043fe:	0a1b      	lsrs	r3, r3, #8
 8004400:	b29b      	uxth	r3, r3
 8004402:	b2da      	uxtb	r2, r3
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800440a:	69fa      	ldr	r2, [r7, #28]
 800440c:	69b9      	ldr	r1, [r7, #24]
 800440e:	68f8      	ldr	r0, [r7, #12]
 8004410:	f000 f8d6 	bl	80045c0 <I2C_WaitOnTXISFlagUntilTimeout>
 8004414:	4603      	mov	r3, r0
 8004416:	2b00      	cmp	r3, #0
 8004418:	d001      	beq.n	800441e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800441a:	2301      	movs	r3, #1
 800441c:	e012      	b.n	8004444 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800441e:	893b      	ldrh	r3, [r7, #8]
 8004420:	b2da      	uxtb	r2, r3
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004428:	69fb      	ldr	r3, [r7, #28]
 800442a:	9300      	str	r3, [sp, #0]
 800442c:	69bb      	ldr	r3, [r7, #24]
 800442e:	2200      	movs	r2, #0
 8004430:	2180      	movs	r1, #128	; 0x80
 8004432:	68f8      	ldr	r0, [r7, #12]
 8004434:	f000 f884 	bl	8004540 <I2C_WaitOnFlagUntilTimeout>
 8004438:	4603      	mov	r3, r0
 800443a:	2b00      	cmp	r3, #0
 800443c:	d001      	beq.n	8004442 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	e000      	b.n	8004444 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004442:	2300      	movs	r3, #0
}
 8004444:	4618      	mov	r0, r3
 8004446:	3710      	adds	r7, #16
 8004448:	46bd      	mov	sp, r7
 800444a:	bd80      	pop	{r7, pc}
 800444c:	80002000 	.word	0x80002000

08004450 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b086      	sub	sp, #24
 8004454:	af02      	add	r7, sp, #8
 8004456:	60f8      	str	r0, [r7, #12]
 8004458:	4608      	mov	r0, r1
 800445a:	4611      	mov	r1, r2
 800445c:	461a      	mov	r2, r3
 800445e:	4603      	mov	r3, r0
 8004460:	817b      	strh	r3, [r7, #10]
 8004462:	460b      	mov	r3, r1
 8004464:	813b      	strh	r3, [r7, #8]
 8004466:	4613      	mov	r3, r2
 8004468:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800446a:	88fb      	ldrh	r3, [r7, #6]
 800446c:	b2da      	uxtb	r2, r3
 800446e:	8979      	ldrh	r1, [r7, #10]
 8004470:	4b20      	ldr	r3, [pc, #128]	; (80044f4 <I2C_RequestMemoryRead+0xa4>)
 8004472:	9300      	str	r3, [sp, #0]
 8004474:	2300      	movs	r3, #0
 8004476:	68f8      	ldr	r0, [r7, #12]
 8004478:	f000 fa0a 	bl	8004890 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800447c:	69fa      	ldr	r2, [r7, #28]
 800447e:	69b9      	ldr	r1, [r7, #24]
 8004480:	68f8      	ldr	r0, [r7, #12]
 8004482:	f000 f89d 	bl	80045c0 <I2C_WaitOnTXISFlagUntilTimeout>
 8004486:	4603      	mov	r3, r0
 8004488:	2b00      	cmp	r3, #0
 800448a:	d001      	beq.n	8004490 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800448c:	2301      	movs	r3, #1
 800448e:	e02c      	b.n	80044ea <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004490:	88fb      	ldrh	r3, [r7, #6]
 8004492:	2b01      	cmp	r3, #1
 8004494:	d105      	bne.n	80044a2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004496:	893b      	ldrh	r3, [r7, #8]
 8004498:	b2da      	uxtb	r2, r3
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	629a      	str	r2, [r3, #40]	; 0x28
 80044a0:	e015      	b.n	80044ce <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80044a2:	893b      	ldrh	r3, [r7, #8]
 80044a4:	0a1b      	lsrs	r3, r3, #8
 80044a6:	b29b      	uxth	r3, r3
 80044a8:	b2da      	uxtb	r2, r3
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80044b0:	69fa      	ldr	r2, [r7, #28]
 80044b2:	69b9      	ldr	r1, [r7, #24]
 80044b4:	68f8      	ldr	r0, [r7, #12]
 80044b6:	f000 f883 	bl	80045c0 <I2C_WaitOnTXISFlagUntilTimeout>
 80044ba:	4603      	mov	r3, r0
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d001      	beq.n	80044c4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80044c0:	2301      	movs	r3, #1
 80044c2:	e012      	b.n	80044ea <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80044c4:	893b      	ldrh	r3, [r7, #8]
 80044c6:	b2da      	uxtb	r2, r3
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80044ce:	69fb      	ldr	r3, [r7, #28]
 80044d0:	9300      	str	r3, [sp, #0]
 80044d2:	69bb      	ldr	r3, [r7, #24]
 80044d4:	2200      	movs	r2, #0
 80044d6:	2140      	movs	r1, #64	; 0x40
 80044d8:	68f8      	ldr	r0, [r7, #12]
 80044da:	f000 f831 	bl	8004540 <I2C_WaitOnFlagUntilTimeout>
 80044de:	4603      	mov	r3, r0
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d001      	beq.n	80044e8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80044e4:	2301      	movs	r3, #1
 80044e6:	e000      	b.n	80044ea <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80044e8:	2300      	movs	r3, #0
}
 80044ea:	4618      	mov	r0, r3
 80044ec:	3710      	adds	r7, #16
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}
 80044f2:	bf00      	nop
 80044f4:	80002000 	.word	0x80002000

080044f8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b083      	sub	sp, #12
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	699b      	ldr	r3, [r3, #24]
 8004506:	f003 0302 	and.w	r3, r3, #2
 800450a:	2b02      	cmp	r3, #2
 800450c:	d103      	bne.n	8004516 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	2200      	movs	r2, #0
 8004514:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	699b      	ldr	r3, [r3, #24]
 800451c:	f003 0301 	and.w	r3, r3, #1
 8004520:	2b01      	cmp	r3, #1
 8004522:	d007      	beq.n	8004534 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	699a      	ldr	r2, [r3, #24]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f042 0201 	orr.w	r2, r2, #1
 8004532:	619a      	str	r2, [r3, #24]
  }
}
 8004534:	bf00      	nop
 8004536:	370c      	adds	r7, #12
 8004538:	46bd      	mov	sp, r7
 800453a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453e:	4770      	bx	lr

08004540 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b084      	sub	sp, #16
 8004544:	af00      	add	r7, sp, #0
 8004546:	60f8      	str	r0, [r7, #12]
 8004548:	60b9      	str	r1, [r7, #8]
 800454a:	603b      	str	r3, [r7, #0]
 800454c:	4613      	mov	r3, r2
 800454e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004550:	e022      	b.n	8004598 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004558:	d01e      	beq.n	8004598 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800455a:	f7fe ff79 	bl	8003450 <HAL_GetTick>
 800455e:	4602      	mov	r2, r0
 8004560:	69bb      	ldr	r3, [r7, #24]
 8004562:	1ad3      	subs	r3, r2, r3
 8004564:	683a      	ldr	r2, [r7, #0]
 8004566:	429a      	cmp	r2, r3
 8004568:	d302      	bcc.n	8004570 <I2C_WaitOnFlagUntilTimeout+0x30>
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d113      	bne.n	8004598 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004574:	f043 0220 	orr.w	r2, r3, #32
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	2220      	movs	r2, #32
 8004580:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	2200      	movs	r2, #0
 8004588:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	2200      	movs	r2, #0
 8004590:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004594:	2301      	movs	r3, #1
 8004596:	e00f      	b.n	80045b8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	699a      	ldr	r2, [r3, #24]
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	4013      	ands	r3, r2
 80045a2:	68ba      	ldr	r2, [r7, #8]
 80045a4:	429a      	cmp	r2, r3
 80045a6:	bf0c      	ite	eq
 80045a8:	2301      	moveq	r3, #1
 80045aa:	2300      	movne	r3, #0
 80045ac:	b2db      	uxtb	r3, r3
 80045ae:	461a      	mov	r2, r3
 80045b0:	79fb      	ldrb	r3, [r7, #7]
 80045b2:	429a      	cmp	r2, r3
 80045b4:	d0cd      	beq.n	8004552 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80045b6:	2300      	movs	r3, #0
}
 80045b8:	4618      	mov	r0, r3
 80045ba:	3710      	adds	r7, #16
 80045bc:	46bd      	mov	sp, r7
 80045be:	bd80      	pop	{r7, pc}

080045c0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b084      	sub	sp, #16
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	60f8      	str	r0, [r7, #12]
 80045c8:	60b9      	str	r1, [r7, #8]
 80045ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80045cc:	e02c      	b.n	8004628 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80045ce:	687a      	ldr	r2, [r7, #4]
 80045d0:	68b9      	ldr	r1, [r7, #8]
 80045d2:	68f8      	ldr	r0, [r7, #12]
 80045d4:	f000 f870 	bl	80046b8 <I2C_IsErrorOccurred>
 80045d8:	4603      	mov	r3, r0
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d001      	beq.n	80045e2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	e02a      	b.n	8004638 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045e8:	d01e      	beq.n	8004628 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045ea:	f7fe ff31 	bl	8003450 <HAL_GetTick>
 80045ee:	4602      	mov	r2, r0
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	1ad3      	subs	r3, r2, r3
 80045f4:	68ba      	ldr	r2, [r7, #8]
 80045f6:	429a      	cmp	r2, r3
 80045f8:	d302      	bcc.n	8004600 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d113      	bne.n	8004628 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004604:	f043 0220 	orr.w	r2, r3, #32
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	2220      	movs	r2, #32
 8004610:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	2200      	movs	r2, #0
 8004618:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2200      	movs	r2, #0
 8004620:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004624:	2301      	movs	r3, #1
 8004626:	e007      	b.n	8004638 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	699b      	ldr	r3, [r3, #24]
 800462e:	f003 0302 	and.w	r3, r3, #2
 8004632:	2b02      	cmp	r3, #2
 8004634:	d1cb      	bne.n	80045ce <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004636:	2300      	movs	r3, #0
}
 8004638:	4618      	mov	r0, r3
 800463a:	3710      	adds	r7, #16
 800463c:	46bd      	mov	sp, r7
 800463e:	bd80      	pop	{r7, pc}

08004640 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b084      	sub	sp, #16
 8004644:	af00      	add	r7, sp, #0
 8004646:	60f8      	str	r0, [r7, #12]
 8004648:	60b9      	str	r1, [r7, #8]
 800464a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800464c:	e028      	b.n	80046a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800464e:	687a      	ldr	r2, [r7, #4]
 8004650:	68b9      	ldr	r1, [r7, #8]
 8004652:	68f8      	ldr	r0, [r7, #12]
 8004654:	f000 f830 	bl	80046b8 <I2C_IsErrorOccurred>
 8004658:	4603      	mov	r3, r0
 800465a:	2b00      	cmp	r3, #0
 800465c:	d001      	beq.n	8004662 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800465e:	2301      	movs	r3, #1
 8004660:	e026      	b.n	80046b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004662:	f7fe fef5 	bl	8003450 <HAL_GetTick>
 8004666:	4602      	mov	r2, r0
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	1ad3      	subs	r3, r2, r3
 800466c:	68ba      	ldr	r2, [r7, #8]
 800466e:	429a      	cmp	r2, r3
 8004670:	d302      	bcc.n	8004678 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d113      	bne.n	80046a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800467c:	f043 0220 	orr.w	r2, r3, #32
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	2220      	movs	r2, #32
 8004688:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	2200      	movs	r2, #0
 8004690:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	2200      	movs	r2, #0
 8004698:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800469c:	2301      	movs	r3, #1
 800469e:	e007      	b.n	80046b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	699b      	ldr	r3, [r3, #24]
 80046a6:	f003 0320 	and.w	r3, r3, #32
 80046aa:	2b20      	cmp	r3, #32
 80046ac:	d1cf      	bne.n	800464e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80046ae:	2300      	movs	r3, #0
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	3710      	adds	r7, #16
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bd80      	pop	{r7, pc}

080046b8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b08a      	sub	sp, #40	; 0x28
 80046bc:	af00      	add	r7, sp, #0
 80046be:	60f8      	str	r0, [r7, #12]
 80046c0:	60b9      	str	r1, [r7, #8]
 80046c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80046c4:	2300      	movs	r3, #0
 80046c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	699b      	ldr	r3, [r3, #24]
 80046d0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80046d2:	2300      	movs	r3, #0
 80046d4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80046da:	69bb      	ldr	r3, [r7, #24]
 80046dc:	f003 0310 	and.w	r3, r3, #16
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d075      	beq.n	80047d0 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	2210      	movs	r2, #16
 80046ea:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80046ec:	e056      	b.n	800479c <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046f4:	d052      	beq.n	800479c <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80046f6:	f7fe feab 	bl	8003450 <HAL_GetTick>
 80046fa:	4602      	mov	r2, r0
 80046fc:	69fb      	ldr	r3, [r7, #28]
 80046fe:	1ad3      	subs	r3, r2, r3
 8004700:	68ba      	ldr	r2, [r7, #8]
 8004702:	429a      	cmp	r2, r3
 8004704:	d302      	bcc.n	800470c <I2C_IsErrorOccurred+0x54>
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d147      	bne.n	800479c <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004716:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800471e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	699b      	ldr	r3, [r3, #24]
 8004726:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800472a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800472e:	d12e      	bne.n	800478e <I2C_IsErrorOccurred+0xd6>
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004736:	d02a      	beq.n	800478e <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8004738:	7cfb      	ldrb	r3, [r7, #19]
 800473a:	2b20      	cmp	r3, #32
 800473c:	d027      	beq.n	800478e <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	685a      	ldr	r2, [r3, #4]
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800474c:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800474e:	f7fe fe7f 	bl	8003450 <HAL_GetTick>
 8004752:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004754:	e01b      	b.n	800478e <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004756:	f7fe fe7b 	bl	8003450 <HAL_GetTick>
 800475a:	4602      	mov	r2, r0
 800475c:	69fb      	ldr	r3, [r7, #28]
 800475e:	1ad3      	subs	r3, r2, r3
 8004760:	2b19      	cmp	r3, #25
 8004762:	d914      	bls.n	800478e <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004768:	f043 0220 	orr.w	r2, r3, #32
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	2220      	movs	r2, #32
 8004774:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	2200      	movs	r2, #0
 800477c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	2200      	movs	r2, #0
 8004784:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8004788:	2301      	movs	r3, #1
 800478a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	699b      	ldr	r3, [r3, #24]
 8004794:	f003 0320 	and.w	r3, r3, #32
 8004798:	2b20      	cmp	r3, #32
 800479a:	d1dc      	bne.n	8004756 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	699b      	ldr	r3, [r3, #24]
 80047a2:	f003 0320 	and.w	r3, r3, #32
 80047a6:	2b20      	cmp	r3, #32
 80047a8:	d003      	beq.n	80047b2 <I2C_IsErrorOccurred+0xfa>
 80047aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d09d      	beq.n	80046ee <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80047b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d103      	bne.n	80047c2 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	2220      	movs	r2, #32
 80047c0:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80047c2:	6a3b      	ldr	r3, [r7, #32]
 80047c4:	f043 0304 	orr.w	r3, r3, #4
 80047c8:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80047ca:	2301      	movs	r3, #1
 80047cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	699b      	ldr	r3, [r3, #24]
 80047d6:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80047d8:	69bb      	ldr	r3, [r7, #24]
 80047da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d00b      	beq.n	80047fa <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80047e2:	6a3b      	ldr	r3, [r7, #32]
 80047e4:	f043 0301 	orr.w	r3, r3, #1
 80047e8:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80047f2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80047f4:	2301      	movs	r3, #1
 80047f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80047fa:	69bb      	ldr	r3, [r7, #24]
 80047fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004800:	2b00      	cmp	r3, #0
 8004802:	d00b      	beq.n	800481c <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004804:	6a3b      	ldr	r3, [r7, #32]
 8004806:	f043 0308 	orr.w	r3, r3, #8
 800480a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004814:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004816:	2301      	movs	r3, #1
 8004818:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800481c:	69bb      	ldr	r3, [r7, #24]
 800481e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004822:	2b00      	cmp	r3, #0
 8004824:	d00b      	beq.n	800483e <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004826:	6a3b      	ldr	r3, [r7, #32]
 8004828:	f043 0302 	orr.w	r3, r3, #2
 800482c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004836:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004838:	2301      	movs	r3, #1
 800483a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800483e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004842:	2b00      	cmp	r3, #0
 8004844:	d01c      	beq.n	8004880 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004846:	68f8      	ldr	r0, [r7, #12]
 8004848:	f7ff fe56 	bl	80044f8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	6859      	ldr	r1, [r3, #4]
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681a      	ldr	r2, [r3, #0]
 8004856:	4b0d      	ldr	r3, [pc, #52]	; (800488c <I2C_IsErrorOccurred+0x1d4>)
 8004858:	400b      	ands	r3, r1
 800485a:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004860:	6a3b      	ldr	r3, [r7, #32]
 8004862:	431a      	orrs	r2, r3
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	2220      	movs	r2, #32
 800486c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	2200      	movs	r2, #0
 8004874:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	2200      	movs	r2, #0
 800487c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8004880:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004884:	4618      	mov	r0, r3
 8004886:	3728      	adds	r7, #40	; 0x28
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}
 800488c:	fe00e800 	.word	0xfe00e800

08004890 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004890:	b480      	push	{r7}
 8004892:	b087      	sub	sp, #28
 8004894:	af00      	add	r7, sp, #0
 8004896:	60f8      	str	r0, [r7, #12]
 8004898:	607b      	str	r3, [r7, #4]
 800489a:	460b      	mov	r3, r1
 800489c:	817b      	strh	r3, [r7, #10]
 800489e:	4613      	mov	r3, r2
 80048a0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80048a2:	897b      	ldrh	r3, [r7, #10]
 80048a4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80048a8:	7a7b      	ldrb	r3, [r7, #9]
 80048aa:	041b      	lsls	r3, r3, #16
 80048ac:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80048b0:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80048b6:	6a3b      	ldr	r3, [r7, #32]
 80048b8:	4313      	orrs	r3, r2
 80048ba:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80048be:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	685a      	ldr	r2, [r3, #4]
 80048c6:	6a3b      	ldr	r3, [r7, #32]
 80048c8:	0d5b      	lsrs	r3, r3, #21
 80048ca:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80048ce:	4b08      	ldr	r3, [pc, #32]	; (80048f0 <I2C_TransferConfig+0x60>)
 80048d0:	430b      	orrs	r3, r1
 80048d2:	43db      	mvns	r3, r3
 80048d4:	ea02 0103 	and.w	r1, r2, r3
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	697a      	ldr	r2, [r7, #20]
 80048de:	430a      	orrs	r2, r1
 80048e0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80048e2:	bf00      	nop
 80048e4:	371c      	adds	r7, #28
 80048e6:	46bd      	mov	sp, r7
 80048e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ec:	4770      	bx	lr
 80048ee:	bf00      	nop
 80048f0:	03ff63ff 	.word	0x03ff63ff

080048f4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80048f4:	b480      	push	{r7}
 80048f6:	b083      	sub	sp, #12
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
 80048fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004904:	b2db      	uxtb	r3, r3
 8004906:	2b20      	cmp	r3, #32
 8004908:	d138      	bne.n	800497c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004910:	2b01      	cmp	r3, #1
 8004912:	d101      	bne.n	8004918 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004914:	2302      	movs	r3, #2
 8004916:	e032      	b.n	800497e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2201      	movs	r2, #1
 800491c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2224      	movs	r2, #36	; 0x24
 8004924:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	681a      	ldr	r2, [r3, #0]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f022 0201 	bic.w	r2, r2, #1
 8004936:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	681a      	ldr	r2, [r3, #0]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004946:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	6819      	ldr	r1, [r3, #0]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	683a      	ldr	r2, [r7, #0]
 8004954:	430a      	orrs	r2, r1
 8004956:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	681a      	ldr	r2, [r3, #0]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f042 0201 	orr.w	r2, r2, #1
 8004966:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2220      	movs	r2, #32
 800496c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2200      	movs	r2, #0
 8004974:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004978:	2300      	movs	r3, #0
 800497a:	e000      	b.n	800497e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800497c:	2302      	movs	r3, #2
  }
}
 800497e:	4618      	mov	r0, r3
 8004980:	370c      	adds	r7, #12
 8004982:	46bd      	mov	sp, r7
 8004984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004988:	4770      	bx	lr

0800498a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800498a:	b480      	push	{r7}
 800498c:	b085      	sub	sp, #20
 800498e:	af00      	add	r7, sp, #0
 8004990:	6078      	str	r0, [r7, #4]
 8004992:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800499a:	b2db      	uxtb	r3, r3
 800499c:	2b20      	cmp	r3, #32
 800499e:	d139      	bne.n	8004a14 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80049a6:	2b01      	cmp	r3, #1
 80049a8:	d101      	bne.n	80049ae <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80049aa:	2302      	movs	r3, #2
 80049ac:	e033      	b.n	8004a16 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2201      	movs	r2, #1
 80049b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2224      	movs	r2, #36	; 0x24
 80049ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	681a      	ldr	r2, [r3, #0]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f022 0201 	bic.w	r2, r2, #1
 80049cc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80049dc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	021b      	lsls	r3, r3, #8
 80049e2:	68fa      	ldr	r2, [r7, #12]
 80049e4:	4313      	orrs	r3, r2
 80049e6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	68fa      	ldr	r2, [r7, #12]
 80049ee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	681a      	ldr	r2, [r3, #0]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f042 0201 	orr.w	r2, r2, #1
 80049fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2220      	movs	r2, #32
 8004a04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004a10:	2300      	movs	r3, #0
 8004a12:	e000      	b.n	8004a16 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004a14:	2302      	movs	r3, #2
  }
}
 8004a16:	4618      	mov	r0, r3
 8004a18:	3714      	adds	r7, #20
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a20:	4770      	bx	lr
	...

08004a24 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004a24:	b480      	push	{r7}
 8004a26:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004a28:	4b04      	ldr	r3, [pc, #16]	; (8004a3c <HAL_PWREx_GetVoltageRange+0x18>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004a30:	4618      	mov	r0, r3
 8004a32:	46bd      	mov	sp, r7
 8004a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a38:	4770      	bx	lr
 8004a3a:	bf00      	nop
 8004a3c:	40007000 	.word	0x40007000

08004a40 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004a40:	b480      	push	{r7}
 8004a42:	b085      	sub	sp, #20
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a4e:	d130      	bne.n	8004ab2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004a50:	4b23      	ldr	r3, [pc, #140]	; (8004ae0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004a58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a5c:	d038      	beq.n	8004ad0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004a5e:	4b20      	ldr	r3, [pc, #128]	; (8004ae0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004a66:	4a1e      	ldr	r2, [pc, #120]	; (8004ae0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a68:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004a6c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004a6e:	4b1d      	ldr	r3, [pc, #116]	; (8004ae4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	2232      	movs	r2, #50	; 0x32
 8004a74:	fb02 f303 	mul.w	r3, r2, r3
 8004a78:	4a1b      	ldr	r2, [pc, #108]	; (8004ae8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004a7a:	fba2 2303 	umull	r2, r3, r2, r3
 8004a7e:	0c9b      	lsrs	r3, r3, #18
 8004a80:	3301      	adds	r3, #1
 8004a82:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004a84:	e002      	b.n	8004a8c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	3b01      	subs	r3, #1
 8004a8a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004a8c:	4b14      	ldr	r3, [pc, #80]	; (8004ae0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a8e:	695b      	ldr	r3, [r3, #20]
 8004a90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a98:	d102      	bne.n	8004aa0 <HAL_PWREx_ControlVoltageScaling+0x60>
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d1f2      	bne.n	8004a86 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004aa0:	4b0f      	ldr	r3, [pc, #60]	; (8004ae0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004aa2:	695b      	ldr	r3, [r3, #20]
 8004aa4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004aa8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004aac:	d110      	bne.n	8004ad0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004aae:	2303      	movs	r3, #3
 8004ab0:	e00f      	b.n	8004ad2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004ab2:	4b0b      	ldr	r3, [pc, #44]	; (8004ae0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004aba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004abe:	d007      	beq.n	8004ad0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004ac0:	4b07      	ldr	r3, [pc, #28]	; (8004ae0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004ac8:	4a05      	ldr	r2, [pc, #20]	; (8004ae0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004aca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004ace:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004ad0:	2300      	movs	r3, #0
}
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	3714      	adds	r7, #20
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004adc:	4770      	bx	lr
 8004ade:	bf00      	nop
 8004ae0:	40007000 	.word	0x40007000
 8004ae4:	20000004 	.word	0x20000004
 8004ae8:	431bde83 	.word	0x431bde83

08004aec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b088      	sub	sp, #32
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d101      	bne.n	8004afe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004afa:	2301      	movs	r3, #1
 8004afc:	e3d4      	b.n	80052a8 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004afe:	4ba1      	ldr	r3, [pc, #644]	; (8004d84 <HAL_RCC_OscConfig+0x298>)
 8004b00:	689b      	ldr	r3, [r3, #8]
 8004b02:	f003 030c 	and.w	r3, r3, #12
 8004b06:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004b08:	4b9e      	ldr	r3, [pc, #632]	; (8004d84 <HAL_RCC_OscConfig+0x298>)
 8004b0a:	68db      	ldr	r3, [r3, #12]
 8004b0c:	f003 0303 	and.w	r3, r3, #3
 8004b10:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f003 0310 	and.w	r3, r3, #16
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	f000 80e4 	beq.w	8004ce8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004b20:	69bb      	ldr	r3, [r7, #24]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d007      	beq.n	8004b36 <HAL_RCC_OscConfig+0x4a>
 8004b26:	69bb      	ldr	r3, [r7, #24]
 8004b28:	2b0c      	cmp	r3, #12
 8004b2a:	f040 808b 	bne.w	8004c44 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	2b01      	cmp	r3, #1
 8004b32:	f040 8087 	bne.w	8004c44 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004b36:	4b93      	ldr	r3, [pc, #588]	; (8004d84 <HAL_RCC_OscConfig+0x298>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f003 0302 	and.w	r3, r3, #2
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d005      	beq.n	8004b4e <HAL_RCC_OscConfig+0x62>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	699b      	ldr	r3, [r3, #24]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d101      	bne.n	8004b4e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	e3ac      	b.n	80052a8 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6a1a      	ldr	r2, [r3, #32]
 8004b52:	4b8c      	ldr	r3, [pc, #560]	; (8004d84 <HAL_RCC_OscConfig+0x298>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f003 0308 	and.w	r3, r3, #8
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d004      	beq.n	8004b68 <HAL_RCC_OscConfig+0x7c>
 8004b5e:	4b89      	ldr	r3, [pc, #548]	; (8004d84 <HAL_RCC_OscConfig+0x298>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b66:	e005      	b.n	8004b74 <HAL_RCC_OscConfig+0x88>
 8004b68:	4b86      	ldr	r3, [pc, #536]	; (8004d84 <HAL_RCC_OscConfig+0x298>)
 8004b6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b6e:	091b      	lsrs	r3, r3, #4
 8004b70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d223      	bcs.n	8004bc0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6a1b      	ldr	r3, [r3, #32]
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	f000 fd41 	bl	8005604 <RCC_SetFlashLatencyFromMSIRange>
 8004b82:	4603      	mov	r3, r0
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d001      	beq.n	8004b8c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004b88:	2301      	movs	r3, #1
 8004b8a:	e38d      	b.n	80052a8 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004b8c:	4b7d      	ldr	r3, [pc, #500]	; (8004d84 <HAL_RCC_OscConfig+0x298>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a7c      	ldr	r2, [pc, #496]	; (8004d84 <HAL_RCC_OscConfig+0x298>)
 8004b92:	f043 0308 	orr.w	r3, r3, #8
 8004b96:	6013      	str	r3, [r2, #0]
 8004b98:	4b7a      	ldr	r3, [pc, #488]	; (8004d84 <HAL_RCC_OscConfig+0x298>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6a1b      	ldr	r3, [r3, #32]
 8004ba4:	4977      	ldr	r1, [pc, #476]	; (8004d84 <HAL_RCC_OscConfig+0x298>)
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004baa:	4b76      	ldr	r3, [pc, #472]	; (8004d84 <HAL_RCC_OscConfig+0x298>)
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	69db      	ldr	r3, [r3, #28]
 8004bb6:	021b      	lsls	r3, r3, #8
 8004bb8:	4972      	ldr	r1, [pc, #456]	; (8004d84 <HAL_RCC_OscConfig+0x298>)
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	604b      	str	r3, [r1, #4]
 8004bbe:	e025      	b.n	8004c0c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004bc0:	4b70      	ldr	r3, [pc, #448]	; (8004d84 <HAL_RCC_OscConfig+0x298>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a6f      	ldr	r2, [pc, #444]	; (8004d84 <HAL_RCC_OscConfig+0x298>)
 8004bc6:	f043 0308 	orr.w	r3, r3, #8
 8004bca:	6013      	str	r3, [r2, #0]
 8004bcc:	4b6d      	ldr	r3, [pc, #436]	; (8004d84 <HAL_RCC_OscConfig+0x298>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6a1b      	ldr	r3, [r3, #32]
 8004bd8:	496a      	ldr	r1, [pc, #424]	; (8004d84 <HAL_RCC_OscConfig+0x298>)
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004bde:	4b69      	ldr	r3, [pc, #420]	; (8004d84 <HAL_RCC_OscConfig+0x298>)
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	69db      	ldr	r3, [r3, #28]
 8004bea:	021b      	lsls	r3, r3, #8
 8004bec:	4965      	ldr	r1, [pc, #404]	; (8004d84 <HAL_RCC_OscConfig+0x298>)
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004bf2:	69bb      	ldr	r3, [r7, #24]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d109      	bne.n	8004c0c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6a1b      	ldr	r3, [r3, #32]
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	f000 fd01 	bl	8005604 <RCC_SetFlashLatencyFromMSIRange>
 8004c02:	4603      	mov	r3, r0
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d001      	beq.n	8004c0c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004c08:	2301      	movs	r3, #1
 8004c0a:	e34d      	b.n	80052a8 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004c0c:	f000 fc36 	bl	800547c <HAL_RCC_GetSysClockFreq>
 8004c10:	4602      	mov	r2, r0
 8004c12:	4b5c      	ldr	r3, [pc, #368]	; (8004d84 <HAL_RCC_OscConfig+0x298>)
 8004c14:	689b      	ldr	r3, [r3, #8]
 8004c16:	091b      	lsrs	r3, r3, #4
 8004c18:	f003 030f 	and.w	r3, r3, #15
 8004c1c:	495a      	ldr	r1, [pc, #360]	; (8004d88 <HAL_RCC_OscConfig+0x29c>)
 8004c1e:	5ccb      	ldrb	r3, [r1, r3]
 8004c20:	f003 031f 	and.w	r3, r3, #31
 8004c24:	fa22 f303 	lsr.w	r3, r2, r3
 8004c28:	4a58      	ldr	r2, [pc, #352]	; (8004d8c <HAL_RCC_OscConfig+0x2a0>)
 8004c2a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004c2c:	4b58      	ldr	r3, [pc, #352]	; (8004d90 <HAL_RCC_OscConfig+0x2a4>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4618      	mov	r0, r3
 8004c32:	f7fe fbbd 	bl	80033b0 <HAL_InitTick>
 8004c36:	4603      	mov	r3, r0
 8004c38:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004c3a:	7bfb      	ldrb	r3, [r7, #15]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d052      	beq.n	8004ce6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004c40:	7bfb      	ldrb	r3, [r7, #15]
 8004c42:	e331      	b.n	80052a8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	699b      	ldr	r3, [r3, #24]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d032      	beq.n	8004cb2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004c4c:	4b4d      	ldr	r3, [pc, #308]	; (8004d84 <HAL_RCC_OscConfig+0x298>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a4c      	ldr	r2, [pc, #304]	; (8004d84 <HAL_RCC_OscConfig+0x298>)
 8004c52:	f043 0301 	orr.w	r3, r3, #1
 8004c56:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004c58:	f7fe fbfa 	bl	8003450 <HAL_GetTick>
 8004c5c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004c5e:	e008      	b.n	8004c72 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004c60:	f7fe fbf6 	bl	8003450 <HAL_GetTick>
 8004c64:	4602      	mov	r2, r0
 8004c66:	693b      	ldr	r3, [r7, #16]
 8004c68:	1ad3      	subs	r3, r2, r3
 8004c6a:	2b02      	cmp	r3, #2
 8004c6c:	d901      	bls.n	8004c72 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004c6e:	2303      	movs	r3, #3
 8004c70:	e31a      	b.n	80052a8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004c72:	4b44      	ldr	r3, [pc, #272]	; (8004d84 <HAL_RCC_OscConfig+0x298>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f003 0302 	and.w	r3, r3, #2
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d0f0      	beq.n	8004c60 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004c7e:	4b41      	ldr	r3, [pc, #260]	; (8004d84 <HAL_RCC_OscConfig+0x298>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4a40      	ldr	r2, [pc, #256]	; (8004d84 <HAL_RCC_OscConfig+0x298>)
 8004c84:	f043 0308 	orr.w	r3, r3, #8
 8004c88:	6013      	str	r3, [r2, #0]
 8004c8a:	4b3e      	ldr	r3, [pc, #248]	; (8004d84 <HAL_RCC_OscConfig+0x298>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6a1b      	ldr	r3, [r3, #32]
 8004c96:	493b      	ldr	r1, [pc, #236]	; (8004d84 <HAL_RCC_OscConfig+0x298>)
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004c9c:	4b39      	ldr	r3, [pc, #228]	; (8004d84 <HAL_RCC_OscConfig+0x298>)
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	69db      	ldr	r3, [r3, #28]
 8004ca8:	021b      	lsls	r3, r3, #8
 8004caa:	4936      	ldr	r1, [pc, #216]	; (8004d84 <HAL_RCC_OscConfig+0x298>)
 8004cac:	4313      	orrs	r3, r2
 8004cae:	604b      	str	r3, [r1, #4]
 8004cb0:	e01a      	b.n	8004ce8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004cb2:	4b34      	ldr	r3, [pc, #208]	; (8004d84 <HAL_RCC_OscConfig+0x298>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a33      	ldr	r2, [pc, #204]	; (8004d84 <HAL_RCC_OscConfig+0x298>)
 8004cb8:	f023 0301 	bic.w	r3, r3, #1
 8004cbc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004cbe:	f7fe fbc7 	bl	8003450 <HAL_GetTick>
 8004cc2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004cc4:	e008      	b.n	8004cd8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004cc6:	f7fe fbc3 	bl	8003450 <HAL_GetTick>
 8004cca:	4602      	mov	r2, r0
 8004ccc:	693b      	ldr	r3, [r7, #16]
 8004cce:	1ad3      	subs	r3, r2, r3
 8004cd0:	2b02      	cmp	r3, #2
 8004cd2:	d901      	bls.n	8004cd8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004cd4:	2303      	movs	r3, #3
 8004cd6:	e2e7      	b.n	80052a8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004cd8:	4b2a      	ldr	r3, [pc, #168]	; (8004d84 <HAL_RCC_OscConfig+0x298>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f003 0302 	and.w	r3, r3, #2
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d1f0      	bne.n	8004cc6 <HAL_RCC_OscConfig+0x1da>
 8004ce4:	e000      	b.n	8004ce8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004ce6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f003 0301 	and.w	r3, r3, #1
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d074      	beq.n	8004dde <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004cf4:	69bb      	ldr	r3, [r7, #24]
 8004cf6:	2b08      	cmp	r3, #8
 8004cf8:	d005      	beq.n	8004d06 <HAL_RCC_OscConfig+0x21a>
 8004cfa:	69bb      	ldr	r3, [r7, #24]
 8004cfc:	2b0c      	cmp	r3, #12
 8004cfe:	d10e      	bne.n	8004d1e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004d00:	697b      	ldr	r3, [r7, #20]
 8004d02:	2b03      	cmp	r3, #3
 8004d04:	d10b      	bne.n	8004d1e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d06:	4b1f      	ldr	r3, [pc, #124]	; (8004d84 <HAL_RCC_OscConfig+0x298>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d064      	beq.n	8004ddc <HAL_RCC_OscConfig+0x2f0>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d160      	bne.n	8004ddc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	e2c4      	b.n	80052a8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d26:	d106      	bne.n	8004d36 <HAL_RCC_OscConfig+0x24a>
 8004d28:	4b16      	ldr	r3, [pc, #88]	; (8004d84 <HAL_RCC_OscConfig+0x298>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a15      	ldr	r2, [pc, #84]	; (8004d84 <HAL_RCC_OscConfig+0x298>)
 8004d2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d32:	6013      	str	r3, [r2, #0]
 8004d34:	e01d      	b.n	8004d72 <HAL_RCC_OscConfig+0x286>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004d3e:	d10c      	bne.n	8004d5a <HAL_RCC_OscConfig+0x26e>
 8004d40:	4b10      	ldr	r3, [pc, #64]	; (8004d84 <HAL_RCC_OscConfig+0x298>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a0f      	ldr	r2, [pc, #60]	; (8004d84 <HAL_RCC_OscConfig+0x298>)
 8004d46:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d4a:	6013      	str	r3, [r2, #0]
 8004d4c:	4b0d      	ldr	r3, [pc, #52]	; (8004d84 <HAL_RCC_OscConfig+0x298>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a0c      	ldr	r2, [pc, #48]	; (8004d84 <HAL_RCC_OscConfig+0x298>)
 8004d52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d56:	6013      	str	r3, [r2, #0]
 8004d58:	e00b      	b.n	8004d72 <HAL_RCC_OscConfig+0x286>
 8004d5a:	4b0a      	ldr	r3, [pc, #40]	; (8004d84 <HAL_RCC_OscConfig+0x298>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a09      	ldr	r2, [pc, #36]	; (8004d84 <HAL_RCC_OscConfig+0x298>)
 8004d60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d64:	6013      	str	r3, [r2, #0]
 8004d66:	4b07      	ldr	r3, [pc, #28]	; (8004d84 <HAL_RCC_OscConfig+0x298>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4a06      	ldr	r2, [pc, #24]	; (8004d84 <HAL_RCC_OscConfig+0x298>)
 8004d6c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d70:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d01c      	beq.n	8004db4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d7a:	f7fe fb69 	bl	8003450 <HAL_GetTick>
 8004d7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d80:	e011      	b.n	8004da6 <HAL_RCC_OscConfig+0x2ba>
 8004d82:	bf00      	nop
 8004d84:	40021000 	.word	0x40021000
 8004d88:	0800b0f4 	.word	0x0800b0f4
 8004d8c:	20000004 	.word	0x20000004
 8004d90:	20000024 	.word	0x20000024
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d94:	f7fe fb5c 	bl	8003450 <HAL_GetTick>
 8004d98:	4602      	mov	r2, r0
 8004d9a:	693b      	ldr	r3, [r7, #16]
 8004d9c:	1ad3      	subs	r3, r2, r3
 8004d9e:	2b64      	cmp	r3, #100	; 0x64
 8004da0:	d901      	bls.n	8004da6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004da2:	2303      	movs	r3, #3
 8004da4:	e280      	b.n	80052a8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004da6:	4baf      	ldr	r3, [pc, #700]	; (8005064 <HAL_RCC_OscConfig+0x578>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d0f0      	beq.n	8004d94 <HAL_RCC_OscConfig+0x2a8>
 8004db2:	e014      	b.n	8004dde <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004db4:	f7fe fb4c 	bl	8003450 <HAL_GetTick>
 8004db8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004dba:	e008      	b.n	8004dce <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004dbc:	f7fe fb48 	bl	8003450 <HAL_GetTick>
 8004dc0:	4602      	mov	r2, r0
 8004dc2:	693b      	ldr	r3, [r7, #16]
 8004dc4:	1ad3      	subs	r3, r2, r3
 8004dc6:	2b64      	cmp	r3, #100	; 0x64
 8004dc8:	d901      	bls.n	8004dce <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004dca:	2303      	movs	r3, #3
 8004dcc:	e26c      	b.n	80052a8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004dce:	4ba5      	ldr	r3, [pc, #660]	; (8005064 <HAL_RCC_OscConfig+0x578>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d1f0      	bne.n	8004dbc <HAL_RCC_OscConfig+0x2d0>
 8004dda:	e000      	b.n	8004dde <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ddc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f003 0302 	and.w	r3, r3, #2
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d060      	beq.n	8004eac <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004dea:	69bb      	ldr	r3, [r7, #24]
 8004dec:	2b04      	cmp	r3, #4
 8004dee:	d005      	beq.n	8004dfc <HAL_RCC_OscConfig+0x310>
 8004df0:	69bb      	ldr	r3, [r7, #24]
 8004df2:	2b0c      	cmp	r3, #12
 8004df4:	d119      	bne.n	8004e2a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	2b02      	cmp	r3, #2
 8004dfa:	d116      	bne.n	8004e2a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004dfc:	4b99      	ldr	r3, [pc, #612]	; (8005064 <HAL_RCC_OscConfig+0x578>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d005      	beq.n	8004e14 <HAL_RCC_OscConfig+0x328>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	68db      	ldr	r3, [r3, #12]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d101      	bne.n	8004e14 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004e10:	2301      	movs	r3, #1
 8004e12:	e249      	b.n	80052a8 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e14:	4b93      	ldr	r3, [pc, #588]	; (8005064 <HAL_RCC_OscConfig+0x578>)
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	691b      	ldr	r3, [r3, #16]
 8004e20:	061b      	lsls	r3, r3, #24
 8004e22:	4990      	ldr	r1, [pc, #576]	; (8005064 <HAL_RCC_OscConfig+0x578>)
 8004e24:	4313      	orrs	r3, r2
 8004e26:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e28:	e040      	b.n	8004eac <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	68db      	ldr	r3, [r3, #12]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d023      	beq.n	8004e7a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e32:	4b8c      	ldr	r3, [pc, #560]	; (8005064 <HAL_RCC_OscConfig+0x578>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a8b      	ldr	r2, [pc, #556]	; (8005064 <HAL_RCC_OscConfig+0x578>)
 8004e38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e3e:	f7fe fb07 	bl	8003450 <HAL_GetTick>
 8004e42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004e44:	e008      	b.n	8004e58 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e46:	f7fe fb03 	bl	8003450 <HAL_GetTick>
 8004e4a:	4602      	mov	r2, r0
 8004e4c:	693b      	ldr	r3, [r7, #16]
 8004e4e:	1ad3      	subs	r3, r2, r3
 8004e50:	2b02      	cmp	r3, #2
 8004e52:	d901      	bls.n	8004e58 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004e54:	2303      	movs	r3, #3
 8004e56:	e227      	b.n	80052a8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004e58:	4b82      	ldr	r3, [pc, #520]	; (8005064 <HAL_RCC_OscConfig+0x578>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d0f0      	beq.n	8004e46 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e64:	4b7f      	ldr	r3, [pc, #508]	; (8005064 <HAL_RCC_OscConfig+0x578>)
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	691b      	ldr	r3, [r3, #16]
 8004e70:	061b      	lsls	r3, r3, #24
 8004e72:	497c      	ldr	r1, [pc, #496]	; (8005064 <HAL_RCC_OscConfig+0x578>)
 8004e74:	4313      	orrs	r3, r2
 8004e76:	604b      	str	r3, [r1, #4]
 8004e78:	e018      	b.n	8004eac <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e7a:	4b7a      	ldr	r3, [pc, #488]	; (8005064 <HAL_RCC_OscConfig+0x578>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4a79      	ldr	r2, [pc, #484]	; (8005064 <HAL_RCC_OscConfig+0x578>)
 8004e80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e86:	f7fe fae3 	bl	8003450 <HAL_GetTick>
 8004e8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004e8c:	e008      	b.n	8004ea0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e8e:	f7fe fadf 	bl	8003450 <HAL_GetTick>
 8004e92:	4602      	mov	r2, r0
 8004e94:	693b      	ldr	r3, [r7, #16]
 8004e96:	1ad3      	subs	r3, r2, r3
 8004e98:	2b02      	cmp	r3, #2
 8004e9a:	d901      	bls.n	8004ea0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004e9c:	2303      	movs	r3, #3
 8004e9e:	e203      	b.n	80052a8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004ea0:	4b70      	ldr	r3, [pc, #448]	; (8005064 <HAL_RCC_OscConfig+0x578>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d1f0      	bne.n	8004e8e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f003 0308 	and.w	r3, r3, #8
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d03c      	beq.n	8004f32 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	695b      	ldr	r3, [r3, #20]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d01c      	beq.n	8004efa <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004ec0:	4b68      	ldr	r3, [pc, #416]	; (8005064 <HAL_RCC_OscConfig+0x578>)
 8004ec2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ec6:	4a67      	ldr	r2, [pc, #412]	; (8005064 <HAL_RCC_OscConfig+0x578>)
 8004ec8:	f043 0301 	orr.w	r3, r3, #1
 8004ecc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ed0:	f7fe fabe 	bl	8003450 <HAL_GetTick>
 8004ed4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004ed6:	e008      	b.n	8004eea <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ed8:	f7fe faba 	bl	8003450 <HAL_GetTick>
 8004edc:	4602      	mov	r2, r0
 8004ede:	693b      	ldr	r3, [r7, #16]
 8004ee0:	1ad3      	subs	r3, r2, r3
 8004ee2:	2b02      	cmp	r3, #2
 8004ee4:	d901      	bls.n	8004eea <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004ee6:	2303      	movs	r3, #3
 8004ee8:	e1de      	b.n	80052a8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004eea:	4b5e      	ldr	r3, [pc, #376]	; (8005064 <HAL_RCC_OscConfig+0x578>)
 8004eec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ef0:	f003 0302 	and.w	r3, r3, #2
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d0ef      	beq.n	8004ed8 <HAL_RCC_OscConfig+0x3ec>
 8004ef8:	e01b      	b.n	8004f32 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004efa:	4b5a      	ldr	r3, [pc, #360]	; (8005064 <HAL_RCC_OscConfig+0x578>)
 8004efc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f00:	4a58      	ldr	r2, [pc, #352]	; (8005064 <HAL_RCC_OscConfig+0x578>)
 8004f02:	f023 0301 	bic.w	r3, r3, #1
 8004f06:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f0a:	f7fe faa1 	bl	8003450 <HAL_GetTick>
 8004f0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004f10:	e008      	b.n	8004f24 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f12:	f7fe fa9d 	bl	8003450 <HAL_GetTick>
 8004f16:	4602      	mov	r2, r0
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	1ad3      	subs	r3, r2, r3
 8004f1c:	2b02      	cmp	r3, #2
 8004f1e:	d901      	bls.n	8004f24 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004f20:	2303      	movs	r3, #3
 8004f22:	e1c1      	b.n	80052a8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004f24:	4b4f      	ldr	r3, [pc, #316]	; (8005064 <HAL_RCC_OscConfig+0x578>)
 8004f26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f2a:	f003 0302 	and.w	r3, r3, #2
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d1ef      	bne.n	8004f12 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f003 0304 	and.w	r3, r3, #4
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	f000 80a6 	beq.w	800508c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f40:	2300      	movs	r3, #0
 8004f42:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004f44:	4b47      	ldr	r3, [pc, #284]	; (8005064 <HAL_RCC_OscConfig+0x578>)
 8004f46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d10d      	bne.n	8004f6c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f50:	4b44      	ldr	r3, [pc, #272]	; (8005064 <HAL_RCC_OscConfig+0x578>)
 8004f52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f54:	4a43      	ldr	r2, [pc, #268]	; (8005064 <HAL_RCC_OscConfig+0x578>)
 8004f56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f5a:	6593      	str	r3, [r2, #88]	; 0x58
 8004f5c:	4b41      	ldr	r3, [pc, #260]	; (8005064 <HAL_RCC_OscConfig+0x578>)
 8004f5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f64:	60bb      	str	r3, [r7, #8]
 8004f66:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f68:	2301      	movs	r3, #1
 8004f6a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f6c:	4b3e      	ldr	r3, [pc, #248]	; (8005068 <HAL_RCC_OscConfig+0x57c>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d118      	bne.n	8004faa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004f78:	4b3b      	ldr	r3, [pc, #236]	; (8005068 <HAL_RCC_OscConfig+0x57c>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a3a      	ldr	r2, [pc, #232]	; (8005068 <HAL_RCC_OscConfig+0x57c>)
 8004f7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f82:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f84:	f7fe fa64 	bl	8003450 <HAL_GetTick>
 8004f88:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f8a:	e008      	b.n	8004f9e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f8c:	f7fe fa60 	bl	8003450 <HAL_GetTick>
 8004f90:	4602      	mov	r2, r0
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	1ad3      	subs	r3, r2, r3
 8004f96:	2b02      	cmp	r3, #2
 8004f98:	d901      	bls.n	8004f9e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004f9a:	2303      	movs	r3, #3
 8004f9c:	e184      	b.n	80052a8 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f9e:	4b32      	ldr	r3, [pc, #200]	; (8005068 <HAL_RCC_OscConfig+0x57c>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d0f0      	beq.n	8004f8c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	689b      	ldr	r3, [r3, #8]
 8004fae:	2b01      	cmp	r3, #1
 8004fb0:	d108      	bne.n	8004fc4 <HAL_RCC_OscConfig+0x4d8>
 8004fb2:	4b2c      	ldr	r3, [pc, #176]	; (8005064 <HAL_RCC_OscConfig+0x578>)
 8004fb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fb8:	4a2a      	ldr	r2, [pc, #168]	; (8005064 <HAL_RCC_OscConfig+0x578>)
 8004fba:	f043 0301 	orr.w	r3, r3, #1
 8004fbe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004fc2:	e024      	b.n	800500e <HAL_RCC_OscConfig+0x522>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	689b      	ldr	r3, [r3, #8]
 8004fc8:	2b05      	cmp	r3, #5
 8004fca:	d110      	bne.n	8004fee <HAL_RCC_OscConfig+0x502>
 8004fcc:	4b25      	ldr	r3, [pc, #148]	; (8005064 <HAL_RCC_OscConfig+0x578>)
 8004fce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fd2:	4a24      	ldr	r2, [pc, #144]	; (8005064 <HAL_RCC_OscConfig+0x578>)
 8004fd4:	f043 0304 	orr.w	r3, r3, #4
 8004fd8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004fdc:	4b21      	ldr	r3, [pc, #132]	; (8005064 <HAL_RCC_OscConfig+0x578>)
 8004fde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fe2:	4a20      	ldr	r2, [pc, #128]	; (8005064 <HAL_RCC_OscConfig+0x578>)
 8004fe4:	f043 0301 	orr.w	r3, r3, #1
 8004fe8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004fec:	e00f      	b.n	800500e <HAL_RCC_OscConfig+0x522>
 8004fee:	4b1d      	ldr	r3, [pc, #116]	; (8005064 <HAL_RCC_OscConfig+0x578>)
 8004ff0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ff4:	4a1b      	ldr	r2, [pc, #108]	; (8005064 <HAL_RCC_OscConfig+0x578>)
 8004ff6:	f023 0301 	bic.w	r3, r3, #1
 8004ffa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004ffe:	4b19      	ldr	r3, [pc, #100]	; (8005064 <HAL_RCC_OscConfig+0x578>)
 8005000:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005004:	4a17      	ldr	r2, [pc, #92]	; (8005064 <HAL_RCC_OscConfig+0x578>)
 8005006:	f023 0304 	bic.w	r3, r3, #4
 800500a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	689b      	ldr	r3, [r3, #8]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d016      	beq.n	8005044 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005016:	f7fe fa1b 	bl	8003450 <HAL_GetTick>
 800501a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800501c:	e00a      	b.n	8005034 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800501e:	f7fe fa17 	bl	8003450 <HAL_GetTick>
 8005022:	4602      	mov	r2, r0
 8005024:	693b      	ldr	r3, [r7, #16]
 8005026:	1ad3      	subs	r3, r2, r3
 8005028:	f241 3288 	movw	r2, #5000	; 0x1388
 800502c:	4293      	cmp	r3, r2
 800502e:	d901      	bls.n	8005034 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8005030:	2303      	movs	r3, #3
 8005032:	e139      	b.n	80052a8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005034:	4b0b      	ldr	r3, [pc, #44]	; (8005064 <HAL_RCC_OscConfig+0x578>)
 8005036:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800503a:	f003 0302 	and.w	r3, r3, #2
 800503e:	2b00      	cmp	r3, #0
 8005040:	d0ed      	beq.n	800501e <HAL_RCC_OscConfig+0x532>
 8005042:	e01a      	b.n	800507a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005044:	f7fe fa04 	bl	8003450 <HAL_GetTick>
 8005048:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800504a:	e00f      	b.n	800506c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800504c:	f7fe fa00 	bl	8003450 <HAL_GetTick>
 8005050:	4602      	mov	r2, r0
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	1ad3      	subs	r3, r2, r3
 8005056:	f241 3288 	movw	r2, #5000	; 0x1388
 800505a:	4293      	cmp	r3, r2
 800505c:	d906      	bls.n	800506c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800505e:	2303      	movs	r3, #3
 8005060:	e122      	b.n	80052a8 <HAL_RCC_OscConfig+0x7bc>
 8005062:	bf00      	nop
 8005064:	40021000 	.word	0x40021000
 8005068:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800506c:	4b90      	ldr	r3, [pc, #576]	; (80052b0 <HAL_RCC_OscConfig+0x7c4>)
 800506e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005072:	f003 0302 	and.w	r3, r3, #2
 8005076:	2b00      	cmp	r3, #0
 8005078:	d1e8      	bne.n	800504c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800507a:	7ffb      	ldrb	r3, [r7, #31]
 800507c:	2b01      	cmp	r3, #1
 800507e:	d105      	bne.n	800508c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005080:	4b8b      	ldr	r3, [pc, #556]	; (80052b0 <HAL_RCC_OscConfig+0x7c4>)
 8005082:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005084:	4a8a      	ldr	r2, [pc, #552]	; (80052b0 <HAL_RCC_OscConfig+0x7c4>)
 8005086:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800508a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005090:	2b00      	cmp	r3, #0
 8005092:	f000 8108 	beq.w	80052a6 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800509a:	2b02      	cmp	r3, #2
 800509c:	f040 80d0 	bne.w	8005240 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80050a0:	4b83      	ldr	r3, [pc, #524]	; (80052b0 <HAL_RCC_OscConfig+0x7c4>)
 80050a2:	68db      	ldr	r3, [r3, #12]
 80050a4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	f003 0203 	and.w	r2, r3, #3
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050b0:	429a      	cmp	r2, r3
 80050b2:	d130      	bne.n	8005116 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80050b4:	697b      	ldr	r3, [r7, #20]
 80050b6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050be:	3b01      	subs	r3, #1
 80050c0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80050c2:	429a      	cmp	r2, r3
 80050c4:	d127      	bne.n	8005116 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050d0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80050d2:	429a      	cmp	r2, r3
 80050d4:	d11f      	bne.n	8005116 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050dc:	687a      	ldr	r2, [r7, #4]
 80050de:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80050e0:	2a07      	cmp	r2, #7
 80050e2:	bf14      	ite	ne
 80050e4:	2201      	movne	r2, #1
 80050e6:	2200      	moveq	r2, #0
 80050e8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d113      	bne.n	8005116 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050f8:	085b      	lsrs	r3, r3, #1
 80050fa:	3b01      	subs	r3, #1
 80050fc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80050fe:	429a      	cmp	r2, r3
 8005100:	d109      	bne.n	8005116 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005102:	697b      	ldr	r3, [r7, #20]
 8005104:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800510c:	085b      	lsrs	r3, r3, #1
 800510e:	3b01      	subs	r3, #1
 8005110:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005112:	429a      	cmp	r2, r3
 8005114:	d06e      	beq.n	80051f4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005116:	69bb      	ldr	r3, [r7, #24]
 8005118:	2b0c      	cmp	r3, #12
 800511a:	d069      	beq.n	80051f0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800511c:	4b64      	ldr	r3, [pc, #400]	; (80052b0 <HAL_RCC_OscConfig+0x7c4>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005124:	2b00      	cmp	r3, #0
 8005126:	d105      	bne.n	8005134 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005128:	4b61      	ldr	r3, [pc, #388]	; (80052b0 <HAL_RCC_OscConfig+0x7c4>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005130:	2b00      	cmp	r3, #0
 8005132:	d001      	beq.n	8005138 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8005134:	2301      	movs	r3, #1
 8005136:	e0b7      	b.n	80052a8 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005138:	4b5d      	ldr	r3, [pc, #372]	; (80052b0 <HAL_RCC_OscConfig+0x7c4>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4a5c      	ldr	r2, [pc, #368]	; (80052b0 <HAL_RCC_OscConfig+0x7c4>)
 800513e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005142:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005144:	f7fe f984 	bl	8003450 <HAL_GetTick>
 8005148:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800514a:	e008      	b.n	800515e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800514c:	f7fe f980 	bl	8003450 <HAL_GetTick>
 8005150:	4602      	mov	r2, r0
 8005152:	693b      	ldr	r3, [r7, #16]
 8005154:	1ad3      	subs	r3, r2, r3
 8005156:	2b02      	cmp	r3, #2
 8005158:	d901      	bls.n	800515e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800515a:	2303      	movs	r3, #3
 800515c:	e0a4      	b.n	80052a8 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800515e:	4b54      	ldr	r3, [pc, #336]	; (80052b0 <HAL_RCC_OscConfig+0x7c4>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005166:	2b00      	cmp	r3, #0
 8005168:	d1f0      	bne.n	800514c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800516a:	4b51      	ldr	r3, [pc, #324]	; (80052b0 <HAL_RCC_OscConfig+0x7c4>)
 800516c:	68da      	ldr	r2, [r3, #12]
 800516e:	4b51      	ldr	r3, [pc, #324]	; (80052b4 <HAL_RCC_OscConfig+0x7c8>)
 8005170:	4013      	ands	r3, r2
 8005172:	687a      	ldr	r2, [r7, #4]
 8005174:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005176:	687a      	ldr	r2, [r7, #4]
 8005178:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800517a:	3a01      	subs	r2, #1
 800517c:	0112      	lsls	r2, r2, #4
 800517e:	4311      	orrs	r1, r2
 8005180:	687a      	ldr	r2, [r7, #4]
 8005182:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005184:	0212      	lsls	r2, r2, #8
 8005186:	4311      	orrs	r1, r2
 8005188:	687a      	ldr	r2, [r7, #4]
 800518a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800518c:	0852      	lsrs	r2, r2, #1
 800518e:	3a01      	subs	r2, #1
 8005190:	0552      	lsls	r2, r2, #21
 8005192:	4311      	orrs	r1, r2
 8005194:	687a      	ldr	r2, [r7, #4]
 8005196:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005198:	0852      	lsrs	r2, r2, #1
 800519a:	3a01      	subs	r2, #1
 800519c:	0652      	lsls	r2, r2, #25
 800519e:	4311      	orrs	r1, r2
 80051a0:	687a      	ldr	r2, [r7, #4]
 80051a2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80051a4:	0912      	lsrs	r2, r2, #4
 80051a6:	0452      	lsls	r2, r2, #17
 80051a8:	430a      	orrs	r2, r1
 80051aa:	4941      	ldr	r1, [pc, #260]	; (80052b0 <HAL_RCC_OscConfig+0x7c4>)
 80051ac:	4313      	orrs	r3, r2
 80051ae:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80051b0:	4b3f      	ldr	r3, [pc, #252]	; (80052b0 <HAL_RCC_OscConfig+0x7c4>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4a3e      	ldr	r2, [pc, #248]	; (80052b0 <HAL_RCC_OscConfig+0x7c4>)
 80051b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80051ba:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80051bc:	4b3c      	ldr	r3, [pc, #240]	; (80052b0 <HAL_RCC_OscConfig+0x7c4>)
 80051be:	68db      	ldr	r3, [r3, #12]
 80051c0:	4a3b      	ldr	r2, [pc, #236]	; (80052b0 <HAL_RCC_OscConfig+0x7c4>)
 80051c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80051c6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80051c8:	f7fe f942 	bl	8003450 <HAL_GetTick>
 80051cc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80051ce:	e008      	b.n	80051e2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051d0:	f7fe f93e 	bl	8003450 <HAL_GetTick>
 80051d4:	4602      	mov	r2, r0
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	1ad3      	subs	r3, r2, r3
 80051da:	2b02      	cmp	r3, #2
 80051dc:	d901      	bls.n	80051e2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80051de:	2303      	movs	r3, #3
 80051e0:	e062      	b.n	80052a8 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80051e2:	4b33      	ldr	r3, [pc, #204]	; (80052b0 <HAL_RCC_OscConfig+0x7c4>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d0f0      	beq.n	80051d0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80051ee:	e05a      	b.n	80052a6 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80051f0:	2301      	movs	r3, #1
 80051f2:	e059      	b.n	80052a8 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80051f4:	4b2e      	ldr	r3, [pc, #184]	; (80052b0 <HAL_RCC_OscConfig+0x7c4>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d152      	bne.n	80052a6 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005200:	4b2b      	ldr	r3, [pc, #172]	; (80052b0 <HAL_RCC_OscConfig+0x7c4>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4a2a      	ldr	r2, [pc, #168]	; (80052b0 <HAL_RCC_OscConfig+0x7c4>)
 8005206:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800520a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800520c:	4b28      	ldr	r3, [pc, #160]	; (80052b0 <HAL_RCC_OscConfig+0x7c4>)
 800520e:	68db      	ldr	r3, [r3, #12]
 8005210:	4a27      	ldr	r2, [pc, #156]	; (80052b0 <HAL_RCC_OscConfig+0x7c4>)
 8005212:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005216:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005218:	f7fe f91a 	bl	8003450 <HAL_GetTick>
 800521c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800521e:	e008      	b.n	8005232 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005220:	f7fe f916 	bl	8003450 <HAL_GetTick>
 8005224:	4602      	mov	r2, r0
 8005226:	693b      	ldr	r3, [r7, #16]
 8005228:	1ad3      	subs	r3, r2, r3
 800522a:	2b02      	cmp	r3, #2
 800522c:	d901      	bls.n	8005232 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800522e:	2303      	movs	r3, #3
 8005230:	e03a      	b.n	80052a8 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005232:	4b1f      	ldr	r3, [pc, #124]	; (80052b0 <HAL_RCC_OscConfig+0x7c4>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800523a:	2b00      	cmp	r3, #0
 800523c:	d0f0      	beq.n	8005220 <HAL_RCC_OscConfig+0x734>
 800523e:	e032      	b.n	80052a6 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005240:	69bb      	ldr	r3, [r7, #24]
 8005242:	2b0c      	cmp	r3, #12
 8005244:	d02d      	beq.n	80052a2 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005246:	4b1a      	ldr	r3, [pc, #104]	; (80052b0 <HAL_RCC_OscConfig+0x7c4>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4a19      	ldr	r2, [pc, #100]	; (80052b0 <HAL_RCC_OscConfig+0x7c4>)
 800524c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005250:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8005252:	4b17      	ldr	r3, [pc, #92]	; (80052b0 <HAL_RCC_OscConfig+0x7c4>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800525a:	2b00      	cmp	r3, #0
 800525c:	d105      	bne.n	800526a <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800525e:	4b14      	ldr	r3, [pc, #80]	; (80052b0 <HAL_RCC_OscConfig+0x7c4>)
 8005260:	68db      	ldr	r3, [r3, #12]
 8005262:	4a13      	ldr	r2, [pc, #76]	; (80052b0 <HAL_RCC_OscConfig+0x7c4>)
 8005264:	f023 0303 	bic.w	r3, r3, #3
 8005268:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800526a:	4b11      	ldr	r3, [pc, #68]	; (80052b0 <HAL_RCC_OscConfig+0x7c4>)
 800526c:	68db      	ldr	r3, [r3, #12]
 800526e:	4a10      	ldr	r2, [pc, #64]	; (80052b0 <HAL_RCC_OscConfig+0x7c4>)
 8005270:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8005274:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005278:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800527a:	f7fe f8e9 	bl	8003450 <HAL_GetTick>
 800527e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005280:	e008      	b.n	8005294 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005282:	f7fe f8e5 	bl	8003450 <HAL_GetTick>
 8005286:	4602      	mov	r2, r0
 8005288:	693b      	ldr	r3, [r7, #16]
 800528a:	1ad3      	subs	r3, r2, r3
 800528c:	2b02      	cmp	r3, #2
 800528e:	d901      	bls.n	8005294 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8005290:	2303      	movs	r3, #3
 8005292:	e009      	b.n	80052a8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005294:	4b06      	ldr	r3, [pc, #24]	; (80052b0 <HAL_RCC_OscConfig+0x7c4>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800529c:	2b00      	cmp	r3, #0
 800529e:	d1f0      	bne.n	8005282 <HAL_RCC_OscConfig+0x796>
 80052a0:	e001      	b.n	80052a6 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80052a2:	2301      	movs	r3, #1
 80052a4:	e000      	b.n	80052a8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 80052a6:	2300      	movs	r3, #0
}
 80052a8:	4618      	mov	r0, r3
 80052aa:	3720      	adds	r7, #32
 80052ac:	46bd      	mov	sp, r7
 80052ae:	bd80      	pop	{r7, pc}
 80052b0:	40021000 	.word	0x40021000
 80052b4:	f99d808c 	.word	0xf99d808c

080052b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b084      	sub	sp, #16
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
 80052c0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d101      	bne.n	80052cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80052c8:	2301      	movs	r3, #1
 80052ca:	e0c8      	b.n	800545e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80052cc:	4b66      	ldr	r3, [pc, #408]	; (8005468 <HAL_RCC_ClockConfig+0x1b0>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f003 0307 	and.w	r3, r3, #7
 80052d4:	683a      	ldr	r2, [r7, #0]
 80052d6:	429a      	cmp	r2, r3
 80052d8:	d910      	bls.n	80052fc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052da:	4b63      	ldr	r3, [pc, #396]	; (8005468 <HAL_RCC_ClockConfig+0x1b0>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f023 0207 	bic.w	r2, r3, #7
 80052e2:	4961      	ldr	r1, [pc, #388]	; (8005468 <HAL_RCC_ClockConfig+0x1b0>)
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	4313      	orrs	r3, r2
 80052e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80052ea:	4b5f      	ldr	r3, [pc, #380]	; (8005468 <HAL_RCC_ClockConfig+0x1b0>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f003 0307 	and.w	r3, r3, #7
 80052f2:	683a      	ldr	r2, [r7, #0]
 80052f4:	429a      	cmp	r2, r3
 80052f6:	d001      	beq.n	80052fc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80052f8:	2301      	movs	r3, #1
 80052fa:	e0b0      	b.n	800545e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f003 0301 	and.w	r3, r3, #1
 8005304:	2b00      	cmp	r3, #0
 8005306:	d04c      	beq.n	80053a2 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	685b      	ldr	r3, [r3, #4]
 800530c:	2b03      	cmp	r3, #3
 800530e:	d107      	bne.n	8005320 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005310:	4b56      	ldr	r3, [pc, #344]	; (800546c <HAL_RCC_ClockConfig+0x1b4>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005318:	2b00      	cmp	r3, #0
 800531a:	d121      	bne.n	8005360 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800531c:	2301      	movs	r3, #1
 800531e:	e09e      	b.n	800545e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	2b02      	cmp	r3, #2
 8005326:	d107      	bne.n	8005338 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005328:	4b50      	ldr	r3, [pc, #320]	; (800546c <HAL_RCC_ClockConfig+0x1b4>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005330:	2b00      	cmp	r3, #0
 8005332:	d115      	bne.n	8005360 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005334:	2301      	movs	r3, #1
 8005336:	e092      	b.n	800545e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d107      	bne.n	8005350 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005340:	4b4a      	ldr	r3, [pc, #296]	; (800546c <HAL_RCC_ClockConfig+0x1b4>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f003 0302 	and.w	r3, r3, #2
 8005348:	2b00      	cmp	r3, #0
 800534a:	d109      	bne.n	8005360 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800534c:	2301      	movs	r3, #1
 800534e:	e086      	b.n	800545e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005350:	4b46      	ldr	r3, [pc, #280]	; (800546c <HAL_RCC_ClockConfig+0x1b4>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005358:	2b00      	cmp	r3, #0
 800535a:	d101      	bne.n	8005360 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800535c:	2301      	movs	r3, #1
 800535e:	e07e      	b.n	800545e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005360:	4b42      	ldr	r3, [pc, #264]	; (800546c <HAL_RCC_ClockConfig+0x1b4>)
 8005362:	689b      	ldr	r3, [r3, #8]
 8005364:	f023 0203 	bic.w	r2, r3, #3
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	685b      	ldr	r3, [r3, #4]
 800536c:	493f      	ldr	r1, [pc, #252]	; (800546c <HAL_RCC_ClockConfig+0x1b4>)
 800536e:	4313      	orrs	r3, r2
 8005370:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005372:	f7fe f86d 	bl	8003450 <HAL_GetTick>
 8005376:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005378:	e00a      	b.n	8005390 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800537a:	f7fe f869 	bl	8003450 <HAL_GetTick>
 800537e:	4602      	mov	r2, r0
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	1ad3      	subs	r3, r2, r3
 8005384:	f241 3288 	movw	r2, #5000	; 0x1388
 8005388:	4293      	cmp	r3, r2
 800538a:	d901      	bls.n	8005390 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800538c:	2303      	movs	r3, #3
 800538e:	e066      	b.n	800545e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005390:	4b36      	ldr	r3, [pc, #216]	; (800546c <HAL_RCC_ClockConfig+0x1b4>)
 8005392:	689b      	ldr	r3, [r3, #8]
 8005394:	f003 020c 	and.w	r2, r3, #12
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	685b      	ldr	r3, [r3, #4]
 800539c:	009b      	lsls	r3, r3, #2
 800539e:	429a      	cmp	r2, r3
 80053a0:	d1eb      	bne.n	800537a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f003 0302 	and.w	r3, r3, #2
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d008      	beq.n	80053c0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80053ae:	4b2f      	ldr	r3, [pc, #188]	; (800546c <HAL_RCC_ClockConfig+0x1b4>)
 80053b0:	689b      	ldr	r3, [r3, #8]
 80053b2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	689b      	ldr	r3, [r3, #8]
 80053ba:	492c      	ldr	r1, [pc, #176]	; (800546c <HAL_RCC_ClockConfig+0x1b4>)
 80053bc:	4313      	orrs	r3, r2
 80053be:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80053c0:	4b29      	ldr	r3, [pc, #164]	; (8005468 <HAL_RCC_ClockConfig+0x1b0>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f003 0307 	and.w	r3, r3, #7
 80053c8:	683a      	ldr	r2, [r7, #0]
 80053ca:	429a      	cmp	r2, r3
 80053cc:	d210      	bcs.n	80053f0 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053ce:	4b26      	ldr	r3, [pc, #152]	; (8005468 <HAL_RCC_ClockConfig+0x1b0>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f023 0207 	bic.w	r2, r3, #7
 80053d6:	4924      	ldr	r1, [pc, #144]	; (8005468 <HAL_RCC_ClockConfig+0x1b0>)
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	4313      	orrs	r3, r2
 80053dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80053de:	4b22      	ldr	r3, [pc, #136]	; (8005468 <HAL_RCC_ClockConfig+0x1b0>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f003 0307 	and.w	r3, r3, #7
 80053e6:	683a      	ldr	r2, [r7, #0]
 80053e8:	429a      	cmp	r2, r3
 80053ea:	d001      	beq.n	80053f0 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80053ec:	2301      	movs	r3, #1
 80053ee:	e036      	b.n	800545e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f003 0304 	and.w	r3, r3, #4
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d008      	beq.n	800540e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80053fc:	4b1b      	ldr	r3, [pc, #108]	; (800546c <HAL_RCC_ClockConfig+0x1b4>)
 80053fe:	689b      	ldr	r3, [r3, #8]
 8005400:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	68db      	ldr	r3, [r3, #12]
 8005408:	4918      	ldr	r1, [pc, #96]	; (800546c <HAL_RCC_ClockConfig+0x1b4>)
 800540a:	4313      	orrs	r3, r2
 800540c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f003 0308 	and.w	r3, r3, #8
 8005416:	2b00      	cmp	r3, #0
 8005418:	d009      	beq.n	800542e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800541a:	4b14      	ldr	r3, [pc, #80]	; (800546c <HAL_RCC_ClockConfig+0x1b4>)
 800541c:	689b      	ldr	r3, [r3, #8]
 800541e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	691b      	ldr	r3, [r3, #16]
 8005426:	00db      	lsls	r3, r3, #3
 8005428:	4910      	ldr	r1, [pc, #64]	; (800546c <HAL_RCC_ClockConfig+0x1b4>)
 800542a:	4313      	orrs	r3, r2
 800542c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800542e:	f000 f825 	bl	800547c <HAL_RCC_GetSysClockFreq>
 8005432:	4602      	mov	r2, r0
 8005434:	4b0d      	ldr	r3, [pc, #52]	; (800546c <HAL_RCC_ClockConfig+0x1b4>)
 8005436:	689b      	ldr	r3, [r3, #8]
 8005438:	091b      	lsrs	r3, r3, #4
 800543a:	f003 030f 	and.w	r3, r3, #15
 800543e:	490c      	ldr	r1, [pc, #48]	; (8005470 <HAL_RCC_ClockConfig+0x1b8>)
 8005440:	5ccb      	ldrb	r3, [r1, r3]
 8005442:	f003 031f 	and.w	r3, r3, #31
 8005446:	fa22 f303 	lsr.w	r3, r2, r3
 800544a:	4a0a      	ldr	r2, [pc, #40]	; (8005474 <HAL_RCC_ClockConfig+0x1bc>)
 800544c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800544e:	4b0a      	ldr	r3, [pc, #40]	; (8005478 <HAL_RCC_ClockConfig+0x1c0>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4618      	mov	r0, r3
 8005454:	f7fd ffac 	bl	80033b0 <HAL_InitTick>
 8005458:	4603      	mov	r3, r0
 800545a:	72fb      	strb	r3, [r7, #11]

  return status;
 800545c:	7afb      	ldrb	r3, [r7, #11]
}
 800545e:	4618      	mov	r0, r3
 8005460:	3710      	adds	r7, #16
 8005462:	46bd      	mov	sp, r7
 8005464:	bd80      	pop	{r7, pc}
 8005466:	bf00      	nop
 8005468:	40022000 	.word	0x40022000
 800546c:	40021000 	.word	0x40021000
 8005470:	0800b0f4 	.word	0x0800b0f4
 8005474:	20000004 	.word	0x20000004
 8005478:	20000024 	.word	0x20000024

0800547c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800547c:	b480      	push	{r7}
 800547e:	b089      	sub	sp, #36	; 0x24
 8005480:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005482:	2300      	movs	r3, #0
 8005484:	61fb      	str	r3, [r7, #28]
 8005486:	2300      	movs	r3, #0
 8005488:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800548a:	4b3e      	ldr	r3, [pc, #248]	; (8005584 <HAL_RCC_GetSysClockFreq+0x108>)
 800548c:	689b      	ldr	r3, [r3, #8]
 800548e:	f003 030c 	and.w	r3, r3, #12
 8005492:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005494:	4b3b      	ldr	r3, [pc, #236]	; (8005584 <HAL_RCC_GetSysClockFreq+0x108>)
 8005496:	68db      	ldr	r3, [r3, #12]
 8005498:	f003 0303 	and.w	r3, r3, #3
 800549c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800549e:	693b      	ldr	r3, [r7, #16]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d005      	beq.n	80054b0 <HAL_RCC_GetSysClockFreq+0x34>
 80054a4:	693b      	ldr	r3, [r7, #16]
 80054a6:	2b0c      	cmp	r3, #12
 80054a8:	d121      	bne.n	80054ee <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	2b01      	cmp	r3, #1
 80054ae:	d11e      	bne.n	80054ee <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80054b0:	4b34      	ldr	r3, [pc, #208]	; (8005584 <HAL_RCC_GetSysClockFreq+0x108>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f003 0308 	and.w	r3, r3, #8
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d107      	bne.n	80054cc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80054bc:	4b31      	ldr	r3, [pc, #196]	; (8005584 <HAL_RCC_GetSysClockFreq+0x108>)
 80054be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80054c2:	0a1b      	lsrs	r3, r3, #8
 80054c4:	f003 030f 	and.w	r3, r3, #15
 80054c8:	61fb      	str	r3, [r7, #28]
 80054ca:	e005      	b.n	80054d8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80054cc:	4b2d      	ldr	r3, [pc, #180]	; (8005584 <HAL_RCC_GetSysClockFreq+0x108>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	091b      	lsrs	r3, r3, #4
 80054d2:	f003 030f 	and.w	r3, r3, #15
 80054d6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80054d8:	4a2b      	ldr	r2, [pc, #172]	; (8005588 <HAL_RCC_GetSysClockFreq+0x10c>)
 80054da:	69fb      	ldr	r3, [r7, #28]
 80054dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054e0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80054e2:	693b      	ldr	r3, [r7, #16]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d10d      	bne.n	8005504 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80054e8:	69fb      	ldr	r3, [r7, #28]
 80054ea:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80054ec:	e00a      	b.n	8005504 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80054ee:	693b      	ldr	r3, [r7, #16]
 80054f0:	2b04      	cmp	r3, #4
 80054f2:	d102      	bne.n	80054fa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80054f4:	4b25      	ldr	r3, [pc, #148]	; (800558c <HAL_RCC_GetSysClockFreq+0x110>)
 80054f6:	61bb      	str	r3, [r7, #24]
 80054f8:	e004      	b.n	8005504 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80054fa:	693b      	ldr	r3, [r7, #16]
 80054fc:	2b08      	cmp	r3, #8
 80054fe:	d101      	bne.n	8005504 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005500:	4b23      	ldr	r3, [pc, #140]	; (8005590 <HAL_RCC_GetSysClockFreq+0x114>)
 8005502:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005504:	693b      	ldr	r3, [r7, #16]
 8005506:	2b0c      	cmp	r3, #12
 8005508:	d134      	bne.n	8005574 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800550a:	4b1e      	ldr	r3, [pc, #120]	; (8005584 <HAL_RCC_GetSysClockFreq+0x108>)
 800550c:	68db      	ldr	r3, [r3, #12]
 800550e:	f003 0303 	and.w	r3, r3, #3
 8005512:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	2b02      	cmp	r3, #2
 8005518:	d003      	beq.n	8005522 <HAL_RCC_GetSysClockFreq+0xa6>
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	2b03      	cmp	r3, #3
 800551e:	d003      	beq.n	8005528 <HAL_RCC_GetSysClockFreq+0xac>
 8005520:	e005      	b.n	800552e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005522:	4b1a      	ldr	r3, [pc, #104]	; (800558c <HAL_RCC_GetSysClockFreq+0x110>)
 8005524:	617b      	str	r3, [r7, #20]
      break;
 8005526:	e005      	b.n	8005534 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005528:	4b19      	ldr	r3, [pc, #100]	; (8005590 <HAL_RCC_GetSysClockFreq+0x114>)
 800552a:	617b      	str	r3, [r7, #20]
      break;
 800552c:	e002      	b.n	8005534 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800552e:	69fb      	ldr	r3, [r7, #28]
 8005530:	617b      	str	r3, [r7, #20]
      break;
 8005532:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005534:	4b13      	ldr	r3, [pc, #76]	; (8005584 <HAL_RCC_GetSysClockFreq+0x108>)
 8005536:	68db      	ldr	r3, [r3, #12]
 8005538:	091b      	lsrs	r3, r3, #4
 800553a:	f003 0307 	and.w	r3, r3, #7
 800553e:	3301      	adds	r3, #1
 8005540:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005542:	4b10      	ldr	r3, [pc, #64]	; (8005584 <HAL_RCC_GetSysClockFreq+0x108>)
 8005544:	68db      	ldr	r3, [r3, #12]
 8005546:	0a1b      	lsrs	r3, r3, #8
 8005548:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800554c:	697a      	ldr	r2, [r7, #20]
 800554e:	fb02 f203 	mul.w	r2, r2, r3
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	fbb2 f3f3 	udiv	r3, r2, r3
 8005558:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800555a:	4b0a      	ldr	r3, [pc, #40]	; (8005584 <HAL_RCC_GetSysClockFreq+0x108>)
 800555c:	68db      	ldr	r3, [r3, #12]
 800555e:	0e5b      	lsrs	r3, r3, #25
 8005560:	f003 0303 	and.w	r3, r3, #3
 8005564:	3301      	adds	r3, #1
 8005566:	005b      	lsls	r3, r3, #1
 8005568:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800556a:	697a      	ldr	r2, [r7, #20]
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005572:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005574:	69bb      	ldr	r3, [r7, #24]
}
 8005576:	4618      	mov	r0, r3
 8005578:	3724      	adds	r7, #36	; 0x24
 800557a:	46bd      	mov	sp, r7
 800557c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005580:	4770      	bx	lr
 8005582:	bf00      	nop
 8005584:	40021000 	.word	0x40021000
 8005588:	0800b10c 	.word	0x0800b10c
 800558c:	00f42400 	.word	0x00f42400
 8005590:	007a1200 	.word	0x007a1200

08005594 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005594:	b480      	push	{r7}
 8005596:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005598:	4b03      	ldr	r3, [pc, #12]	; (80055a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800559a:	681b      	ldr	r3, [r3, #0]
}
 800559c:	4618      	mov	r0, r3
 800559e:	46bd      	mov	sp, r7
 80055a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a4:	4770      	bx	lr
 80055a6:	bf00      	nop
 80055a8:	20000004 	.word	0x20000004

080055ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80055b0:	f7ff fff0 	bl	8005594 <HAL_RCC_GetHCLKFreq>
 80055b4:	4602      	mov	r2, r0
 80055b6:	4b06      	ldr	r3, [pc, #24]	; (80055d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80055b8:	689b      	ldr	r3, [r3, #8]
 80055ba:	0a1b      	lsrs	r3, r3, #8
 80055bc:	f003 0307 	and.w	r3, r3, #7
 80055c0:	4904      	ldr	r1, [pc, #16]	; (80055d4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80055c2:	5ccb      	ldrb	r3, [r1, r3]
 80055c4:	f003 031f 	and.w	r3, r3, #31
 80055c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80055cc:	4618      	mov	r0, r3
 80055ce:	bd80      	pop	{r7, pc}
 80055d0:	40021000 	.word	0x40021000
 80055d4:	0800b104 	.word	0x0800b104

080055d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80055dc:	f7ff ffda 	bl	8005594 <HAL_RCC_GetHCLKFreq>
 80055e0:	4602      	mov	r2, r0
 80055e2:	4b06      	ldr	r3, [pc, #24]	; (80055fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80055e4:	689b      	ldr	r3, [r3, #8]
 80055e6:	0adb      	lsrs	r3, r3, #11
 80055e8:	f003 0307 	and.w	r3, r3, #7
 80055ec:	4904      	ldr	r1, [pc, #16]	; (8005600 <HAL_RCC_GetPCLK2Freq+0x28>)
 80055ee:	5ccb      	ldrb	r3, [r1, r3]
 80055f0:	f003 031f 	and.w	r3, r3, #31
 80055f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80055f8:	4618      	mov	r0, r3
 80055fa:	bd80      	pop	{r7, pc}
 80055fc:	40021000 	.word	0x40021000
 8005600:	0800b104 	.word	0x0800b104

08005604 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b086      	sub	sp, #24
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800560c:	2300      	movs	r3, #0
 800560e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005610:	4b2a      	ldr	r3, [pc, #168]	; (80056bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005612:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005614:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005618:	2b00      	cmp	r3, #0
 800561a:	d003      	beq.n	8005624 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800561c:	f7ff fa02 	bl	8004a24 <HAL_PWREx_GetVoltageRange>
 8005620:	6178      	str	r0, [r7, #20]
 8005622:	e014      	b.n	800564e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005624:	4b25      	ldr	r3, [pc, #148]	; (80056bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005626:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005628:	4a24      	ldr	r2, [pc, #144]	; (80056bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800562a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800562e:	6593      	str	r3, [r2, #88]	; 0x58
 8005630:	4b22      	ldr	r3, [pc, #136]	; (80056bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005632:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005634:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005638:	60fb      	str	r3, [r7, #12]
 800563a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800563c:	f7ff f9f2 	bl	8004a24 <HAL_PWREx_GetVoltageRange>
 8005640:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005642:	4b1e      	ldr	r3, [pc, #120]	; (80056bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005644:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005646:	4a1d      	ldr	r2, [pc, #116]	; (80056bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005648:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800564c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800564e:	697b      	ldr	r3, [r7, #20]
 8005650:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005654:	d10b      	bne.n	800566e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2b80      	cmp	r3, #128	; 0x80
 800565a:	d919      	bls.n	8005690 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2ba0      	cmp	r3, #160	; 0xa0
 8005660:	d902      	bls.n	8005668 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005662:	2302      	movs	r3, #2
 8005664:	613b      	str	r3, [r7, #16]
 8005666:	e013      	b.n	8005690 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005668:	2301      	movs	r3, #1
 800566a:	613b      	str	r3, [r7, #16]
 800566c:	e010      	b.n	8005690 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2b80      	cmp	r3, #128	; 0x80
 8005672:	d902      	bls.n	800567a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005674:	2303      	movs	r3, #3
 8005676:	613b      	str	r3, [r7, #16]
 8005678:	e00a      	b.n	8005690 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2b80      	cmp	r3, #128	; 0x80
 800567e:	d102      	bne.n	8005686 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005680:	2302      	movs	r3, #2
 8005682:	613b      	str	r3, [r7, #16]
 8005684:	e004      	b.n	8005690 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2b70      	cmp	r3, #112	; 0x70
 800568a:	d101      	bne.n	8005690 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800568c:	2301      	movs	r3, #1
 800568e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005690:	4b0b      	ldr	r3, [pc, #44]	; (80056c0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f023 0207 	bic.w	r2, r3, #7
 8005698:	4909      	ldr	r1, [pc, #36]	; (80056c0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800569a:	693b      	ldr	r3, [r7, #16]
 800569c:	4313      	orrs	r3, r2
 800569e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80056a0:	4b07      	ldr	r3, [pc, #28]	; (80056c0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f003 0307 	and.w	r3, r3, #7
 80056a8:	693a      	ldr	r2, [r7, #16]
 80056aa:	429a      	cmp	r2, r3
 80056ac:	d001      	beq.n	80056b2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80056ae:	2301      	movs	r3, #1
 80056b0:	e000      	b.n	80056b4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80056b2:	2300      	movs	r3, #0
}
 80056b4:	4618      	mov	r0, r3
 80056b6:	3718      	adds	r7, #24
 80056b8:	46bd      	mov	sp, r7
 80056ba:	bd80      	pop	{r7, pc}
 80056bc:	40021000 	.word	0x40021000
 80056c0:	40022000 	.word	0x40022000

080056c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b086      	sub	sp, #24
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80056cc:	2300      	movs	r3, #0
 80056ce:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80056d0:	2300      	movs	r3, #0
 80056d2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d041      	beq.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80056e4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80056e8:	d02a      	beq.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80056ea:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80056ee:	d824      	bhi.n	800573a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80056f0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80056f4:	d008      	beq.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80056f6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80056fa:	d81e      	bhi.n	800573a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d00a      	beq.n	8005716 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005700:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005704:	d010      	beq.n	8005728 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005706:	e018      	b.n	800573a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005708:	4b86      	ldr	r3, [pc, #536]	; (8005924 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800570a:	68db      	ldr	r3, [r3, #12]
 800570c:	4a85      	ldr	r2, [pc, #532]	; (8005924 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800570e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005712:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005714:	e015      	b.n	8005742 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	3304      	adds	r3, #4
 800571a:	2100      	movs	r1, #0
 800571c:	4618      	mov	r0, r3
 800571e:	f000 fabb 	bl	8005c98 <RCCEx_PLLSAI1_Config>
 8005722:	4603      	mov	r3, r0
 8005724:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005726:	e00c      	b.n	8005742 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	3320      	adds	r3, #32
 800572c:	2100      	movs	r1, #0
 800572e:	4618      	mov	r0, r3
 8005730:	f000 fba6 	bl	8005e80 <RCCEx_PLLSAI2_Config>
 8005734:	4603      	mov	r3, r0
 8005736:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005738:	e003      	b.n	8005742 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800573a:	2301      	movs	r3, #1
 800573c:	74fb      	strb	r3, [r7, #19]
      break;
 800573e:	e000      	b.n	8005742 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005740:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005742:	7cfb      	ldrb	r3, [r7, #19]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d10b      	bne.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005748:	4b76      	ldr	r3, [pc, #472]	; (8005924 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800574a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800574e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005756:	4973      	ldr	r1, [pc, #460]	; (8005924 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005758:	4313      	orrs	r3, r2
 800575a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800575e:	e001      	b.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005760:	7cfb      	ldrb	r3, [r7, #19]
 8005762:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800576c:	2b00      	cmp	r3, #0
 800576e:	d041      	beq.n	80057f4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005774:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005778:	d02a      	beq.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800577a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800577e:	d824      	bhi.n	80057ca <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005780:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005784:	d008      	beq.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005786:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800578a:	d81e      	bhi.n	80057ca <HAL_RCCEx_PeriphCLKConfig+0x106>
 800578c:	2b00      	cmp	r3, #0
 800578e:	d00a      	beq.n	80057a6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8005790:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005794:	d010      	beq.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005796:	e018      	b.n	80057ca <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005798:	4b62      	ldr	r3, [pc, #392]	; (8005924 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800579a:	68db      	ldr	r3, [r3, #12]
 800579c:	4a61      	ldr	r2, [pc, #388]	; (8005924 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800579e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057a2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80057a4:	e015      	b.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	3304      	adds	r3, #4
 80057aa:	2100      	movs	r1, #0
 80057ac:	4618      	mov	r0, r3
 80057ae:	f000 fa73 	bl	8005c98 <RCCEx_PLLSAI1_Config>
 80057b2:	4603      	mov	r3, r0
 80057b4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80057b6:	e00c      	b.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	3320      	adds	r3, #32
 80057bc:	2100      	movs	r1, #0
 80057be:	4618      	mov	r0, r3
 80057c0:	f000 fb5e 	bl	8005e80 <RCCEx_PLLSAI2_Config>
 80057c4:	4603      	mov	r3, r0
 80057c6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80057c8:	e003      	b.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80057ca:	2301      	movs	r3, #1
 80057cc:	74fb      	strb	r3, [r7, #19]
      break;
 80057ce:	e000      	b.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80057d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80057d2:	7cfb      	ldrb	r3, [r7, #19]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d10b      	bne.n	80057f0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80057d8:	4b52      	ldr	r3, [pc, #328]	; (8005924 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80057da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057de:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80057e6:	494f      	ldr	r1, [pc, #316]	; (8005924 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80057e8:	4313      	orrs	r3, r2
 80057ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80057ee:	e001      	b.n	80057f4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057f0:	7cfb      	ldrb	r3, [r7, #19]
 80057f2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	f000 80a0 	beq.w	8005942 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005802:	2300      	movs	r3, #0
 8005804:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005806:	4b47      	ldr	r3, [pc, #284]	; (8005924 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005808:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800580a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800580e:	2b00      	cmp	r3, #0
 8005810:	d101      	bne.n	8005816 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8005812:	2301      	movs	r3, #1
 8005814:	e000      	b.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8005816:	2300      	movs	r3, #0
 8005818:	2b00      	cmp	r3, #0
 800581a:	d00d      	beq.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800581c:	4b41      	ldr	r3, [pc, #260]	; (8005924 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800581e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005820:	4a40      	ldr	r2, [pc, #256]	; (8005924 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005822:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005826:	6593      	str	r3, [r2, #88]	; 0x58
 8005828:	4b3e      	ldr	r3, [pc, #248]	; (8005924 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800582a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800582c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005830:	60bb      	str	r3, [r7, #8]
 8005832:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005834:	2301      	movs	r3, #1
 8005836:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005838:	4b3b      	ldr	r3, [pc, #236]	; (8005928 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4a3a      	ldr	r2, [pc, #232]	; (8005928 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800583e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005842:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005844:	f7fd fe04 	bl	8003450 <HAL_GetTick>
 8005848:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800584a:	e009      	b.n	8005860 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800584c:	f7fd fe00 	bl	8003450 <HAL_GetTick>
 8005850:	4602      	mov	r2, r0
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	1ad3      	subs	r3, r2, r3
 8005856:	2b02      	cmp	r3, #2
 8005858:	d902      	bls.n	8005860 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800585a:	2303      	movs	r3, #3
 800585c:	74fb      	strb	r3, [r7, #19]
        break;
 800585e:	e005      	b.n	800586c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005860:	4b31      	ldr	r3, [pc, #196]	; (8005928 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005868:	2b00      	cmp	r3, #0
 800586a:	d0ef      	beq.n	800584c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800586c:	7cfb      	ldrb	r3, [r7, #19]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d15c      	bne.n	800592c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005872:	4b2c      	ldr	r3, [pc, #176]	; (8005924 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005874:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005878:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800587c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800587e:	697b      	ldr	r3, [r7, #20]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d01f      	beq.n	80058c4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800588a:	697a      	ldr	r2, [r7, #20]
 800588c:	429a      	cmp	r2, r3
 800588e:	d019      	beq.n	80058c4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005890:	4b24      	ldr	r3, [pc, #144]	; (8005924 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005892:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005896:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800589a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800589c:	4b21      	ldr	r3, [pc, #132]	; (8005924 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800589e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058a2:	4a20      	ldr	r2, [pc, #128]	; (8005924 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80058a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80058ac:	4b1d      	ldr	r3, [pc, #116]	; (8005924 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80058ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058b2:	4a1c      	ldr	r2, [pc, #112]	; (8005924 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80058b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80058bc:	4a19      	ldr	r2, [pc, #100]	; (8005924 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80058be:	697b      	ldr	r3, [r7, #20]
 80058c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80058c4:	697b      	ldr	r3, [r7, #20]
 80058c6:	f003 0301 	and.w	r3, r3, #1
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d016      	beq.n	80058fc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058ce:	f7fd fdbf 	bl	8003450 <HAL_GetTick>
 80058d2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80058d4:	e00b      	b.n	80058ee <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058d6:	f7fd fdbb 	bl	8003450 <HAL_GetTick>
 80058da:	4602      	mov	r2, r0
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	1ad3      	subs	r3, r2, r3
 80058e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d902      	bls.n	80058ee <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80058e8:	2303      	movs	r3, #3
 80058ea:	74fb      	strb	r3, [r7, #19]
            break;
 80058ec:	e006      	b.n	80058fc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80058ee:	4b0d      	ldr	r3, [pc, #52]	; (8005924 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80058f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058f4:	f003 0302 	and.w	r3, r3, #2
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d0ec      	beq.n	80058d6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80058fc:	7cfb      	ldrb	r3, [r7, #19]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d10c      	bne.n	800591c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005902:	4b08      	ldr	r3, [pc, #32]	; (8005924 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005904:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005908:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005912:	4904      	ldr	r1, [pc, #16]	; (8005924 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005914:	4313      	orrs	r3, r2
 8005916:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800591a:	e009      	b.n	8005930 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800591c:	7cfb      	ldrb	r3, [r7, #19]
 800591e:	74bb      	strb	r3, [r7, #18]
 8005920:	e006      	b.n	8005930 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8005922:	bf00      	nop
 8005924:	40021000 	.word	0x40021000
 8005928:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800592c:	7cfb      	ldrb	r3, [r7, #19]
 800592e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005930:	7c7b      	ldrb	r3, [r7, #17]
 8005932:	2b01      	cmp	r3, #1
 8005934:	d105      	bne.n	8005942 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005936:	4b9e      	ldr	r3, [pc, #632]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005938:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800593a:	4a9d      	ldr	r2, [pc, #628]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800593c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005940:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f003 0301 	and.w	r3, r3, #1
 800594a:	2b00      	cmp	r3, #0
 800594c:	d00a      	beq.n	8005964 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800594e:	4b98      	ldr	r3, [pc, #608]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005950:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005954:	f023 0203 	bic.w	r2, r3, #3
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800595c:	4994      	ldr	r1, [pc, #592]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800595e:	4313      	orrs	r3, r2
 8005960:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f003 0302 	and.w	r3, r3, #2
 800596c:	2b00      	cmp	r3, #0
 800596e:	d00a      	beq.n	8005986 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005970:	4b8f      	ldr	r3, [pc, #572]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005972:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005976:	f023 020c 	bic.w	r2, r3, #12
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800597e:	498c      	ldr	r1, [pc, #560]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005980:	4313      	orrs	r3, r2
 8005982:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f003 0304 	and.w	r3, r3, #4
 800598e:	2b00      	cmp	r3, #0
 8005990:	d00a      	beq.n	80059a8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005992:	4b87      	ldr	r3, [pc, #540]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005994:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005998:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059a0:	4983      	ldr	r1, [pc, #524]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059a2:	4313      	orrs	r3, r2
 80059a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f003 0308 	and.w	r3, r3, #8
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d00a      	beq.n	80059ca <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80059b4:	4b7e      	ldr	r3, [pc, #504]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059ba:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059c2:	497b      	ldr	r1, [pc, #492]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059c4:	4313      	orrs	r3, r2
 80059c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f003 0310 	and.w	r3, r3, #16
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d00a      	beq.n	80059ec <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80059d6:	4b76      	ldr	r3, [pc, #472]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059e4:	4972      	ldr	r1, [pc, #456]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059e6:	4313      	orrs	r3, r2
 80059e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f003 0320 	and.w	r3, r3, #32
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d00a      	beq.n	8005a0e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80059f8:	4b6d      	ldr	r3, [pc, #436]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059fe:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a06:	496a      	ldr	r1, [pc, #424]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a08:	4313      	orrs	r3, r2
 8005a0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d00a      	beq.n	8005a30 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005a1a:	4b65      	ldr	r3, [pc, #404]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a20:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a28:	4961      	ldr	r1, [pc, #388]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d00a      	beq.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005a3c:	4b5c      	ldr	r3, [pc, #368]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a42:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a4a:	4959      	ldr	r1, [pc, #356]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a4c:	4313      	orrs	r3, r2
 8005a4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d00a      	beq.n	8005a74 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005a5e:	4b54      	ldr	r3, [pc, #336]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a64:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a6c:	4950      	ldr	r1, [pc, #320]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d00a      	beq.n	8005a96 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005a80:	4b4b      	ldr	r3, [pc, #300]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a86:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a8e:	4948      	ldr	r1, [pc, #288]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a90:	4313      	orrs	r3, r2
 8005a92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d00a      	beq.n	8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005aa2:	4b43      	ldr	r3, [pc, #268]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005aa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005aa8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ab0:	493f      	ldr	r1, [pc, #252]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ab2:	4313      	orrs	r3, r2
 8005ab4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d028      	beq.n	8005b16 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005ac4:	4b3a      	ldr	r3, [pc, #232]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005aca:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ad2:	4937      	ldr	r1, [pc, #220]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ad4:	4313      	orrs	r3, r2
 8005ad6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ade:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005ae2:	d106      	bne.n	8005af2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005ae4:	4b32      	ldr	r3, [pc, #200]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ae6:	68db      	ldr	r3, [r3, #12]
 8005ae8:	4a31      	ldr	r2, [pc, #196]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005aea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005aee:	60d3      	str	r3, [r2, #12]
 8005af0:	e011      	b.n	8005b16 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005af6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005afa:	d10c      	bne.n	8005b16 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	3304      	adds	r3, #4
 8005b00:	2101      	movs	r1, #1
 8005b02:	4618      	mov	r0, r3
 8005b04:	f000 f8c8 	bl	8005c98 <RCCEx_PLLSAI1_Config>
 8005b08:	4603      	mov	r3, r0
 8005b0a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005b0c:	7cfb      	ldrb	r3, [r7, #19]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d001      	beq.n	8005b16 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8005b12:	7cfb      	ldrb	r3, [r7, #19]
 8005b14:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d028      	beq.n	8005b74 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005b22:	4b23      	ldr	r3, [pc, #140]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b28:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b30:	491f      	ldr	r1, [pc, #124]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b32:	4313      	orrs	r3, r2
 8005b34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b3c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b40:	d106      	bne.n	8005b50 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b42:	4b1b      	ldr	r3, [pc, #108]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b44:	68db      	ldr	r3, [r3, #12]
 8005b46:	4a1a      	ldr	r2, [pc, #104]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b48:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005b4c:	60d3      	str	r3, [r2, #12]
 8005b4e:	e011      	b.n	8005b74 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b54:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005b58:	d10c      	bne.n	8005b74 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	3304      	adds	r3, #4
 8005b5e:	2101      	movs	r1, #1
 8005b60:	4618      	mov	r0, r3
 8005b62:	f000 f899 	bl	8005c98 <RCCEx_PLLSAI1_Config>
 8005b66:	4603      	mov	r3, r0
 8005b68:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005b6a:	7cfb      	ldrb	r3, [r7, #19]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d001      	beq.n	8005b74 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8005b70:	7cfb      	ldrb	r3, [r7, #19]
 8005b72:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d02b      	beq.n	8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005b80:	4b0b      	ldr	r3, [pc, #44]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b86:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b8e:	4908      	ldr	r1, [pc, #32]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b90:	4313      	orrs	r3, r2
 8005b92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b9a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b9e:	d109      	bne.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005ba0:	4b03      	ldr	r3, [pc, #12]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ba2:	68db      	ldr	r3, [r3, #12]
 8005ba4:	4a02      	ldr	r2, [pc, #8]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ba6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005baa:	60d3      	str	r3, [r2, #12]
 8005bac:	e014      	b.n	8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8005bae:	bf00      	nop
 8005bb0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005bb8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005bbc:	d10c      	bne.n	8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	3304      	adds	r3, #4
 8005bc2:	2101      	movs	r1, #1
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	f000 f867 	bl	8005c98 <RCCEx_PLLSAI1_Config>
 8005bca:	4603      	mov	r3, r0
 8005bcc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005bce:	7cfb      	ldrb	r3, [r7, #19]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d001      	beq.n	8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005bd4:	7cfb      	ldrb	r3, [r7, #19]
 8005bd6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d02f      	beq.n	8005c44 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005be4:	4b2b      	ldr	r3, [pc, #172]	; (8005c94 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005be6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bea:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005bf2:	4928      	ldr	r1, [pc, #160]	; (8005c94 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005bf4:	4313      	orrs	r3, r2
 8005bf6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005bfe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005c02:	d10d      	bne.n	8005c20 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	3304      	adds	r3, #4
 8005c08:	2102      	movs	r1, #2
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	f000 f844 	bl	8005c98 <RCCEx_PLLSAI1_Config>
 8005c10:	4603      	mov	r3, r0
 8005c12:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005c14:	7cfb      	ldrb	r3, [r7, #19]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d014      	beq.n	8005c44 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005c1a:	7cfb      	ldrb	r3, [r7, #19]
 8005c1c:	74bb      	strb	r3, [r7, #18]
 8005c1e:	e011      	b.n	8005c44 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005c24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c28:	d10c      	bne.n	8005c44 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	3320      	adds	r3, #32
 8005c2e:	2102      	movs	r1, #2
 8005c30:	4618      	mov	r0, r3
 8005c32:	f000 f925 	bl	8005e80 <RCCEx_PLLSAI2_Config>
 8005c36:	4603      	mov	r3, r0
 8005c38:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005c3a:	7cfb      	ldrb	r3, [r7, #19]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d001      	beq.n	8005c44 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005c40:	7cfb      	ldrb	r3, [r7, #19]
 8005c42:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d00a      	beq.n	8005c66 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005c50:	4b10      	ldr	r3, [pc, #64]	; (8005c94 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c56:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c5e:	490d      	ldr	r1, [pc, #52]	; (8005c94 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005c60:	4313      	orrs	r3, r2
 8005c62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d00b      	beq.n	8005c8a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005c72:	4b08      	ldr	r3, [pc, #32]	; (8005c94 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005c74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c78:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005c82:	4904      	ldr	r1, [pc, #16]	; (8005c94 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005c84:	4313      	orrs	r3, r2
 8005c86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005c8a:	7cbb      	ldrb	r3, [r7, #18]
}
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	3718      	adds	r7, #24
 8005c90:	46bd      	mov	sp, r7
 8005c92:	bd80      	pop	{r7, pc}
 8005c94:	40021000 	.word	0x40021000

08005c98 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b084      	sub	sp, #16
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
 8005ca0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005ca6:	4b75      	ldr	r3, [pc, #468]	; (8005e7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ca8:	68db      	ldr	r3, [r3, #12]
 8005caa:	f003 0303 	and.w	r3, r3, #3
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d018      	beq.n	8005ce4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005cb2:	4b72      	ldr	r3, [pc, #456]	; (8005e7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005cb4:	68db      	ldr	r3, [r3, #12]
 8005cb6:	f003 0203 	and.w	r2, r3, #3
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	429a      	cmp	r2, r3
 8005cc0:	d10d      	bne.n	8005cde <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
       ||
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d009      	beq.n	8005cde <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005cca:	4b6c      	ldr	r3, [pc, #432]	; (8005e7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ccc:	68db      	ldr	r3, [r3, #12]
 8005cce:	091b      	lsrs	r3, r3, #4
 8005cd0:	f003 0307 	and.w	r3, r3, #7
 8005cd4:	1c5a      	adds	r2, r3, #1
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	685b      	ldr	r3, [r3, #4]
       ||
 8005cda:	429a      	cmp	r2, r3
 8005cdc:	d047      	beq.n	8005d6e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005cde:	2301      	movs	r3, #1
 8005ce0:	73fb      	strb	r3, [r7, #15]
 8005ce2:	e044      	b.n	8005d6e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	2b03      	cmp	r3, #3
 8005cea:	d018      	beq.n	8005d1e <RCCEx_PLLSAI1_Config+0x86>
 8005cec:	2b03      	cmp	r3, #3
 8005cee:	d825      	bhi.n	8005d3c <RCCEx_PLLSAI1_Config+0xa4>
 8005cf0:	2b01      	cmp	r3, #1
 8005cf2:	d002      	beq.n	8005cfa <RCCEx_PLLSAI1_Config+0x62>
 8005cf4:	2b02      	cmp	r3, #2
 8005cf6:	d009      	beq.n	8005d0c <RCCEx_PLLSAI1_Config+0x74>
 8005cf8:	e020      	b.n	8005d3c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005cfa:	4b60      	ldr	r3, [pc, #384]	; (8005e7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f003 0302 	and.w	r3, r3, #2
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d11d      	bne.n	8005d42 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005d06:	2301      	movs	r3, #1
 8005d08:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005d0a:	e01a      	b.n	8005d42 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005d0c:	4b5b      	ldr	r3, [pc, #364]	; (8005e7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d116      	bne.n	8005d46 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005d18:	2301      	movs	r3, #1
 8005d1a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005d1c:	e013      	b.n	8005d46 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005d1e:	4b57      	ldr	r3, [pc, #348]	; (8005e7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d10f      	bne.n	8005d4a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005d2a:	4b54      	ldr	r3, [pc, #336]	; (8005e7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d109      	bne.n	8005d4a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005d36:	2301      	movs	r3, #1
 8005d38:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005d3a:	e006      	b.n	8005d4a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005d3c:	2301      	movs	r3, #1
 8005d3e:	73fb      	strb	r3, [r7, #15]
      break;
 8005d40:	e004      	b.n	8005d4c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005d42:	bf00      	nop
 8005d44:	e002      	b.n	8005d4c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005d46:	bf00      	nop
 8005d48:	e000      	b.n	8005d4c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005d4a:	bf00      	nop
    }

    if(status == HAL_OK)
 8005d4c:	7bfb      	ldrb	r3, [r7, #15]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d10d      	bne.n	8005d6e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005d52:	4b4a      	ldr	r3, [pc, #296]	; (8005e7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d54:	68db      	ldr	r3, [r3, #12]
 8005d56:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6819      	ldr	r1, [r3, #0]
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	685b      	ldr	r3, [r3, #4]
 8005d62:	3b01      	subs	r3, #1
 8005d64:	011b      	lsls	r3, r3, #4
 8005d66:	430b      	orrs	r3, r1
 8005d68:	4944      	ldr	r1, [pc, #272]	; (8005e7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d6a:	4313      	orrs	r3, r2
 8005d6c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005d6e:	7bfb      	ldrb	r3, [r7, #15]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d17d      	bne.n	8005e70 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005d74:	4b41      	ldr	r3, [pc, #260]	; (8005e7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4a40      	ldr	r2, [pc, #256]	; (8005e7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d7a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005d7e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d80:	f7fd fb66 	bl	8003450 <HAL_GetTick>
 8005d84:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005d86:	e009      	b.n	8005d9c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005d88:	f7fd fb62 	bl	8003450 <HAL_GetTick>
 8005d8c:	4602      	mov	r2, r0
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	1ad3      	subs	r3, r2, r3
 8005d92:	2b02      	cmp	r3, #2
 8005d94:	d902      	bls.n	8005d9c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005d96:	2303      	movs	r3, #3
 8005d98:	73fb      	strb	r3, [r7, #15]
        break;
 8005d9a:	e005      	b.n	8005da8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005d9c:	4b37      	ldr	r3, [pc, #220]	; (8005e7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d1ef      	bne.n	8005d88 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005da8:	7bfb      	ldrb	r3, [r7, #15]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d160      	bne.n	8005e70 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d111      	bne.n	8005dd8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005db4:	4b31      	ldr	r3, [pc, #196]	; (8005e7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005db6:	691b      	ldr	r3, [r3, #16]
 8005db8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005dbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005dc0:	687a      	ldr	r2, [r7, #4]
 8005dc2:	6892      	ldr	r2, [r2, #8]
 8005dc4:	0211      	lsls	r1, r2, #8
 8005dc6:	687a      	ldr	r2, [r7, #4]
 8005dc8:	68d2      	ldr	r2, [r2, #12]
 8005dca:	0912      	lsrs	r2, r2, #4
 8005dcc:	0452      	lsls	r2, r2, #17
 8005dce:	430a      	orrs	r2, r1
 8005dd0:	492a      	ldr	r1, [pc, #168]	; (8005e7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005dd2:	4313      	orrs	r3, r2
 8005dd4:	610b      	str	r3, [r1, #16]
 8005dd6:	e027      	b.n	8005e28 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	2b01      	cmp	r3, #1
 8005ddc:	d112      	bne.n	8005e04 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005dde:	4b27      	ldr	r3, [pc, #156]	; (8005e7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005de0:	691b      	ldr	r3, [r3, #16]
 8005de2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005de6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005dea:	687a      	ldr	r2, [r7, #4]
 8005dec:	6892      	ldr	r2, [r2, #8]
 8005dee:	0211      	lsls	r1, r2, #8
 8005df0:	687a      	ldr	r2, [r7, #4]
 8005df2:	6912      	ldr	r2, [r2, #16]
 8005df4:	0852      	lsrs	r2, r2, #1
 8005df6:	3a01      	subs	r2, #1
 8005df8:	0552      	lsls	r2, r2, #21
 8005dfa:	430a      	orrs	r2, r1
 8005dfc:	491f      	ldr	r1, [pc, #124]	; (8005e7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005dfe:	4313      	orrs	r3, r2
 8005e00:	610b      	str	r3, [r1, #16]
 8005e02:	e011      	b.n	8005e28 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005e04:	4b1d      	ldr	r3, [pc, #116]	; (8005e7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e06:	691b      	ldr	r3, [r3, #16]
 8005e08:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005e0c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005e10:	687a      	ldr	r2, [r7, #4]
 8005e12:	6892      	ldr	r2, [r2, #8]
 8005e14:	0211      	lsls	r1, r2, #8
 8005e16:	687a      	ldr	r2, [r7, #4]
 8005e18:	6952      	ldr	r2, [r2, #20]
 8005e1a:	0852      	lsrs	r2, r2, #1
 8005e1c:	3a01      	subs	r2, #1
 8005e1e:	0652      	lsls	r2, r2, #25
 8005e20:	430a      	orrs	r2, r1
 8005e22:	4916      	ldr	r1, [pc, #88]	; (8005e7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e24:	4313      	orrs	r3, r2
 8005e26:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005e28:	4b14      	ldr	r3, [pc, #80]	; (8005e7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	4a13      	ldr	r2, [pc, #76]	; (8005e7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e2e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005e32:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e34:	f7fd fb0c 	bl	8003450 <HAL_GetTick>
 8005e38:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005e3a:	e009      	b.n	8005e50 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005e3c:	f7fd fb08 	bl	8003450 <HAL_GetTick>
 8005e40:	4602      	mov	r2, r0
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	1ad3      	subs	r3, r2, r3
 8005e46:	2b02      	cmp	r3, #2
 8005e48:	d902      	bls.n	8005e50 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8005e4a:	2303      	movs	r3, #3
 8005e4c:	73fb      	strb	r3, [r7, #15]
          break;
 8005e4e:	e005      	b.n	8005e5c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005e50:	4b0a      	ldr	r3, [pc, #40]	; (8005e7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d0ef      	beq.n	8005e3c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005e5c:	7bfb      	ldrb	r3, [r7, #15]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d106      	bne.n	8005e70 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005e62:	4b06      	ldr	r3, [pc, #24]	; (8005e7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e64:	691a      	ldr	r2, [r3, #16]
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	699b      	ldr	r3, [r3, #24]
 8005e6a:	4904      	ldr	r1, [pc, #16]	; (8005e7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e6c:	4313      	orrs	r3, r2
 8005e6e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005e70:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e72:	4618      	mov	r0, r3
 8005e74:	3710      	adds	r7, #16
 8005e76:	46bd      	mov	sp, r7
 8005e78:	bd80      	pop	{r7, pc}
 8005e7a:	bf00      	nop
 8005e7c:	40021000 	.word	0x40021000

08005e80 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b084      	sub	sp, #16
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
 8005e88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005e8e:	4b6a      	ldr	r3, [pc, #424]	; (8006038 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005e90:	68db      	ldr	r3, [r3, #12]
 8005e92:	f003 0303 	and.w	r3, r3, #3
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d018      	beq.n	8005ecc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005e9a:	4b67      	ldr	r3, [pc, #412]	; (8006038 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005e9c:	68db      	ldr	r3, [r3, #12]
 8005e9e:	f003 0203 	and.w	r2, r3, #3
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	429a      	cmp	r2, r3
 8005ea8:	d10d      	bne.n	8005ec6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
       ||
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d009      	beq.n	8005ec6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005eb2:	4b61      	ldr	r3, [pc, #388]	; (8006038 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005eb4:	68db      	ldr	r3, [r3, #12]
 8005eb6:	091b      	lsrs	r3, r3, #4
 8005eb8:	f003 0307 	and.w	r3, r3, #7
 8005ebc:	1c5a      	adds	r2, r3, #1
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	685b      	ldr	r3, [r3, #4]
       ||
 8005ec2:	429a      	cmp	r2, r3
 8005ec4:	d047      	beq.n	8005f56 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	73fb      	strb	r3, [r7, #15]
 8005eca:	e044      	b.n	8005f56 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	2b03      	cmp	r3, #3
 8005ed2:	d018      	beq.n	8005f06 <RCCEx_PLLSAI2_Config+0x86>
 8005ed4:	2b03      	cmp	r3, #3
 8005ed6:	d825      	bhi.n	8005f24 <RCCEx_PLLSAI2_Config+0xa4>
 8005ed8:	2b01      	cmp	r3, #1
 8005eda:	d002      	beq.n	8005ee2 <RCCEx_PLLSAI2_Config+0x62>
 8005edc:	2b02      	cmp	r3, #2
 8005ede:	d009      	beq.n	8005ef4 <RCCEx_PLLSAI2_Config+0x74>
 8005ee0:	e020      	b.n	8005f24 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005ee2:	4b55      	ldr	r3, [pc, #340]	; (8006038 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f003 0302 	and.w	r3, r3, #2
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d11d      	bne.n	8005f2a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005eee:	2301      	movs	r3, #1
 8005ef0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005ef2:	e01a      	b.n	8005f2a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005ef4:	4b50      	ldr	r3, [pc, #320]	; (8006038 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d116      	bne.n	8005f2e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005f00:	2301      	movs	r3, #1
 8005f02:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005f04:	e013      	b.n	8005f2e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005f06:	4b4c      	ldr	r3, [pc, #304]	; (8006038 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d10f      	bne.n	8005f32 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005f12:	4b49      	ldr	r3, [pc, #292]	; (8006038 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d109      	bne.n	8005f32 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005f1e:	2301      	movs	r3, #1
 8005f20:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005f22:	e006      	b.n	8005f32 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005f24:	2301      	movs	r3, #1
 8005f26:	73fb      	strb	r3, [r7, #15]
      break;
 8005f28:	e004      	b.n	8005f34 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005f2a:	bf00      	nop
 8005f2c:	e002      	b.n	8005f34 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005f2e:	bf00      	nop
 8005f30:	e000      	b.n	8005f34 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005f32:	bf00      	nop
    }

    if(status == HAL_OK)
 8005f34:	7bfb      	ldrb	r3, [r7, #15]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d10d      	bne.n	8005f56 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005f3a:	4b3f      	ldr	r3, [pc, #252]	; (8006038 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f3c:	68db      	ldr	r3, [r3, #12]
 8005f3e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6819      	ldr	r1, [r3, #0]
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	685b      	ldr	r3, [r3, #4]
 8005f4a:	3b01      	subs	r3, #1
 8005f4c:	011b      	lsls	r3, r3, #4
 8005f4e:	430b      	orrs	r3, r1
 8005f50:	4939      	ldr	r1, [pc, #228]	; (8006038 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f52:	4313      	orrs	r3, r2
 8005f54:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005f56:	7bfb      	ldrb	r3, [r7, #15]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d167      	bne.n	800602c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005f5c:	4b36      	ldr	r3, [pc, #216]	; (8006038 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4a35      	ldr	r2, [pc, #212]	; (8006038 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f66:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f68:	f7fd fa72 	bl	8003450 <HAL_GetTick>
 8005f6c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005f6e:	e009      	b.n	8005f84 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005f70:	f7fd fa6e 	bl	8003450 <HAL_GetTick>
 8005f74:	4602      	mov	r2, r0
 8005f76:	68bb      	ldr	r3, [r7, #8]
 8005f78:	1ad3      	subs	r3, r2, r3
 8005f7a:	2b02      	cmp	r3, #2
 8005f7c:	d902      	bls.n	8005f84 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005f7e:	2303      	movs	r3, #3
 8005f80:	73fb      	strb	r3, [r7, #15]
        break;
 8005f82:	e005      	b.n	8005f90 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005f84:	4b2c      	ldr	r3, [pc, #176]	; (8006038 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d1ef      	bne.n	8005f70 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005f90:	7bfb      	ldrb	r3, [r7, #15]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d14a      	bne.n	800602c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d111      	bne.n	8005fc0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005f9c:	4b26      	ldr	r3, [pc, #152]	; (8006038 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f9e:	695b      	ldr	r3, [r3, #20]
 8005fa0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005fa4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005fa8:	687a      	ldr	r2, [r7, #4]
 8005faa:	6892      	ldr	r2, [r2, #8]
 8005fac:	0211      	lsls	r1, r2, #8
 8005fae:	687a      	ldr	r2, [r7, #4]
 8005fb0:	68d2      	ldr	r2, [r2, #12]
 8005fb2:	0912      	lsrs	r2, r2, #4
 8005fb4:	0452      	lsls	r2, r2, #17
 8005fb6:	430a      	orrs	r2, r1
 8005fb8:	491f      	ldr	r1, [pc, #124]	; (8006038 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	614b      	str	r3, [r1, #20]
 8005fbe:	e011      	b.n	8005fe4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005fc0:	4b1d      	ldr	r3, [pc, #116]	; (8006038 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005fc2:	695b      	ldr	r3, [r3, #20]
 8005fc4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005fc8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005fcc:	687a      	ldr	r2, [r7, #4]
 8005fce:	6892      	ldr	r2, [r2, #8]
 8005fd0:	0211      	lsls	r1, r2, #8
 8005fd2:	687a      	ldr	r2, [r7, #4]
 8005fd4:	6912      	ldr	r2, [r2, #16]
 8005fd6:	0852      	lsrs	r2, r2, #1
 8005fd8:	3a01      	subs	r2, #1
 8005fda:	0652      	lsls	r2, r2, #25
 8005fdc:	430a      	orrs	r2, r1
 8005fde:	4916      	ldr	r1, [pc, #88]	; (8006038 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005fe0:	4313      	orrs	r3, r2
 8005fe2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005fe4:	4b14      	ldr	r3, [pc, #80]	; (8006038 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4a13      	ldr	r2, [pc, #76]	; (8006038 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005fea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005fee:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ff0:	f7fd fa2e 	bl	8003450 <HAL_GetTick>
 8005ff4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005ff6:	e009      	b.n	800600c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005ff8:	f7fd fa2a 	bl	8003450 <HAL_GetTick>
 8005ffc:	4602      	mov	r2, r0
 8005ffe:	68bb      	ldr	r3, [r7, #8]
 8006000:	1ad3      	subs	r3, r2, r3
 8006002:	2b02      	cmp	r3, #2
 8006004:	d902      	bls.n	800600c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8006006:	2303      	movs	r3, #3
 8006008:	73fb      	strb	r3, [r7, #15]
          break;
 800600a:	e005      	b.n	8006018 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800600c:	4b0a      	ldr	r3, [pc, #40]	; (8006038 <RCCEx_PLLSAI2_Config+0x1b8>)
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006014:	2b00      	cmp	r3, #0
 8006016:	d0ef      	beq.n	8005ff8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8006018:	7bfb      	ldrb	r3, [r7, #15]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d106      	bne.n	800602c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800601e:	4b06      	ldr	r3, [pc, #24]	; (8006038 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006020:	695a      	ldr	r2, [r3, #20]
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	695b      	ldr	r3, [r3, #20]
 8006026:	4904      	ldr	r1, [pc, #16]	; (8006038 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006028:	4313      	orrs	r3, r2
 800602a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800602c:	7bfb      	ldrb	r3, [r7, #15]
}
 800602e:	4618      	mov	r0, r3
 8006030:	3710      	adds	r7, #16
 8006032:	46bd      	mov	sp, r7
 8006034:	bd80      	pop	{r7, pc}
 8006036:	bf00      	nop
 8006038:	40021000 	.word	0x40021000

0800603c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b084      	sub	sp, #16
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d101      	bne.n	800604e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800604a:	2301      	movs	r3, #1
 800604c:	e095      	b.n	800617a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006052:	2b00      	cmp	r3, #0
 8006054:	d108      	bne.n	8006068 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	685b      	ldr	r3, [r3, #4]
 800605a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800605e:	d009      	beq.n	8006074 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2200      	movs	r2, #0
 8006064:	61da      	str	r2, [r3, #28]
 8006066:	e005      	b.n	8006074 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2200      	movs	r2, #0
 800606c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2200      	movs	r2, #0
 8006072:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2200      	movs	r2, #0
 8006078:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006080:	b2db      	uxtb	r3, r3
 8006082:	2b00      	cmp	r3, #0
 8006084:	d106      	bne.n	8006094 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2200      	movs	r2, #0
 800608a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	f7fc fb22 	bl	80026d8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2202      	movs	r2, #2
 8006098:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	681a      	ldr	r2, [r3, #0]
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80060aa:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	68db      	ldr	r3, [r3, #12]
 80060b0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80060b4:	d902      	bls.n	80060bc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80060b6:	2300      	movs	r3, #0
 80060b8:	60fb      	str	r3, [r7, #12]
 80060ba:	e002      	b.n	80060c2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80060bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80060c0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	68db      	ldr	r3, [r3, #12]
 80060c6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80060ca:	d007      	beq.n	80060dc <HAL_SPI_Init+0xa0>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	68db      	ldr	r3, [r3, #12]
 80060d0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80060d4:	d002      	beq.n	80060dc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2200      	movs	r2, #0
 80060da:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	685b      	ldr	r3, [r3, #4]
 80060e0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	689b      	ldr	r3, [r3, #8]
 80060e8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80060ec:	431a      	orrs	r2, r3
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	691b      	ldr	r3, [r3, #16]
 80060f2:	f003 0302 	and.w	r3, r3, #2
 80060f6:	431a      	orrs	r2, r3
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	695b      	ldr	r3, [r3, #20]
 80060fc:	f003 0301 	and.w	r3, r3, #1
 8006100:	431a      	orrs	r2, r3
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	699b      	ldr	r3, [r3, #24]
 8006106:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800610a:	431a      	orrs	r2, r3
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	69db      	ldr	r3, [r3, #28]
 8006110:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006114:	431a      	orrs	r2, r3
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6a1b      	ldr	r3, [r3, #32]
 800611a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800611e:	ea42 0103 	orr.w	r1, r2, r3
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006126:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	430a      	orrs	r2, r1
 8006130:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	699b      	ldr	r3, [r3, #24]
 8006136:	0c1b      	lsrs	r3, r3, #16
 8006138:	f003 0204 	and.w	r2, r3, #4
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006140:	f003 0310 	and.w	r3, r3, #16
 8006144:	431a      	orrs	r2, r3
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800614a:	f003 0308 	and.w	r3, r3, #8
 800614e:	431a      	orrs	r2, r3
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	68db      	ldr	r3, [r3, #12]
 8006154:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006158:	ea42 0103 	orr.w	r1, r2, r3
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	430a      	orrs	r2, r1
 8006168:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2200      	movs	r2, #0
 800616e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2201      	movs	r2, #1
 8006174:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006178:	2300      	movs	r3, #0
}
 800617a:	4618      	mov	r0, r3
 800617c:	3710      	adds	r7, #16
 800617e:	46bd      	mov	sp, r7
 8006180:	bd80      	pop	{r7, pc}

08006182 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8006182:	b580      	push	{r7, lr}
 8006184:	b082      	sub	sp, #8
 8006186:	af00      	add	r7, sp, #0
 8006188:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d101      	bne.n	8006194 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8006190:	2301      	movs	r3, #1
 8006192:	e01a      	b.n	80061ca <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2202      	movs	r2, #2
 8006198:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	681a      	ldr	r2, [r3, #0]
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80061aa:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 80061ac:	6878      	ldr	r0, [r7, #4]
 80061ae:	f7fc fadf 	bl	8002770 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2200      	movs	r2, #0
 80061b6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2200      	movs	r2, #0
 80061bc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2200      	movs	r2, #0
 80061c4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  return HAL_OK;
 80061c8:	2300      	movs	r3, #0
}
 80061ca:	4618      	mov	r0, r3
 80061cc:	3708      	adds	r7, #8
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bd80      	pop	{r7, pc}

080061d2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80061d2:	b580      	push	{r7, lr}
 80061d4:	b088      	sub	sp, #32
 80061d6:	af00      	add	r7, sp, #0
 80061d8:	60f8      	str	r0, [r7, #12]
 80061da:	60b9      	str	r1, [r7, #8]
 80061dc:	603b      	str	r3, [r7, #0]
 80061de:	4613      	mov	r3, r2
 80061e0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80061e2:	2300      	movs	r3, #0
 80061e4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80061ec:	2b01      	cmp	r3, #1
 80061ee:	d101      	bne.n	80061f4 <HAL_SPI_Transmit+0x22>
 80061f0:	2302      	movs	r3, #2
 80061f2:	e158      	b.n	80064a6 <HAL_SPI_Transmit+0x2d4>
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	2201      	movs	r2, #1
 80061f8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80061fc:	f7fd f928 	bl	8003450 <HAL_GetTick>
 8006200:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006202:	88fb      	ldrh	r3, [r7, #6]
 8006204:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800620c:	b2db      	uxtb	r3, r3
 800620e:	2b01      	cmp	r3, #1
 8006210:	d002      	beq.n	8006218 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006212:	2302      	movs	r3, #2
 8006214:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006216:	e13d      	b.n	8006494 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d002      	beq.n	8006224 <HAL_SPI_Transmit+0x52>
 800621e:	88fb      	ldrh	r3, [r7, #6]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d102      	bne.n	800622a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006224:	2301      	movs	r3, #1
 8006226:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006228:	e134      	b.n	8006494 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	2203      	movs	r2, #3
 800622e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	2200      	movs	r2, #0
 8006236:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	68ba      	ldr	r2, [r7, #8]
 800623c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	88fa      	ldrh	r2, [r7, #6]
 8006242:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	88fa      	ldrh	r2, [r7, #6]
 8006248:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	2200      	movs	r2, #0
 800624e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	2200      	movs	r2, #0
 8006254:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	2200      	movs	r2, #0
 800625c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	2200      	movs	r2, #0
 8006264:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	2200      	movs	r2, #0
 800626a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	689b      	ldr	r3, [r3, #8]
 8006270:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006274:	d10f      	bne.n	8006296 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	681a      	ldr	r2, [r3, #0]
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006284:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	681a      	ldr	r2, [r3, #0]
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006294:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062a0:	2b40      	cmp	r3, #64	; 0x40
 80062a2:	d007      	beq.n	80062b4 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	681a      	ldr	r2, [r3, #0]
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80062b2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	68db      	ldr	r3, [r3, #12]
 80062b8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80062bc:	d94b      	bls.n	8006356 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	685b      	ldr	r3, [r3, #4]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d002      	beq.n	80062cc <HAL_SPI_Transmit+0xfa>
 80062c6:	8afb      	ldrh	r3, [r7, #22]
 80062c8:	2b01      	cmp	r3, #1
 80062ca:	d13e      	bne.n	800634a <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062d0:	881a      	ldrh	r2, [r3, #0]
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062dc:	1c9a      	adds	r2, r3, #2
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062e6:	b29b      	uxth	r3, r3
 80062e8:	3b01      	subs	r3, #1
 80062ea:	b29a      	uxth	r2, r3
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80062f0:	e02b      	b.n	800634a <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	689b      	ldr	r3, [r3, #8]
 80062f8:	f003 0302 	and.w	r3, r3, #2
 80062fc:	2b02      	cmp	r3, #2
 80062fe:	d112      	bne.n	8006326 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006304:	881a      	ldrh	r2, [r3, #0]
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006310:	1c9a      	adds	r2, r3, #2
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800631a:	b29b      	uxth	r3, r3
 800631c:	3b01      	subs	r3, #1
 800631e:	b29a      	uxth	r2, r3
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006324:	e011      	b.n	800634a <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006326:	f7fd f893 	bl	8003450 <HAL_GetTick>
 800632a:	4602      	mov	r2, r0
 800632c:	69bb      	ldr	r3, [r7, #24]
 800632e:	1ad3      	subs	r3, r2, r3
 8006330:	683a      	ldr	r2, [r7, #0]
 8006332:	429a      	cmp	r2, r3
 8006334:	d803      	bhi.n	800633e <HAL_SPI_Transmit+0x16c>
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	f1b3 3fff 	cmp.w	r3, #4294967295
 800633c:	d102      	bne.n	8006344 <HAL_SPI_Transmit+0x172>
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d102      	bne.n	800634a <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8006344:	2303      	movs	r3, #3
 8006346:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006348:	e0a4      	b.n	8006494 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800634e:	b29b      	uxth	r3, r3
 8006350:	2b00      	cmp	r3, #0
 8006352:	d1ce      	bne.n	80062f2 <HAL_SPI_Transmit+0x120>
 8006354:	e07c      	b.n	8006450 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	685b      	ldr	r3, [r3, #4]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d002      	beq.n	8006364 <HAL_SPI_Transmit+0x192>
 800635e:	8afb      	ldrh	r3, [r7, #22]
 8006360:	2b01      	cmp	r3, #1
 8006362:	d170      	bne.n	8006446 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006368:	b29b      	uxth	r3, r3
 800636a:	2b01      	cmp	r3, #1
 800636c:	d912      	bls.n	8006394 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006372:	881a      	ldrh	r2, [r3, #0]
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800637e:	1c9a      	adds	r2, r3, #2
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006388:	b29b      	uxth	r3, r3
 800638a:	3b02      	subs	r3, #2
 800638c:	b29a      	uxth	r2, r3
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006392:	e058      	b.n	8006446 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	330c      	adds	r3, #12
 800639e:	7812      	ldrb	r2, [r2, #0]
 80063a0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063a6:	1c5a      	adds	r2, r3, #1
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063b0:	b29b      	uxth	r3, r3
 80063b2:	3b01      	subs	r3, #1
 80063b4:	b29a      	uxth	r2, r3
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80063ba:	e044      	b.n	8006446 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	689b      	ldr	r3, [r3, #8]
 80063c2:	f003 0302 	and.w	r3, r3, #2
 80063c6:	2b02      	cmp	r3, #2
 80063c8:	d12b      	bne.n	8006422 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063ce:	b29b      	uxth	r3, r3
 80063d0:	2b01      	cmp	r3, #1
 80063d2:	d912      	bls.n	80063fa <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063d8:	881a      	ldrh	r2, [r3, #0]
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063e4:	1c9a      	adds	r2, r3, #2
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063ee:	b29b      	uxth	r3, r3
 80063f0:	3b02      	subs	r3, #2
 80063f2:	b29a      	uxth	r2, r3
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80063f8:	e025      	b.n	8006446 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	330c      	adds	r3, #12
 8006404:	7812      	ldrb	r2, [r2, #0]
 8006406:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800640c:	1c5a      	adds	r2, r3, #1
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006416:	b29b      	uxth	r3, r3
 8006418:	3b01      	subs	r3, #1
 800641a:	b29a      	uxth	r2, r3
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006420:	e011      	b.n	8006446 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006422:	f7fd f815 	bl	8003450 <HAL_GetTick>
 8006426:	4602      	mov	r2, r0
 8006428:	69bb      	ldr	r3, [r7, #24]
 800642a:	1ad3      	subs	r3, r2, r3
 800642c:	683a      	ldr	r2, [r7, #0]
 800642e:	429a      	cmp	r2, r3
 8006430:	d803      	bhi.n	800643a <HAL_SPI_Transmit+0x268>
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006438:	d102      	bne.n	8006440 <HAL_SPI_Transmit+0x26e>
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d102      	bne.n	8006446 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8006440:	2303      	movs	r3, #3
 8006442:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006444:	e026      	b.n	8006494 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800644a:	b29b      	uxth	r3, r3
 800644c:	2b00      	cmp	r3, #0
 800644e:	d1b5      	bne.n	80063bc <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006450:	69ba      	ldr	r2, [r7, #24]
 8006452:	6839      	ldr	r1, [r7, #0]
 8006454:	68f8      	ldr	r0, [r7, #12]
 8006456:	f000 fe03 	bl	8007060 <SPI_EndRxTxTransaction>
 800645a:	4603      	mov	r3, r0
 800645c:	2b00      	cmp	r3, #0
 800645e:	d002      	beq.n	8006466 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	2220      	movs	r2, #32
 8006464:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	689b      	ldr	r3, [r3, #8]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d10a      	bne.n	8006484 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800646e:	2300      	movs	r3, #0
 8006470:	613b      	str	r3, [r7, #16]
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	68db      	ldr	r3, [r3, #12]
 8006478:	613b      	str	r3, [r7, #16]
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	689b      	ldr	r3, [r3, #8]
 8006480:	613b      	str	r3, [r7, #16]
 8006482:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006488:	2b00      	cmp	r3, #0
 800648a:	d002      	beq.n	8006492 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 800648c:	2301      	movs	r3, #1
 800648e:	77fb      	strb	r3, [r7, #31]
 8006490:	e000      	b.n	8006494 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8006492:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	2201      	movs	r2, #1
 8006498:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	2200      	movs	r2, #0
 80064a0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80064a4:	7ffb      	ldrb	r3, [r7, #31]
}
 80064a6:	4618      	mov	r0, r3
 80064a8:	3720      	adds	r7, #32
 80064aa:	46bd      	mov	sp, r7
 80064ac:	bd80      	pop	{r7, pc}

080064ae <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80064ae:	b580      	push	{r7, lr}
 80064b0:	b088      	sub	sp, #32
 80064b2:	af02      	add	r7, sp, #8
 80064b4:	60f8      	str	r0, [r7, #12]
 80064b6:	60b9      	str	r1, [r7, #8]
 80064b8:	603b      	str	r3, [r7, #0]
 80064ba:	4613      	mov	r3, r2
 80064bc:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80064be:	2300      	movs	r3, #0
 80064c0:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	685b      	ldr	r3, [r3, #4]
 80064c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80064ca:	d112      	bne.n	80064f2 <HAL_SPI_Receive+0x44>
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	689b      	ldr	r3, [r3, #8]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d10e      	bne.n	80064f2 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	2204      	movs	r2, #4
 80064d8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80064dc:	88fa      	ldrh	r2, [r7, #6]
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	9300      	str	r3, [sp, #0]
 80064e2:	4613      	mov	r3, r2
 80064e4:	68ba      	ldr	r2, [r7, #8]
 80064e6:	68b9      	ldr	r1, [r7, #8]
 80064e8:	68f8      	ldr	r0, [r7, #12]
 80064ea:	f000 f910 	bl	800670e <HAL_SPI_TransmitReceive>
 80064ee:	4603      	mov	r3, r0
 80064f0:	e109      	b.n	8006706 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80064f8:	2b01      	cmp	r3, #1
 80064fa:	d101      	bne.n	8006500 <HAL_SPI_Receive+0x52>
 80064fc:	2302      	movs	r3, #2
 80064fe:	e102      	b.n	8006706 <HAL_SPI_Receive+0x258>
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	2201      	movs	r2, #1
 8006504:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006508:	f7fc ffa2 	bl	8003450 <HAL_GetTick>
 800650c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006514:	b2db      	uxtb	r3, r3
 8006516:	2b01      	cmp	r3, #1
 8006518:	d002      	beq.n	8006520 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800651a:	2302      	movs	r3, #2
 800651c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800651e:	e0e9      	b.n	80066f4 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8006520:	68bb      	ldr	r3, [r7, #8]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d002      	beq.n	800652c <HAL_SPI_Receive+0x7e>
 8006526:	88fb      	ldrh	r3, [r7, #6]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d102      	bne.n	8006532 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800652c:	2301      	movs	r3, #1
 800652e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006530:	e0e0      	b.n	80066f4 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	2204      	movs	r2, #4
 8006536:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	2200      	movs	r2, #0
 800653e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	68ba      	ldr	r2, [r7, #8]
 8006544:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	88fa      	ldrh	r2, [r7, #6]
 800654a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	88fa      	ldrh	r2, [r7, #6]
 8006552:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	2200      	movs	r2, #0
 800655a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	2200      	movs	r2, #0
 8006560:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	2200      	movs	r2, #0
 8006566:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	2200      	movs	r2, #0
 800656c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	2200      	movs	r2, #0
 8006572:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	68db      	ldr	r3, [r3, #12]
 8006578:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800657c:	d908      	bls.n	8006590 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	685a      	ldr	r2, [r3, #4]
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800658c:	605a      	str	r2, [r3, #4]
 800658e:	e007      	b.n	80065a0 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	685a      	ldr	r2, [r3, #4]
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800659e:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	689b      	ldr	r3, [r3, #8]
 80065a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065a8:	d10f      	bne.n	80065ca <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	681a      	ldr	r2, [r3, #0]
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80065b8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	681a      	ldr	r2, [r3, #0]
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80065c8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065d4:	2b40      	cmp	r3, #64	; 0x40
 80065d6:	d007      	beq.n	80065e8 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	681a      	ldr	r2, [r3, #0]
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80065e6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	68db      	ldr	r3, [r3, #12]
 80065ec:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80065f0:	d867      	bhi.n	80066c2 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80065f2:	e030      	b.n	8006656 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	689b      	ldr	r3, [r3, #8]
 80065fa:	f003 0301 	and.w	r3, r3, #1
 80065fe:	2b01      	cmp	r3, #1
 8006600:	d117      	bne.n	8006632 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f103 020c 	add.w	r2, r3, #12
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800660e:	7812      	ldrb	r2, [r2, #0]
 8006610:	b2d2      	uxtb	r2, r2
 8006612:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006618:	1c5a      	adds	r2, r3, #1
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006624:	b29b      	uxth	r3, r3
 8006626:	3b01      	subs	r3, #1
 8006628:	b29a      	uxth	r2, r3
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8006630:	e011      	b.n	8006656 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006632:	f7fc ff0d 	bl	8003450 <HAL_GetTick>
 8006636:	4602      	mov	r2, r0
 8006638:	693b      	ldr	r3, [r7, #16]
 800663a:	1ad3      	subs	r3, r2, r3
 800663c:	683a      	ldr	r2, [r7, #0]
 800663e:	429a      	cmp	r2, r3
 8006640:	d803      	bhi.n	800664a <HAL_SPI_Receive+0x19c>
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006648:	d102      	bne.n	8006650 <HAL_SPI_Receive+0x1a2>
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d102      	bne.n	8006656 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8006650:	2303      	movs	r3, #3
 8006652:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006654:	e04e      	b.n	80066f4 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800665c:	b29b      	uxth	r3, r3
 800665e:	2b00      	cmp	r3, #0
 8006660:	d1c8      	bne.n	80065f4 <HAL_SPI_Receive+0x146>
 8006662:	e034      	b.n	80066ce <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	689b      	ldr	r3, [r3, #8]
 800666a:	f003 0301 	and.w	r3, r3, #1
 800666e:	2b01      	cmp	r3, #1
 8006670:	d115      	bne.n	800669e <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	68da      	ldr	r2, [r3, #12]
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800667c:	b292      	uxth	r2, r2
 800667e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006684:	1c9a      	adds	r2, r3, #2
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006690:	b29b      	uxth	r3, r3
 8006692:	3b01      	subs	r3, #1
 8006694:	b29a      	uxth	r2, r3
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800669c:	e011      	b.n	80066c2 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800669e:	f7fc fed7 	bl	8003450 <HAL_GetTick>
 80066a2:	4602      	mov	r2, r0
 80066a4:	693b      	ldr	r3, [r7, #16]
 80066a6:	1ad3      	subs	r3, r2, r3
 80066a8:	683a      	ldr	r2, [r7, #0]
 80066aa:	429a      	cmp	r2, r3
 80066ac:	d803      	bhi.n	80066b6 <HAL_SPI_Receive+0x208>
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066b4:	d102      	bne.n	80066bc <HAL_SPI_Receive+0x20e>
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d102      	bne.n	80066c2 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 80066bc:	2303      	movs	r3, #3
 80066be:	75fb      	strb	r3, [r7, #23]
          goto error;
 80066c0:	e018      	b.n	80066f4 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80066c8:	b29b      	uxth	r3, r3
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d1ca      	bne.n	8006664 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80066ce:	693a      	ldr	r2, [r7, #16]
 80066d0:	6839      	ldr	r1, [r7, #0]
 80066d2:	68f8      	ldr	r0, [r7, #12]
 80066d4:	f000 fc6c 	bl	8006fb0 <SPI_EndRxTransaction>
 80066d8:	4603      	mov	r3, r0
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d002      	beq.n	80066e4 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	2220      	movs	r2, #32
 80066e2:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d002      	beq.n	80066f2 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 80066ec:	2301      	movs	r3, #1
 80066ee:	75fb      	strb	r3, [r7, #23]
 80066f0:	e000      	b.n	80066f4 <HAL_SPI_Receive+0x246>
  }

error :
 80066f2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	2201      	movs	r2, #1
 80066f8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	2200      	movs	r2, #0
 8006700:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006704:	7dfb      	ldrb	r3, [r7, #23]
}
 8006706:	4618      	mov	r0, r3
 8006708:	3718      	adds	r7, #24
 800670a:	46bd      	mov	sp, r7
 800670c:	bd80      	pop	{r7, pc}

0800670e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800670e:	b580      	push	{r7, lr}
 8006710:	b08a      	sub	sp, #40	; 0x28
 8006712:	af00      	add	r7, sp, #0
 8006714:	60f8      	str	r0, [r7, #12]
 8006716:	60b9      	str	r1, [r7, #8]
 8006718:	607a      	str	r2, [r7, #4]
 800671a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800671c:	2301      	movs	r3, #1
 800671e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006720:	2300      	movs	r3, #0
 8006722:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800672c:	2b01      	cmp	r3, #1
 800672e:	d101      	bne.n	8006734 <HAL_SPI_TransmitReceive+0x26>
 8006730:	2302      	movs	r3, #2
 8006732:	e1fb      	b.n	8006b2c <HAL_SPI_TransmitReceive+0x41e>
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	2201      	movs	r2, #1
 8006738:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800673c:	f7fc fe88 	bl	8003450 <HAL_GetTick>
 8006740:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006748:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	685b      	ldr	r3, [r3, #4]
 800674e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8006750:	887b      	ldrh	r3, [r7, #2]
 8006752:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8006754:	887b      	ldrh	r3, [r7, #2]
 8006756:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006758:	7efb      	ldrb	r3, [r7, #27]
 800675a:	2b01      	cmp	r3, #1
 800675c:	d00e      	beq.n	800677c <HAL_SPI_TransmitReceive+0x6e>
 800675e:	697b      	ldr	r3, [r7, #20]
 8006760:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006764:	d106      	bne.n	8006774 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	689b      	ldr	r3, [r3, #8]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d102      	bne.n	8006774 <HAL_SPI_TransmitReceive+0x66>
 800676e:	7efb      	ldrb	r3, [r7, #27]
 8006770:	2b04      	cmp	r3, #4
 8006772:	d003      	beq.n	800677c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8006774:	2302      	movs	r3, #2
 8006776:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800677a:	e1cd      	b.n	8006b18 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800677c:	68bb      	ldr	r3, [r7, #8]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d005      	beq.n	800678e <HAL_SPI_TransmitReceive+0x80>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d002      	beq.n	800678e <HAL_SPI_TransmitReceive+0x80>
 8006788:	887b      	ldrh	r3, [r7, #2]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d103      	bne.n	8006796 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800678e:	2301      	movs	r3, #1
 8006790:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006794:	e1c0      	b.n	8006b18 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800679c:	b2db      	uxtb	r3, r3
 800679e:	2b04      	cmp	r3, #4
 80067a0:	d003      	beq.n	80067aa <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	2205      	movs	r2, #5
 80067a6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	2200      	movs	r2, #0
 80067ae:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	687a      	ldr	r2, [r7, #4]
 80067b4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	887a      	ldrh	r2, [r7, #2]
 80067ba:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	887a      	ldrh	r2, [r7, #2]
 80067c2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	68ba      	ldr	r2, [r7, #8]
 80067ca:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	887a      	ldrh	r2, [r7, #2]
 80067d0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	887a      	ldrh	r2, [r7, #2]
 80067d6:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	2200      	movs	r2, #0
 80067dc:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	2200      	movs	r2, #0
 80067e2:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	68db      	ldr	r3, [r3, #12]
 80067e8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80067ec:	d802      	bhi.n	80067f4 <HAL_SPI_TransmitReceive+0xe6>
 80067ee:	8a3b      	ldrh	r3, [r7, #16]
 80067f0:	2b01      	cmp	r3, #1
 80067f2:	d908      	bls.n	8006806 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	685a      	ldr	r2, [r3, #4]
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006802:	605a      	str	r2, [r3, #4]
 8006804:	e007      	b.n	8006816 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	685a      	ldr	r2, [r3, #4]
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006814:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006820:	2b40      	cmp	r3, #64	; 0x40
 8006822:	d007      	beq.n	8006834 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	681a      	ldr	r2, [r3, #0]
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006832:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	68db      	ldr	r3, [r3, #12]
 8006838:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800683c:	d97c      	bls.n	8006938 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	685b      	ldr	r3, [r3, #4]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d002      	beq.n	800684c <HAL_SPI_TransmitReceive+0x13e>
 8006846:	8a7b      	ldrh	r3, [r7, #18]
 8006848:	2b01      	cmp	r3, #1
 800684a:	d169      	bne.n	8006920 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006850:	881a      	ldrh	r2, [r3, #0]
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800685c:	1c9a      	adds	r2, r3, #2
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006866:	b29b      	uxth	r3, r3
 8006868:	3b01      	subs	r3, #1
 800686a:	b29a      	uxth	r2, r3
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006870:	e056      	b.n	8006920 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	689b      	ldr	r3, [r3, #8]
 8006878:	f003 0302 	and.w	r3, r3, #2
 800687c:	2b02      	cmp	r3, #2
 800687e:	d11b      	bne.n	80068b8 <HAL_SPI_TransmitReceive+0x1aa>
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006884:	b29b      	uxth	r3, r3
 8006886:	2b00      	cmp	r3, #0
 8006888:	d016      	beq.n	80068b8 <HAL_SPI_TransmitReceive+0x1aa>
 800688a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800688c:	2b01      	cmp	r3, #1
 800688e:	d113      	bne.n	80068b8 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006894:	881a      	ldrh	r2, [r3, #0]
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068a0:	1c9a      	adds	r2, r3, #2
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80068aa:	b29b      	uxth	r3, r3
 80068ac:	3b01      	subs	r3, #1
 80068ae:	b29a      	uxth	r2, r3
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80068b4:	2300      	movs	r3, #0
 80068b6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	689b      	ldr	r3, [r3, #8]
 80068be:	f003 0301 	and.w	r3, r3, #1
 80068c2:	2b01      	cmp	r3, #1
 80068c4:	d11c      	bne.n	8006900 <HAL_SPI_TransmitReceive+0x1f2>
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80068cc:	b29b      	uxth	r3, r3
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d016      	beq.n	8006900 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	68da      	ldr	r2, [r3, #12]
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068dc:	b292      	uxth	r2, r2
 80068de:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068e4:	1c9a      	adds	r2, r3, #2
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80068f0:	b29b      	uxth	r3, r3
 80068f2:	3b01      	subs	r3, #1
 80068f4:	b29a      	uxth	r2, r3
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80068fc:	2301      	movs	r3, #1
 80068fe:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006900:	f7fc fda6 	bl	8003450 <HAL_GetTick>
 8006904:	4602      	mov	r2, r0
 8006906:	69fb      	ldr	r3, [r7, #28]
 8006908:	1ad3      	subs	r3, r2, r3
 800690a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800690c:	429a      	cmp	r2, r3
 800690e:	d807      	bhi.n	8006920 <HAL_SPI_TransmitReceive+0x212>
 8006910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006912:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006916:	d003      	beq.n	8006920 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8006918:	2303      	movs	r3, #3
 800691a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800691e:	e0fb      	b.n	8006b18 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006924:	b29b      	uxth	r3, r3
 8006926:	2b00      	cmp	r3, #0
 8006928:	d1a3      	bne.n	8006872 <HAL_SPI_TransmitReceive+0x164>
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006930:	b29b      	uxth	r3, r3
 8006932:	2b00      	cmp	r3, #0
 8006934:	d19d      	bne.n	8006872 <HAL_SPI_TransmitReceive+0x164>
 8006936:	e0df      	b.n	8006af8 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	685b      	ldr	r3, [r3, #4]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d003      	beq.n	8006948 <HAL_SPI_TransmitReceive+0x23a>
 8006940:	8a7b      	ldrh	r3, [r7, #18]
 8006942:	2b01      	cmp	r3, #1
 8006944:	f040 80cb 	bne.w	8006ade <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800694c:	b29b      	uxth	r3, r3
 800694e:	2b01      	cmp	r3, #1
 8006950:	d912      	bls.n	8006978 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006956:	881a      	ldrh	r2, [r3, #0]
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006962:	1c9a      	adds	r2, r3, #2
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800696c:	b29b      	uxth	r3, r3
 800696e:	3b02      	subs	r3, #2
 8006970:	b29a      	uxth	r2, r3
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006976:	e0b2      	b.n	8006ade <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	330c      	adds	r3, #12
 8006982:	7812      	ldrb	r2, [r2, #0]
 8006984:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800698a:	1c5a      	adds	r2, r3, #1
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006994:	b29b      	uxth	r3, r3
 8006996:	3b01      	subs	r3, #1
 8006998:	b29a      	uxth	r2, r3
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800699e:	e09e      	b.n	8006ade <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	689b      	ldr	r3, [r3, #8]
 80069a6:	f003 0302 	and.w	r3, r3, #2
 80069aa:	2b02      	cmp	r3, #2
 80069ac:	d134      	bne.n	8006a18 <HAL_SPI_TransmitReceive+0x30a>
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069b2:	b29b      	uxth	r3, r3
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d02f      	beq.n	8006a18 <HAL_SPI_TransmitReceive+0x30a>
 80069b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ba:	2b01      	cmp	r3, #1
 80069bc:	d12c      	bne.n	8006a18 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069c2:	b29b      	uxth	r3, r3
 80069c4:	2b01      	cmp	r3, #1
 80069c6:	d912      	bls.n	80069ee <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069cc:	881a      	ldrh	r2, [r3, #0]
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069d8:	1c9a      	adds	r2, r3, #2
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069e2:	b29b      	uxth	r3, r3
 80069e4:	3b02      	subs	r3, #2
 80069e6:	b29a      	uxth	r2, r3
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	87da      	strh	r2, [r3, #62]	; 0x3e
 80069ec:	e012      	b.n	8006a14 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	330c      	adds	r3, #12
 80069f8:	7812      	ldrb	r2, [r2, #0]
 80069fa:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a00:	1c5a      	adds	r2, r3, #1
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a0a:	b29b      	uxth	r3, r3
 8006a0c:	3b01      	subs	r3, #1
 8006a0e:	b29a      	uxth	r2, r3
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006a14:	2300      	movs	r3, #0
 8006a16:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	689b      	ldr	r3, [r3, #8]
 8006a1e:	f003 0301 	and.w	r3, r3, #1
 8006a22:	2b01      	cmp	r3, #1
 8006a24:	d148      	bne.n	8006ab8 <HAL_SPI_TransmitReceive+0x3aa>
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006a2c:	b29b      	uxth	r3, r3
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d042      	beq.n	8006ab8 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006a38:	b29b      	uxth	r3, r3
 8006a3a:	2b01      	cmp	r3, #1
 8006a3c:	d923      	bls.n	8006a86 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	68da      	ldr	r2, [r3, #12]
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a48:	b292      	uxth	r2, r2
 8006a4a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a50:	1c9a      	adds	r2, r3, #2
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006a5c:	b29b      	uxth	r3, r3
 8006a5e:	3b02      	subs	r3, #2
 8006a60:	b29a      	uxth	r2, r3
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006a6e:	b29b      	uxth	r3, r3
 8006a70:	2b01      	cmp	r3, #1
 8006a72:	d81f      	bhi.n	8006ab4 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	685a      	ldr	r2, [r3, #4]
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006a82:	605a      	str	r2, [r3, #4]
 8006a84:	e016      	b.n	8006ab4 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f103 020c 	add.w	r2, r3, #12
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a92:	7812      	ldrb	r2, [r2, #0]
 8006a94:	b2d2      	uxtb	r2, r2
 8006a96:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a9c:	1c5a      	adds	r2, r3, #1
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006aa8:	b29b      	uxth	r3, r3
 8006aaa:	3b01      	subs	r3, #1
 8006aac:	b29a      	uxth	r2, r3
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006ab4:	2301      	movs	r3, #1
 8006ab6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006ab8:	f7fc fcca 	bl	8003450 <HAL_GetTick>
 8006abc:	4602      	mov	r2, r0
 8006abe:	69fb      	ldr	r3, [r7, #28]
 8006ac0:	1ad3      	subs	r3, r2, r3
 8006ac2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ac4:	429a      	cmp	r2, r3
 8006ac6:	d803      	bhi.n	8006ad0 <HAL_SPI_TransmitReceive+0x3c2>
 8006ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ace:	d102      	bne.n	8006ad6 <HAL_SPI_TransmitReceive+0x3c8>
 8006ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d103      	bne.n	8006ade <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8006ad6:	2303      	movs	r3, #3
 8006ad8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8006adc:	e01c      	b.n	8006b18 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ae2:	b29b      	uxth	r3, r3
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	f47f af5b 	bne.w	80069a0 <HAL_SPI_TransmitReceive+0x292>
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006af0:	b29b      	uxth	r3, r3
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	f47f af54 	bne.w	80069a0 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006af8:	69fa      	ldr	r2, [r7, #28]
 8006afa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006afc:	68f8      	ldr	r0, [r7, #12]
 8006afe:	f000 faaf 	bl	8007060 <SPI_EndRxTxTransaction>
 8006b02:	4603      	mov	r3, r0
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d006      	beq.n	8006b16 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8006b08:	2301      	movs	r3, #1
 8006b0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	2220      	movs	r2, #32
 8006b12:	661a      	str	r2, [r3, #96]	; 0x60
 8006b14:	e000      	b.n	8006b18 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8006b16:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	2201      	movs	r2, #1
 8006b1c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	2200      	movs	r2, #0
 8006b24:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006b28:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	3728      	adds	r7, #40	; 0x28
 8006b30:	46bd      	mov	sp, r7
 8006b32:	bd80      	pop	{r7, pc}

08006b34 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b088      	sub	sp, #32
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	685b      	ldr	r3, [r3, #4]
 8006b42:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	689b      	ldr	r3, [r3, #8]
 8006b4a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006b4c:	69bb      	ldr	r3, [r7, #24]
 8006b4e:	099b      	lsrs	r3, r3, #6
 8006b50:	f003 0301 	and.w	r3, r3, #1
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d10f      	bne.n	8006b78 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006b58:	69bb      	ldr	r3, [r7, #24]
 8006b5a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d00a      	beq.n	8006b78 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006b62:	69fb      	ldr	r3, [r7, #28]
 8006b64:	099b      	lsrs	r3, r3, #6
 8006b66:	f003 0301 	and.w	r3, r3, #1
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d004      	beq.n	8006b78 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b72:	6878      	ldr	r0, [r7, #4]
 8006b74:	4798      	blx	r3
    return;
 8006b76:	e0d7      	b.n	8006d28 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006b78:	69bb      	ldr	r3, [r7, #24]
 8006b7a:	085b      	lsrs	r3, r3, #1
 8006b7c:	f003 0301 	and.w	r3, r3, #1
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d00a      	beq.n	8006b9a <HAL_SPI_IRQHandler+0x66>
 8006b84:	69fb      	ldr	r3, [r7, #28]
 8006b86:	09db      	lsrs	r3, r3, #7
 8006b88:	f003 0301 	and.w	r3, r3, #1
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d004      	beq.n	8006b9a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b94:	6878      	ldr	r0, [r7, #4]
 8006b96:	4798      	blx	r3
    return;
 8006b98:	e0c6      	b.n	8006d28 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006b9a:	69bb      	ldr	r3, [r7, #24]
 8006b9c:	095b      	lsrs	r3, r3, #5
 8006b9e:	f003 0301 	and.w	r3, r3, #1
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d10c      	bne.n	8006bc0 <HAL_SPI_IRQHandler+0x8c>
 8006ba6:	69bb      	ldr	r3, [r7, #24]
 8006ba8:	099b      	lsrs	r3, r3, #6
 8006baa:	f003 0301 	and.w	r3, r3, #1
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d106      	bne.n	8006bc0 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8006bb2:	69bb      	ldr	r3, [r7, #24]
 8006bb4:	0a1b      	lsrs	r3, r3, #8
 8006bb6:	f003 0301 	and.w	r3, r3, #1
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	f000 80b4 	beq.w	8006d28 <HAL_SPI_IRQHandler+0x1f4>
 8006bc0:	69fb      	ldr	r3, [r7, #28]
 8006bc2:	095b      	lsrs	r3, r3, #5
 8006bc4:	f003 0301 	and.w	r3, r3, #1
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	f000 80ad 	beq.w	8006d28 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006bce:	69bb      	ldr	r3, [r7, #24]
 8006bd0:	099b      	lsrs	r3, r3, #6
 8006bd2:	f003 0301 	and.w	r3, r3, #1
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d023      	beq.n	8006c22 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006be0:	b2db      	uxtb	r3, r3
 8006be2:	2b03      	cmp	r3, #3
 8006be4:	d011      	beq.n	8006c0a <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006bea:	f043 0204 	orr.w	r2, r3, #4
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	617b      	str	r3, [r7, #20]
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	68db      	ldr	r3, [r3, #12]
 8006bfc:	617b      	str	r3, [r7, #20]
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	689b      	ldr	r3, [r3, #8]
 8006c04:	617b      	str	r3, [r7, #20]
 8006c06:	697b      	ldr	r3, [r7, #20]
 8006c08:	e00b      	b.n	8006c22 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	613b      	str	r3, [r7, #16]
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	68db      	ldr	r3, [r3, #12]
 8006c14:	613b      	str	r3, [r7, #16]
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	689b      	ldr	r3, [r3, #8]
 8006c1c:	613b      	str	r3, [r7, #16]
 8006c1e:	693b      	ldr	r3, [r7, #16]
        return;
 8006c20:	e082      	b.n	8006d28 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8006c22:	69bb      	ldr	r3, [r7, #24]
 8006c24:	095b      	lsrs	r3, r3, #5
 8006c26:	f003 0301 	and.w	r3, r3, #1
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d014      	beq.n	8006c58 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c32:	f043 0201 	orr.w	r2, r3, #1
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	60fb      	str	r3, [r7, #12]
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	689b      	ldr	r3, [r3, #8]
 8006c44:	60fb      	str	r3, [r7, #12]
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	681a      	ldr	r2, [r3, #0]
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c54:	601a      	str	r2, [r3, #0]
 8006c56:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8006c58:	69bb      	ldr	r3, [r7, #24]
 8006c5a:	0a1b      	lsrs	r3, r3, #8
 8006c5c:	f003 0301 	and.w	r3, r3, #1
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d00c      	beq.n	8006c7e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c68:	f043 0208 	orr.w	r2, r3, #8
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006c70:	2300      	movs	r3, #0
 8006c72:	60bb      	str	r3, [r7, #8]
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	689b      	ldr	r3, [r3, #8]
 8006c7a:	60bb      	str	r3, [r7, #8]
 8006c7c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d04f      	beq.n	8006d26 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	685a      	ldr	r2, [r3, #4]
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006c94:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2201      	movs	r2, #1
 8006c9a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006c9e:	69fb      	ldr	r3, [r7, #28]
 8006ca0:	f003 0302 	and.w	r3, r3, #2
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d104      	bne.n	8006cb2 <HAL_SPI_IRQHandler+0x17e>
 8006ca8:	69fb      	ldr	r3, [r7, #28]
 8006caa:	f003 0301 	and.w	r3, r3, #1
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d034      	beq.n	8006d1c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	685a      	ldr	r2, [r3, #4]
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f022 0203 	bic.w	r2, r2, #3
 8006cc0:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d011      	beq.n	8006cee <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cce:	4a18      	ldr	r2, [pc, #96]	; (8006d30 <HAL_SPI_IRQHandler+0x1fc>)
 8006cd0:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	f7fc fd2d 	bl	8003736 <HAL_DMA_Abort_IT>
 8006cdc:	4603      	mov	r3, r0
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d005      	beq.n	8006cee <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ce6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d016      	beq.n	8006d24 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cfa:	4a0d      	ldr	r2, [pc, #52]	; (8006d30 <HAL_SPI_IRQHandler+0x1fc>)
 8006cfc:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d02:	4618      	mov	r0, r3
 8006d04:	f7fc fd17 	bl	8003736 <HAL_DMA_Abort_IT>
 8006d08:	4603      	mov	r3, r0
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d00a      	beq.n	8006d24 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d12:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8006d1a:	e003      	b.n	8006d24 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8006d1c:	6878      	ldr	r0, [r7, #4]
 8006d1e:	f000 f809 	bl	8006d34 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8006d22:	e000      	b.n	8006d26 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8006d24:	bf00      	nop
    return;
 8006d26:	bf00      	nop
  }
}
 8006d28:	3720      	adds	r7, #32
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	bd80      	pop	{r7, pc}
 8006d2e:	bf00      	nop
 8006d30:	08006d49 	.word	0x08006d49

08006d34 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006d34:	b480      	push	{r7}
 8006d36:	b083      	sub	sp, #12
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006d3c:	bf00      	nop
 8006d3e:	370c      	adds	r7, #12
 8006d40:	46bd      	mov	sp, r7
 8006d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d46:	4770      	bx	lr

08006d48 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b084      	sub	sp, #16
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d54:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	2200      	movs	r2, #0
 8006d5a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	2200      	movs	r2, #0
 8006d62:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006d64:	68f8      	ldr	r0, [r7, #12]
 8006d66:	f7ff ffe5 	bl	8006d34 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006d6a:	bf00      	nop
 8006d6c:	3710      	adds	r7, #16
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bd80      	pop	{r7, pc}
	...

08006d74 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b088      	sub	sp, #32
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	60f8      	str	r0, [r7, #12]
 8006d7c:	60b9      	str	r1, [r7, #8]
 8006d7e:	603b      	str	r3, [r7, #0]
 8006d80:	4613      	mov	r3, r2
 8006d82:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006d84:	f7fc fb64 	bl	8003450 <HAL_GetTick>
 8006d88:	4602      	mov	r2, r0
 8006d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d8c:	1a9b      	subs	r3, r3, r2
 8006d8e:	683a      	ldr	r2, [r7, #0]
 8006d90:	4413      	add	r3, r2
 8006d92:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006d94:	f7fc fb5c 	bl	8003450 <HAL_GetTick>
 8006d98:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006d9a:	4b39      	ldr	r3, [pc, #228]	; (8006e80 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	015b      	lsls	r3, r3, #5
 8006da0:	0d1b      	lsrs	r3, r3, #20
 8006da2:	69fa      	ldr	r2, [r7, #28]
 8006da4:	fb02 f303 	mul.w	r3, r2, r3
 8006da8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006daa:	e054      	b.n	8006e56 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006db2:	d050      	beq.n	8006e56 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006db4:	f7fc fb4c 	bl	8003450 <HAL_GetTick>
 8006db8:	4602      	mov	r2, r0
 8006dba:	69bb      	ldr	r3, [r7, #24]
 8006dbc:	1ad3      	subs	r3, r2, r3
 8006dbe:	69fa      	ldr	r2, [r7, #28]
 8006dc0:	429a      	cmp	r2, r3
 8006dc2:	d902      	bls.n	8006dca <SPI_WaitFlagStateUntilTimeout+0x56>
 8006dc4:	69fb      	ldr	r3, [r7, #28]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d13d      	bne.n	8006e46 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	685a      	ldr	r2, [r3, #4]
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006dd8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	685b      	ldr	r3, [r3, #4]
 8006dde:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006de2:	d111      	bne.n	8006e08 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	689b      	ldr	r3, [r3, #8]
 8006de8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006dec:	d004      	beq.n	8006df8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	689b      	ldr	r3, [r3, #8]
 8006df2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006df6:	d107      	bne.n	8006e08 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	681a      	ldr	r2, [r3, #0]
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e06:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e10:	d10f      	bne.n	8006e32 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	681a      	ldr	r2, [r3, #0]
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006e20:	601a      	str	r2, [r3, #0]
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	681a      	ldr	r2, [r3, #0]
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006e30:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	2201      	movs	r2, #1
 8006e36:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006e42:	2303      	movs	r3, #3
 8006e44:	e017      	b.n	8006e76 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006e46:	697b      	ldr	r3, [r7, #20]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d101      	bne.n	8006e50 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006e50:	697b      	ldr	r3, [r7, #20]
 8006e52:	3b01      	subs	r3, #1
 8006e54:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	689a      	ldr	r2, [r3, #8]
 8006e5c:	68bb      	ldr	r3, [r7, #8]
 8006e5e:	4013      	ands	r3, r2
 8006e60:	68ba      	ldr	r2, [r7, #8]
 8006e62:	429a      	cmp	r2, r3
 8006e64:	bf0c      	ite	eq
 8006e66:	2301      	moveq	r3, #1
 8006e68:	2300      	movne	r3, #0
 8006e6a:	b2db      	uxtb	r3, r3
 8006e6c:	461a      	mov	r2, r3
 8006e6e:	79fb      	ldrb	r3, [r7, #7]
 8006e70:	429a      	cmp	r2, r3
 8006e72:	d19b      	bne.n	8006dac <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006e74:	2300      	movs	r3, #0
}
 8006e76:	4618      	mov	r0, r3
 8006e78:	3720      	adds	r7, #32
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	bd80      	pop	{r7, pc}
 8006e7e:	bf00      	nop
 8006e80:	20000004 	.word	0x20000004

08006e84 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b08a      	sub	sp, #40	; 0x28
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	60f8      	str	r0, [r7, #12]
 8006e8c:	60b9      	str	r1, [r7, #8]
 8006e8e:	607a      	str	r2, [r7, #4]
 8006e90:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006e92:	2300      	movs	r3, #0
 8006e94:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006e96:	f7fc fadb 	bl	8003450 <HAL_GetTick>
 8006e9a:	4602      	mov	r2, r0
 8006e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e9e:	1a9b      	subs	r3, r3, r2
 8006ea0:	683a      	ldr	r2, [r7, #0]
 8006ea2:	4413      	add	r3, r2
 8006ea4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8006ea6:	f7fc fad3 	bl	8003450 <HAL_GetTick>
 8006eaa:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	330c      	adds	r3, #12
 8006eb2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006eb4:	4b3d      	ldr	r3, [pc, #244]	; (8006fac <SPI_WaitFifoStateUntilTimeout+0x128>)
 8006eb6:	681a      	ldr	r2, [r3, #0]
 8006eb8:	4613      	mov	r3, r2
 8006eba:	009b      	lsls	r3, r3, #2
 8006ebc:	4413      	add	r3, r2
 8006ebe:	00da      	lsls	r2, r3, #3
 8006ec0:	1ad3      	subs	r3, r2, r3
 8006ec2:	0d1b      	lsrs	r3, r3, #20
 8006ec4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ec6:	fb02 f303 	mul.w	r3, r2, r3
 8006eca:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006ecc:	e060      	b.n	8006f90 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006ece:	68bb      	ldr	r3, [r7, #8]
 8006ed0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006ed4:	d107      	bne.n	8006ee6 <SPI_WaitFifoStateUntilTimeout+0x62>
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d104      	bne.n	8006ee6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006edc:	69fb      	ldr	r3, [r7, #28]
 8006ede:	781b      	ldrb	r3, [r3, #0]
 8006ee0:	b2db      	uxtb	r3, r3
 8006ee2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006ee4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006eec:	d050      	beq.n	8006f90 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006eee:	f7fc faaf 	bl	8003450 <HAL_GetTick>
 8006ef2:	4602      	mov	r2, r0
 8006ef4:	6a3b      	ldr	r3, [r7, #32]
 8006ef6:	1ad3      	subs	r3, r2, r3
 8006ef8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006efa:	429a      	cmp	r2, r3
 8006efc:	d902      	bls.n	8006f04 <SPI_WaitFifoStateUntilTimeout+0x80>
 8006efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d13d      	bne.n	8006f80 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	685a      	ldr	r2, [r3, #4]
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006f12:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	685b      	ldr	r3, [r3, #4]
 8006f18:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006f1c:	d111      	bne.n	8006f42 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	689b      	ldr	r3, [r3, #8]
 8006f22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f26:	d004      	beq.n	8006f32 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	689b      	ldr	r3, [r3, #8]
 8006f2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f30:	d107      	bne.n	8006f42 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	681a      	ldr	r2, [r3, #0]
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f40:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f4a:	d10f      	bne.n	8006f6c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	681a      	ldr	r2, [r3, #0]
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006f5a:	601a      	str	r2, [r3, #0]
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	681a      	ldr	r2, [r3, #0]
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006f6a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	2201      	movs	r2, #1
 8006f70:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	2200      	movs	r2, #0
 8006f78:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006f7c:	2303      	movs	r3, #3
 8006f7e:	e010      	b.n	8006fa2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006f80:	69bb      	ldr	r3, [r7, #24]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d101      	bne.n	8006f8a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8006f86:	2300      	movs	r3, #0
 8006f88:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8006f8a:	69bb      	ldr	r3, [r7, #24]
 8006f8c:	3b01      	subs	r3, #1
 8006f8e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	689a      	ldr	r2, [r3, #8]
 8006f96:	68bb      	ldr	r3, [r7, #8]
 8006f98:	4013      	ands	r3, r2
 8006f9a:	687a      	ldr	r2, [r7, #4]
 8006f9c:	429a      	cmp	r2, r3
 8006f9e:	d196      	bne.n	8006ece <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006fa0:	2300      	movs	r3, #0
}
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	3728      	adds	r7, #40	; 0x28
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	bd80      	pop	{r7, pc}
 8006faa:	bf00      	nop
 8006fac:	20000004 	.word	0x20000004

08006fb0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b086      	sub	sp, #24
 8006fb4:	af02      	add	r7, sp, #8
 8006fb6:	60f8      	str	r0, [r7, #12]
 8006fb8:	60b9      	str	r1, [r7, #8]
 8006fba:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	685b      	ldr	r3, [r3, #4]
 8006fc0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006fc4:	d111      	bne.n	8006fea <SPI_EndRxTransaction+0x3a>
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	689b      	ldr	r3, [r3, #8]
 8006fca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006fce:	d004      	beq.n	8006fda <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	689b      	ldr	r3, [r3, #8]
 8006fd4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006fd8:	d107      	bne.n	8006fea <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	681a      	ldr	r2, [r3, #0]
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006fe8:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	9300      	str	r3, [sp, #0]
 8006fee:	68bb      	ldr	r3, [r7, #8]
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	2180      	movs	r1, #128	; 0x80
 8006ff4:	68f8      	ldr	r0, [r7, #12]
 8006ff6:	f7ff febd 	bl	8006d74 <SPI_WaitFlagStateUntilTimeout>
 8006ffa:	4603      	mov	r3, r0
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d007      	beq.n	8007010 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007004:	f043 0220 	orr.w	r2, r3, #32
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800700c:	2303      	movs	r3, #3
 800700e:	e023      	b.n	8007058 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	685b      	ldr	r3, [r3, #4]
 8007014:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007018:	d11d      	bne.n	8007056 <SPI_EndRxTransaction+0xa6>
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	689b      	ldr	r3, [r3, #8]
 800701e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007022:	d004      	beq.n	800702e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	689b      	ldr	r3, [r3, #8]
 8007028:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800702c:	d113      	bne.n	8007056 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	9300      	str	r3, [sp, #0]
 8007032:	68bb      	ldr	r3, [r7, #8]
 8007034:	2200      	movs	r2, #0
 8007036:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800703a:	68f8      	ldr	r0, [r7, #12]
 800703c:	f7ff ff22 	bl	8006e84 <SPI_WaitFifoStateUntilTimeout>
 8007040:	4603      	mov	r3, r0
 8007042:	2b00      	cmp	r3, #0
 8007044:	d007      	beq.n	8007056 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800704a:	f043 0220 	orr.w	r2, r3, #32
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8007052:	2303      	movs	r3, #3
 8007054:	e000      	b.n	8007058 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8007056:	2300      	movs	r3, #0
}
 8007058:	4618      	mov	r0, r3
 800705a:	3710      	adds	r7, #16
 800705c:	46bd      	mov	sp, r7
 800705e:	bd80      	pop	{r7, pc}

08007060 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007060:	b580      	push	{r7, lr}
 8007062:	b086      	sub	sp, #24
 8007064:	af02      	add	r7, sp, #8
 8007066:	60f8      	str	r0, [r7, #12]
 8007068:	60b9      	str	r1, [r7, #8]
 800706a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	9300      	str	r3, [sp, #0]
 8007070:	68bb      	ldr	r3, [r7, #8]
 8007072:	2200      	movs	r2, #0
 8007074:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8007078:	68f8      	ldr	r0, [r7, #12]
 800707a:	f7ff ff03 	bl	8006e84 <SPI_WaitFifoStateUntilTimeout>
 800707e:	4603      	mov	r3, r0
 8007080:	2b00      	cmp	r3, #0
 8007082:	d007      	beq.n	8007094 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007088:	f043 0220 	orr.w	r2, r3, #32
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007090:	2303      	movs	r3, #3
 8007092:	e027      	b.n	80070e4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	9300      	str	r3, [sp, #0]
 8007098:	68bb      	ldr	r3, [r7, #8]
 800709a:	2200      	movs	r2, #0
 800709c:	2180      	movs	r1, #128	; 0x80
 800709e:	68f8      	ldr	r0, [r7, #12]
 80070a0:	f7ff fe68 	bl	8006d74 <SPI_WaitFlagStateUntilTimeout>
 80070a4:	4603      	mov	r3, r0
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d007      	beq.n	80070ba <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070ae:	f043 0220 	orr.w	r2, r3, #32
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80070b6:	2303      	movs	r3, #3
 80070b8:	e014      	b.n	80070e4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	9300      	str	r3, [sp, #0]
 80070be:	68bb      	ldr	r3, [r7, #8]
 80070c0:	2200      	movs	r2, #0
 80070c2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80070c6:	68f8      	ldr	r0, [r7, #12]
 80070c8:	f7ff fedc 	bl	8006e84 <SPI_WaitFifoStateUntilTimeout>
 80070cc:	4603      	mov	r3, r0
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d007      	beq.n	80070e2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070d6:	f043 0220 	orr.w	r2, r3, #32
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80070de:	2303      	movs	r3, #3
 80070e0:	e000      	b.n	80070e4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80070e2:	2300      	movs	r3, #0
}
 80070e4:	4618      	mov	r0, r3
 80070e6:	3710      	adds	r7, #16
 80070e8:	46bd      	mov	sp, r7
 80070ea:	bd80      	pop	{r7, pc}

080070ec <HAL_SPIEx_FlushRxFifo>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_FlushRxFifo(SPI_HandleTypeDef *hspi)
{
 80070ec:	b480      	push	{r7}
 80070ee:	b085      	sub	sp, #20
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  uint8_t  count = 0U;
 80070f4:	2300      	movs	r3, #0
 80070f6:	73fb      	strb	r3, [r7, #15]
  while ((hspi->Instance->SR & SPI_FLAG_FRLVL) !=  SPI_FRLVL_EMPTY)
 80070f8:	e00c      	b.n	8007114 <HAL_SPIEx_FlushRxFifo+0x28>
  {
    count++;
 80070fa:	7bfb      	ldrb	r3, [r7, #15]
 80070fc:	3301      	adds	r3, #1
 80070fe:	73fb      	strb	r3, [r7, #15]
    tmpreg = hspi->Instance->DR;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	68db      	ldr	r3, [r3, #12]
 8007106:	60bb      	str	r3, [r7, #8]
    UNUSED(tmpreg); /* To avoid GCC warning */
 8007108:	68bb      	ldr	r3, [r7, #8]
    if (count == SPI_FIFO_SIZE)
 800710a:	7bfb      	ldrb	r3, [r7, #15]
 800710c:	2b04      	cmp	r3, #4
 800710e:	d101      	bne.n	8007114 <HAL_SPIEx_FlushRxFifo+0x28>
    {
      return HAL_TIMEOUT;
 8007110:	2303      	movs	r3, #3
 8007112:	e007      	b.n	8007124 <HAL_SPIEx_FlushRxFifo+0x38>
  while ((hspi->Instance->SR & SPI_FLAG_FRLVL) !=  SPI_FRLVL_EMPTY)
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	689b      	ldr	r3, [r3, #8]
 800711a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800711e:	2b00      	cmp	r3, #0
 8007120:	d1eb      	bne.n	80070fa <HAL_SPIEx_FlushRxFifo+0xe>
    }
  }
  return HAL_OK;
 8007122:	2300      	movs	r3, #0
}
 8007124:	4618      	mov	r0, r3
 8007126:	3714      	adds	r7, #20
 8007128:	46bd      	mov	sp, r7
 800712a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712e:	4770      	bx	lr

08007130 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b082      	sub	sp, #8
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d101      	bne.n	8007142 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800713e:	2301      	movs	r3, #1
 8007140:	e040      	b.n	80071c4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007146:	2b00      	cmp	r3, #0
 8007148:	d106      	bne.n	8007158 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2200      	movs	r2, #0
 800714e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	f7fb fb2e 	bl	80027b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2224      	movs	r2, #36	; 0x24
 800715c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	681a      	ldr	r2, [r3, #0]
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f022 0201 	bic.w	r2, r2, #1
 800716c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800716e:	6878      	ldr	r0, [r7, #4]
 8007170:	f000 f992 	bl	8007498 <UART_SetConfig>
 8007174:	4603      	mov	r3, r0
 8007176:	2b01      	cmp	r3, #1
 8007178:	d101      	bne.n	800717e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800717a:	2301      	movs	r3, #1
 800717c:	e022      	b.n	80071c4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007182:	2b00      	cmp	r3, #0
 8007184:	d002      	beq.n	800718c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007186:	6878      	ldr	r0, [r7, #4]
 8007188:	f000 fc10 	bl	80079ac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	685a      	ldr	r2, [r3, #4]
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800719a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	689a      	ldr	r2, [r3, #8]
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80071aa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	681a      	ldr	r2, [r3, #0]
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f042 0201 	orr.w	r2, r2, #1
 80071ba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80071bc:	6878      	ldr	r0, [r7, #4]
 80071be:	f000 fc97 	bl	8007af0 <UART_CheckIdleState>
 80071c2:	4603      	mov	r3, r0
}
 80071c4:	4618      	mov	r0, r3
 80071c6:	3708      	adds	r7, #8
 80071c8:	46bd      	mov	sp, r7
 80071ca:	bd80      	pop	{r7, pc}

080071cc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b08a      	sub	sp, #40	; 0x28
 80071d0:	af02      	add	r7, sp, #8
 80071d2:	60f8      	str	r0, [r7, #12]
 80071d4:	60b9      	str	r1, [r7, #8]
 80071d6:	603b      	str	r3, [r7, #0]
 80071d8:	4613      	mov	r3, r2
 80071da:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80071e0:	2b20      	cmp	r3, #32
 80071e2:	f040 8082 	bne.w	80072ea <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80071e6:	68bb      	ldr	r3, [r7, #8]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d002      	beq.n	80071f2 <HAL_UART_Transmit+0x26>
 80071ec:	88fb      	ldrh	r3, [r7, #6]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d101      	bne.n	80071f6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80071f2:	2301      	movs	r3, #1
 80071f4:	e07a      	b.n	80072ec <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80071fc:	2b01      	cmp	r3, #1
 80071fe:	d101      	bne.n	8007204 <HAL_UART_Transmit+0x38>
 8007200:	2302      	movs	r3, #2
 8007202:	e073      	b.n	80072ec <HAL_UART_Transmit+0x120>
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	2201      	movs	r2, #1
 8007208:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	2200      	movs	r2, #0
 8007210:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	2221      	movs	r2, #33	; 0x21
 8007218:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800721a:	f7fc f919 	bl	8003450 <HAL_GetTick>
 800721e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	88fa      	ldrh	r2, [r7, #6]
 8007224:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	88fa      	ldrh	r2, [r7, #6]
 800722c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	689b      	ldr	r3, [r3, #8]
 8007234:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007238:	d108      	bne.n	800724c <HAL_UART_Transmit+0x80>
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	691b      	ldr	r3, [r3, #16]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d104      	bne.n	800724c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8007242:	2300      	movs	r3, #0
 8007244:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007246:	68bb      	ldr	r3, [r7, #8]
 8007248:	61bb      	str	r3, [r7, #24]
 800724a:	e003      	b.n	8007254 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800724c:	68bb      	ldr	r3, [r7, #8]
 800724e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007250:	2300      	movs	r3, #0
 8007252:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	2200      	movs	r2, #0
 8007258:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800725c:	e02d      	b.n	80072ba <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	9300      	str	r3, [sp, #0]
 8007262:	697b      	ldr	r3, [r7, #20]
 8007264:	2200      	movs	r2, #0
 8007266:	2180      	movs	r1, #128	; 0x80
 8007268:	68f8      	ldr	r0, [r7, #12]
 800726a:	f000 fc8a 	bl	8007b82 <UART_WaitOnFlagUntilTimeout>
 800726e:	4603      	mov	r3, r0
 8007270:	2b00      	cmp	r3, #0
 8007272:	d001      	beq.n	8007278 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8007274:	2303      	movs	r3, #3
 8007276:	e039      	b.n	80072ec <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8007278:	69fb      	ldr	r3, [r7, #28]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d10b      	bne.n	8007296 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800727e:	69bb      	ldr	r3, [r7, #24]
 8007280:	881a      	ldrh	r2, [r3, #0]
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800728a:	b292      	uxth	r2, r2
 800728c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800728e:	69bb      	ldr	r3, [r7, #24]
 8007290:	3302      	adds	r3, #2
 8007292:	61bb      	str	r3, [r7, #24]
 8007294:	e008      	b.n	80072a8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007296:	69fb      	ldr	r3, [r7, #28]
 8007298:	781a      	ldrb	r2, [r3, #0]
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	b292      	uxth	r2, r2
 80072a0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80072a2:	69fb      	ldr	r3, [r7, #28]
 80072a4:	3301      	adds	r3, #1
 80072a6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80072ae:	b29b      	uxth	r3, r3
 80072b0:	3b01      	subs	r3, #1
 80072b2:	b29a      	uxth	r2, r3
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80072c0:	b29b      	uxth	r3, r3
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d1cb      	bne.n	800725e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	9300      	str	r3, [sp, #0]
 80072ca:	697b      	ldr	r3, [r7, #20]
 80072cc:	2200      	movs	r2, #0
 80072ce:	2140      	movs	r1, #64	; 0x40
 80072d0:	68f8      	ldr	r0, [r7, #12]
 80072d2:	f000 fc56 	bl	8007b82 <UART_WaitOnFlagUntilTimeout>
 80072d6:	4603      	mov	r3, r0
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d001      	beq.n	80072e0 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80072dc:	2303      	movs	r3, #3
 80072de:	e005      	b.n	80072ec <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	2220      	movs	r2, #32
 80072e4:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80072e6:	2300      	movs	r3, #0
 80072e8:	e000      	b.n	80072ec <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80072ea:	2302      	movs	r3, #2
  }
}
 80072ec:	4618      	mov	r0, r3
 80072ee:	3720      	adds	r7, #32
 80072f0:	46bd      	mov	sp, r7
 80072f2:	bd80      	pop	{r7, pc}

080072f4 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b08a      	sub	sp, #40	; 0x28
 80072f8:	af02      	add	r7, sp, #8
 80072fa:	60f8      	str	r0, [r7, #12]
 80072fc:	60b9      	str	r1, [r7, #8]
 80072fe:	603b      	str	r3, [r7, #0]
 8007300:	4613      	mov	r3, r2
 8007302:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007308:	2b20      	cmp	r3, #32
 800730a:	f040 80bf 	bne.w	800748c <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 800730e:	68bb      	ldr	r3, [r7, #8]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d002      	beq.n	800731a <HAL_UART_Receive+0x26>
 8007314:	88fb      	ldrh	r3, [r7, #6]
 8007316:	2b00      	cmp	r3, #0
 8007318:	d101      	bne.n	800731e <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 800731a:	2301      	movs	r3, #1
 800731c:	e0b7      	b.n	800748e <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8007324:	2b01      	cmp	r3, #1
 8007326:	d101      	bne.n	800732c <HAL_UART_Receive+0x38>
 8007328:	2302      	movs	r3, #2
 800732a:	e0b0      	b.n	800748e <HAL_UART_Receive+0x19a>
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	2201      	movs	r2, #1
 8007330:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	2200      	movs	r2, #0
 8007338:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	2222      	movs	r2, #34	; 0x22
 8007340:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	2200      	movs	r2, #0
 8007346:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007348:	f7fc f882 	bl	8003450 <HAL_GetTick>
 800734c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	88fa      	ldrh	r2, [r7, #6]
 8007352:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	88fa      	ldrh	r2, [r7, #6]
 800735a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	689b      	ldr	r3, [r3, #8]
 8007362:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007366:	d10e      	bne.n	8007386 <HAL_UART_Receive+0x92>
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	691b      	ldr	r3, [r3, #16]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d105      	bne.n	800737c <HAL_UART_Receive+0x88>
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007376:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800737a:	e02d      	b.n	80073d8 <HAL_UART_Receive+0xe4>
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	22ff      	movs	r2, #255	; 0xff
 8007380:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007384:	e028      	b.n	80073d8 <HAL_UART_Receive+0xe4>
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	689b      	ldr	r3, [r3, #8]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d10d      	bne.n	80073aa <HAL_UART_Receive+0xb6>
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	691b      	ldr	r3, [r3, #16]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d104      	bne.n	80073a0 <HAL_UART_Receive+0xac>
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	22ff      	movs	r2, #255	; 0xff
 800739a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800739e:	e01b      	b.n	80073d8 <HAL_UART_Receive+0xe4>
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	227f      	movs	r2, #127	; 0x7f
 80073a4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80073a8:	e016      	b.n	80073d8 <HAL_UART_Receive+0xe4>
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	689b      	ldr	r3, [r3, #8]
 80073ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80073b2:	d10d      	bne.n	80073d0 <HAL_UART_Receive+0xdc>
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	691b      	ldr	r3, [r3, #16]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d104      	bne.n	80073c6 <HAL_UART_Receive+0xd2>
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	227f      	movs	r2, #127	; 0x7f
 80073c0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80073c4:	e008      	b.n	80073d8 <HAL_UART_Receive+0xe4>
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	223f      	movs	r2, #63	; 0x3f
 80073ca:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80073ce:	e003      	b.n	80073d8 <HAL_UART_Receive+0xe4>
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	2200      	movs	r2, #0
 80073d4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80073de:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	689b      	ldr	r3, [r3, #8]
 80073e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073e8:	d108      	bne.n	80073fc <HAL_UART_Receive+0x108>
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	691b      	ldr	r3, [r3, #16]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d104      	bne.n	80073fc <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 80073f2:	2300      	movs	r3, #0
 80073f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80073f6:	68bb      	ldr	r3, [r7, #8]
 80073f8:	61bb      	str	r3, [r7, #24]
 80073fa:	e003      	b.n	8007404 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 80073fc:	68bb      	ldr	r3, [r7, #8]
 80073fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007400:	2300      	movs	r3, #0
 8007402:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	2200      	movs	r2, #0
 8007408:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800740c:	e033      	b.n	8007476 <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	9300      	str	r3, [sp, #0]
 8007412:	697b      	ldr	r3, [r7, #20]
 8007414:	2200      	movs	r2, #0
 8007416:	2120      	movs	r1, #32
 8007418:	68f8      	ldr	r0, [r7, #12]
 800741a:	f000 fbb2 	bl	8007b82 <UART_WaitOnFlagUntilTimeout>
 800741e:	4603      	mov	r3, r0
 8007420:	2b00      	cmp	r3, #0
 8007422:	d001      	beq.n	8007428 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8007424:	2303      	movs	r3, #3
 8007426:	e032      	b.n	800748e <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8007428:	69fb      	ldr	r3, [r7, #28]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d10c      	bne.n	8007448 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007434:	b29a      	uxth	r2, r3
 8007436:	8a7b      	ldrh	r3, [r7, #18]
 8007438:	4013      	ands	r3, r2
 800743a:	b29a      	uxth	r2, r3
 800743c:	69bb      	ldr	r3, [r7, #24]
 800743e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8007440:	69bb      	ldr	r3, [r7, #24]
 8007442:	3302      	adds	r3, #2
 8007444:	61bb      	str	r3, [r7, #24]
 8007446:	e00d      	b.n	8007464 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800744e:	b29b      	uxth	r3, r3
 8007450:	b2da      	uxtb	r2, r3
 8007452:	8a7b      	ldrh	r3, [r7, #18]
 8007454:	b2db      	uxtb	r3, r3
 8007456:	4013      	ands	r3, r2
 8007458:	b2da      	uxtb	r2, r3
 800745a:	69fb      	ldr	r3, [r7, #28]
 800745c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800745e:	69fb      	ldr	r3, [r7, #28]
 8007460:	3301      	adds	r3, #1
 8007462:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800746a:	b29b      	uxth	r3, r3
 800746c:	3b01      	subs	r3, #1
 800746e:	b29a      	uxth	r2, r3
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800747c:	b29b      	uxth	r3, r3
 800747e:	2b00      	cmp	r3, #0
 8007480:	d1c5      	bne.n	800740e <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	2220      	movs	r2, #32
 8007486:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8007488:	2300      	movs	r3, #0
 800748a:	e000      	b.n	800748e <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 800748c:	2302      	movs	r3, #2
  }
}
 800748e:	4618      	mov	r0, r3
 8007490:	3720      	adds	r7, #32
 8007492:	46bd      	mov	sp, r7
 8007494:	bd80      	pop	{r7, pc}
	...

08007498 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007498:	b5b0      	push	{r4, r5, r7, lr}
 800749a:	b088      	sub	sp, #32
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80074a0:	2300      	movs	r3, #0
 80074a2:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	689a      	ldr	r2, [r3, #8]
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	691b      	ldr	r3, [r3, #16]
 80074ac:	431a      	orrs	r2, r3
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	695b      	ldr	r3, [r3, #20]
 80074b2:	431a      	orrs	r2, r3
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	69db      	ldr	r3, [r3, #28]
 80074b8:	4313      	orrs	r3, r2
 80074ba:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	681a      	ldr	r2, [r3, #0]
 80074c2:	4bad      	ldr	r3, [pc, #692]	; (8007778 <UART_SetConfig+0x2e0>)
 80074c4:	4013      	ands	r3, r2
 80074c6:	687a      	ldr	r2, [r7, #4]
 80074c8:	6812      	ldr	r2, [r2, #0]
 80074ca:	69f9      	ldr	r1, [r7, #28]
 80074cc:	430b      	orrs	r3, r1
 80074ce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	685b      	ldr	r3, [r3, #4]
 80074d6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	68da      	ldr	r2, [r3, #12]
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	430a      	orrs	r2, r1
 80074e4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	699b      	ldr	r3, [r3, #24]
 80074ea:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	4aa2      	ldr	r2, [pc, #648]	; (800777c <UART_SetConfig+0x2e4>)
 80074f2:	4293      	cmp	r3, r2
 80074f4:	d004      	beq.n	8007500 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	6a1b      	ldr	r3, [r3, #32]
 80074fa:	69fa      	ldr	r2, [r7, #28]
 80074fc:	4313      	orrs	r3, r2
 80074fe:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	689b      	ldr	r3, [r3, #8]
 8007506:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	69fa      	ldr	r2, [r7, #28]
 8007510:	430a      	orrs	r2, r1
 8007512:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	4a99      	ldr	r2, [pc, #612]	; (8007780 <UART_SetConfig+0x2e8>)
 800751a:	4293      	cmp	r3, r2
 800751c:	d121      	bne.n	8007562 <UART_SetConfig+0xca>
 800751e:	4b99      	ldr	r3, [pc, #612]	; (8007784 <UART_SetConfig+0x2ec>)
 8007520:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007524:	f003 0303 	and.w	r3, r3, #3
 8007528:	2b03      	cmp	r3, #3
 800752a:	d817      	bhi.n	800755c <UART_SetConfig+0xc4>
 800752c:	a201      	add	r2, pc, #4	; (adr r2, 8007534 <UART_SetConfig+0x9c>)
 800752e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007532:	bf00      	nop
 8007534:	08007545 	.word	0x08007545
 8007538:	08007551 	.word	0x08007551
 800753c:	0800754b 	.word	0x0800754b
 8007540:	08007557 	.word	0x08007557
 8007544:	2301      	movs	r3, #1
 8007546:	76fb      	strb	r3, [r7, #27]
 8007548:	e0e7      	b.n	800771a <UART_SetConfig+0x282>
 800754a:	2302      	movs	r3, #2
 800754c:	76fb      	strb	r3, [r7, #27]
 800754e:	e0e4      	b.n	800771a <UART_SetConfig+0x282>
 8007550:	2304      	movs	r3, #4
 8007552:	76fb      	strb	r3, [r7, #27]
 8007554:	e0e1      	b.n	800771a <UART_SetConfig+0x282>
 8007556:	2308      	movs	r3, #8
 8007558:	76fb      	strb	r3, [r7, #27]
 800755a:	e0de      	b.n	800771a <UART_SetConfig+0x282>
 800755c:	2310      	movs	r3, #16
 800755e:	76fb      	strb	r3, [r7, #27]
 8007560:	e0db      	b.n	800771a <UART_SetConfig+0x282>
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	4a88      	ldr	r2, [pc, #544]	; (8007788 <UART_SetConfig+0x2f0>)
 8007568:	4293      	cmp	r3, r2
 800756a:	d132      	bne.n	80075d2 <UART_SetConfig+0x13a>
 800756c:	4b85      	ldr	r3, [pc, #532]	; (8007784 <UART_SetConfig+0x2ec>)
 800756e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007572:	f003 030c 	and.w	r3, r3, #12
 8007576:	2b0c      	cmp	r3, #12
 8007578:	d828      	bhi.n	80075cc <UART_SetConfig+0x134>
 800757a:	a201      	add	r2, pc, #4	; (adr r2, 8007580 <UART_SetConfig+0xe8>)
 800757c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007580:	080075b5 	.word	0x080075b5
 8007584:	080075cd 	.word	0x080075cd
 8007588:	080075cd 	.word	0x080075cd
 800758c:	080075cd 	.word	0x080075cd
 8007590:	080075c1 	.word	0x080075c1
 8007594:	080075cd 	.word	0x080075cd
 8007598:	080075cd 	.word	0x080075cd
 800759c:	080075cd 	.word	0x080075cd
 80075a0:	080075bb 	.word	0x080075bb
 80075a4:	080075cd 	.word	0x080075cd
 80075a8:	080075cd 	.word	0x080075cd
 80075ac:	080075cd 	.word	0x080075cd
 80075b0:	080075c7 	.word	0x080075c7
 80075b4:	2300      	movs	r3, #0
 80075b6:	76fb      	strb	r3, [r7, #27]
 80075b8:	e0af      	b.n	800771a <UART_SetConfig+0x282>
 80075ba:	2302      	movs	r3, #2
 80075bc:	76fb      	strb	r3, [r7, #27]
 80075be:	e0ac      	b.n	800771a <UART_SetConfig+0x282>
 80075c0:	2304      	movs	r3, #4
 80075c2:	76fb      	strb	r3, [r7, #27]
 80075c4:	e0a9      	b.n	800771a <UART_SetConfig+0x282>
 80075c6:	2308      	movs	r3, #8
 80075c8:	76fb      	strb	r3, [r7, #27]
 80075ca:	e0a6      	b.n	800771a <UART_SetConfig+0x282>
 80075cc:	2310      	movs	r3, #16
 80075ce:	76fb      	strb	r3, [r7, #27]
 80075d0:	e0a3      	b.n	800771a <UART_SetConfig+0x282>
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	4a6d      	ldr	r2, [pc, #436]	; (800778c <UART_SetConfig+0x2f4>)
 80075d8:	4293      	cmp	r3, r2
 80075da:	d120      	bne.n	800761e <UART_SetConfig+0x186>
 80075dc:	4b69      	ldr	r3, [pc, #420]	; (8007784 <UART_SetConfig+0x2ec>)
 80075de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075e2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80075e6:	2b30      	cmp	r3, #48	; 0x30
 80075e8:	d013      	beq.n	8007612 <UART_SetConfig+0x17a>
 80075ea:	2b30      	cmp	r3, #48	; 0x30
 80075ec:	d814      	bhi.n	8007618 <UART_SetConfig+0x180>
 80075ee:	2b20      	cmp	r3, #32
 80075f0:	d009      	beq.n	8007606 <UART_SetConfig+0x16e>
 80075f2:	2b20      	cmp	r3, #32
 80075f4:	d810      	bhi.n	8007618 <UART_SetConfig+0x180>
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d002      	beq.n	8007600 <UART_SetConfig+0x168>
 80075fa:	2b10      	cmp	r3, #16
 80075fc:	d006      	beq.n	800760c <UART_SetConfig+0x174>
 80075fe:	e00b      	b.n	8007618 <UART_SetConfig+0x180>
 8007600:	2300      	movs	r3, #0
 8007602:	76fb      	strb	r3, [r7, #27]
 8007604:	e089      	b.n	800771a <UART_SetConfig+0x282>
 8007606:	2302      	movs	r3, #2
 8007608:	76fb      	strb	r3, [r7, #27]
 800760a:	e086      	b.n	800771a <UART_SetConfig+0x282>
 800760c:	2304      	movs	r3, #4
 800760e:	76fb      	strb	r3, [r7, #27]
 8007610:	e083      	b.n	800771a <UART_SetConfig+0x282>
 8007612:	2308      	movs	r3, #8
 8007614:	76fb      	strb	r3, [r7, #27]
 8007616:	e080      	b.n	800771a <UART_SetConfig+0x282>
 8007618:	2310      	movs	r3, #16
 800761a:	76fb      	strb	r3, [r7, #27]
 800761c:	e07d      	b.n	800771a <UART_SetConfig+0x282>
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	4a5b      	ldr	r2, [pc, #364]	; (8007790 <UART_SetConfig+0x2f8>)
 8007624:	4293      	cmp	r3, r2
 8007626:	d120      	bne.n	800766a <UART_SetConfig+0x1d2>
 8007628:	4b56      	ldr	r3, [pc, #344]	; (8007784 <UART_SetConfig+0x2ec>)
 800762a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800762e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007632:	2bc0      	cmp	r3, #192	; 0xc0
 8007634:	d013      	beq.n	800765e <UART_SetConfig+0x1c6>
 8007636:	2bc0      	cmp	r3, #192	; 0xc0
 8007638:	d814      	bhi.n	8007664 <UART_SetConfig+0x1cc>
 800763a:	2b80      	cmp	r3, #128	; 0x80
 800763c:	d009      	beq.n	8007652 <UART_SetConfig+0x1ba>
 800763e:	2b80      	cmp	r3, #128	; 0x80
 8007640:	d810      	bhi.n	8007664 <UART_SetConfig+0x1cc>
 8007642:	2b00      	cmp	r3, #0
 8007644:	d002      	beq.n	800764c <UART_SetConfig+0x1b4>
 8007646:	2b40      	cmp	r3, #64	; 0x40
 8007648:	d006      	beq.n	8007658 <UART_SetConfig+0x1c0>
 800764a:	e00b      	b.n	8007664 <UART_SetConfig+0x1cc>
 800764c:	2300      	movs	r3, #0
 800764e:	76fb      	strb	r3, [r7, #27]
 8007650:	e063      	b.n	800771a <UART_SetConfig+0x282>
 8007652:	2302      	movs	r3, #2
 8007654:	76fb      	strb	r3, [r7, #27]
 8007656:	e060      	b.n	800771a <UART_SetConfig+0x282>
 8007658:	2304      	movs	r3, #4
 800765a:	76fb      	strb	r3, [r7, #27]
 800765c:	e05d      	b.n	800771a <UART_SetConfig+0x282>
 800765e:	2308      	movs	r3, #8
 8007660:	76fb      	strb	r3, [r7, #27]
 8007662:	e05a      	b.n	800771a <UART_SetConfig+0x282>
 8007664:	2310      	movs	r3, #16
 8007666:	76fb      	strb	r3, [r7, #27]
 8007668:	e057      	b.n	800771a <UART_SetConfig+0x282>
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	4a49      	ldr	r2, [pc, #292]	; (8007794 <UART_SetConfig+0x2fc>)
 8007670:	4293      	cmp	r3, r2
 8007672:	d125      	bne.n	80076c0 <UART_SetConfig+0x228>
 8007674:	4b43      	ldr	r3, [pc, #268]	; (8007784 <UART_SetConfig+0x2ec>)
 8007676:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800767a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800767e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007682:	d017      	beq.n	80076b4 <UART_SetConfig+0x21c>
 8007684:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007688:	d817      	bhi.n	80076ba <UART_SetConfig+0x222>
 800768a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800768e:	d00b      	beq.n	80076a8 <UART_SetConfig+0x210>
 8007690:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007694:	d811      	bhi.n	80076ba <UART_SetConfig+0x222>
 8007696:	2b00      	cmp	r3, #0
 8007698:	d003      	beq.n	80076a2 <UART_SetConfig+0x20a>
 800769a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800769e:	d006      	beq.n	80076ae <UART_SetConfig+0x216>
 80076a0:	e00b      	b.n	80076ba <UART_SetConfig+0x222>
 80076a2:	2300      	movs	r3, #0
 80076a4:	76fb      	strb	r3, [r7, #27]
 80076a6:	e038      	b.n	800771a <UART_SetConfig+0x282>
 80076a8:	2302      	movs	r3, #2
 80076aa:	76fb      	strb	r3, [r7, #27]
 80076ac:	e035      	b.n	800771a <UART_SetConfig+0x282>
 80076ae:	2304      	movs	r3, #4
 80076b0:	76fb      	strb	r3, [r7, #27]
 80076b2:	e032      	b.n	800771a <UART_SetConfig+0x282>
 80076b4:	2308      	movs	r3, #8
 80076b6:	76fb      	strb	r3, [r7, #27]
 80076b8:	e02f      	b.n	800771a <UART_SetConfig+0x282>
 80076ba:	2310      	movs	r3, #16
 80076bc:	76fb      	strb	r3, [r7, #27]
 80076be:	e02c      	b.n	800771a <UART_SetConfig+0x282>
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	4a2d      	ldr	r2, [pc, #180]	; (800777c <UART_SetConfig+0x2e4>)
 80076c6:	4293      	cmp	r3, r2
 80076c8:	d125      	bne.n	8007716 <UART_SetConfig+0x27e>
 80076ca:	4b2e      	ldr	r3, [pc, #184]	; (8007784 <UART_SetConfig+0x2ec>)
 80076cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076d0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80076d4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80076d8:	d017      	beq.n	800770a <UART_SetConfig+0x272>
 80076da:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80076de:	d817      	bhi.n	8007710 <UART_SetConfig+0x278>
 80076e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80076e4:	d00b      	beq.n	80076fe <UART_SetConfig+0x266>
 80076e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80076ea:	d811      	bhi.n	8007710 <UART_SetConfig+0x278>
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d003      	beq.n	80076f8 <UART_SetConfig+0x260>
 80076f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80076f4:	d006      	beq.n	8007704 <UART_SetConfig+0x26c>
 80076f6:	e00b      	b.n	8007710 <UART_SetConfig+0x278>
 80076f8:	2300      	movs	r3, #0
 80076fa:	76fb      	strb	r3, [r7, #27]
 80076fc:	e00d      	b.n	800771a <UART_SetConfig+0x282>
 80076fe:	2302      	movs	r3, #2
 8007700:	76fb      	strb	r3, [r7, #27]
 8007702:	e00a      	b.n	800771a <UART_SetConfig+0x282>
 8007704:	2304      	movs	r3, #4
 8007706:	76fb      	strb	r3, [r7, #27]
 8007708:	e007      	b.n	800771a <UART_SetConfig+0x282>
 800770a:	2308      	movs	r3, #8
 800770c:	76fb      	strb	r3, [r7, #27]
 800770e:	e004      	b.n	800771a <UART_SetConfig+0x282>
 8007710:	2310      	movs	r3, #16
 8007712:	76fb      	strb	r3, [r7, #27]
 8007714:	e001      	b.n	800771a <UART_SetConfig+0x282>
 8007716:	2310      	movs	r3, #16
 8007718:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	4a17      	ldr	r2, [pc, #92]	; (800777c <UART_SetConfig+0x2e4>)
 8007720:	4293      	cmp	r3, r2
 8007722:	f040 8087 	bne.w	8007834 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007726:	7efb      	ldrb	r3, [r7, #27]
 8007728:	2b08      	cmp	r3, #8
 800772a:	d837      	bhi.n	800779c <UART_SetConfig+0x304>
 800772c:	a201      	add	r2, pc, #4	; (adr r2, 8007734 <UART_SetConfig+0x29c>)
 800772e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007732:	bf00      	nop
 8007734:	08007759 	.word	0x08007759
 8007738:	0800779d 	.word	0x0800779d
 800773c:	08007761 	.word	0x08007761
 8007740:	0800779d 	.word	0x0800779d
 8007744:	08007767 	.word	0x08007767
 8007748:	0800779d 	.word	0x0800779d
 800774c:	0800779d 	.word	0x0800779d
 8007750:	0800779d 	.word	0x0800779d
 8007754:	0800776f 	.word	0x0800776f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007758:	f7fd ff28 	bl	80055ac <HAL_RCC_GetPCLK1Freq>
 800775c:	6178      	str	r0, [r7, #20]
        break;
 800775e:	e022      	b.n	80077a6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007760:	4b0d      	ldr	r3, [pc, #52]	; (8007798 <UART_SetConfig+0x300>)
 8007762:	617b      	str	r3, [r7, #20]
        break;
 8007764:	e01f      	b.n	80077a6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007766:	f7fd fe89 	bl	800547c <HAL_RCC_GetSysClockFreq>
 800776a:	6178      	str	r0, [r7, #20]
        break;
 800776c:	e01b      	b.n	80077a6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800776e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007772:	617b      	str	r3, [r7, #20]
        break;
 8007774:	e017      	b.n	80077a6 <UART_SetConfig+0x30e>
 8007776:	bf00      	nop
 8007778:	efff69f3 	.word	0xefff69f3
 800777c:	40008000 	.word	0x40008000
 8007780:	40013800 	.word	0x40013800
 8007784:	40021000 	.word	0x40021000
 8007788:	40004400 	.word	0x40004400
 800778c:	40004800 	.word	0x40004800
 8007790:	40004c00 	.word	0x40004c00
 8007794:	40005000 	.word	0x40005000
 8007798:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800779c:	2300      	movs	r3, #0
 800779e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80077a0:	2301      	movs	r3, #1
 80077a2:	76bb      	strb	r3, [r7, #26]
        break;
 80077a4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80077a6:	697b      	ldr	r3, [r7, #20]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	f000 80f1 	beq.w	8007990 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	685a      	ldr	r2, [r3, #4]
 80077b2:	4613      	mov	r3, r2
 80077b4:	005b      	lsls	r3, r3, #1
 80077b6:	4413      	add	r3, r2
 80077b8:	697a      	ldr	r2, [r7, #20]
 80077ba:	429a      	cmp	r2, r3
 80077bc:	d305      	bcc.n	80077ca <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	685b      	ldr	r3, [r3, #4]
 80077c2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80077c4:	697a      	ldr	r2, [r7, #20]
 80077c6:	429a      	cmp	r2, r3
 80077c8:	d902      	bls.n	80077d0 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 80077ca:	2301      	movs	r3, #1
 80077cc:	76bb      	strb	r3, [r7, #26]
 80077ce:	e0df      	b.n	8007990 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80077d0:	697b      	ldr	r3, [r7, #20]
 80077d2:	4618      	mov	r0, r3
 80077d4:	f04f 0100 	mov.w	r1, #0
 80077d8:	f04f 0200 	mov.w	r2, #0
 80077dc:	f04f 0300 	mov.w	r3, #0
 80077e0:	020b      	lsls	r3, r1, #8
 80077e2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80077e6:	0202      	lsls	r2, r0, #8
 80077e8:	6879      	ldr	r1, [r7, #4]
 80077ea:	6849      	ldr	r1, [r1, #4]
 80077ec:	0849      	lsrs	r1, r1, #1
 80077ee:	4608      	mov	r0, r1
 80077f0:	f04f 0100 	mov.w	r1, #0
 80077f4:	1814      	adds	r4, r2, r0
 80077f6:	eb43 0501 	adc.w	r5, r3, r1
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	685b      	ldr	r3, [r3, #4]
 80077fe:	461a      	mov	r2, r3
 8007800:	f04f 0300 	mov.w	r3, #0
 8007804:	4620      	mov	r0, r4
 8007806:	4629      	mov	r1, r5
 8007808:	f7f9 f9ce 	bl	8000ba8 <__aeabi_uldivmod>
 800780c:	4602      	mov	r2, r0
 800780e:	460b      	mov	r3, r1
 8007810:	4613      	mov	r3, r2
 8007812:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007814:	693b      	ldr	r3, [r7, #16]
 8007816:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800781a:	d308      	bcc.n	800782e <UART_SetConfig+0x396>
 800781c:	693b      	ldr	r3, [r7, #16]
 800781e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007822:	d204      	bcs.n	800782e <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	693a      	ldr	r2, [r7, #16]
 800782a:	60da      	str	r2, [r3, #12]
 800782c:	e0b0      	b.n	8007990 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 800782e:	2301      	movs	r3, #1
 8007830:	76bb      	strb	r3, [r7, #26]
 8007832:	e0ad      	b.n	8007990 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	69db      	ldr	r3, [r3, #28]
 8007838:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800783c:	d15b      	bne.n	80078f6 <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 800783e:	7efb      	ldrb	r3, [r7, #27]
 8007840:	2b08      	cmp	r3, #8
 8007842:	d828      	bhi.n	8007896 <UART_SetConfig+0x3fe>
 8007844:	a201      	add	r2, pc, #4	; (adr r2, 800784c <UART_SetConfig+0x3b4>)
 8007846:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800784a:	bf00      	nop
 800784c:	08007871 	.word	0x08007871
 8007850:	08007879 	.word	0x08007879
 8007854:	08007881 	.word	0x08007881
 8007858:	08007897 	.word	0x08007897
 800785c:	08007887 	.word	0x08007887
 8007860:	08007897 	.word	0x08007897
 8007864:	08007897 	.word	0x08007897
 8007868:	08007897 	.word	0x08007897
 800786c:	0800788f 	.word	0x0800788f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007870:	f7fd fe9c 	bl	80055ac <HAL_RCC_GetPCLK1Freq>
 8007874:	6178      	str	r0, [r7, #20]
        break;
 8007876:	e013      	b.n	80078a0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007878:	f7fd feae 	bl	80055d8 <HAL_RCC_GetPCLK2Freq>
 800787c:	6178      	str	r0, [r7, #20]
        break;
 800787e:	e00f      	b.n	80078a0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007880:	4b49      	ldr	r3, [pc, #292]	; (80079a8 <UART_SetConfig+0x510>)
 8007882:	617b      	str	r3, [r7, #20]
        break;
 8007884:	e00c      	b.n	80078a0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007886:	f7fd fdf9 	bl	800547c <HAL_RCC_GetSysClockFreq>
 800788a:	6178      	str	r0, [r7, #20]
        break;
 800788c:	e008      	b.n	80078a0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800788e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007892:	617b      	str	r3, [r7, #20]
        break;
 8007894:	e004      	b.n	80078a0 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8007896:	2300      	movs	r3, #0
 8007898:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800789a:	2301      	movs	r3, #1
 800789c:	76bb      	strb	r3, [r7, #26]
        break;
 800789e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80078a0:	697b      	ldr	r3, [r7, #20]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d074      	beq.n	8007990 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80078a6:	697b      	ldr	r3, [r7, #20]
 80078a8:	005a      	lsls	r2, r3, #1
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	685b      	ldr	r3, [r3, #4]
 80078ae:	085b      	lsrs	r3, r3, #1
 80078b0:	441a      	add	r2, r3
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	685b      	ldr	r3, [r3, #4]
 80078b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80078ba:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80078bc:	693b      	ldr	r3, [r7, #16]
 80078be:	2b0f      	cmp	r3, #15
 80078c0:	d916      	bls.n	80078f0 <UART_SetConfig+0x458>
 80078c2:	693b      	ldr	r3, [r7, #16]
 80078c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80078c8:	d212      	bcs.n	80078f0 <UART_SetConfig+0x458>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80078ca:	693b      	ldr	r3, [r7, #16]
 80078cc:	b29b      	uxth	r3, r3
 80078ce:	f023 030f 	bic.w	r3, r3, #15
 80078d2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80078d4:	693b      	ldr	r3, [r7, #16]
 80078d6:	085b      	lsrs	r3, r3, #1
 80078d8:	b29b      	uxth	r3, r3
 80078da:	f003 0307 	and.w	r3, r3, #7
 80078de:	b29a      	uxth	r2, r3
 80078e0:	89fb      	ldrh	r3, [r7, #14]
 80078e2:	4313      	orrs	r3, r2
 80078e4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	89fa      	ldrh	r2, [r7, #14]
 80078ec:	60da      	str	r2, [r3, #12]
 80078ee:	e04f      	b.n	8007990 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80078f0:	2301      	movs	r3, #1
 80078f2:	76bb      	strb	r3, [r7, #26]
 80078f4:	e04c      	b.n	8007990 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80078f6:	7efb      	ldrb	r3, [r7, #27]
 80078f8:	2b08      	cmp	r3, #8
 80078fa:	d828      	bhi.n	800794e <UART_SetConfig+0x4b6>
 80078fc:	a201      	add	r2, pc, #4	; (adr r2, 8007904 <UART_SetConfig+0x46c>)
 80078fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007902:	bf00      	nop
 8007904:	08007929 	.word	0x08007929
 8007908:	08007931 	.word	0x08007931
 800790c:	08007939 	.word	0x08007939
 8007910:	0800794f 	.word	0x0800794f
 8007914:	0800793f 	.word	0x0800793f
 8007918:	0800794f 	.word	0x0800794f
 800791c:	0800794f 	.word	0x0800794f
 8007920:	0800794f 	.word	0x0800794f
 8007924:	08007947 	.word	0x08007947
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007928:	f7fd fe40 	bl	80055ac <HAL_RCC_GetPCLK1Freq>
 800792c:	6178      	str	r0, [r7, #20]
        break;
 800792e:	e013      	b.n	8007958 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007930:	f7fd fe52 	bl	80055d8 <HAL_RCC_GetPCLK2Freq>
 8007934:	6178      	str	r0, [r7, #20]
        break;
 8007936:	e00f      	b.n	8007958 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007938:	4b1b      	ldr	r3, [pc, #108]	; (80079a8 <UART_SetConfig+0x510>)
 800793a:	617b      	str	r3, [r7, #20]
        break;
 800793c:	e00c      	b.n	8007958 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800793e:	f7fd fd9d 	bl	800547c <HAL_RCC_GetSysClockFreq>
 8007942:	6178      	str	r0, [r7, #20]
        break;
 8007944:	e008      	b.n	8007958 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007946:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800794a:	617b      	str	r3, [r7, #20]
        break;
 800794c:	e004      	b.n	8007958 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 800794e:	2300      	movs	r3, #0
 8007950:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007952:	2301      	movs	r3, #1
 8007954:	76bb      	strb	r3, [r7, #26]
        break;
 8007956:	bf00      	nop
    }

    if (pclk != 0U)
 8007958:	697b      	ldr	r3, [r7, #20]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d018      	beq.n	8007990 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	685b      	ldr	r3, [r3, #4]
 8007962:	085a      	lsrs	r2, r3, #1
 8007964:	697b      	ldr	r3, [r7, #20]
 8007966:	441a      	add	r2, r3
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	685b      	ldr	r3, [r3, #4]
 800796c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007970:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007972:	693b      	ldr	r3, [r7, #16]
 8007974:	2b0f      	cmp	r3, #15
 8007976:	d909      	bls.n	800798c <UART_SetConfig+0x4f4>
 8007978:	693b      	ldr	r3, [r7, #16]
 800797a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800797e:	d205      	bcs.n	800798c <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007980:	693b      	ldr	r3, [r7, #16]
 8007982:	b29a      	uxth	r2, r3
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	60da      	str	r2, [r3, #12]
 800798a:	e001      	b.n	8007990 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800798c:	2301      	movs	r3, #1
 800798e:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2200      	movs	r2, #0
 8007994:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2200      	movs	r2, #0
 800799a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800799c:	7ebb      	ldrb	r3, [r7, #26]
}
 800799e:	4618      	mov	r0, r3
 80079a0:	3720      	adds	r7, #32
 80079a2:	46bd      	mov	sp, r7
 80079a4:	bdb0      	pop	{r4, r5, r7, pc}
 80079a6:	bf00      	nop
 80079a8:	00f42400 	.word	0x00f42400

080079ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80079ac:	b480      	push	{r7}
 80079ae:	b083      	sub	sp, #12
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079b8:	f003 0301 	and.w	r3, r3, #1
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d00a      	beq.n	80079d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	685b      	ldr	r3, [r3, #4]
 80079c6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	430a      	orrs	r2, r1
 80079d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079da:	f003 0302 	and.w	r3, r3, #2
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d00a      	beq.n	80079f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	685b      	ldr	r3, [r3, #4]
 80079e8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	430a      	orrs	r2, r1
 80079f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079fc:	f003 0304 	and.w	r3, r3, #4
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d00a      	beq.n	8007a1a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	685b      	ldr	r3, [r3, #4]
 8007a0a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	430a      	orrs	r2, r1
 8007a18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a1e:	f003 0308 	and.w	r3, r3, #8
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d00a      	beq.n	8007a3c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	685b      	ldr	r3, [r3, #4]
 8007a2c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	430a      	orrs	r2, r1
 8007a3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a40:	f003 0310 	and.w	r3, r3, #16
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d00a      	beq.n	8007a5e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	689b      	ldr	r3, [r3, #8]
 8007a4e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	430a      	orrs	r2, r1
 8007a5c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a62:	f003 0320 	and.w	r3, r3, #32
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d00a      	beq.n	8007a80 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	689b      	ldr	r3, [r3, #8]
 8007a70:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	430a      	orrs	r2, r1
 8007a7e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d01a      	beq.n	8007ac2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	685b      	ldr	r3, [r3, #4]
 8007a92:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	430a      	orrs	r2, r1
 8007aa0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aa6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007aaa:	d10a      	bne.n	8007ac2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	685b      	ldr	r3, [r3, #4]
 8007ab2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	430a      	orrs	r2, r1
 8007ac0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ac6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d00a      	beq.n	8007ae4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	685b      	ldr	r3, [r3, #4]
 8007ad4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	430a      	orrs	r2, r1
 8007ae2:	605a      	str	r2, [r3, #4]
  }
}
 8007ae4:	bf00      	nop
 8007ae6:	370c      	adds	r7, #12
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aee:	4770      	bx	lr

08007af0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b086      	sub	sp, #24
 8007af4:	af02      	add	r7, sp, #8
 8007af6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	2200      	movs	r2, #0
 8007afc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007b00:	f7fb fca6 	bl	8003450 <HAL_GetTick>
 8007b04:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	f003 0308 	and.w	r3, r3, #8
 8007b10:	2b08      	cmp	r3, #8
 8007b12:	d10e      	bne.n	8007b32 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007b14:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007b18:	9300      	str	r3, [sp, #0]
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007b22:	6878      	ldr	r0, [r7, #4]
 8007b24:	f000 f82d 	bl	8007b82 <UART_WaitOnFlagUntilTimeout>
 8007b28:	4603      	mov	r3, r0
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d001      	beq.n	8007b32 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007b2e:	2303      	movs	r3, #3
 8007b30:	e023      	b.n	8007b7a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	f003 0304 	and.w	r3, r3, #4
 8007b3c:	2b04      	cmp	r3, #4
 8007b3e:	d10e      	bne.n	8007b5e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007b40:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007b44:	9300      	str	r3, [sp, #0]
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	2200      	movs	r2, #0
 8007b4a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007b4e:	6878      	ldr	r0, [r7, #4]
 8007b50:	f000 f817 	bl	8007b82 <UART_WaitOnFlagUntilTimeout>
 8007b54:	4603      	mov	r3, r0
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d001      	beq.n	8007b5e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007b5a:	2303      	movs	r3, #3
 8007b5c:	e00d      	b.n	8007b7a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	2220      	movs	r2, #32
 8007b62:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	2220      	movs	r2, #32
 8007b68:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2200      	movs	r2, #0
 8007b74:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007b78:	2300      	movs	r3, #0
}
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	3710      	adds	r7, #16
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	bd80      	pop	{r7, pc}

08007b82 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007b82:	b580      	push	{r7, lr}
 8007b84:	b09c      	sub	sp, #112	; 0x70
 8007b86:	af00      	add	r7, sp, #0
 8007b88:	60f8      	str	r0, [r7, #12]
 8007b8a:	60b9      	str	r1, [r7, #8]
 8007b8c:	603b      	str	r3, [r7, #0]
 8007b8e:	4613      	mov	r3, r2
 8007b90:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b92:	e0a5      	b.n	8007ce0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b94:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007b96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b9a:	f000 80a1 	beq.w	8007ce0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b9e:	f7fb fc57 	bl	8003450 <HAL_GetTick>
 8007ba2:	4602      	mov	r2, r0
 8007ba4:	683b      	ldr	r3, [r7, #0]
 8007ba6:	1ad3      	subs	r3, r2, r3
 8007ba8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007baa:	429a      	cmp	r2, r3
 8007bac:	d302      	bcc.n	8007bb4 <UART_WaitOnFlagUntilTimeout+0x32>
 8007bae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d13e      	bne.n	8007c32 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007bbc:	e853 3f00 	ldrex	r3, [r3]
 8007bc0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007bc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007bc4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007bc8:	667b      	str	r3, [r7, #100]	; 0x64
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	461a      	mov	r2, r3
 8007bd0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007bd2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007bd4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bd6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007bd8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007bda:	e841 2300 	strex	r3, r2, [r1]
 8007bde:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007be0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d1e6      	bne.n	8007bb4 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	3308      	adds	r3, #8
 8007bec:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bf0:	e853 3f00 	ldrex	r3, [r3]
 8007bf4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007bf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bf8:	f023 0301 	bic.w	r3, r3, #1
 8007bfc:	663b      	str	r3, [r7, #96]	; 0x60
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	3308      	adds	r3, #8
 8007c04:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007c06:	64ba      	str	r2, [r7, #72]	; 0x48
 8007c08:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c0a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007c0c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007c0e:	e841 2300 	strex	r3, r2, [r1]
 8007c12:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007c14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d1e5      	bne.n	8007be6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	2220      	movs	r2, #32
 8007c1e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	2220      	movs	r2, #32
 8007c24:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	2200      	movs	r2, #0
 8007c2a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8007c2e:	2303      	movs	r3, #3
 8007c30:	e067      	b.n	8007d02 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	f003 0304 	and.w	r3, r3, #4
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d04f      	beq.n	8007ce0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	69db      	ldr	r3, [r3, #28]
 8007c46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007c4a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007c4e:	d147      	bne.n	8007ce0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007c58:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c62:	e853 3f00 	ldrex	r3, [r3]
 8007c66:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c6a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007c6e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	461a      	mov	r2, r3
 8007c76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c78:	637b      	str	r3, [r7, #52]	; 0x34
 8007c7a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c7c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007c7e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007c80:	e841 2300 	strex	r3, r2, [r1]
 8007c84:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007c86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d1e6      	bne.n	8007c5a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	3308      	adds	r3, #8
 8007c92:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c94:	697b      	ldr	r3, [r7, #20]
 8007c96:	e853 3f00 	ldrex	r3, [r3]
 8007c9a:	613b      	str	r3, [r7, #16]
   return(result);
 8007c9c:	693b      	ldr	r3, [r7, #16]
 8007c9e:	f023 0301 	bic.w	r3, r3, #1
 8007ca2:	66bb      	str	r3, [r7, #104]	; 0x68
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	3308      	adds	r3, #8
 8007caa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007cac:	623a      	str	r2, [r7, #32]
 8007cae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cb0:	69f9      	ldr	r1, [r7, #28]
 8007cb2:	6a3a      	ldr	r2, [r7, #32]
 8007cb4:	e841 2300 	strex	r3, r2, [r1]
 8007cb8:	61bb      	str	r3, [r7, #24]
   return(result);
 8007cba:	69bb      	ldr	r3, [r7, #24]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d1e5      	bne.n	8007c8c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	2220      	movs	r2, #32
 8007cc4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	2220      	movs	r2, #32
 8007cca:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	2220      	movs	r2, #32
 8007cd0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8007cdc:	2303      	movs	r3, #3
 8007cde:	e010      	b.n	8007d02 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	69da      	ldr	r2, [r3, #28]
 8007ce6:	68bb      	ldr	r3, [r7, #8]
 8007ce8:	4013      	ands	r3, r2
 8007cea:	68ba      	ldr	r2, [r7, #8]
 8007cec:	429a      	cmp	r2, r3
 8007cee:	bf0c      	ite	eq
 8007cf0:	2301      	moveq	r3, #1
 8007cf2:	2300      	movne	r3, #0
 8007cf4:	b2db      	uxtb	r3, r3
 8007cf6:	461a      	mov	r2, r3
 8007cf8:	79fb      	ldrb	r3, [r7, #7]
 8007cfa:	429a      	cmp	r2, r3
 8007cfc:	f43f af4a 	beq.w	8007b94 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007d00:	2300      	movs	r3, #0
}
 8007d02:	4618      	mov	r0, r3
 8007d04:	3770      	adds	r7, #112	; 0x70
 8007d06:	46bd      	mov	sp, r7
 8007d08:	bd80      	pop	{r7, pc}
	...

08007d0c <__errno>:
 8007d0c:	4b01      	ldr	r3, [pc, #4]	; (8007d14 <__errno+0x8>)
 8007d0e:	6818      	ldr	r0, [r3, #0]
 8007d10:	4770      	bx	lr
 8007d12:	bf00      	nop
 8007d14:	2000002c 	.word	0x2000002c

08007d18 <__libc_init_array>:
 8007d18:	b570      	push	{r4, r5, r6, lr}
 8007d1a:	4d0d      	ldr	r5, [pc, #52]	; (8007d50 <__libc_init_array+0x38>)
 8007d1c:	4c0d      	ldr	r4, [pc, #52]	; (8007d54 <__libc_init_array+0x3c>)
 8007d1e:	1b64      	subs	r4, r4, r5
 8007d20:	10a4      	asrs	r4, r4, #2
 8007d22:	2600      	movs	r6, #0
 8007d24:	42a6      	cmp	r6, r4
 8007d26:	d109      	bne.n	8007d3c <__libc_init_array+0x24>
 8007d28:	4d0b      	ldr	r5, [pc, #44]	; (8007d58 <__libc_init_array+0x40>)
 8007d2a:	4c0c      	ldr	r4, [pc, #48]	; (8007d5c <__libc_init_array+0x44>)
 8007d2c:	f002 ffcc 	bl	800acc8 <_init>
 8007d30:	1b64      	subs	r4, r4, r5
 8007d32:	10a4      	asrs	r4, r4, #2
 8007d34:	2600      	movs	r6, #0
 8007d36:	42a6      	cmp	r6, r4
 8007d38:	d105      	bne.n	8007d46 <__libc_init_array+0x2e>
 8007d3a:	bd70      	pop	{r4, r5, r6, pc}
 8007d3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d40:	4798      	blx	r3
 8007d42:	3601      	adds	r6, #1
 8007d44:	e7ee      	b.n	8007d24 <__libc_init_array+0xc>
 8007d46:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d4a:	4798      	blx	r3
 8007d4c:	3601      	adds	r6, #1
 8007d4e:	e7f2      	b.n	8007d36 <__libc_init_array+0x1e>
 8007d50:	0800b588 	.word	0x0800b588
 8007d54:	0800b588 	.word	0x0800b588
 8007d58:	0800b588 	.word	0x0800b588
 8007d5c:	0800b58c 	.word	0x0800b58c

08007d60 <memcpy>:
 8007d60:	440a      	add	r2, r1
 8007d62:	4291      	cmp	r1, r2
 8007d64:	f100 33ff 	add.w	r3, r0, #4294967295
 8007d68:	d100      	bne.n	8007d6c <memcpy+0xc>
 8007d6a:	4770      	bx	lr
 8007d6c:	b510      	push	{r4, lr}
 8007d6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007d72:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007d76:	4291      	cmp	r1, r2
 8007d78:	d1f9      	bne.n	8007d6e <memcpy+0xe>
 8007d7a:	bd10      	pop	{r4, pc}

08007d7c <memset>:
 8007d7c:	4402      	add	r2, r0
 8007d7e:	4603      	mov	r3, r0
 8007d80:	4293      	cmp	r3, r2
 8007d82:	d100      	bne.n	8007d86 <memset+0xa>
 8007d84:	4770      	bx	lr
 8007d86:	f803 1b01 	strb.w	r1, [r3], #1
 8007d8a:	e7f9      	b.n	8007d80 <memset+0x4>

08007d8c <__cvt>:
 8007d8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007d90:	ec55 4b10 	vmov	r4, r5, d0
 8007d94:	2d00      	cmp	r5, #0
 8007d96:	460e      	mov	r6, r1
 8007d98:	4619      	mov	r1, r3
 8007d9a:	462b      	mov	r3, r5
 8007d9c:	bfbb      	ittet	lt
 8007d9e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007da2:	461d      	movlt	r5, r3
 8007da4:	2300      	movge	r3, #0
 8007da6:	232d      	movlt	r3, #45	; 0x2d
 8007da8:	700b      	strb	r3, [r1, #0]
 8007daa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007dac:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007db0:	4691      	mov	r9, r2
 8007db2:	f023 0820 	bic.w	r8, r3, #32
 8007db6:	bfbc      	itt	lt
 8007db8:	4622      	movlt	r2, r4
 8007dba:	4614      	movlt	r4, r2
 8007dbc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007dc0:	d005      	beq.n	8007dce <__cvt+0x42>
 8007dc2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007dc6:	d100      	bne.n	8007dca <__cvt+0x3e>
 8007dc8:	3601      	adds	r6, #1
 8007dca:	2102      	movs	r1, #2
 8007dcc:	e000      	b.n	8007dd0 <__cvt+0x44>
 8007dce:	2103      	movs	r1, #3
 8007dd0:	ab03      	add	r3, sp, #12
 8007dd2:	9301      	str	r3, [sp, #4]
 8007dd4:	ab02      	add	r3, sp, #8
 8007dd6:	9300      	str	r3, [sp, #0]
 8007dd8:	ec45 4b10 	vmov	d0, r4, r5
 8007ddc:	4653      	mov	r3, sl
 8007dde:	4632      	mov	r2, r6
 8007de0:	f000 fede 	bl	8008ba0 <_dtoa_r>
 8007de4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007de8:	4607      	mov	r7, r0
 8007dea:	d102      	bne.n	8007df2 <__cvt+0x66>
 8007dec:	f019 0f01 	tst.w	r9, #1
 8007df0:	d022      	beq.n	8007e38 <__cvt+0xac>
 8007df2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007df6:	eb07 0906 	add.w	r9, r7, r6
 8007dfa:	d110      	bne.n	8007e1e <__cvt+0x92>
 8007dfc:	783b      	ldrb	r3, [r7, #0]
 8007dfe:	2b30      	cmp	r3, #48	; 0x30
 8007e00:	d10a      	bne.n	8007e18 <__cvt+0x8c>
 8007e02:	2200      	movs	r2, #0
 8007e04:	2300      	movs	r3, #0
 8007e06:	4620      	mov	r0, r4
 8007e08:	4629      	mov	r1, r5
 8007e0a:	f7f8 fe5d 	bl	8000ac8 <__aeabi_dcmpeq>
 8007e0e:	b918      	cbnz	r0, 8007e18 <__cvt+0x8c>
 8007e10:	f1c6 0601 	rsb	r6, r6, #1
 8007e14:	f8ca 6000 	str.w	r6, [sl]
 8007e18:	f8da 3000 	ldr.w	r3, [sl]
 8007e1c:	4499      	add	r9, r3
 8007e1e:	2200      	movs	r2, #0
 8007e20:	2300      	movs	r3, #0
 8007e22:	4620      	mov	r0, r4
 8007e24:	4629      	mov	r1, r5
 8007e26:	f7f8 fe4f 	bl	8000ac8 <__aeabi_dcmpeq>
 8007e2a:	b108      	cbz	r0, 8007e30 <__cvt+0xa4>
 8007e2c:	f8cd 900c 	str.w	r9, [sp, #12]
 8007e30:	2230      	movs	r2, #48	; 0x30
 8007e32:	9b03      	ldr	r3, [sp, #12]
 8007e34:	454b      	cmp	r3, r9
 8007e36:	d307      	bcc.n	8007e48 <__cvt+0xbc>
 8007e38:	9b03      	ldr	r3, [sp, #12]
 8007e3a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007e3c:	1bdb      	subs	r3, r3, r7
 8007e3e:	4638      	mov	r0, r7
 8007e40:	6013      	str	r3, [r2, #0]
 8007e42:	b004      	add	sp, #16
 8007e44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e48:	1c59      	adds	r1, r3, #1
 8007e4a:	9103      	str	r1, [sp, #12]
 8007e4c:	701a      	strb	r2, [r3, #0]
 8007e4e:	e7f0      	b.n	8007e32 <__cvt+0xa6>

08007e50 <__exponent>:
 8007e50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007e52:	4603      	mov	r3, r0
 8007e54:	2900      	cmp	r1, #0
 8007e56:	bfb8      	it	lt
 8007e58:	4249      	neglt	r1, r1
 8007e5a:	f803 2b02 	strb.w	r2, [r3], #2
 8007e5e:	bfb4      	ite	lt
 8007e60:	222d      	movlt	r2, #45	; 0x2d
 8007e62:	222b      	movge	r2, #43	; 0x2b
 8007e64:	2909      	cmp	r1, #9
 8007e66:	7042      	strb	r2, [r0, #1]
 8007e68:	dd2a      	ble.n	8007ec0 <__exponent+0x70>
 8007e6a:	f10d 0407 	add.w	r4, sp, #7
 8007e6e:	46a4      	mov	ip, r4
 8007e70:	270a      	movs	r7, #10
 8007e72:	46a6      	mov	lr, r4
 8007e74:	460a      	mov	r2, r1
 8007e76:	fb91 f6f7 	sdiv	r6, r1, r7
 8007e7a:	fb07 1516 	mls	r5, r7, r6, r1
 8007e7e:	3530      	adds	r5, #48	; 0x30
 8007e80:	2a63      	cmp	r2, #99	; 0x63
 8007e82:	f104 34ff 	add.w	r4, r4, #4294967295
 8007e86:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007e8a:	4631      	mov	r1, r6
 8007e8c:	dcf1      	bgt.n	8007e72 <__exponent+0x22>
 8007e8e:	3130      	adds	r1, #48	; 0x30
 8007e90:	f1ae 0502 	sub.w	r5, lr, #2
 8007e94:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007e98:	1c44      	adds	r4, r0, #1
 8007e9a:	4629      	mov	r1, r5
 8007e9c:	4561      	cmp	r1, ip
 8007e9e:	d30a      	bcc.n	8007eb6 <__exponent+0x66>
 8007ea0:	f10d 0209 	add.w	r2, sp, #9
 8007ea4:	eba2 020e 	sub.w	r2, r2, lr
 8007ea8:	4565      	cmp	r5, ip
 8007eaa:	bf88      	it	hi
 8007eac:	2200      	movhi	r2, #0
 8007eae:	4413      	add	r3, r2
 8007eb0:	1a18      	subs	r0, r3, r0
 8007eb2:	b003      	add	sp, #12
 8007eb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007eb6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007eba:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007ebe:	e7ed      	b.n	8007e9c <__exponent+0x4c>
 8007ec0:	2330      	movs	r3, #48	; 0x30
 8007ec2:	3130      	adds	r1, #48	; 0x30
 8007ec4:	7083      	strb	r3, [r0, #2]
 8007ec6:	70c1      	strb	r1, [r0, #3]
 8007ec8:	1d03      	adds	r3, r0, #4
 8007eca:	e7f1      	b.n	8007eb0 <__exponent+0x60>

08007ecc <_printf_float>:
 8007ecc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ed0:	ed2d 8b02 	vpush	{d8}
 8007ed4:	b08d      	sub	sp, #52	; 0x34
 8007ed6:	460c      	mov	r4, r1
 8007ed8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007edc:	4616      	mov	r6, r2
 8007ede:	461f      	mov	r7, r3
 8007ee0:	4605      	mov	r5, r0
 8007ee2:	f001 fe13 	bl	8009b0c <_localeconv_r>
 8007ee6:	f8d0 a000 	ldr.w	sl, [r0]
 8007eea:	4650      	mov	r0, sl
 8007eec:	f7f8 f970 	bl	80001d0 <strlen>
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	930a      	str	r3, [sp, #40]	; 0x28
 8007ef4:	6823      	ldr	r3, [r4, #0]
 8007ef6:	9305      	str	r3, [sp, #20]
 8007ef8:	f8d8 3000 	ldr.w	r3, [r8]
 8007efc:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007f00:	3307      	adds	r3, #7
 8007f02:	f023 0307 	bic.w	r3, r3, #7
 8007f06:	f103 0208 	add.w	r2, r3, #8
 8007f0a:	f8c8 2000 	str.w	r2, [r8]
 8007f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f12:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007f16:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007f1a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007f1e:	9307      	str	r3, [sp, #28]
 8007f20:	f8cd 8018 	str.w	r8, [sp, #24]
 8007f24:	ee08 0a10 	vmov	s16, r0
 8007f28:	4b9f      	ldr	r3, [pc, #636]	; (80081a8 <_printf_float+0x2dc>)
 8007f2a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007f2e:	f04f 32ff 	mov.w	r2, #4294967295
 8007f32:	f7f8 fdfb 	bl	8000b2c <__aeabi_dcmpun>
 8007f36:	bb88      	cbnz	r0, 8007f9c <_printf_float+0xd0>
 8007f38:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007f3c:	4b9a      	ldr	r3, [pc, #616]	; (80081a8 <_printf_float+0x2dc>)
 8007f3e:	f04f 32ff 	mov.w	r2, #4294967295
 8007f42:	f7f8 fdd5 	bl	8000af0 <__aeabi_dcmple>
 8007f46:	bb48      	cbnz	r0, 8007f9c <_printf_float+0xd0>
 8007f48:	2200      	movs	r2, #0
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	4640      	mov	r0, r8
 8007f4e:	4649      	mov	r1, r9
 8007f50:	f7f8 fdc4 	bl	8000adc <__aeabi_dcmplt>
 8007f54:	b110      	cbz	r0, 8007f5c <_printf_float+0x90>
 8007f56:	232d      	movs	r3, #45	; 0x2d
 8007f58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f5c:	4b93      	ldr	r3, [pc, #588]	; (80081ac <_printf_float+0x2e0>)
 8007f5e:	4894      	ldr	r0, [pc, #592]	; (80081b0 <_printf_float+0x2e4>)
 8007f60:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007f64:	bf94      	ite	ls
 8007f66:	4698      	movls	r8, r3
 8007f68:	4680      	movhi	r8, r0
 8007f6a:	2303      	movs	r3, #3
 8007f6c:	6123      	str	r3, [r4, #16]
 8007f6e:	9b05      	ldr	r3, [sp, #20]
 8007f70:	f023 0204 	bic.w	r2, r3, #4
 8007f74:	6022      	str	r2, [r4, #0]
 8007f76:	f04f 0900 	mov.w	r9, #0
 8007f7a:	9700      	str	r7, [sp, #0]
 8007f7c:	4633      	mov	r3, r6
 8007f7e:	aa0b      	add	r2, sp, #44	; 0x2c
 8007f80:	4621      	mov	r1, r4
 8007f82:	4628      	mov	r0, r5
 8007f84:	f000 f9d8 	bl	8008338 <_printf_common>
 8007f88:	3001      	adds	r0, #1
 8007f8a:	f040 8090 	bne.w	80080ae <_printf_float+0x1e2>
 8007f8e:	f04f 30ff 	mov.w	r0, #4294967295
 8007f92:	b00d      	add	sp, #52	; 0x34
 8007f94:	ecbd 8b02 	vpop	{d8}
 8007f98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f9c:	4642      	mov	r2, r8
 8007f9e:	464b      	mov	r3, r9
 8007fa0:	4640      	mov	r0, r8
 8007fa2:	4649      	mov	r1, r9
 8007fa4:	f7f8 fdc2 	bl	8000b2c <__aeabi_dcmpun>
 8007fa8:	b140      	cbz	r0, 8007fbc <_printf_float+0xf0>
 8007faa:	464b      	mov	r3, r9
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	bfbc      	itt	lt
 8007fb0:	232d      	movlt	r3, #45	; 0x2d
 8007fb2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007fb6:	487f      	ldr	r0, [pc, #508]	; (80081b4 <_printf_float+0x2e8>)
 8007fb8:	4b7f      	ldr	r3, [pc, #508]	; (80081b8 <_printf_float+0x2ec>)
 8007fba:	e7d1      	b.n	8007f60 <_printf_float+0x94>
 8007fbc:	6863      	ldr	r3, [r4, #4]
 8007fbe:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007fc2:	9206      	str	r2, [sp, #24]
 8007fc4:	1c5a      	adds	r2, r3, #1
 8007fc6:	d13f      	bne.n	8008048 <_printf_float+0x17c>
 8007fc8:	2306      	movs	r3, #6
 8007fca:	6063      	str	r3, [r4, #4]
 8007fcc:	9b05      	ldr	r3, [sp, #20]
 8007fce:	6861      	ldr	r1, [r4, #4]
 8007fd0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	9303      	str	r3, [sp, #12]
 8007fd8:	ab0a      	add	r3, sp, #40	; 0x28
 8007fda:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007fde:	ab09      	add	r3, sp, #36	; 0x24
 8007fe0:	ec49 8b10 	vmov	d0, r8, r9
 8007fe4:	9300      	str	r3, [sp, #0]
 8007fe6:	6022      	str	r2, [r4, #0]
 8007fe8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007fec:	4628      	mov	r0, r5
 8007fee:	f7ff fecd 	bl	8007d8c <__cvt>
 8007ff2:	9b06      	ldr	r3, [sp, #24]
 8007ff4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007ff6:	2b47      	cmp	r3, #71	; 0x47
 8007ff8:	4680      	mov	r8, r0
 8007ffa:	d108      	bne.n	800800e <_printf_float+0x142>
 8007ffc:	1cc8      	adds	r0, r1, #3
 8007ffe:	db02      	blt.n	8008006 <_printf_float+0x13a>
 8008000:	6863      	ldr	r3, [r4, #4]
 8008002:	4299      	cmp	r1, r3
 8008004:	dd41      	ble.n	800808a <_printf_float+0x1be>
 8008006:	f1ab 0b02 	sub.w	fp, fp, #2
 800800a:	fa5f fb8b 	uxtb.w	fp, fp
 800800e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008012:	d820      	bhi.n	8008056 <_printf_float+0x18a>
 8008014:	3901      	subs	r1, #1
 8008016:	465a      	mov	r2, fp
 8008018:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800801c:	9109      	str	r1, [sp, #36]	; 0x24
 800801e:	f7ff ff17 	bl	8007e50 <__exponent>
 8008022:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008024:	1813      	adds	r3, r2, r0
 8008026:	2a01      	cmp	r2, #1
 8008028:	4681      	mov	r9, r0
 800802a:	6123      	str	r3, [r4, #16]
 800802c:	dc02      	bgt.n	8008034 <_printf_float+0x168>
 800802e:	6822      	ldr	r2, [r4, #0]
 8008030:	07d2      	lsls	r2, r2, #31
 8008032:	d501      	bpl.n	8008038 <_printf_float+0x16c>
 8008034:	3301      	adds	r3, #1
 8008036:	6123      	str	r3, [r4, #16]
 8008038:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800803c:	2b00      	cmp	r3, #0
 800803e:	d09c      	beq.n	8007f7a <_printf_float+0xae>
 8008040:	232d      	movs	r3, #45	; 0x2d
 8008042:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008046:	e798      	b.n	8007f7a <_printf_float+0xae>
 8008048:	9a06      	ldr	r2, [sp, #24]
 800804a:	2a47      	cmp	r2, #71	; 0x47
 800804c:	d1be      	bne.n	8007fcc <_printf_float+0x100>
 800804e:	2b00      	cmp	r3, #0
 8008050:	d1bc      	bne.n	8007fcc <_printf_float+0x100>
 8008052:	2301      	movs	r3, #1
 8008054:	e7b9      	b.n	8007fca <_printf_float+0xfe>
 8008056:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800805a:	d118      	bne.n	800808e <_printf_float+0x1c2>
 800805c:	2900      	cmp	r1, #0
 800805e:	6863      	ldr	r3, [r4, #4]
 8008060:	dd0b      	ble.n	800807a <_printf_float+0x1ae>
 8008062:	6121      	str	r1, [r4, #16]
 8008064:	b913      	cbnz	r3, 800806c <_printf_float+0x1a0>
 8008066:	6822      	ldr	r2, [r4, #0]
 8008068:	07d0      	lsls	r0, r2, #31
 800806a:	d502      	bpl.n	8008072 <_printf_float+0x1a6>
 800806c:	3301      	adds	r3, #1
 800806e:	440b      	add	r3, r1
 8008070:	6123      	str	r3, [r4, #16]
 8008072:	65a1      	str	r1, [r4, #88]	; 0x58
 8008074:	f04f 0900 	mov.w	r9, #0
 8008078:	e7de      	b.n	8008038 <_printf_float+0x16c>
 800807a:	b913      	cbnz	r3, 8008082 <_printf_float+0x1b6>
 800807c:	6822      	ldr	r2, [r4, #0]
 800807e:	07d2      	lsls	r2, r2, #31
 8008080:	d501      	bpl.n	8008086 <_printf_float+0x1ba>
 8008082:	3302      	adds	r3, #2
 8008084:	e7f4      	b.n	8008070 <_printf_float+0x1a4>
 8008086:	2301      	movs	r3, #1
 8008088:	e7f2      	b.n	8008070 <_printf_float+0x1a4>
 800808a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800808e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008090:	4299      	cmp	r1, r3
 8008092:	db05      	blt.n	80080a0 <_printf_float+0x1d4>
 8008094:	6823      	ldr	r3, [r4, #0]
 8008096:	6121      	str	r1, [r4, #16]
 8008098:	07d8      	lsls	r0, r3, #31
 800809a:	d5ea      	bpl.n	8008072 <_printf_float+0x1a6>
 800809c:	1c4b      	adds	r3, r1, #1
 800809e:	e7e7      	b.n	8008070 <_printf_float+0x1a4>
 80080a0:	2900      	cmp	r1, #0
 80080a2:	bfd4      	ite	le
 80080a4:	f1c1 0202 	rsble	r2, r1, #2
 80080a8:	2201      	movgt	r2, #1
 80080aa:	4413      	add	r3, r2
 80080ac:	e7e0      	b.n	8008070 <_printf_float+0x1a4>
 80080ae:	6823      	ldr	r3, [r4, #0]
 80080b0:	055a      	lsls	r2, r3, #21
 80080b2:	d407      	bmi.n	80080c4 <_printf_float+0x1f8>
 80080b4:	6923      	ldr	r3, [r4, #16]
 80080b6:	4642      	mov	r2, r8
 80080b8:	4631      	mov	r1, r6
 80080ba:	4628      	mov	r0, r5
 80080bc:	47b8      	blx	r7
 80080be:	3001      	adds	r0, #1
 80080c0:	d12c      	bne.n	800811c <_printf_float+0x250>
 80080c2:	e764      	b.n	8007f8e <_printf_float+0xc2>
 80080c4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80080c8:	f240 80e0 	bls.w	800828c <_printf_float+0x3c0>
 80080cc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80080d0:	2200      	movs	r2, #0
 80080d2:	2300      	movs	r3, #0
 80080d4:	f7f8 fcf8 	bl	8000ac8 <__aeabi_dcmpeq>
 80080d8:	2800      	cmp	r0, #0
 80080da:	d034      	beq.n	8008146 <_printf_float+0x27a>
 80080dc:	4a37      	ldr	r2, [pc, #220]	; (80081bc <_printf_float+0x2f0>)
 80080de:	2301      	movs	r3, #1
 80080e0:	4631      	mov	r1, r6
 80080e2:	4628      	mov	r0, r5
 80080e4:	47b8      	blx	r7
 80080e6:	3001      	adds	r0, #1
 80080e8:	f43f af51 	beq.w	8007f8e <_printf_float+0xc2>
 80080ec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80080f0:	429a      	cmp	r2, r3
 80080f2:	db02      	blt.n	80080fa <_printf_float+0x22e>
 80080f4:	6823      	ldr	r3, [r4, #0]
 80080f6:	07d8      	lsls	r0, r3, #31
 80080f8:	d510      	bpl.n	800811c <_printf_float+0x250>
 80080fa:	ee18 3a10 	vmov	r3, s16
 80080fe:	4652      	mov	r2, sl
 8008100:	4631      	mov	r1, r6
 8008102:	4628      	mov	r0, r5
 8008104:	47b8      	blx	r7
 8008106:	3001      	adds	r0, #1
 8008108:	f43f af41 	beq.w	8007f8e <_printf_float+0xc2>
 800810c:	f04f 0800 	mov.w	r8, #0
 8008110:	f104 091a 	add.w	r9, r4, #26
 8008114:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008116:	3b01      	subs	r3, #1
 8008118:	4543      	cmp	r3, r8
 800811a:	dc09      	bgt.n	8008130 <_printf_float+0x264>
 800811c:	6823      	ldr	r3, [r4, #0]
 800811e:	079b      	lsls	r3, r3, #30
 8008120:	f100 8105 	bmi.w	800832e <_printf_float+0x462>
 8008124:	68e0      	ldr	r0, [r4, #12]
 8008126:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008128:	4298      	cmp	r0, r3
 800812a:	bfb8      	it	lt
 800812c:	4618      	movlt	r0, r3
 800812e:	e730      	b.n	8007f92 <_printf_float+0xc6>
 8008130:	2301      	movs	r3, #1
 8008132:	464a      	mov	r2, r9
 8008134:	4631      	mov	r1, r6
 8008136:	4628      	mov	r0, r5
 8008138:	47b8      	blx	r7
 800813a:	3001      	adds	r0, #1
 800813c:	f43f af27 	beq.w	8007f8e <_printf_float+0xc2>
 8008140:	f108 0801 	add.w	r8, r8, #1
 8008144:	e7e6      	b.n	8008114 <_printf_float+0x248>
 8008146:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008148:	2b00      	cmp	r3, #0
 800814a:	dc39      	bgt.n	80081c0 <_printf_float+0x2f4>
 800814c:	4a1b      	ldr	r2, [pc, #108]	; (80081bc <_printf_float+0x2f0>)
 800814e:	2301      	movs	r3, #1
 8008150:	4631      	mov	r1, r6
 8008152:	4628      	mov	r0, r5
 8008154:	47b8      	blx	r7
 8008156:	3001      	adds	r0, #1
 8008158:	f43f af19 	beq.w	8007f8e <_printf_float+0xc2>
 800815c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008160:	4313      	orrs	r3, r2
 8008162:	d102      	bne.n	800816a <_printf_float+0x29e>
 8008164:	6823      	ldr	r3, [r4, #0]
 8008166:	07d9      	lsls	r1, r3, #31
 8008168:	d5d8      	bpl.n	800811c <_printf_float+0x250>
 800816a:	ee18 3a10 	vmov	r3, s16
 800816e:	4652      	mov	r2, sl
 8008170:	4631      	mov	r1, r6
 8008172:	4628      	mov	r0, r5
 8008174:	47b8      	blx	r7
 8008176:	3001      	adds	r0, #1
 8008178:	f43f af09 	beq.w	8007f8e <_printf_float+0xc2>
 800817c:	f04f 0900 	mov.w	r9, #0
 8008180:	f104 0a1a 	add.w	sl, r4, #26
 8008184:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008186:	425b      	negs	r3, r3
 8008188:	454b      	cmp	r3, r9
 800818a:	dc01      	bgt.n	8008190 <_printf_float+0x2c4>
 800818c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800818e:	e792      	b.n	80080b6 <_printf_float+0x1ea>
 8008190:	2301      	movs	r3, #1
 8008192:	4652      	mov	r2, sl
 8008194:	4631      	mov	r1, r6
 8008196:	4628      	mov	r0, r5
 8008198:	47b8      	blx	r7
 800819a:	3001      	adds	r0, #1
 800819c:	f43f aef7 	beq.w	8007f8e <_printf_float+0xc2>
 80081a0:	f109 0901 	add.w	r9, r9, #1
 80081a4:	e7ee      	b.n	8008184 <_printf_float+0x2b8>
 80081a6:	bf00      	nop
 80081a8:	7fefffff 	.word	0x7fefffff
 80081ac:	0800b140 	.word	0x0800b140
 80081b0:	0800b144 	.word	0x0800b144
 80081b4:	0800b14c 	.word	0x0800b14c
 80081b8:	0800b148 	.word	0x0800b148
 80081bc:	0800b150 	.word	0x0800b150
 80081c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80081c2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80081c4:	429a      	cmp	r2, r3
 80081c6:	bfa8      	it	ge
 80081c8:	461a      	movge	r2, r3
 80081ca:	2a00      	cmp	r2, #0
 80081cc:	4691      	mov	r9, r2
 80081ce:	dc37      	bgt.n	8008240 <_printf_float+0x374>
 80081d0:	f04f 0b00 	mov.w	fp, #0
 80081d4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80081d8:	f104 021a 	add.w	r2, r4, #26
 80081dc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80081de:	9305      	str	r3, [sp, #20]
 80081e0:	eba3 0309 	sub.w	r3, r3, r9
 80081e4:	455b      	cmp	r3, fp
 80081e6:	dc33      	bgt.n	8008250 <_printf_float+0x384>
 80081e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80081ec:	429a      	cmp	r2, r3
 80081ee:	db3b      	blt.n	8008268 <_printf_float+0x39c>
 80081f0:	6823      	ldr	r3, [r4, #0]
 80081f2:	07da      	lsls	r2, r3, #31
 80081f4:	d438      	bmi.n	8008268 <_printf_float+0x39c>
 80081f6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80081f8:	9b05      	ldr	r3, [sp, #20]
 80081fa:	9909      	ldr	r1, [sp, #36]	; 0x24
 80081fc:	1ad3      	subs	r3, r2, r3
 80081fe:	eba2 0901 	sub.w	r9, r2, r1
 8008202:	4599      	cmp	r9, r3
 8008204:	bfa8      	it	ge
 8008206:	4699      	movge	r9, r3
 8008208:	f1b9 0f00 	cmp.w	r9, #0
 800820c:	dc35      	bgt.n	800827a <_printf_float+0x3ae>
 800820e:	f04f 0800 	mov.w	r8, #0
 8008212:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008216:	f104 0a1a 	add.w	sl, r4, #26
 800821a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800821e:	1a9b      	subs	r3, r3, r2
 8008220:	eba3 0309 	sub.w	r3, r3, r9
 8008224:	4543      	cmp	r3, r8
 8008226:	f77f af79 	ble.w	800811c <_printf_float+0x250>
 800822a:	2301      	movs	r3, #1
 800822c:	4652      	mov	r2, sl
 800822e:	4631      	mov	r1, r6
 8008230:	4628      	mov	r0, r5
 8008232:	47b8      	blx	r7
 8008234:	3001      	adds	r0, #1
 8008236:	f43f aeaa 	beq.w	8007f8e <_printf_float+0xc2>
 800823a:	f108 0801 	add.w	r8, r8, #1
 800823e:	e7ec      	b.n	800821a <_printf_float+0x34e>
 8008240:	4613      	mov	r3, r2
 8008242:	4631      	mov	r1, r6
 8008244:	4642      	mov	r2, r8
 8008246:	4628      	mov	r0, r5
 8008248:	47b8      	blx	r7
 800824a:	3001      	adds	r0, #1
 800824c:	d1c0      	bne.n	80081d0 <_printf_float+0x304>
 800824e:	e69e      	b.n	8007f8e <_printf_float+0xc2>
 8008250:	2301      	movs	r3, #1
 8008252:	4631      	mov	r1, r6
 8008254:	4628      	mov	r0, r5
 8008256:	9205      	str	r2, [sp, #20]
 8008258:	47b8      	blx	r7
 800825a:	3001      	adds	r0, #1
 800825c:	f43f ae97 	beq.w	8007f8e <_printf_float+0xc2>
 8008260:	9a05      	ldr	r2, [sp, #20]
 8008262:	f10b 0b01 	add.w	fp, fp, #1
 8008266:	e7b9      	b.n	80081dc <_printf_float+0x310>
 8008268:	ee18 3a10 	vmov	r3, s16
 800826c:	4652      	mov	r2, sl
 800826e:	4631      	mov	r1, r6
 8008270:	4628      	mov	r0, r5
 8008272:	47b8      	blx	r7
 8008274:	3001      	adds	r0, #1
 8008276:	d1be      	bne.n	80081f6 <_printf_float+0x32a>
 8008278:	e689      	b.n	8007f8e <_printf_float+0xc2>
 800827a:	9a05      	ldr	r2, [sp, #20]
 800827c:	464b      	mov	r3, r9
 800827e:	4442      	add	r2, r8
 8008280:	4631      	mov	r1, r6
 8008282:	4628      	mov	r0, r5
 8008284:	47b8      	blx	r7
 8008286:	3001      	adds	r0, #1
 8008288:	d1c1      	bne.n	800820e <_printf_float+0x342>
 800828a:	e680      	b.n	8007f8e <_printf_float+0xc2>
 800828c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800828e:	2a01      	cmp	r2, #1
 8008290:	dc01      	bgt.n	8008296 <_printf_float+0x3ca>
 8008292:	07db      	lsls	r3, r3, #31
 8008294:	d538      	bpl.n	8008308 <_printf_float+0x43c>
 8008296:	2301      	movs	r3, #1
 8008298:	4642      	mov	r2, r8
 800829a:	4631      	mov	r1, r6
 800829c:	4628      	mov	r0, r5
 800829e:	47b8      	blx	r7
 80082a0:	3001      	adds	r0, #1
 80082a2:	f43f ae74 	beq.w	8007f8e <_printf_float+0xc2>
 80082a6:	ee18 3a10 	vmov	r3, s16
 80082aa:	4652      	mov	r2, sl
 80082ac:	4631      	mov	r1, r6
 80082ae:	4628      	mov	r0, r5
 80082b0:	47b8      	blx	r7
 80082b2:	3001      	adds	r0, #1
 80082b4:	f43f ae6b 	beq.w	8007f8e <_printf_float+0xc2>
 80082b8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80082bc:	2200      	movs	r2, #0
 80082be:	2300      	movs	r3, #0
 80082c0:	f7f8 fc02 	bl	8000ac8 <__aeabi_dcmpeq>
 80082c4:	b9d8      	cbnz	r0, 80082fe <_printf_float+0x432>
 80082c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082c8:	f108 0201 	add.w	r2, r8, #1
 80082cc:	3b01      	subs	r3, #1
 80082ce:	4631      	mov	r1, r6
 80082d0:	4628      	mov	r0, r5
 80082d2:	47b8      	blx	r7
 80082d4:	3001      	adds	r0, #1
 80082d6:	d10e      	bne.n	80082f6 <_printf_float+0x42a>
 80082d8:	e659      	b.n	8007f8e <_printf_float+0xc2>
 80082da:	2301      	movs	r3, #1
 80082dc:	4652      	mov	r2, sl
 80082de:	4631      	mov	r1, r6
 80082e0:	4628      	mov	r0, r5
 80082e2:	47b8      	blx	r7
 80082e4:	3001      	adds	r0, #1
 80082e6:	f43f ae52 	beq.w	8007f8e <_printf_float+0xc2>
 80082ea:	f108 0801 	add.w	r8, r8, #1
 80082ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082f0:	3b01      	subs	r3, #1
 80082f2:	4543      	cmp	r3, r8
 80082f4:	dcf1      	bgt.n	80082da <_printf_float+0x40e>
 80082f6:	464b      	mov	r3, r9
 80082f8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80082fc:	e6dc      	b.n	80080b8 <_printf_float+0x1ec>
 80082fe:	f04f 0800 	mov.w	r8, #0
 8008302:	f104 0a1a 	add.w	sl, r4, #26
 8008306:	e7f2      	b.n	80082ee <_printf_float+0x422>
 8008308:	2301      	movs	r3, #1
 800830a:	4642      	mov	r2, r8
 800830c:	e7df      	b.n	80082ce <_printf_float+0x402>
 800830e:	2301      	movs	r3, #1
 8008310:	464a      	mov	r2, r9
 8008312:	4631      	mov	r1, r6
 8008314:	4628      	mov	r0, r5
 8008316:	47b8      	blx	r7
 8008318:	3001      	adds	r0, #1
 800831a:	f43f ae38 	beq.w	8007f8e <_printf_float+0xc2>
 800831e:	f108 0801 	add.w	r8, r8, #1
 8008322:	68e3      	ldr	r3, [r4, #12]
 8008324:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008326:	1a5b      	subs	r3, r3, r1
 8008328:	4543      	cmp	r3, r8
 800832a:	dcf0      	bgt.n	800830e <_printf_float+0x442>
 800832c:	e6fa      	b.n	8008124 <_printf_float+0x258>
 800832e:	f04f 0800 	mov.w	r8, #0
 8008332:	f104 0919 	add.w	r9, r4, #25
 8008336:	e7f4      	b.n	8008322 <_printf_float+0x456>

08008338 <_printf_common>:
 8008338:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800833c:	4616      	mov	r6, r2
 800833e:	4699      	mov	r9, r3
 8008340:	688a      	ldr	r2, [r1, #8]
 8008342:	690b      	ldr	r3, [r1, #16]
 8008344:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008348:	4293      	cmp	r3, r2
 800834a:	bfb8      	it	lt
 800834c:	4613      	movlt	r3, r2
 800834e:	6033      	str	r3, [r6, #0]
 8008350:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008354:	4607      	mov	r7, r0
 8008356:	460c      	mov	r4, r1
 8008358:	b10a      	cbz	r2, 800835e <_printf_common+0x26>
 800835a:	3301      	adds	r3, #1
 800835c:	6033      	str	r3, [r6, #0]
 800835e:	6823      	ldr	r3, [r4, #0]
 8008360:	0699      	lsls	r1, r3, #26
 8008362:	bf42      	ittt	mi
 8008364:	6833      	ldrmi	r3, [r6, #0]
 8008366:	3302      	addmi	r3, #2
 8008368:	6033      	strmi	r3, [r6, #0]
 800836a:	6825      	ldr	r5, [r4, #0]
 800836c:	f015 0506 	ands.w	r5, r5, #6
 8008370:	d106      	bne.n	8008380 <_printf_common+0x48>
 8008372:	f104 0a19 	add.w	sl, r4, #25
 8008376:	68e3      	ldr	r3, [r4, #12]
 8008378:	6832      	ldr	r2, [r6, #0]
 800837a:	1a9b      	subs	r3, r3, r2
 800837c:	42ab      	cmp	r3, r5
 800837e:	dc26      	bgt.n	80083ce <_printf_common+0x96>
 8008380:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008384:	1e13      	subs	r3, r2, #0
 8008386:	6822      	ldr	r2, [r4, #0]
 8008388:	bf18      	it	ne
 800838a:	2301      	movne	r3, #1
 800838c:	0692      	lsls	r2, r2, #26
 800838e:	d42b      	bmi.n	80083e8 <_printf_common+0xb0>
 8008390:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008394:	4649      	mov	r1, r9
 8008396:	4638      	mov	r0, r7
 8008398:	47c0      	blx	r8
 800839a:	3001      	adds	r0, #1
 800839c:	d01e      	beq.n	80083dc <_printf_common+0xa4>
 800839e:	6823      	ldr	r3, [r4, #0]
 80083a0:	68e5      	ldr	r5, [r4, #12]
 80083a2:	6832      	ldr	r2, [r6, #0]
 80083a4:	f003 0306 	and.w	r3, r3, #6
 80083a8:	2b04      	cmp	r3, #4
 80083aa:	bf08      	it	eq
 80083ac:	1aad      	subeq	r5, r5, r2
 80083ae:	68a3      	ldr	r3, [r4, #8]
 80083b0:	6922      	ldr	r2, [r4, #16]
 80083b2:	bf0c      	ite	eq
 80083b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80083b8:	2500      	movne	r5, #0
 80083ba:	4293      	cmp	r3, r2
 80083bc:	bfc4      	itt	gt
 80083be:	1a9b      	subgt	r3, r3, r2
 80083c0:	18ed      	addgt	r5, r5, r3
 80083c2:	2600      	movs	r6, #0
 80083c4:	341a      	adds	r4, #26
 80083c6:	42b5      	cmp	r5, r6
 80083c8:	d11a      	bne.n	8008400 <_printf_common+0xc8>
 80083ca:	2000      	movs	r0, #0
 80083cc:	e008      	b.n	80083e0 <_printf_common+0xa8>
 80083ce:	2301      	movs	r3, #1
 80083d0:	4652      	mov	r2, sl
 80083d2:	4649      	mov	r1, r9
 80083d4:	4638      	mov	r0, r7
 80083d6:	47c0      	blx	r8
 80083d8:	3001      	adds	r0, #1
 80083da:	d103      	bne.n	80083e4 <_printf_common+0xac>
 80083dc:	f04f 30ff 	mov.w	r0, #4294967295
 80083e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083e4:	3501      	adds	r5, #1
 80083e6:	e7c6      	b.n	8008376 <_printf_common+0x3e>
 80083e8:	18e1      	adds	r1, r4, r3
 80083ea:	1c5a      	adds	r2, r3, #1
 80083ec:	2030      	movs	r0, #48	; 0x30
 80083ee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80083f2:	4422      	add	r2, r4
 80083f4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80083f8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80083fc:	3302      	adds	r3, #2
 80083fe:	e7c7      	b.n	8008390 <_printf_common+0x58>
 8008400:	2301      	movs	r3, #1
 8008402:	4622      	mov	r2, r4
 8008404:	4649      	mov	r1, r9
 8008406:	4638      	mov	r0, r7
 8008408:	47c0      	blx	r8
 800840a:	3001      	adds	r0, #1
 800840c:	d0e6      	beq.n	80083dc <_printf_common+0xa4>
 800840e:	3601      	adds	r6, #1
 8008410:	e7d9      	b.n	80083c6 <_printf_common+0x8e>
	...

08008414 <_printf_i>:
 8008414:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008418:	460c      	mov	r4, r1
 800841a:	4691      	mov	r9, r2
 800841c:	7e27      	ldrb	r7, [r4, #24]
 800841e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008420:	2f78      	cmp	r7, #120	; 0x78
 8008422:	4680      	mov	r8, r0
 8008424:	469a      	mov	sl, r3
 8008426:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800842a:	d807      	bhi.n	800843c <_printf_i+0x28>
 800842c:	2f62      	cmp	r7, #98	; 0x62
 800842e:	d80a      	bhi.n	8008446 <_printf_i+0x32>
 8008430:	2f00      	cmp	r7, #0
 8008432:	f000 80d8 	beq.w	80085e6 <_printf_i+0x1d2>
 8008436:	2f58      	cmp	r7, #88	; 0x58
 8008438:	f000 80a3 	beq.w	8008582 <_printf_i+0x16e>
 800843c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008440:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008444:	e03a      	b.n	80084bc <_printf_i+0xa8>
 8008446:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800844a:	2b15      	cmp	r3, #21
 800844c:	d8f6      	bhi.n	800843c <_printf_i+0x28>
 800844e:	a001      	add	r0, pc, #4	; (adr r0, 8008454 <_printf_i+0x40>)
 8008450:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008454:	080084ad 	.word	0x080084ad
 8008458:	080084c1 	.word	0x080084c1
 800845c:	0800843d 	.word	0x0800843d
 8008460:	0800843d 	.word	0x0800843d
 8008464:	0800843d 	.word	0x0800843d
 8008468:	0800843d 	.word	0x0800843d
 800846c:	080084c1 	.word	0x080084c1
 8008470:	0800843d 	.word	0x0800843d
 8008474:	0800843d 	.word	0x0800843d
 8008478:	0800843d 	.word	0x0800843d
 800847c:	0800843d 	.word	0x0800843d
 8008480:	080085cd 	.word	0x080085cd
 8008484:	080084f1 	.word	0x080084f1
 8008488:	080085af 	.word	0x080085af
 800848c:	0800843d 	.word	0x0800843d
 8008490:	0800843d 	.word	0x0800843d
 8008494:	080085ef 	.word	0x080085ef
 8008498:	0800843d 	.word	0x0800843d
 800849c:	080084f1 	.word	0x080084f1
 80084a0:	0800843d 	.word	0x0800843d
 80084a4:	0800843d 	.word	0x0800843d
 80084a8:	080085b7 	.word	0x080085b7
 80084ac:	680b      	ldr	r3, [r1, #0]
 80084ae:	1d1a      	adds	r2, r3, #4
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	600a      	str	r2, [r1, #0]
 80084b4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80084b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80084bc:	2301      	movs	r3, #1
 80084be:	e0a3      	b.n	8008608 <_printf_i+0x1f4>
 80084c0:	6825      	ldr	r5, [r4, #0]
 80084c2:	6808      	ldr	r0, [r1, #0]
 80084c4:	062e      	lsls	r6, r5, #24
 80084c6:	f100 0304 	add.w	r3, r0, #4
 80084ca:	d50a      	bpl.n	80084e2 <_printf_i+0xce>
 80084cc:	6805      	ldr	r5, [r0, #0]
 80084ce:	600b      	str	r3, [r1, #0]
 80084d0:	2d00      	cmp	r5, #0
 80084d2:	da03      	bge.n	80084dc <_printf_i+0xc8>
 80084d4:	232d      	movs	r3, #45	; 0x2d
 80084d6:	426d      	negs	r5, r5
 80084d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80084dc:	485e      	ldr	r0, [pc, #376]	; (8008658 <_printf_i+0x244>)
 80084de:	230a      	movs	r3, #10
 80084e0:	e019      	b.n	8008516 <_printf_i+0x102>
 80084e2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80084e6:	6805      	ldr	r5, [r0, #0]
 80084e8:	600b      	str	r3, [r1, #0]
 80084ea:	bf18      	it	ne
 80084ec:	b22d      	sxthne	r5, r5
 80084ee:	e7ef      	b.n	80084d0 <_printf_i+0xbc>
 80084f0:	680b      	ldr	r3, [r1, #0]
 80084f2:	6825      	ldr	r5, [r4, #0]
 80084f4:	1d18      	adds	r0, r3, #4
 80084f6:	6008      	str	r0, [r1, #0]
 80084f8:	0628      	lsls	r0, r5, #24
 80084fa:	d501      	bpl.n	8008500 <_printf_i+0xec>
 80084fc:	681d      	ldr	r5, [r3, #0]
 80084fe:	e002      	b.n	8008506 <_printf_i+0xf2>
 8008500:	0669      	lsls	r1, r5, #25
 8008502:	d5fb      	bpl.n	80084fc <_printf_i+0xe8>
 8008504:	881d      	ldrh	r5, [r3, #0]
 8008506:	4854      	ldr	r0, [pc, #336]	; (8008658 <_printf_i+0x244>)
 8008508:	2f6f      	cmp	r7, #111	; 0x6f
 800850a:	bf0c      	ite	eq
 800850c:	2308      	moveq	r3, #8
 800850e:	230a      	movne	r3, #10
 8008510:	2100      	movs	r1, #0
 8008512:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008516:	6866      	ldr	r6, [r4, #4]
 8008518:	60a6      	str	r6, [r4, #8]
 800851a:	2e00      	cmp	r6, #0
 800851c:	bfa2      	ittt	ge
 800851e:	6821      	ldrge	r1, [r4, #0]
 8008520:	f021 0104 	bicge.w	r1, r1, #4
 8008524:	6021      	strge	r1, [r4, #0]
 8008526:	b90d      	cbnz	r5, 800852c <_printf_i+0x118>
 8008528:	2e00      	cmp	r6, #0
 800852a:	d04d      	beq.n	80085c8 <_printf_i+0x1b4>
 800852c:	4616      	mov	r6, r2
 800852e:	fbb5 f1f3 	udiv	r1, r5, r3
 8008532:	fb03 5711 	mls	r7, r3, r1, r5
 8008536:	5dc7      	ldrb	r7, [r0, r7]
 8008538:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800853c:	462f      	mov	r7, r5
 800853e:	42bb      	cmp	r3, r7
 8008540:	460d      	mov	r5, r1
 8008542:	d9f4      	bls.n	800852e <_printf_i+0x11a>
 8008544:	2b08      	cmp	r3, #8
 8008546:	d10b      	bne.n	8008560 <_printf_i+0x14c>
 8008548:	6823      	ldr	r3, [r4, #0]
 800854a:	07df      	lsls	r7, r3, #31
 800854c:	d508      	bpl.n	8008560 <_printf_i+0x14c>
 800854e:	6923      	ldr	r3, [r4, #16]
 8008550:	6861      	ldr	r1, [r4, #4]
 8008552:	4299      	cmp	r1, r3
 8008554:	bfde      	ittt	le
 8008556:	2330      	movle	r3, #48	; 0x30
 8008558:	f806 3c01 	strble.w	r3, [r6, #-1]
 800855c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008560:	1b92      	subs	r2, r2, r6
 8008562:	6122      	str	r2, [r4, #16]
 8008564:	f8cd a000 	str.w	sl, [sp]
 8008568:	464b      	mov	r3, r9
 800856a:	aa03      	add	r2, sp, #12
 800856c:	4621      	mov	r1, r4
 800856e:	4640      	mov	r0, r8
 8008570:	f7ff fee2 	bl	8008338 <_printf_common>
 8008574:	3001      	adds	r0, #1
 8008576:	d14c      	bne.n	8008612 <_printf_i+0x1fe>
 8008578:	f04f 30ff 	mov.w	r0, #4294967295
 800857c:	b004      	add	sp, #16
 800857e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008582:	4835      	ldr	r0, [pc, #212]	; (8008658 <_printf_i+0x244>)
 8008584:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008588:	6823      	ldr	r3, [r4, #0]
 800858a:	680e      	ldr	r6, [r1, #0]
 800858c:	061f      	lsls	r7, r3, #24
 800858e:	f856 5b04 	ldr.w	r5, [r6], #4
 8008592:	600e      	str	r6, [r1, #0]
 8008594:	d514      	bpl.n	80085c0 <_printf_i+0x1ac>
 8008596:	07d9      	lsls	r1, r3, #31
 8008598:	bf44      	itt	mi
 800859a:	f043 0320 	orrmi.w	r3, r3, #32
 800859e:	6023      	strmi	r3, [r4, #0]
 80085a0:	b91d      	cbnz	r5, 80085aa <_printf_i+0x196>
 80085a2:	6823      	ldr	r3, [r4, #0]
 80085a4:	f023 0320 	bic.w	r3, r3, #32
 80085a8:	6023      	str	r3, [r4, #0]
 80085aa:	2310      	movs	r3, #16
 80085ac:	e7b0      	b.n	8008510 <_printf_i+0xfc>
 80085ae:	6823      	ldr	r3, [r4, #0]
 80085b0:	f043 0320 	orr.w	r3, r3, #32
 80085b4:	6023      	str	r3, [r4, #0]
 80085b6:	2378      	movs	r3, #120	; 0x78
 80085b8:	4828      	ldr	r0, [pc, #160]	; (800865c <_printf_i+0x248>)
 80085ba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80085be:	e7e3      	b.n	8008588 <_printf_i+0x174>
 80085c0:	065e      	lsls	r6, r3, #25
 80085c2:	bf48      	it	mi
 80085c4:	b2ad      	uxthmi	r5, r5
 80085c6:	e7e6      	b.n	8008596 <_printf_i+0x182>
 80085c8:	4616      	mov	r6, r2
 80085ca:	e7bb      	b.n	8008544 <_printf_i+0x130>
 80085cc:	680b      	ldr	r3, [r1, #0]
 80085ce:	6826      	ldr	r6, [r4, #0]
 80085d0:	6960      	ldr	r0, [r4, #20]
 80085d2:	1d1d      	adds	r5, r3, #4
 80085d4:	600d      	str	r5, [r1, #0]
 80085d6:	0635      	lsls	r5, r6, #24
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	d501      	bpl.n	80085e0 <_printf_i+0x1cc>
 80085dc:	6018      	str	r0, [r3, #0]
 80085de:	e002      	b.n	80085e6 <_printf_i+0x1d2>
 80085e0:	0671      	lsls	r1, r6, #25
 80085e2:	d5fb      	bpl.n	80085dc <_printf_i+0x1c8>
 80085e4:	8018      	strh	r0, [r3, #0]
 80085e6:	2300      	movs	r3, #0
 80085e8:	6123      	str	r3, [r4, #16]
 80085ea:	4616      	mov	r6, r2
 80085ec:	e7ba      	b.n	8008564 <_printf_i+0x150>
 80085ee:	680b      	ldr	r3, [r1, #0]
 80085f0:	1d1a      	adds	r2, r3, #4
 80085f2:	600a      	str	r2, [r1, #0]
 80085f4:	681e      	ldr	r6, [r3, #0]
 80085f6:	6862      	ldr	r2, [r4, #4]
 80085f8:	2100      	movs	r1, #0
 80085fa:	4630      	mov	r0, r6
 80085fc:	f7f7 fdf0 	bl	80001e0 <memchr>
 8008600:	b108      	cbz	r0, 8008606 <_printf_i+0x1f2>
 8008602:	1b80      	subs	r0, r0, r6
 8008604:	6060      	str	r0, [r4, #4]
 8008606:	6863      	ldr	r3, [r4, #4]
 8008608:	6123      	str	r3, [r4, #16]
 800860a:	2300      	movs	r3, #0
 800860c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008610:	e7a8      	b.n	8008564 <_printf_i+0x150>
 8008612:	6923      	ldr	r3, [r4, #16]
 8008614:	4632      	mov	r2, r6
 8008616:	4649      	mov	r1, r9
 8008618:	4640      	mov	r0, r8
 800861a:	47d0      	blx	sl
 800861c:	3001      	adds	r0, #1
 800861e:	d0ab      	beq.n	8008578 <_printf_i+0x164>
 8008620:	6823      	ldr	r3, [r4, #0]
 8008622:	079b      	lsls	r3, r3, #30
 8008624:	d413      	bmi.n	800864e <_printf_i+0x23a>
 8008626:	68e0      	ldr	r0, [r4, #12]
 8008628:	9b03      	ldr	r3, [sp, #12]
 800862a:	4298      	cmp	r0, r3
 800862c:	bfb8      	it	lt
 800862e:	4618      	movlt	r0, r3
 8008630:	e7a4      	b.n	800857c <_printf_i+0x168>
 8008632:	2301      	movs	r3, #1
 8008634:	4632      	mov	r2, r6
 8008636:	4649      	mov	r1, r9
 8008638:	4640      	mov	r0, r8
 800863a:	47d0      	blx	sl
 800863c:	3001      	adds	r0, #1
 800863e:	d09b      	beq.n	8008578 <_printf_i+0x164>
 8008640:	3501      	adds	r5, #1
 8008642:	68e3      	ldr	r3, [r4, #12]
 8008644:	9903      	ldr	r1, [sp, #12]
 8008646:	1a5b      	subs	r3, r3, r1
 8008648:	42ab      	cmp	r3, r5
 800864a:	dcf2      	bgt.n	8008632 <_printf_i+0x21e>
 800864c:	e7eb      	b.n	8008626 <_printf_i+0x212>
 800864e:	2500      	movs	r5, #0
 8008650:	f104 0619 	add.w	r6, r4, #25
 8008654:	e7f5      	b.n	8008642 <_printf_i+0x22e>
 8008656:	bf00      	nop
 8008658:	0800b152 	.word	0x0800b152
 800865c:	0800b163 	.word	0x0800b163

08008660 <iprintf>:
 8008660:	b40f      	push	{r0, r1, r2, r3}
 8008662:	4b0a      	ldr	r3, [pc, #40]	; (800868c <iprintf+0x2c>)
 8008664:	b513      	push	{r0, r1, r4, lr}
 8008666:	681c      	ldr	r4, [r3, #0]
 8008668:	b124      	cbz	r4, 8008674 <iprintf+0x14>
 800866a:	69a3      	ldr	r3, [r4, #24]
 800866c:	b913      	cbnz	r3, 8008674 <iprintf+0x14>
 800866e:	4620      	mov	r0, r4
 8008670:	f001 f99c 	bl	80099ac <__sinit>
 8008674:	ab05      	add	r3, sp, #20
 8008676:	9a04      	ldr	r2, [sp, #16]
 8008678:	68a1      	ldr	r1, [r4, #8]
 800867a:	9301      	str	r3, [sp, #4]
 800867c:	4620      	mov	r0, r4
 800867e:	f002 f877 	bl	800a770 <_vfiprintf_r>
 8008682:	b002      	add	sp, #8
 8008684:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008688:	b004      	add	sp, #16
 800868a:	4770      	bx	lr
 800868c:	2000002c 	.word	0x2000002c

08008690 <_puts_r>:
 8008690:	b570      	push	{r4, r5, r6, lr}
 8008692:	460e      	mov	r6, r1
 8008694:	4605      	mov	r5, r0
 8008696:	b118      	cbz	r0, 80086a0 <_puts_r+0x10>
 8008698:	6983      	ldr	r3, [r0, #24]
 800869a:	b90b      	cbnz	r3, 80086a0 <_puts_r+0x10>
 800869c:	f001 f986 	bl	80099ac <__sinit>
 80086a0:	69ab      	ldr	r3, [r5, #24]
 80086a2:	68ac      	ldr	r4, [r5, #8]
 80086a4:	b913      	cbnz	r3, 80086ac <_puts_r+0x1c>
 80086a6:	4628      	mov	r0, r5
 80086a8:	f001 f980 	bl	80099ac <__sinit>
 80086ac:	4b2c      	ldr	r3, [pc, #176]	; (8008760 <_puts_r+0xd0>)
 80086ae:	429c      	cmp	r4, r3
 80086b0:	d120      	bne.n	80086f4 <_puts_r+0x64>
 80086b2:	686c      	ldr	r4, [r5, #4]
 80086b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80086b6:	07db      	lsls	r3, r3, #31
 80086b8:	d405      	bmi.n	80086c6 <_puts_r+0x36>
 80086ba:	89a3      	ldrh	r3, [r4, #12]
 80086bc:	0598      	lsls	r0, r3, #22
 80086be:	d402      	bmi.n	80086c6 <_puts_r+0x36>
 80086c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80086c2:	f001 fa28 	bl	8009b16 <__retarget_lock_acquire_recursive>
 80086c6:	89a3      	ldrh	r3, [r4, #12]
 80086c8:	0719      	lsls	r1, r3, #28
 80086ca:	d51d      	bpl.n	8008708 <_puts_r+0x78>
 80086cc:	6923      	ldr	r3, [r4, #16]
 80086ce:	b1db      	cbz	r3, 8008708 <_puts_r+0x78>
 80086d0:	3e01      	subs	r6, #1
 80086d2:	68a3      	ldr	r3, [r4, #8]
 80086d4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80086d8:	3b01      	subs	r3, #1
 80086da:	60a3      	str	r3, [r4, #8]
 80086dc:	bb39      	cbnz	r1, 800872e <_puts_r+0x9e>
 80086de:	2b00      	cmp	r3, #0
 80086e0:	da38      	bge.n	8008754 <_puts_r+0xc4>
 80086e2:	4622      	mov	r2, r4
 80086e4:	210a      	movs	r1, #10
 80086e6:	4628      	mov	r0, r5
 80086e8:	f000 f8ee 	bl	80088c8 <__swbuf_r>
 80086ec:	3001      	adds	r0, #1
 80086ee:	d011      	beq.n	8008714 <_puts_r+0x84>
 80086f0:	250a      	movs	r5, #10
 80086f2:	e011      	b.n	8008718 <_puts_r+0x88>
 80086f4:	4b1b      	ldr	r3, [pc, #108]	; (8008764 <_puts_r+0xd4>)
 80086f6:	429c      	cmp	r4, r3
 80086f8:	d101      	bne.n	80086fe <_puts_r+0x6e>
 80086fa:	68ac      	ldr	r4, [r5, #8]
 80086fc:	e7da      	b.n	80086b4 <_puts_r+0x24>
 80086fe:	4b1a      	ldr	r3, [pc, #104]	; (8008768 <_puts_r+0xd8>)
 8008700:	429c      	cmp	r4, r3
 8008702:	bf08      	it	eq
 8008704:	68ec      	ldreq	r4, [r5, #12]
 8008706:	e7d5      	b.n	80086b4 <_puts_r+0x24>
 8008708:	4621      	mov	r1, r4
 800870a:	4628      	mov	r0, r5
 800870c:	f000 f92e 	bl	800896c <__swsetup_r>
 8008710:	2800      	cmp	r0, #0
 8008712:	d0dd      	beq.n	80086d0 <_puts_r+0x40>
 8008714:	f04f 35ff 	mov.w	r5, #4294967295
 8008718:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800871a:	07da      	lsls	r2, r3, #31
 800871c:	d405      	bmi.n	800872a <_puts_r+0x9a>
 800871e:	89a3      	ldrh	r3, [r4, #12]
 8008720:	059b      	lsls	r3, r3, #22
 8008722:	d402      	bmi.n	800872a <_puts_r+0x9a>
 8008724:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008726:	f001 f9f7 	bl	8009b18 <__retarget_lock_release_recursive>
 800872a:	4628      	mov	r0, r5
 800872c:	bd70      	pop	{r4, r5, r6, pc}
 800872e:	2b00      	cmp	r3, #0
 8008730:	da04      	bge.n	800873c <_puts_r+0xac>
 8008732:	69a2      	ldr	r2, [r4, #24]
 8008734:	429a      	cmp	r2, r3
 8008736:	dc06      	bgt.n	8008746 <_puts_r+0xb6>
 8008738:	290a      	cmp	r1, #10
 800873a:	d004      	beq.n	8008746 <_puts_r+0xb6>
 800873c:	6823      	ldr	r3, [r4, #0]
 800873e:	1c5a      	adds	r2, r3, #1
 8008740:	6022      	str	r2, [r4, #0]
 8008742:	7019      	strb	r1, [r3, #0]
 8008744:	e7c5      	b.n	80086d2 <_puts_r+0x42>
 8008746:	4622      	mov	r2, r4
 8008748:	4628      	mov	r0, r5
 800874a:	f000 f8bd 	bl	80088c8 <__swbuf_r>
 800874e:	3001      	adds	r0, #1
 8008750:	d1bf      	bne.n	80086d2 <_puts_r+0x42>
 8008752:	e7df      	b.n	8008714 <_puts_r+0x84>
 8008754:	6823      	ldr	r3, [r4, #0]
 8008756:	250a      	movs	r5, #10
 8008758:	1c5a      	adds	r2, r3, #1
 800875a:	6022      	str	r2, [r4, #0]
 800875c:	701d      	strb	r5, [r3, #0]
 800875e:	e7db      	b.n	8008718 <_puts_r+0x88>
 8008760:	0800b2c8 	.word	0x0800b2c8
 8008764:	0800b2e8 	.word	0x0800b2e8
 8008768:	0800b2a8 	.word	0x0800b2a8

0800876c <puts>:
 800876c:	4b02      	ldr	r3, [pc, #8]	; (8008778 <puts+0xc>)
 800876e:	4601      	mov	r1, r0
 8008770:	6818      	ldr	r0, [r3, #0]
 8008772:	f7ff bf8d 	b.w	8008690 <_puts_r>
 8008776:	bf00      	nop
 8008778:	2000002c 	.word	0x2000002c

0800877c <siprintf>:
 800877c:	b40e      	push	{r1, r2, r3}
 800877e:	b500      	push	{lr}
 8008780:	b09c      	sub	sp, #112	; 0x70
 8008782:	ab1d      	add	r3, sp, #116	; 0x74
 8008784:	9002      	str	r0, [sp, #8]
 8008786:	9006      	str	r0, [sp, #24]
 8008788:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800878c:	4809      	ldr	r0, [pc, #36]	; (80087b4 <siprintf+0x38>)
 800878e:	9107      	str	r1, [sp, #28]
 8008790:	9104      	str	r1, [sp, #16]
 8008792:	4909      	ldr	r1, [pc, #36]	; (80087b8 <siprintf+0x3c>)
 8008794:	f853 2b04 	ldr.w	r2, [r3], #4
 8008798:	9105      	str	r1, [sp, #20]
 800879a:	6800      	ldr	r0, [r0, #0]
 800879c:	9301      	str	r3, [sp, #4]
 800879e:	a902      	add	r1, sp, #8
 80087a0:	f001 febc 	bl	800a51c <_svfiprintf_r>
 80087a4:	9b02      	ldr	r3, [sp, #8]
 80087a6:	2200      	movs	r2, #0
 80087a8:	701a      	strb	r2, [r3, #0]
 80087aa:	b01c      	add	sp, #112	; 0x70
 80087ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80087b0:	b003      	add	sp, #12
 80087b2:	4770      	bx	lr
 80087b4:	2000002c 	.word	0x2000002c
 80087b8:	ffff0208 	.word	0xffff0208

080087bc <strncpy>:
 80087bc:	b510      	push	{r4, lr}
 80087be:	3901      	subs	r1, #1
 80087c0:	4603      	mov	r3, r0
 80087c2:	b132      	cbz	r2, 80087d2 <strncpy+0x16>
 80087c4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80087c8:	f803 4b01 	strb.w	r4, [r3], #1
 80087cc:	3a01      	subs	r2, #1
 80087ce:	2c00      	cmp	r4, #0
 80087d0:	d1f7      	bne.n	80087c2 <strncpy+0x6>
 80087d2:	441a      	add	r2, r3
 80087d4:	2100      	movs	r1, #0
 80087d6:	4293      	cmp	r3, r2
 80087d8:	d100      	bne.n	80087dc <strncpy+0x20>
 80087da:	bd10      	pop	{r4, pc}
 80087dc:	f803 1b01 	strb.w	r1, [r3], #1
 80087e0:	e7f9      	b.n	80087d6 <strncpy+0x1a>

080087e2 <strstr>:
 80087e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80087e4:	780c      	ldrb	r4, [r1, #0]
 80087e6:	b164      	cbz	r4, 8008802 <strstr+0x20>
 80087e8:	4603      	mov	r3, r0
 80087ea:	781a      	ldrb	r2, [r3, #0]
 80087ec:	4618      	mov	r0, r3
 80087ee:	1c5e      	adds	r6, r3, #1
 80087f0:	b90a      	cbnz	r2, 80087f6 <strstr+0x14>
 80087f2:	4610      	mov	r0, r2
 80087f4:	e005      	b.n	8008802 <strstr+0x20>
 80087f6:	4294      	cmp	r4, r2
 80087f8:	d108      	bne.n	800880c <strstr+0x2a>
 80087fa:	460d      	mov	r5, r1
 80087fc:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8008800:	b902      	cbnz	r2, 8008804 <strstr+0x22>
 8008802:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008804:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8008808:	4297      	cmp	r7, r2
 800880a:	d0f7      	beq.n	80087fc <strstr+0x1a>
 800880c:	4633      	mov	r3, r6
 800880e:	e7ec      	b.n	80087ea <strstr+0x8>

08008810 <strtok>:
 8008810:	4b16      	ldr	r3, [pc, #88]	; (800886c <strtok+0x5c>)
 8008812:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008814:	681e      	ldr	r6, [r3, #0]
 8008816:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8008818:	4605      	mov	r5, r0
 800881a:	b9fc      	cbnz	r4, 800885c <strtok+0x4c>
 800881c:	2050      	movs	r0, #80	; 0x50
 800881e:	9101      	str	r1, [sp, #4]
 8008820:	f001 f9e0 	bl	8009be4 <malloc>
 8008824:	9901      	ldr	r1, [sp, #4]
 8008826:	65b0      	str	r0, [r6, #88]	; 0x58
 8008828:	4602      	mov	r2, r0
 800882a:	b920      	cbnz	r0, 8008836 <strtok+0x26>
 800882c:	4b10      	ldr	r3, [pc, #64]	; (8008870 <strtok+0x60>)
 800882e:	4811      	ldr	r0, [pc, #68]	; (8008874 <strtok+0x64>)
 8008830:	2157      	movs	r1, #87	; 0x57
 8008832:	f000 f909 	bl	8008a48 <__assert_func>
 8008836:	e9c0 4400 	strd	r4, r4, [r0]
 800883a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800883e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8008842:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8008846:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800884a:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800884e:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8008852:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8008856:	6184      	str	r4, [r0, #24]
 8008858:	7704      	strb	r4, [r0, #28]
 800885a:	6244      	str	r4, [r0, #36]	; 0x24
 800885c:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800885e:	2301      	movs	r3, #1
 8008860:	4628      	mov	r0, r5
 8008862:	b002      	add	sp, #8
 8008864:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008868:	f000 b806 	b.w	8008878 <__strtok_r>
 800886c:	2000002c 	.word	0x2000002c
 8008870:	0800b174 	.word	0x0800b174
 8008874:	0800b18b 	.word	0x0800b18b

08008878 <__strtok_r>:
 8008878:	b5f0      	push	{r4, r5, r6, r7, lr}
 800887a:	b908      	cbnz	r0, 8008880 <__strtok_r+0x8>
 800887c:	6810      	ldr	r0, [r2, #0]
 800887e:	b188      	cbz	r0, 80088a4 <__strtok_r+0x2c>
 8008880:	4604      	mov	r4, r0
 8008882:	4620      	mov	r0, r4
 8008884:	f814 5b01 	ldrb.w	r5, [r4], #1
 8008888:	460f      	mov	r7, r1
 800888a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800888e:	b91e      	cbnz	r6, 8008898 <__strtok_r+0x20>
 8008890:	b965      	cbnz	r5, 80088ac <__strtok_r+0x34>
 8008892:	6015      	str	r5, [r2, #0]
 8008894:	4628      	mov	r0, r5
 8008896:	e005      	b.n	80088a4 <__strtok_r+0x2c>
 8008898:	42b5      	cmp	r5, r6
 800889a:	d1f6      	bne.n	800888a <__strtok_r+0x12>
 800889c:	2b00      	cmp	r3, #0
 800889e:	d1f0      	bne.n	8008882 <__strtok_r+0xa>
 80088a0:	6014      	str	r4, [r2, #0]
 80088a2:	7003      	strb	r3, [r0, #0]
 80088a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80088a6:	461c      	mov	r4, r3
 80088a8:	e00c      	b.n	80088c4 <__strtok_r+0x4c>
 80088aa:	b915      	cbnz	r5, 80088b2 <__strtok_r+0x3a>
 80088ac:	f814 3b01 	ldrb.w	r3, [r4], #1
 80088b0:	460e      	mov	r6, r1
 80088b2:	f816 5b01 	ldrb.w	r5, [r6], #1
 80088b6:	42ab      	cmp	r3, r5
 80088b8:	d1f7      	bne.n	80088aa <__strtok_r+0x32>
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d0f3      	beq.n	80088a6 <__strtok_r+0x2e>
 80088be:	2300      	movs	r3, #0
 80088c0:	f804 3c01 	strb.w	r3, [r4, #-1]
 80088c4:	6014      	str	r4, [r2, #0]
 80088c6:	e7ed      	b.n	80088a4 <__strtok_r+0x2c>

080088c8 <__swbuf_r>:
 80088c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088ca:	460e      	mov	r6, r1
 80088cc:	4614      	mov	r4, r2
 80088ce:	4605      	mov	r5, r0
 80088d0:	b118      	cbz	r0, 80088da <__swbuf_r+0x12>
 80088d2:	6983      	ldr	r3, [r0, #24]
 80088d4:	b90b      	cbnz	r3, 80088da <__swbuf_r+0x12>
 80088d6:	f001 f869 	bl	80099ac <__sinit>
 80088da:	4b21      	ldr	r3, [pc, #132]	; (8008960 <__swbuf_r+0x98>)
 80088dc:	429c      	cmp	r4, r3
 80088de:	d12b      	bne.n	8008938 <__swbuf_r+0x70>
 80088e0:	686c      	ldr	r4, [r5, #4]
 80088e2:	69a3      	ldr	r3, [r4, #24]
 80088e4:	60a3      	str	r3, [r4, #8]
 80088e6:	89a3      	ldrh	r3, [r4, #12]
 80088e8:	071a      	lsls	r2, r3, #28
 80088ea:	d52f      	bpl.n	800894c <__swbuf_r+0x84>
 80088ec:	6923      	ldr	r3, [r4, #16]
 80088ee:	b36b      	cbz	r3, 800894c <__swbuf_r+0x84>
 80088f0:	6923      	ldr	r3, [r4, #16]
 80088f2:	6820      	ldr	r0, [r4, #0]
 80088f4:	1ac0      	subs	r0, r0, r3
 80088f6:	6963      	ldr	r3, [r4, #20]
 80088f8:	b2f6      	uxtb	r6, r6
 80088fa:	4283      	cmp	r3, r0
 80088fc:	4637      	mov	r7, r6
 80088fe:	dc04      	bgt.n	800890a <__swbuf_r+0x42>
 8008900:	4621      	mov	r1, r4
 8008902:	4628      	mov	r0, r5
 8008904:	f000 ffbe 	bl	8009884 <_fflush_r>
 8008908:	bb30      	cbnz	r0, 8008958 <__swbuf_r+0x90>
 800890a:	68a3      	ldr	r3, [r4, #8]
 800890c:	3b01      	subs	r3, #1
 800890e:	60a3      	str	r3, [r4, #8]
 8008910:	6823      	ldr	r3, [r4, #0]
 8008912:	1c5a      	adds	r2, r3, #1
 8008914:	6022      	str	r2, [r4, #0]
 8008916:	701e      	strb	r6, [r3, #0]
 8008918:	6963      	ldr	r3, [r4, #20]
 800891a:	3001      	adds	r0, #1
 800891c:	4283      	cmp	r3, r0
 800891e:	d004      	beq.n	800892a <__swbuf_r+0x62>
 8008920:	89a3      	ldrh	r3, [r4, #12]
 8008922:	07db      	lsls	r3, r3, #31
 8008924:	d506      	bpl.n	8008934 <__swbuf_r+0x6c>
 8008926:	2e0a      	cmp	r6, #10
 8008928:	d104      	bne.n	8008934 <__swbuf_r+0x6c>
 800892a:	4621      	mov	r1, r4
 800892c:	4628      	mov	r0, r5
 800892e:	f000 ffa9 	bl	8009884 <_fflush_r>
 8008932:	b988      	cbnz	r0, 8008958 <__swbuf_r+0x90>
 8008934:	4638      	mov	r0, r7
 8008936:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008938:	4b0a      	ldr	r3, [pc, #40]	; (8008964 <__swbuf_r+0x9c>)
 800893a:	429c      	cmp	r4, r3
 800893c:	d101      	bne.n	8008942 <__swbuf_r+0x7a>
 800893e:	68ac      	ldr	r4, [r5, #8]
 8008940:	e7cf      	b.n	80088e2 <__swbuf_r+0x1a>
 8008942:	4b09      	ldr	r3, [pc, #36]	; (8008968 <__swbuf_r+0xa0>)
 8008944:	429c      	cmp	r4, r3
 8008946:	bf08      	it	eq
 8008948:	68ec      	ldreq	r4, [r5, #12]
 800894a:	e7ca      	b.n	80088e2 <__swbuf_r+0x1a>
 800894c:	4621      	mov	r1, r4
 800894e:	4628      	mov	r0, r5
 8008950:	f000 f80c 	bl	800896c <__swsetup_r>
 8008954:	2800      	cmp	r0, #0
 8008956:	d0cb      	beq.n	80088f0 <__swbuf_r+0x28>
 8008958:	f04f 37ff 	mov.w	r7, #4294967295
 800895c:	e7ea      	b.n	8008934 <__swbuf_r+0x6c>
 800895e:	bf00      	nop
 8008960:	0800b2c8 	.word	0x0800b2c8
 8008964:	0800b2e8 	.word	0x0800b2e8
 8008968:	0800b2a8 	.word	0x0800b2a8

0800896c <__swsetup_r>:
 800896c:	4b32      	ldr	r3, [pc, #200]	; (8008a38 <__swsetup_r+0xcc>)
 800896e:	b570      	push	{r4, r5, r6, lr}
 8008970:	681d      	ldr	r5, [r3, #0]
 8008972:	4606      	mov	r6, r0
 8008974:	460c      	mov	r4, r1
 8008976:	b125      	cbz	r5, 8008982 <__swsetup_r+0x16>
 8008978:	69ab      	ldr	r3, [r5, #24]
 800897a:	b913      	cbnz	r3, 8008982 <__swsetup_r+0x16>
 800897c:	4628      	mov	r0, r5
 800897e:	f001 f815 	bl	80099ac <__sinit>
 8008982:	4b2e      	ldr	r3, [pc, #184]	; (8008a3c <__swsetup_r+0xd0>)
 8008984:	429c      	cmp	r4, r3
 8008986:	d10f      	bne.n	80089a8 <__swsetup_r+0x3c>
 8008988:	686c      	ldr	r4, [r5, #4]
 800898a:	89a3      	ldrh	r3, [r4, #12]
 800898c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008990:	0719      	lsls	r1, r3, #28
 8008992:	d42c      	bmi.n	80089ee <__swsetup_r+0x82>
 8008994:	06dd      	lsls	r5, r3, #27
 8008996:	d411      	bmi.n	80089bc <__swsetup_r+0x50>
 8008998:	2309      	movs	r3, #9
 800899a:	6033      	str	r3, [r6, #0]
 800899c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80089a0:	81a3      	strh	r3, [r4, #12]
 80089a2:	f04f 30ff 	mov.w	r0, #4294967295
 80089a6:	e03e      	b.n	8008a26 <__swsetup_r+0xba>
 80089a8:	4b25      	ldr	r3, [pc, #148]	; (8008a40 <__swsetup_r+0xd4>)
 80089aa:	429c      	cmp	r4, r3
 80089ac:	d101      	bne.n	80089b2 <__swsetup_r+0x46>
 80089ae:	68ac      	ldr	r4, [r5, #8]
 80089b0:	e7eb      	b.n	800898a <__swsetup_r+0x1e>
 80089b2:	4b24      	ldr	r3, [pc, #144]	; (8008a44 <__swsetup_r+0xd8>)
 80089b4:	429c      	cmp	r4, r3
 80089b6:	bf08      	it	eq
 80089b8:	68ec      	ldreq	r4, [r5, #12]
 80089ba:	e7e6      	b.n	800898a <__swsetup_r+0x1e>
 80089bc:	0758      	lsls	r0, r3, #29
 80089be:	d512      	bpl.n	80089e6 <__swsetup_r+0x7a>
 80089c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80089c2:	b141      	cbz	r1, 80089d6 <__swsetup_r+0x6a>
 80089c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80089c8:	4299      	cmp	r1, r3
 80089ca:	d002      	beq.n	80089d2 <__swsetup_r+0x66>
 80089cc:	4630      	mov	r0, r6
 80089ce:	f001 fc9f 	bl	800a310 <_free_r>
 80089d2:	2300      	movs	r3, #0
 80089d4:	6363      	str	r3, [r4, #52]	; 0x34
 80089d6:	89a3      	ldrh	r3, [r4, #12]
 80089d8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80089dc:	81a3      	strh	r3, [r4, #12]
 80089de:	2300      	movs	r3, #0
 80089e0:	6063      	str	r3, [r4, #4]
 80089e2:	6923      	ldr	r3, [r4, #16]
 80089e4:	6023      	str	r3, [r4, #0]
 80089e6:	89a3      	ldrh	r3, [r4, #12]
 80089e8:	f043 0308 	orr.w	r3, r3, #8
 80089ec:	81a3      	strh	r3, [r4, #12]
 80089ee:	6923      	ldr	r3, [r4, #16]
 80089f0:	b94b      	cbnz	r3, 8008a06 <__swsetup_r+0x9a>
 80089f2:	89a3      	ldrh	r3, [r4, #12]
 80089f4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80089f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80089fc:	d003      	beq.n	8008a06 <__swsetup_r+0x9a>
 80089fe:	4621      	mov	r1, r4
 8008a00:	4630      	mov	r0, r6
 8008a02:	f001 f8af 	bl	8009b64 <__smakebuf_r>
 8008a06:	89a0      	ldrh	r0, [r4, #12]
 8008a08:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008a0c:	f010 0301 	ands.w	r3, r0, #1
 8008a10:	d00a      	beq.n	8008a28 <__swsetup_r+0xbc>
 8008a12:	2300      	movs	r3, #0
 8008a14:	60a3      	str	r3, [r4, #8]
 8008a16:	6963      	ldr	r3, [r4, #20]
 8008a18:	425b      	negs	r3, r3
 8008a1a:	61a3      	str	r3, [r4, #24]
 8008a1c:	6923      	ldr	r3, [r4, #16]
 8008a1e:	b943      	cbnz	r3, 8008a32 <__swsetup_r+0xc6>
 8008a20:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008a24:	d1ba      	bne.n	800899c <__swsetup_r+0x30>
 8008a26:	bd70      	pop	{r4, r5, r6, pc}
 8008a28:	0781      	lsls	r1, r0, #30
 8008a2a:	bf58      	it	pl
 8008a2c:	6963      	ldrpl	r3, [r4, #20]
 8008a2e:	60a3      	str	r3, [r4, #8]
 8008a30:	e7f4      	b.n	8008a1c <__swsetup_r+0xb0>
 8008a32:	2000      	movs	r0, #0
 8008a34:	e7f7      	b.n	8008a26 <__swsetup_r+0xba>
 8008a36:	bf00      	nop
 8008a38:	2000002c 	.word	0x2000002c
 8008a3c:	0800b2c8 	.word	0x0800b2c8
 8008a40:	0800b2e8 	.word	0x0800b2e8
 8008a44:	0800b2a8 	.word	0x0800b2a8

08008a48 <__assert_func>:
 8008a48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008a4a:	4614      	mov	r4, r2
 8008a4c:	461a      	mov	r2, r3
 8008a4e:	4b09      	ldr	r3, [pc, #36]	; (8008a74 <__assert_func+0x2c>)
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	4605      	mov	r5, r0
 8008a54:	68d8      	ldr	r0, [r3, #12]
 8008a56:	b14c      	cbz	r4, 8008a6c <__assert_func+0x24>
 8008a58:	4b07      	ldr	r3, [pc, #28]	; (8008a78 <__assert_func+0x30>)
 8008a5a:	9100      	str	r1, [sp, #0]
 8008a5c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008a60:	4906      	ldr	r1, [pc, #24]	; (8008a7c <__assert_func+0x34>)
 8008a62:	462b      	mov	r3, r5
 8008a64:	f001 f820 	bl	8009aa8 <fiprintf>
 8008a68:	f002 f818 	bl	800aa9c <abort>
 8008a6c:	4b04      	ldr	r3, [pc, #16]	; (8008a80 <__assert_func+0x38>)
 8008a6e:	461c      	mov	r4, r3
 8008a70:	e7f3      	b.n	8008a5a <__assert_func+0x12>
 8008a72:	bf00      	nop
 8008a74:	2000002c 	.word	0x2000002c
 8008a78:	0800b1ec 	.word	0x0800b1ec
 8008a7c:	0800b1f9 	.word	0x0800b1f9
 8008a80:	0800b227 	.word	0x0800b227

08008a84 <quorem>:
 8008a84:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a88:	6903      	ldr	r3, [r0, #16]
 8008a8a:	690c      	ldr	r4, [r1, #16]
 8008a8c:	42a3      	cmp	r3, r4
 8008a8e:	4607      	mov	r7, r0
 8008a90:	f2c0 8081 	blt.w	8008b96 <quorem+0x112>
 8008a94:	3c01      	subs	r4, #1
 8008a96:	f101 0814 	add.w	r8, r1, #20
 8008a9a:	f100 0514 	add.w	r5, r0, #20
 8008a9e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008aa2:	9301      	str	r3, [sp, #4]
 8008aa4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008aa8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008aac:	3301      	adds	r3, #1
 8008aae:	429a      	cmp	r2, r3
 8008ab0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008ab4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008ab8:	fbb2 f6f3 	udiv	r6, r2, r3
 8008abc:	d331      	bcc.n	8008b22 <quorem+0x9e>
 8008abe:	f04f 0e00 	mov.w	lr, #0
 8008ac2:	4640      	mov	r0, r8
 8008ac4:	46ac      	mov	ip, r5
 8008ac6:	46f2      	mov	sl, lr
 8008ac8:	f850 2b04 	ldr.w	r2, [r0], #4
 8008acc:	b293      	uxth	r3, r2
 8008ace:	fb06 e303 	mla	r3, r6, r3, lr
 8008ad2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008ad6:	b29b      	uxth	r3, r3
 8008ad8:	ebaa 0303 	sub.w	r3, sl, r3
 8008adc:	0c12      	lsrs	r2, r2, #16
 8008ade:	f8dc a000 	ldr.w	sl, [ip]
 8008ae2:	fb06 e202 	mla	r2, r6, r2, lr
 8008ae6:	fa13 f38a 	uxtah	r3, r3, sl
 8008aea:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008aee:	fa1f fa82 	uxth.w	sl, r2
 8008af2:	f8dc 2000 	ldr.w	r2, [ip]
 8008af6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8008afa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008afe:	b29b      	uxth	r3, r3
 8008b00:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008b04:	4581      	cmp	r9, r0
 8008b06:	f84c 3b04 	str.w	r3, [ip], #4
 8008b0a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008b0e:	d2db      	bcs.n	8008ac8 <quorem+0x44>
 8008b10:	f855 300b 	ldr.w	r3, [r5, fp]
 8008b14:	b92b      	cbnz	r3, 8008b22 <quorem+0x9e>
 8008b16:	9b01      	ldr	r3, [sp, #4]
 8008b18:	3b04      	subs	r3, #4
 8008b1a:	429d      	cmp	r5, r3
 8008b1c:	461a      	mov	r2, r3
 8008b1e:	d32e      	bcc.n	8008b7e <quorem+0xfa>
 8008b20:	613c      	str	r4, [r7, #16]
 8008b22:	4638      	mov	r0, r7
 8008b24:	f001 fae4 	bl	800a0f0 <__mcmp>
 8008b28:	2800      	cmp	r0, #0
 8008b2a:	db24      	blt.n	8008b76 <quorem+0xf2>
 8008b2c:	3601      	adds	r6, #1
 8008b2e:	4628      	mov	r0, r5
 8008b30:	f04f 0c00 	mov.w	ip, #0
 8008b34:	f858 2b04 	ldr.w	r2, [r8], #4
 8008b38:	f8d0 e000 	ldr.w	lr, [r0]
 8008b3c:	b293      	uxth	r3, r2
 8008b3e:	ebac 0303 	sub.w	r3, ip, r3
 8008b42:	0c12      	lsrs	r2, r2, #16
 8008b44:	fa13 f38e 	uxtah	r3, r3, lr
 8008b48:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008b4c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008b50:	b29b      	uxth	r3, r3
 8008b52:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008b56:	45c1      	cmp	r9, r8
 8008b58:	f840 3b04 	str.w	r3, [r0], #4
 8008b5c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008b60:	d2e8      	bcs.n	8008b34 <quorem+0xb0>
 8008b62:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008b66:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008b6a:	b922      	cbnz	r2, 8008b76 <quorem+0xf2>
 8008b6c:	3b04      	subs	r3, #4
 8008b6e:	429d      	cmp	r5, r3
 8008b70:	461a      	mov	r2, r3
 8008b72:	d30a      	bcc.n	8008b8a <quorem+0x106>
 8008b74:	613c      	str	r4, [r7, #16]
 8008b76:	4630      	mov	r0, r6
 8008b78:	b003      	add	sp, #12
 8008b7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b7e:	6812      	ldr	r2, [r2, #0]
 8008b80:	3b04      	subs	r3, #4
 8008b82:	2a00      	cmp	r2, #0
 8008b84:	d1cc      	bne.n	8008b20 <quorem+0x9c>
 8008b86:	3c01      	subs	r4, #1
 8008b88:	e7c7      	b.n	8008b1a <quorem+0x96>
 8008b8a:	6812      	ldr	r2, [r2, #0]
 8008b8c:	3b04      	subs	r3, #4
 8008b8e:	2a00      	cmp	r2, #0
 8008b90:	d1f0      	bne.n	8008b74 <quorem+0xf0>
 8008b92:	3c01      	subs	r4, #1
 8008b94:	e7eb      	b.n	8008b6e <quorem+0xea>
 8008b96:	2000      	movs	r0, #0
 8008b98:	e7ee      	b.n	8008b78 <quorem+0xf4>
 8008b9a:	0000      	movs	r0, r0
 8008b9c:	0000      	movs	r0, r0
	...

08008ba0 <_dtoa_r>:
 8008ba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ba4:	ed2d 8b02 	vpush	{d8}
 8008ba8:	ec57 6b10 	vmov	r6, r7, d0
 8008bac:	b095      	sub	sp, #84	; 0x54
 8008bae:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008bb0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008bb4:	9105      	str	r1, [sp, #20]
 8008bb6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8008bba:	4604      	mov	r4, r0
 8008bbc:	9209      	str	r2, [sp, #36]	; 0x24
 8008bbe:	930f      	str	r3, [sp, #60]	; 0x3c
 8008bc0:	b975      	cbnz	r5, 8008be0 <_dtoa_r+0x40>
 8008bc2:	2010      	movs	r0, #16
 8008bc4:	f001 f80e 	bl	8009be4 <malloc>
 8008bc8:	4602      	mov	r2, r0
 8008bca:	6260      	str	r0, [r4, #36]	; 0x24
 8008bcc:	b920      	cbnz	r0, 8008bd8 <_dtoa_r+0x38>
 8008bce:	4bb2      	ldr	r3, [pc, #712]	; (8008e98 <_dtoa_r+0x2f8>)
 8008bd0:	21ea      	movs	r1, #234	; 0xea
 8008bd2:	48b2      	ldr	r0, [pc, #712]	; (8008e9c <_dtoa_r+0x2fc>)
 8008bd4:	f7ff ff38 	bl	8008a48 <__assert_func>
 8008bd8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008bdc:	6005      	str	r5, [r0, #0]
 8008bde:	60c5      	str	r5, [r0, #12]
 8008be0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008be2:	6819      	ldr	r1, [r3, #0]
 8008be4:	b151      	cbz	r1, 8008bfc <_dtoa_r+0x5c>
 8008be6:	685a      	ldr	r2, [r3, #4]
 8008be8:	604a      	str	r2, [r1, #4]
 8008bea:	2301      	movs	r3, #1
 8008bec:	4093      	lsls	r3, r2
 8008bee:	608b      	str	r3, [r1, #8]
 8008bf0:	4620      	mov	r0, r4
 8008bf2:	f001 f83f 	bl	8009c74 <_Bfree>
 8008bf6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008bf8:	2200      	movs	r2, #0
 8008bfa:	601a      	str	r2, [r3, #0]
 8008bfc:	1e3b      	subs	r3, r7, #0
 8008bfe:	bfb9      	ittee	lt
 8008c00:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008c04:	9303      	strlt	r3, [sp, #12]
 8008c06:	2300      	movge	r3, #0
 8008c08:	f8c8 3000 	strge.w	r3, [r8]
 8008c0c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8008c10:	4ba3      	ldr	r3, [pc, #652]	; (8008ea0 <_dtoa_r+0x300>)
 8008c12:	bfbc      	itt	lt
 8008c14:	2201      	movlt	r2, #1
 8008c16:	f8c8 2000 	strlt.w	r2, [r8]
 8008c1a:	ea33 0309 	bics.w	r3, r3, r9
 8008c1e:	d11b      	bne.n	8008c58 <_dtoa_r+0xb8>
 8008c20:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008c22:	f242 730f 	movw	r3, #9999	; 0x270f
 8008c26:	6013      	str	r3, [r2, #0]
 8008c28:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008c2c:	4333      	orrs	r3, r6
 8008c2e:	f000 857a 	beq.w	8009726 <_dtoa_r+0xb86>
 8008c32:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008c34:	b963      	cbnz	r3, 8008c50 <_dtoa_r+0xb0>
 8008c36:	4b9b      	ldr	r3, [pc, #620]	; (8008ea4 <_dtoa_r+0x304>)
 8008c38:	e024      	b.n	8008c84 <_dtoa_r+0xe4>
 8008c3a:	4b9b      	ldr	r3, [pc, #620]	; (8008ea8 <_dtoa_r+0x308>)
 8008c3c:	9300      	str	r3, [sp, #0]
 8008c3e:	3308      	adds	r3, #8
 8008c40:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008c42:	6013      	str	r3, [r2, #0]
 8008c44:	9800      	ldr	r0, [sp, #0]
 8008c46:	b015      	add	sp, #84	; 0x54
 8008c48:	ecbd 8b02 	vpop	{d8}
 8008c4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c50:	4b94      	ldr	r3, [pc, #592]	; (8008ea4 <_dtoa_r+0x304>)
 8008c52:	9300      	str	r3, [sp, #0]
 8008c54:	3303      	adds	r3, #3
 8008c56:	e7f3      	b.n	8008c40 <_dtoa_r+0xa0>
 8008c58:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008c5c:	2200      	movs	r2, #0
 8008c5e:	ec51 0b17 	vmov	r0, r1, d7
 8008c62:	2300      	movs	r3, #0
 8008c64:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8008c68:	f7f7 ff2e 	bl	8000ac8 <__aeabi_dcmpeq>
 8008c6c:	4680      	mov	r8, r0
 8008c6e:	b158      	cbz	r0, 8008c88 <_dtoa_r+0xe8>
 8008c70:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008c72:	2301      	movs	r3, #1
 8008c74:	6013      	str	r3, [r2, #0]
 8008c76:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	f000 8551 	beq.w	8009720 <_dtoa_r+0xb80>
 8008c7e:	488b      	ldr	r0, [pc, #556]	; (8008eac <_dtoa_r+0x30c>)
 8008c80:	6018      	str	r0, [r3, #0]
 8008c82:	1e43      	subs	r3, r0, #1
 8008c84:	9300      	str	r3, [sp, #0]
 8008c86:	e7dd      	b.n	8008c44 <_dtoa_r+0xa4>
 8008c88:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8008c8c:	aa12      	add	r2, sp, #72	; 0x48
 8008c8e:	a913      	add	r1, sp, #76	; 0x4c
 8008c90:	4620      	mov	r0, r4
 8008c92:	f001 fad1 	bl	800a238 <__d2b>
 8008c96:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008c9a:	4683      	mov	fp, r0
 8008c9c:	2d00      	cmp	r5, #0
 8008c9e:	d07c      	beq.n	8008d9a <_dtoa_r+0x1fa>
 8008ca0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008ca2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8008ca6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008caa:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8008cae:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008cb2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008cb6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008cba:	4b7d      	ldr	r3, [pc, #500]	; (8008eb0 <_dtoa_r+0x310>)
 8008cbc:	2200      	movs	r2, #0
 8008cbe:	4630      	mov	r0, r6
 8008cc0:	4639      	mov	r1, r7
 8008cc2:	f7f7 fae1 	bl	8000288 <__aeabi_dsub>
 8008cc6:	a36e      	add	r3, pc, #440	; (adr r3, 8008e80 <_dtoa_r+0x2e0>)
 8008cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ccc:	f7f7 fc94 	bl	80005f8 <__aeabi_dmul>
 8008cd0:	a36d      	add	r3, pc, #436	; (adr r3, 8008e88 <_dtoa_r+0x2e8>)
 8008cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cd6:	f7f7 fad9 	bl	800028c <__adddf3>
 8008cda:	4606      	mov	r6, r0
 8008cdc:	4628      	mov	r0, r5
 8008cde:	460f      	mov	r7, r1
 8008ce0:	f7f7 fc20 	bl	8000524 <__aeabi_i2d>
 8008ce4:	a36a      	add	r3, pc, #424	; (adr r3, 8008e90 <_dtoa_r+0x2f0>)
 8008ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cea:	f7f7 fc85 	bl	80005f8 <__aeabi_dmul>
 8008cee:	4602      	mov	r2, r0
 8008cf0:	460b      	mov	r3, r1
 8008cf2:	4630      	mov	r0, r6
 8008cf4:	4639      	mov	r1, r7
 8008cf6:	f7f7 fac9 	bl	800028c <__adddf3>
 8008cfa:	4606      	mov	r6, r0
 8008cfc:	460f      	mov	r7, r1
 8008cfe:	f7f7 ff2b 	bl	8000b58 <__aeabi_d2iz>
 8008d02:	2200      	movs	r2, #0
 8008d04:	4682      	mov	sl, r0
 8008d06:	2300      	movs	r3, #0
 8008d08:	4630      	mov	r0, r6
 8008d0a:	4639      	mov	r1, r7
 8008d0c:	f7f7 fee6 	bl	8000adc <__aeabi_dcmplt>
 8008d10:	b148      	cbz	r0, 8008d26 <_dtoa_r+0x186>
 8008d12:	4650      	mov	r0, sl
 8008d14:	f7f7 fc06 	bl	8000524 <__aeabi_i2d>
 8008d18:	4632      	mov	r2, r6
 8008d1a:	463b      	mov	r3, r7
 8008d1c:	f7f7 fed4 	bl	8000ac8 <__aeabi_dcmpeq>
 8008d20:	b908      	cbnz	r0, 8008d26 <_dtoa_r+0x186>
 8008d22:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008d26:	f1ba 0f16 	cmp.w	sl, #22
 8008d2a:	d854      	bhi.n	8008dd6 <_dtoa_r+0x236>
 8008d2c:	4b61      	ldr	r3, [pc, #388]	; (8008eb4 <_dtoa_r+0x314>)
 8008d2e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d36:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008d3a:	f7f7 fecf 	bl	8000adc <__aeabi_dcmplt>
 8008d3e:	2800      	cmp	r0, #0
 8008d40:	d04b      	beq.n	8008dda <_dtoa_r+0x23a>
 8008d42:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008d46:	2300      	movs	r3, #0
 8008d48:	930e      	str	r3, [sp, #56]	; 0x38
 8008d4a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008d4c:	1b5d      	subs	r5, r3, r5
 8008d4e:	1e6b      	subs	r3, r5, #1
 8008d50:	9304      	str	r3, [sp, #16]
 8008d52:	bf43      	ittte	mi
 8008d54:	2300      	movmi	r3, #0
 8008d56:	f1c5 0801 	rsbmi	r8, r5, #1
 8008d5a:	9304      	strmi	r3, [sp, #16]
 8008d5c:	f04f 0800 	movpl.w	r8, #0
 8008d60:	f1ba 0f00 	cmp.w	sl, #0
 8008d64:	db3b      	blt.n	8008dde <_dtoa_r+0x23e>
 8008d66:	9b04      	ldr	r3, [sp, #16]
 8008d68:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8008d6c:	4453      	add	r3, sl
 8008d6e:	9304      	str	r3, [sp, #16]
 8008d70:	2300      	movs	r3, #0
 8008d72:	9306      	str	r3, [sp, #24]
 8008d74:	9b05      	ldr	r3, [sp, #20]
 8008d76:	2b09      	cmp	r3, #9
 8008d78:	d869      	bhi.n	8008e4e <_dtoa_r+0x2ae>
 8008d7a:	2b05      	cmp	r3, #5
 8008d7c:	bfc4      	itt	gt
 8008d7e:	3b04      	subgt	r3, #4
 8008d80:	9305      	strgt	r3, [sp, #20]
 8008d82:	9b05      	ldr	r3, [sp, #20]
 8008d84:	f1a3 0302 	sub.w	r3, r3, #2
 8008d88:	bfcc      	ite	gt
 8008d8a:	2500      	movgt	r5, #0
 8008d8c:	2501      	movle	r5, #1
 8008d8e:	2b03      	cmp	r3, #3
 8008d90:	d869      	bhi.n	8008e66 <_dtoa_r+0x2c6>
 8008d92:	e8df f003 	tbb	[pc, r3]
 8008d96:	4e2c      	.short	0x4e2c
 8008d98:	5a4c      	.short	0x5a4c
 8008d9a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8008d9e:	441d      	add	r5, r3
 8008da0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008da4:	2b20      	cmp	r3, #32
 8008da6:	bfc1      	itttt	gt
 8008da8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008dac:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008db0:	fa09 f303 	lslgt.w	r3, r9, r3
 8008db4:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008db8:	bfda      	itte	le
 8008dba:	f1c3 0320 	rsble	r3, r3, #32
 8008dbe:	fa06 f003 	lslle.w	r0, r6, r3
 8008dc2:	4318      	orrgt	r0, r3
 8008dc4:	f7f7 fb9e 	bl	8000504 <__aeabi_ui2d>
 8008dc8:	2301      	movs	r3, #1
 8008dca:	4606      	mov	r6, r0
 8008dcc:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008dd0:	3d01      	subs	r5, #1
 8008dd2:	9310      	str	r3, [sp, #64]	; 0x40
 8008dd4:	e771      	b.n	8008cba <_dtoa_r+0x11a>
 8008dd6:	2301      	movs	r3, #1
 8008dd8:	e7b6      	b.n	8008d48 <_dtoa_r+0x1a8>
 8008dda:	900e      	str	r0, [sp, #56]	; 0x38
 8008ddc:	e7b5      	b.n	8008d4a <_dtoa_r+0x1aa>
 8008dde:	f1ca 0300 	rsb	r3, sl, #0
 8008de2:	9306      	str	r3, [sp, #24]
 8008de4:	2300      	movs	r3, #0
 8008de6:	eba8 080a 	sub.w	r8, r8, sl
 8008dea:	930d      	str	r3, [sp, #52]	; 0x34
 8008dec:	e7c2      	b.n	8008d74 <_dtoa_r+0x1d4>
 8008dee:	2300      	movs	r3, #0
 8008df0:	9308      	str	r3, [sp, #32]
 8008df2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	dc39      	bgt.n	8008e6c <_dtoa_r+0x2cc>
 8008df8:	f04f 0901 	mov.w	r9, #1
 8008dfc:	f8cd 9004 	str.w	r9, [sp, #4]
 8008e00:	464b      	mov	r3, r9
 8008e02:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8008e06:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008e08:	2200      	movs	r2, #0
 8008e0a:	6042      	str	r2, [r0, #4]
 8008e0c:	2204      	movs	r2, #4
 8008e0e:	f102 0614 	add.w	r6, r2, #20
 8008e12:	429e      	cmp	r6, r3
 8008e14:	6841      	ldr	r1, [r0, #4]
 8008e16:	d92f      	bls.n	8008e78 <_dtoa_r+0x2d8>
 8008e18:	4620      	mov	r0, r4
 8008e1a:	f000 feeb 	bl	8009bf4 <_Balloc>
 8008e1e:	9000      	str	r0, [sp, #0]
 8008e20:	2800      	cmp	r0, #0
 8008e22:	d14b      	bne.n	8008ebc <_dtoa_r+0x31c>
 8008e24:	4b24      	ldr	r3, [pc, #144]	; (8008eb8 <_dtoa_r+0x318>)
 8008e26:	4602      	mov	r2, r0
 8008e28:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008e2c:	e6d1      	b.n	8008bd2 <_dtoa_r+0x32>
 8008e2e:	2301      	movs	r3, #1
 8008e30:	e7de      	b.n	8008df0 <_dtoa_r+0x250>
 8008e32:	2300      	movs	r3, #0
 8008e34:	9308      	str	r3, [sp, #32]
 8008e36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e38:	eb0a 0903 	add.w	r9, sl, r3
 8008e3c:	f109 0301 	add.w	r3, r9, #1
 8008e40:	2b01      	cmp	r3, #1
 8008e42:	9301      	str	r3, [sp, #4]
 8008e44:	bfb8      	it	lt
 8008e46:	2301      	movlt	r3, #1
 8008e48:	e7dd      	b.n	8008e06 <_dtoa_r+0x266>
 8008e4a:	2301      	movs	r3, #1
 8008e4c:	e7f2      	b.n	8008e34 <_dtoa_r+0x294>
 8008e4e:	2501      	movs	r5, #1
 8008e50:	2300      	movs	r3, #0
 8008e52:	9305      	str	r3, [sp, #20]
 8008e54:	9508      	str	r5, [sp, #32]
 8008e56:	f04f 39ff 	mov.w	r9, #4294967295
 8008e5a:	2200      	movs	r2, #0
 8008e5c:	f8cd 9004 	str.w	r9, [sp, #4]
 8008e60:	2312      	movs	r3, #18
 8008e62:	9209      	str	r2, [sp, #36]	; 0x24
 8008e64:	e7cf      	b.n	8008e06 <_dtoa_r+0x266>
 8008e66:	2301      	movs	r3, #1
 8008e68:	9308      	str	r3, [sp, #32]
 8008e6a:	e7f4      	b.n	8008e56 <_dtoa_r+0x2b6>
 8008e6c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8008e70:	f8cd 9004 	str.w	r9, [sp, #4]
 8008e74:	464b      	mov	r3, r9
 8008e76:	e7c6      	b.n	8008e06 <_dtoa_r+0x266>
 8008e78:	3101      	adds	r1, #1
 8008e7a:	6041      	str	r1, [r0, #4]
 8008e7c:	0052      	lsls	r2, r2, #1
 8008e7e:	e7c6      	b.n	8008e0e <_dtoa_r+0x26e>
 8008e80:	636f4361 	.word	0x636f4361
 8008e84:	3fd287a7 	.word	0x3fd287a7
 8008e88:	8b60c8b3 	.word	0x8b60c8b3
 8008e8c:	3fc68a28 	.word	0x3fc68a28
 8008e90:	509f79fb 	.word	0x509f79fb
 8008e94:	3fd34413 	.word	0x3fd34413
 8008e98:	0800b174 	.word	0x0800b174
 8008e9c:	0800b235 	.word	0x0800b235
 8008ea0:	7ff00000 	.word	0x7ff00000
 8008ea4:	0800b231 	.word	0x0800b231
 8008ea8:	0800b228 	.word	0x0800b228
 8008eac:	0800b151 	.word	0x0800b151
 8008eb0:	3ff80000 	.word	0x3ff80000
 8008eb4:	0800b390 	.word	0x0800b390
 8008eb8:	0800b294 	.word	0x0800b294
 8008ebc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008ebe:	9a00      	ldr	r2, [sp, #0]
 8008ec0:	601a      	str	r2, [r3, #0]
 8008ec2:	9b01      	ldr	r3, [sp, #4]
 8008ec4:	2b0e      	cmp	r3, #14
 8008ec6:	f200 80ad 	bhi.w	8009024 <_dtoa_r+0x484>
 8008eca:	2d00      	cmp	r5, #0
 8008ecc:	f000 80aa 	beq.w	8009024 <_dtoa_r+0x484>
 8008ed0:	f1ba 0f00 	cmp.w	sl, #0
 8008ed4:	dd36      	ble.n	8008f44 <_dtoa_r+0x3a4>
 8008ed6:	4ac3      	ldr	r2, [pc, #780]	; (80091e4 <_dtoa_r+0x644>)
 8008ed8:	f00a 030f 	and.w	r3, sl, #15
 8008edc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008ee0:	ed93 7b00 	vldr	d7, [r3]
 8008ee4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8008ee8:	ea4f 172a 	mov.w	r7, sl, asr #4
 8008eec:	eeb0 8a47 	vmov.f32	s16, s14
 8008ef0:	eef0 8a67 	vmov.f32	s17, s15
 8008ef4:	d016      	beq.n	8008f24 <_dtoa_r+0x384>
 8008ef6:	4bbc      	ldr	r3, [pc, #752]	; (80091e8 <_dtoa_r+0x648>)
 8008ef8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008efc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008f00:	f7f7 fca4 	bl	800084c <__aeabi_ddiv>
 8008f04:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008f08:	f007 070f 	and.w	r7, r7, #15
 8008f0c:	2503      	movs	r5, #3
 8008f0e:	4eb6      	ldr	r6, [pc, #728]	; (80091e8 <_dtoa_r+0x648>)
 8008f10:	b957      	cbnz	r7, 8008f28 <_dtoa_r+0x388>
 8008f12:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008f16:	ec53 2b18 	vmov	r2, r3, d8
 8008f1a:	f7f7 fc97 	bl	800084c <__aeabi_ddiv>
 8008f1e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008f22:	e029      	b.n	8008f78 <_dtoa_r+0x3d8>
 8008f24:	2502      	movs	r5, #2
 8008f26:	e7f2      	b.n	8008f0e <_dtoa_r+0x36e>
 8008f28:	07f9      	lsls	r1, r7, #31
 8008f2a:	d508      	bpl.n	8008f3e <_dtoa_r+0x39e>
 8008f2c:	ec51 0b18 	vmov	r0, r1, d8
 8008f30:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008f34:	f7f7 fb60 	bl	80005f8 <__aeabi_dmul>
 8008f38:	ec41 0b18 	vmov	d8, r0, r1
 8008f3c:	3501      	adds	r5, #1
 8008f3e:	107f      	asrs	r7, r7, #1
 8008f40:	3608      	adds	r6, #8
 8008f42:	e7e5      	b.n	8008f10 <_dtoa_r+0x370>
 8008f44:	f000 80a6 	beq.w	8009094 <_dtoa_r+0x4f4>
 8008f48:	f1ca 0600 	rsb	r6, sl, #0
 8008f4c:	4ba5      	ldr	r3, [pc, #660]	; (80091e4 <_dtoa_r+0x644>)
 8008f4e:	4fa6      	ldr	r7, [pc, #664]	; (80091e8 <_dtoa_r+0x648>)
 8008f50:	f006 020f 	and.w	r2, r6, #15
 8008f54:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f5c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008f60:	f7f7 fb4a 	bl	80005f8 <__aeabi_dmul>
 8008f64:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008f68:	1136      	asrs	r6, r6, #4
 8008f6a:	2300      	movs	r3, #0
 8008f6c:	2502      	movs	r5, #2
 8008f6e:	2e00      	cmp	r6, #0
 8008f70:	f040 8085 	bne.w	800907e <_dtoa_r+0x4de>
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d1d2      	bne.n	8008f1e <_dtoa_r+0x37e>
 8008f78:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	f000 808c 	beq.w	8009098 <_dtoa_r+0x4f8>
 8008f80:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008f84:	4b99      	ldr	r3, [pc, #612]	; (80091ec <_dtoa_r+0x64c>)
 8008f86:	2200      	movs	r2, #0
 8008f88:	4630      	mov	r0, r6
 8008f8a:	4639      	mov	r1, r7
 8008f8c:	f7f7 fda6 	bl	8000adc <__aeabi_dcmplt>
 8008f90:	2800      	cmp	r0, #0
 8008f92:	f000 8081 	beq.w	8009098 <_dtoa_r+0x4f8>
 8008f96:	9b01      	ldr	r3, [sp, #4]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d07d      	beq.n	8009098 <_dtoa_r+0x4f8>
 8008f9c:	f1b9 0f00 	cmp.w	r9, #0
 8008fa0:	dd3c      	ble.n	800901c <_dtoa_r+0x47c>
 8008fa2:	f10a 33ff 	add.w	r3, sl, #4294967295
 8008fa6:	9307      	str	r3, [sp, #28]
 8008fa8:	2200      	movs	r2, #0
 8008faa:	4b91      	ldr	r3, [pc, #580]	; (80091f0 <_dtoa_r+0x650>)
 8008fac:	4630      	mov	r0, r6
 8008fae:	4639      	mov	r1, r7
 8008fb0:	f7f7 fb22 	bl	80005f8 <__aeabi_dmul>
 8008fb4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008fb8:	3501      	adds	r5, #1
 8008fba:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8008fbe:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008fc2:	4628      	mov	r0, r5
 8008fc4:	f7f7 faae 	bl	8000524 <__aeabi_i2d>
 8008fc8:	4632      	mov	r2, r6
 8008fca:	463b      	mov	r3, r7
 8008fcc:	f7f7 fb14 	bl	80005f8 <__aeabi_dmul>
 8008fd0:	4b88      	ldr	r3, [pc, #544]	; (80091f4 <_dtoa_r+0x654>)
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	f7f7 f95a 	bl	800028c <__adddf3>
 8008fd8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8008fdc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008fe0:	9303      	str	r3, [sp, #12]
 8008fe2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d15c      	bne.n	80090a2 <_dtoa_r+0x502>
 8008fe8:	4b83      	ldr	r3, [pc, #524]	; (80091f8 <_dtoa_r+0x658>)
 8008fea:	2200      	movs	r2, #0
 8008fec:	4630      	mov	r0, r6
 8008fee:	4639      	mov	r1, r7
 8008ff0:	f7f7 f94a 	bl	8000288 <__aeabi_dsub>
 8008ff4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008ff8:	4606      	mov	r6, r0
 8008ffa:	460f      	mov	r7, r1
 8008ffc:	f7f7 fd8c 	bl	8000b18 <__aeabi_dcmpgt>
 8009000:	2800      	cmp	r0, #0
 8009002:	f040 8296 	bne.w	8009532 <_dtoa_r+0x992>
 8009006:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800900a:	4630      	mov	r0, r6
 800900c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009010:	4639      	mov	r1, r7
 8009012:	f7f7 fd63 	bl	8000adc <__aeabi_dcmplt>
 8009016:	2800      	cmp	r0, #0
 8009018:	f040 8288 	bne.w	800952c <_dtoa_r+0x98c>
 800901c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009020:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009024:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009026:	2b00      	cmp	r3, #0
 8009028:	f2c0 8158 	blt.w	80092dc <_dtoa_r+0x73c>
 800902c:	f1ba 0f0e 	cmp.w	sl, #14
 8009030:	f300 8154 	bgt.w	80092dc <_dtoa_r+0x73c>
 8009034:	4b6b      	ldr	r3, [pc, #428]	; (80091e4 <_dtoa_r+0x644>)
 8009036:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800903a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800903e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009040:	2b00      	cmp	r3, #0
 8009042:	f280 80e3 	bge.w	800920c <_dtoa_r+0x66c>
 8009046:	9b01      	ldr	r3, [sp, #4]
 8009048:	2b00      	cmp	r3, #0
 800904a:	f300 80df 	bgt.w	800920c <_dtoa_r+0x66c>
 800904e:	f040 826d 	bne.w	800952c <_dtoa_r+0x98c>
 8009052:	4b69      	ldr	r3, [pc, #420]	; (80091f8 <_dtoa_r+0x658>)
 8009054:	2200      	movs	r2, #0
 8009056:	4640      	mov	r0, r8
 8009058:	4649      	mov	r1, r9
 800905a:	f7f7 facd 	bl	80005f8 <__aeabi_dmul>
 800905e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009062:	f7f7 fd4f 	bl	8000b04 <__aeabi_dcmpge>
 8009066:	9e01      	ldr	r6, [sp, #4]
 8009068:	4637      	mov	r7, r6
 800906a:	2800      	cmp	r0, #0
 800906c:	f040 8243 	bne.w	80094f6 <_dtoa_r+0x956>
 8009070:	9d00      	ldr	r5, [sp, #0]
 8009072:	2331      	movs	r3, #49	; 0x31
 8009074:	f805 3b01 	strb.w	r3, [r5], #1
 8009078:	f10a 0a01 	add.w	sl, sl, #1
 800907c:	e23f      	b.n	80094fe <_dtoa_r+0x95e>
 800907e:	07f2      	lsls	r2, r6, #31
 8009080:	d505      	bpl.n	800908e <_dtoa_r+0x4ee>
 8009082:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009086:	f7f7 fab7 	bl	80005f8 <__aeabi_dmul>
 800908a:	3501      	adds	r5, #1
 800908c:	2301      	movs	r3, #1
 800908e:	1076      	asrs	r6, r6, #1
 8009090:	3708      	adds	r7, #8
 8009092:	e76c      	b.n	8008f6e <_dtoa_r+0x3ce>
 8009094:	2502      	movs	r5, #2
 8009096:	e76f      	b.n	8008f78 <_dtoa_r+0x3d8>
 8009098:	9b01      	ldr	r3, [sp, #4]
 800909a:	f8cd a01c 	str.w	sl, [sp, #28]
 800909e:	930c      	str	r3, [sp, #48]	; 0x30
 80090a0:	e78d      	b.n	8008fbe <_dtoa_r+0x41e>
 80090a2:	9900      	ldr	r1, [sp, #0]
 80090a4:	980c      	ldr	r0, [sp, #48]	; 0x30
 80090a6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80090a8:	4b4e      	ldr	r3, [pc, #312]	; (80091e4 <_dtoa_r+0x644>)
 80090aa:	ed9d 7b02 	vldr	d7, [sp, #8]
 80090ae:	4401      	add	r1, r0
 80090b0:	9102      	str	r1, [sp, #8]
 80090b2:	9908      	ldr	r1, [sp, #32]
 80090b4:	eeb0 8a47 	vmov.f32	s16, s14
 80090b8:	eef0 8a67 	vmov.f32	s17, s15
 80090bc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80090c0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80090c4:	2900      	cmp	r1, #0
 80090c6:	d045      	beq.n	8009154 <_dtoa_r+0x5b4>
 80090c8:	494c      	ldr	r1, [pc, #304]	; (80091fc <_dtoa_r+0x65c>)
 80090ca:	2000      	movs	r0, #0
 80090cc:	f7f7 fbbe 	bl	800084c <__aeabi_ddiv>
 80090d0:	ec53 2b18 	vmov	r2, r3, d8
 80090d4:	f7f7 f8d8 	bl	8000288 <__aeabi_dsub>
 80090d8:	9d00      	ldr	r5, [sp, #0]
 80090da:	ec41 0b18 	vmov	d8, r0, r1
 80090de:	4639      	mov	r1, r7
 80090e0:	4630      	mov	r0, r6
 80090e2:	f7f7 fd39 	bl	8000b58 <__aeabi_d2iz>
 80090e6:	900c      	str	r0, [sp, #48]	; 0x30
 80090e8:	f7f7 fa1c 	bl	8000524 <__aeabi_i2d>
 80090ec:	4602      	mov	r2, r0
 80090ee:	460b      	mov	r3, r1
 80090f0:	4630      	mov	r0, r6
 80090f2:	4639      	mov	r1, r7
 80090f4:	f7f7 f8c8 	bl	8000288 <__aeabi_dsub>
 80090f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80090fa:	3330      	adds	r3, #48	; 0x30
 80090fc:	f805 3b01 	strb.w	r3, [r5], #1
 8009100:	ec53 2b18 	vmov	r2, r3, d8
 8009104:	4606      	mov	r6, r0
 8009106:	460f      	mov	r7, r1
 8009108:	f7f7 fce8 	bl	8000adc <__aeabi_dcmplt>
 800910c:	2800      	cmp	r0, #0
 800910e:	d165      	bne.n	80091dc <_dtoa_r+0x63c>
 8009110:	4632      	mov	r2, r6
 8009112:	463b      	mov	r3, r7
 8009114:	4935      	ldr	r1, [pc, #212]	; (80091ec <_dtoa_r+0x64c>)
 8009116:	2000      	movs	r0, #0
 8009118:	f7f7 f8b6 	bl	8000288 <__aeabi_dsub>
 800911c:	ec53 2b18 	vmov	r2, r3, d8
 8009120:	f7f7 fcdc 	bl	8000adc <__aeabi_dcmplt>
 8009124:	2800      	cmp	r0, #0
 8009126:	f040 80b9 	bne.w	800929c <_dtoa_r+0x6fc>
 800912a:	9b02      	ldr	r3, [sp, #8]
 800912c:	429d      	cmp	r5, r3
 800912e:	f43f af75 	beq.w	800901c <_dtoa_r+0x47c>
 8009132:	4b2f      	ldr	r3, [pc, #188]	; (80091f0 <_dtoa_r+0x650>)
 8009134:	ec51 0b18 	vmov	r0, r1, d8
 8009138:	2200      	movs	r2, #0
 800913a:	f7f7 fa5d 	bl	80005f8 <__aeabi_dmul>
 800913e:	4b2c      	ldr	r3, [pc, #176]	; (80091f0 <_dtoa_r+0x650>)
 8009140:	ec41 0b18 	vmov	d8, r0, r1
 8009144:	2200      	movs	r2, #0
 8009146:	4630      	mov	r0, r6
 8009148:	4639      	mov	r1, r7
 800914a:	f7f7 fa55 	bl	80005f8 <__aeabi_dmul>
 800914e:	4606      	mov	r6, r0
 8009150:	460f      	mov	r7, r1
 8009152:	e7c4      	b.n	80090de <_dtoa_r+0x53e>
 8009154:	ec51 0b17 	vmov	r0, r1, d7
 8009158:	f7f7 fa4e 	bl	80005f8 <__aeabi_dmul>
 800915c:	9b02      	ldr	r3, [sp, #8]
 800915e:	9d00      	ldr	r5, [sp, #0]
 8009160:	930c      	str	r3, [sp, #48]	; 0x30
 8009162:	ec41 0b18 	vmov	d8, r0, r1
 8009166:	4639      	mov	r1, r7
 8009168:	4630      	mov	r0, r6
 800916a:	f7f7 fcf5 	bl	8000b58 <__aeabi_d2iz>
 800916e:	9011      	str	r0, [sp, #68]	; 0x44
 8009170:	f7f7 f9d8 	bl	8000524 <__aeabi_i2d>
 8009174:	4602      	mov	r2, r0
 8009176:	460b      	mov	r3, r1
 8009178:	4630      	mov	r0, r6
 800917a:	4639      	mov	r1, r7
 800917c:	f7f7 f884 	bl	8000288 <__aeabi_dsub>
 8009180:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009182:	3330      	adds	r3, #48	; 0x30
 8009184:	f805 3b01 	strb.w	r3, [r5], #1
 8009188:	9b02      	ldr	r3, [sp, #8]
 800918a:	429d      	cmp	r5, r3
 800918c:	4606      	mov	r6, r0
 800918e:	460f      	mov	r7, r1
 8009190:	f04f 0200 	mov.w	r2, #0
 8009194:	d134      	bne.n	8009200 <_dtoa_r+0x660>
 8009196:	4b19      	ldr	r3, [pc, #100]	; (80091fc <_dtoa_r+0x65c>)
 8009198:	ec51 0b18 	vmov	r0, r1, d8
 800919c:	f7f7 f876 	bl	800028c <__adddf3>
 80091a0:	4602      	mov	r2, r0
 80091a2:	460b      	mov	r3, r1
 80091a4:	4630      	mov	r0, r6
 80091a6:	4639      	mov	r1, r7
 80091a8:	f7f7 fcb6 	bl	8000b18 <__aeabi_dcmpgt>
 80091ac:	2800      	cmp	r0, #0
 80091ae:	d175      	bne.n	800929c <_dtoa_r+0x6fc>
 80091b0:	ec53 2b18 	vmov	r2, r3, d8
 80091b4:	4911      	ldr	r1, [pc, #68]	; (80091fc <_dtoa_r+0x65c>)
 80091b6:	2000      	movs	r0, #0
 80091b8:	f7f7 f866 	bl	8000288 <__aeabi_dsub>
 80091bc:	4602      	mov	r2, r0
 80091be:	460b      	mov	r3, r1
 80091c0:	4630      	mov	r0, r6
 80091c2:	4639      	mov	r1, r7
 80091c4:	f7f7 fc8a 	bl	8000adc <__aeabi_dcmplt>
 80091c8:	2800      	cmp	r0, #0
 80091ca:	f43f af27 	beq.w	800901c <_dtoa_r+0x47c>
 80091ce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80091d0:	1e6b      	subs	r3, r5, #1
 80091d2:	930c      	str	r3, [sp, #48]	; 0x30
 80091d4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80091d8:	2b30      	cmp	r3, #48	; 0x30
 80091da:	d0f8      	beq.n	80091ce <_dtoa_r+0x62e>
 80091dc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80091e0:	e04a      	b.n	8009278 <_dtoa_r+0x6d8>
 80091e2:	bf00      	nop
 80091e4:	0800b390 	.word	0x0800b390
 80091e8:	0800b368 	.word	0x0800b368
 80091ec:	3ff00000 	.word	0x3ff00000
 80091f0:	40240000 	.word	0x40240000
 80091f4:	401c0000 	.word	0x401c0000
 80091f8:	40140000 	.word	0x40140000
 80091fc:	3fe00000 	.word	0x3fe00000
 8009200:	4baf      	ldr	r3, [pc, #700]	; (80094c0 <_dtoa_r+0x920>)
 8009202:	f7f7 f9f9 	bl	80005f8 <__aeabi_dmul>
 8009206:	4606      	mov	r6, r0
 8009208:	460f      	mov	r7, r1
 800920a:	e7ac      	b.n	8009166 <_dtoa_r+0x5c6>
 800920c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009210:	9d00      	ldr	r5, [sp, #0]
 8009212:	4642      	mov	r2, r8
 8009214:	464b      	mov	r3, r9
 8009216:	4630      	mov	r0, r6
 8009218:	4639      	mov	r1, r7
 800921a:	f7f7 fb17 	bl	800084c <__aeabi_ddiv>
 800921e:	f7f7 fc9b 	bl	8000b58 <__aeabi_d2iz>
 8009222:	9002      	str	r0, [sp, #8]
 8009224:	f7f7 f97e 	bl	8000524 <__aeabi_i2d>
 8009228:	4642      	mov	r2, r8
 800922a:	464b      	mov	r3, r9
 800922c:	f7f7 f9e4 	bl	80005f8 <__aeabi_dmul>
 8009230:	4602      	mov	r2, r0
 8009232:	460b      	mov	r3, r1
 8009234:	4630      	mov	r0, r6
 8009236:	4639      	mov	r1, r7
 8009238:	f7f7 f826 	bl	8000288 <__aeabi_dsub>
 800923c:	9e02      	ldr	r6, [sp, #8]
 800923e:	9f01      	ldr	r7, [sp, #4]
 8009240:	3630      	adds	r6, #48	; 0x30
 8009242:	f805 6b01 	strb.w	r6, [r5], #1
 8009246:	9e00      	ldr	r6, [sp, #0]
 8009248:	1bae      	subs	r6, r5, r6
 800924a:	42b7      	cmp	r7, r6
 800924c:	4602      	mov	r2, r0
 800924e:	460b      	mov	r3, r1
 8009250:	d137      	bne.n	80092c2 <_dtoa_r+0x722>
 8009252:	f7f7 f81b 	bl	800028c <__adddf3>
 8009256:	4642      	mov	r2, r8
 8009258:	464b      	mov	r3, r9
 800925a:	4606      	mov	r6, r0
 800925c:	460f      	mov	r7, r1
 800925e:	f7f7 fc5b 	bl	8000b18 <__aeabi_dcmpgt>
 8009262:	b9c8      	cbnz	r0, 8009298 <_dtoa_r+0x6f8>
 8009264:	4642      	mov	r2, r8
 8009266:	464b      	mov	r3, r9
 8009268:	4630      	mov	r0, r6
 800926a:	4639      	mov	r1, r7
 800926c:	f7f7 fc2c 	bl	8000ac8 <__aeabi_dcmpeq>
 8009270:	b110      	cbz	r0, 8009278 <_dtoa_r+0x6d8>
 8009272:	9b02      	ldr	r3, [sp, #8]
 8009274:	07d9      	lsls	r1, r3, #31
 8009276:	d40f      	bmi.n	8009298 <_dtoa_r+0x6f8>
 8009278:	4620      	mov	r0, r4
 800927a:	4659      	mov	r1, fp
 800927c:	f000 fcfa 	bl	8009c74 <_Bfree>
 8009280:	2300      	movs	r3, #0
 8009282:	702b      	strb	r3, [r5, #0]
 8009284:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009286:	f10a 0001 	add.w	r0, sl, #1
 800928a:	6018      	str	r0, [r3, #0]
 800928c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800928e:	2b00      	cmp	r3, #0
 8009290:	f43f acd8 	beq.w	8008c44 <_dtoa_r+0xa4>
 8009294:	601d      	str	r5, [r3, #0]
 8009296:	e4d5      	b.n	8008c44 <_dtoa_r+0xa4>
 8009298:	f8cd a01c 	str.w	sl, [sp, #28]
 800929c:	462b      	mov	r3, r5
 800929e:	461d      	mov	r5, r3
 80092a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80092a4:	2a39      	cmp	r2, #57	; 0x39
 80092a6:	d108      	bne.n	80092ba <_dtoa_r+0x71a>
 80092a8:	9a00      	ldr	r2, [sp, #0]
 80092aa:	429a      	cmp	r2, r3
 80092ac:	d1f7      	bne.n	800929e <_dtoa_r+0x6fe>
 80092ae:	9a07      	ldr	r2, [sp, #28]
 80092b0:	9900      	ldr	r1, [sp, #0]
 80092b2:	3201      	adds	r2, #1
 80092b4:	9207      	str	r2, [sp, #28]
 80092b6:	2230      	movs	r2, #48	; 0x30
 80092b8:	700a      	strb	r2, [r1, #0]
 80092ba:	781a      	ldrb	r2, [r3, #0]
 80092bc:	3201      	adds	r2, #1
 80092be:	701a      	strb	r2, [r3, #0]
 80092c0:	e78c      	b.n	80091dc <_dtoa_r+0x63c>
 80092c2:	4b7f      	ldr	r3, [pc, #508]	; (80094c0 <_dtoa_r+0x920>)
 80092c4:	2200      	movs	r2, #0
 80092c6:	f7f7 f997 	bl	80005f8 <__aeabi_dmul>
 80092ca:	2200      	movs	r2, #0
 80092cc:	2300      	movs	r3, #0
 80092ce:	4606      	mov	r6, r0
 80092d0:	460f      	mov	r7, r1
 80092d2:	f7f7 fbf9 	bl	8000ac8 <__aeabi_dcmpeq>
 80092d6:	2800      	cmp	r0, #0
 80092d8:	d09b      	beq.n	8009212 <_dtoa_r+0x672>
 80092da:	e7cd      	b.n	8009278 <_dtoa_r+0x6d8>
 80092dc:	9a08      	ldr	r2, [sp, #32]
 80092de:	2a00      	cmp	r2, #0
 80092e0:	f000 80c4 	beq.w	800946c <_dtoa_r+0x8cc>
 80092e4:	9a05      	ldr	r2, [sp, #20]
 80092e6:	2a01      	cmp	r2, #1
 80092e8:	f300 80a8 	bgt.w	800943c <_dtoa_r+0x89c>
 80092ec:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80092ee:	2a00      	cmp	r2, #0
 80092f0:	f000 80a0 	beq.w	8009434 <_dtoa_r+0x894>
 80092f4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80092f8:	9e06      	ldr	r6, [sp, #24]
 80092fa:	4645      	mov	r5, r8
 80092fc:	9a04      	ldr	r2, [sp, #16]
 80092fe:	2101      	movs	r1, #1
 8009300:	441a      	add	r2, r3
 8009302:	4620      	mov	r0, r4
 8009304:	4498      	add	r8, r3
 8009306:	9204      	str	r2, [sp, #16]
 8009308:	f000 fd70 	bl	8009dec <__i2b>
 800930c:	4607      	mov	r7, r0
 800930e:	2d00      	cmp	r5, #0
 8009310:	dd0b      	ble.n	800932a <_dtoa_r+0x78a>
 8009312:	9b04      	ldr	r3, [sp, #16]
 8009314:	2b00      	cmp	r3, #0
 8009316:	dd08      	ble.n	800932a <_dtoa_r+0x78a>
 8009318:	42ab      	cmp	r3, r5
 800931a:	9a04      	ldr	r2, [sp, #16]
 800931c:	bfa8      	it	ge
 800931e:	462b      	movge	r3, r5
 8009320:	eba8 0803 	sub.w	r8, r8, r3
 8009324:	1aed      	subs	r5, r5, r3
 8009326:	1ad3      	subs	r3, r2, r3
 8009328:	9304      	str	r3, [sp, #16]
 800932a:	9b06      	ldr	r3, [sp, #24]
 800932c:	b1fb      	cbz	r3, 800936e <_dtoa_r+0x7ce>
 800932e:	9b08      	ldr	r3, [sp, #32]
 8009330:	2b00      	cmp	r3, #0
 8009332:	f000 809f 	beq.w	8009474 <_dtoa_r+0x8d4>
 8009336:	2e00      	cmp	r6, #0
 8009338:	dd11      	ble.n	800935e <_dtoa_r+0x7be>
 800933a:	4639      	mov	r1, r7
 800933c:	4632      	mov	r2, r6
 800933e:	4620      	mov	r0, r4
 8009340:	f000 fe10 	bl	8009f64 <__pow5mult>
 8009344:	465a      	mov	r2, fp
 8009346:	4601      	mov	r1, r0
 8009348:	4607      	mov	r7, r0
 800934a:	4620      	mov	r0, r4
 800934c:	f000 fd64 	bl	8009e18 <__multiply>
 8009350:	4659      	mov	r1, fp
 8009352:	9007      	str	r0, [sp, #28]
 8009354:	4620      	mov	r0, r4
 8009356:	f000 fc8d 	bl	8009c74 <_Bfree>
 800935a:	9b07      	ldr	r3, [sp, #28]
 800935c:	469b      	mov	fp, r3
 800935e:	9b06      	ldr	r3, [sp, #24]
 8009360:	1b9a      	subs	r2, r3, r6
 8009362:	d004      	beq.n	800936e <_dtoa_r+0x7ce>
 8009364:	4659      	mov	r1, fp
 8009366:	4620      	mov	r0, r4
 8009368:	f000 fdfc 	bl	8009f64 <__pow5mult>
 800936c:	4683      	mov	fp, r0
 800936e:	2101      	movs	r1, #1
 8009370:	4620      	mov	r0, r4
 8009372:	f000 fd3b 	bl	8009dec <__i2b>
 8009376:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009378:	2b00      	cmp	r3, #0
 800937a:	4606      	mov	r6, r0
 800937c:	dd7c      	ble.n	8009478 <_dtoa_r+0x8d8>
 800937e:	461a      	mov	r2, r3
 8009380:	4601      	mov	r1, r0
 8009382:	4620      	mov	r0, r4
 8009384:	f000 fdee 	bl	8009f64 <__pow5mult>
 8009388:	9b05      	ldr	r3, [sp, #20]
 800938a:	2b01      	cmp	r3, #1
 800938c:	4606      	mov	r6, r0
 800938e:	dd76      	ble.n	800947e <_dtoa_r+0x8de>
 8009390:	2300      	movs	r3, #0
 8009392:	9306      	str	r3, [sp, #24]
 8009394:	6933      	ldr	r3, [r6, #16]
 8009396:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800939a:	6918      	ldr	r0, [r3, #16]
 800939c:	f000 fcd6 	bl	8009d4c <__hi0bits>
 80093a0:	f1c0 0020 	rsb	r0, r0, #32
 80093a4:	9b04      	ldr	r3, [sp, #16]
 80093a6:	4418      	add	r0, r3
 80093a8:	f010 001f 	ands.w	r0, r0, #31
 80093ac:	f000 8086 	beq.w	80094bc <_dtoa_r+0x91c>
 80093b0:	f1c0 0320 	rsb	r3, r0, #32
 80093b4:	2b04      	cmp	r3, #4
 80093b6:	dd7f      	ble.n	80094b8 <_dtoa_r+0x918>
 80093b8:	f1c0 001c 	rsb	r0, r0, #28
 80093bc:	9b04      	ldr	r3, [sp, #16]
 80093be:	4403      	add	r3, r0
 80093c0:	4480      	add	r8, r0
 80093c2:	4405      	add	r5, r0
 80093c4:	9304      	str	r3, [sp, #16]
 80093c6:	f1b8 0f00 	cmp.w	r8, #0
 80093ca:	dd05      	ble.n	80093d8 <_dtoa_r+0x838>
 80093cc:	4659      	mov	r1, fp
 80093ce:	4642      	mov	r2, r8
 80093d0:	4620      	mov	r0, r4
 80093d2:	f000 fe21 	bl	800a018 <__lshift>
 80093d6:	4683      	mov	fp, r0
 80093d8:	9b04      	ldr	r3, [sp, #16]
 80093da:	2b00      	cmp	r3, #0
 80093dc:	dd05      	ble.n	80093ea <_dtoa_r+0x84a>
 80093de:	4631      	mov	r1, r6
 80093e0:	461a      	mov	r2, r3
 80093e2:	4620      	mov	r0, r4
 80093e4:	f000 fe18 	bl	800a018 <__lshift>
 80093e8:	4606      	mov	r6, r0
 80093ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d069      	beq.n	80094c4 <_dtoa_r+0x924>
 80093f0:	4631      	mov	r1, r6
 80093f2:	4658      	mov	r0, fp
 80093f4:	f000 fe7c 	bl	800a0f0 <__mcmp>
 80093f8:	2800      	cmp	r0, #0
 80093fa:	da63      	bge.n	80094c4 <_dtoa_r+0x924>
 80093fc:	2300      	movs	r3, #0
 80093fe:	4659      	mov	r1, fp
 8009400:	220a      	movs	r2, #10
 8009402:	4620      	mov	r0, r4
 8009404:	f000 fc58 	bl	8009cb8 <__multadd>
 8009408:	9b08      	ldr	r3, [sp, #32]
 800940a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800940e:	4683      	mov	fp, r0
 8009410:	2b00      	cmp	r3, #0
 8009412:	f000 818f 	beq.w	8009734 <_dtoa_r+0xb94>
 8009416:	4639      	mov	r1, r7
 8009418:	2300      	movs	r3, #0
 800941a:	220a      	movs	r2, #10
 800941c:	4620      	mov	r0, r4
 800941e:	f000 fc4b 	bl	8009cb8 <__multadd>
 8009422:	f1b9 0f00 	cmp.w	r9, #0
 8009426:	4607      	mov	r7, r0
 8009428:	f300 808e 	bgt.w	8009548 <_dtoa_r+0x9a8>
 800942c:	9b05      	ldr	r3, [sp, #20]
 800942e:	2b02      	cmp	r3, #2
 8009430:	dc50      	bgt.n	80094d4 <_dtoa_r+0x934>
 8009432:	e089      	b.n	8009548 <_dtoa_r+0x9a8>
 8009434:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009436:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800943a:	e75d      	b.n	80092f8 <_dtoa_r+0x758>
 800943c:	9b01      	ldr	r3, [sp, #4]
 800943e:	1e5e      	subs	r6, r3, #1
 8009440:	9b06      	ldr	r3, [sp, #24]
 8009442:	42b3      	cmp	r3, r6
 8009444:	bfbf      	itttt	lt
 8009446:	9b06      	ldrlt	r3, [sp, #24]
 8009448:	9606      	strlt	r6, [sp, #24]
 800944a:	1af2      	sublt	r2, r6, r3
 800944c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800944e:	bfb6      	itet	lt
 8009450:	189b      	addlt	r3, r3, r2
 8009452:	1b9e      	subge	r6, r3, r6
 8009454:	930d      	strlt	r3, [sp, #52]	; 0x34
 8009456:	9b01      	ldr	r3, [sp, #4]
 8009458:	bfb8      	it	lt
 800945a:	2600      	movlt	r6, #0
 800945c:	2b00      	cmp	r3, #0
 800945e:	bfb5      	itete	lt
 8009460:	eba8 0503 	sublt.w	r5, r8, r3
 8009464:	9b01      	ldrge	r3, [sp, #4]
 8009466:	2300      	movlt	r3, #0
 8009468:	4645      	movge	r5, r8
 800946a:	e747      	b.n	80092fc <_dtoa_r+0x75c>
 800946c:	9e06      	ldr	r6, [sp, #24]
 800946e:	9f08      	ldr	r7, [sp, #32]
 8009470:	4645      	mov	r5, r8
 8009472:	e74c      	b.n	800930e <_dtoa_r+0x76e>
 8009474:	9a06      	ldr	r2, [sp, #24]
 8009476:	e775      	b.n	8009364 <_dtoa_r+0x7c4>
 8009478:	9b05      	ldr	r3, [sp, #20]
 800947a:	2b01      	cmp	r3, #1
 800947c:	dc18      	bgt.n	80094b0 <_dtoa_r+0x910>
 800947e:	9b02      	ldr	r3, [sp, #8]
 8009480:	b9b3      	cbnz	r3, 80094b0 <_dtoa_r+0x910>
 8009482:	9b03      	ldr	r3, [sp, #12]
 8009484:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009488:	b9a3      	cbnz	r3, 80094b4 <_dtoa_r+0x914>
 800948a:	9b03      	ldr	r3, [sp, #12]
 800948c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009490:	0d1b      	lsrs	r3, r3, #20
 8009492:	051b      	lsls	r3, r3, #20
 8009494:	b12b      	cbz	r3, 80094a2 <_dtoa_r+0x902>
 8009496:	9b04      	ldr	r3, [sp, #16]
 8009498:	3301      	adds	r3, #1
 800949a:	9304      	str	r3, [sp, #16]
 800949c:	f108 0801 	add.w	r8, r8, #1
 80094a0:	2301      	movs	r3, #1
 80094a2:	9306      	str	r3, [sp, #24]
 80094a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	f47f af74 	bne.w	8009394 <_dtoa_r+0x7f4>
 80094ac:	2001      	movs	r0, #1
 80094ae:	e779      	b.n	80093a4 <_dtoa_r+0x804>
 80094b0:	2300      	movs	r3, #0
 80094b2:	e7f6      	b.n	80094a2 <_dtoa_r+0x902>
 80094b4:	9b02      	ldr	r3, [sp, #8]
 80094b6:	e7f4      	b.n	80094a2 <_dtoa_r+0x902>
 80094b8:	d085      	beq.n	80093c6 <_dtoa_r+0x826>
 80094ba:	4618      	mov	r0, r3
 80094bc:	301c      	adds	r0, #28
 80094be:	e77d      	b.n	80093bc <_dtoa_r+0x81c>
 80094c0:	40240000 	.word	0x40240000
 80094c4:	9b01      	ldr	r3, [sp, #4]
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	dc38      	bgt.n	800953c <_dtoa_r+0x99c>
 80094ca:	9b05      	ldr	r3, [sp, #20]
 80094cc:	2b02      	cmp	r3, #2
 80094ce:	dd35      	ble.n	800953c <_dtoa_r+0x99c>
 80094d0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80094d4:	f1b9 0f00 	cmp.w	r9, #0
 80094d8:	d10d      	bne.n	80094f6 <_dtoa_r+0x956>
 80094da:	4631      	mov	r1, r6
 80094dc:	464b      	mov	r3, r9
 80094de:	2205      	movs	r2, #5
 80094e0:	4620      	mov	r0, r4
 80094e2:	f000 fbe9 	bl	8009cb8 <__multadd>
 80094e6:	4601      	mov	r1, r0
 80094e8:	4606      	mov	r6, r0
 80094ea:	4658      	mov	r0, fp
 80094ec:	f000 fe00 	bl	800a0f0 <__mcmp>
 80094f0:	2800      	cmp	r0, #0
 80094f2:	f73f adbd 	bgt.w	8009070 <_dtoa_r+0x4d0>
 80094f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094f8:	9d00      	ldr	r5, [sp, #0]
 80094fa:	ea6f 0a03 	mvn.w	sl, r3
 80094fe:	f04f 0800 	mov.w	r8, #0
 8009502:	4631      	mov	r1, r6
 8009504:	4620      	mov	r0, r4
 8009506:	f000 fbb5 	bl	8009c74 <_Bfree>
 800950a:	2f00      	cmp	r7, #0
 800950c:	f43f aeb4 	beq.w	8009278 <_dtoa_r+0x6d8>
 8009510:	f1b8 0f00 	cmp.w	r8, #0
 8009514:	d005      	beq.n	8009522 <_dtoa_r+0x982>
 8009516:	45b8      	cmp	r8, r7
 8009518:	d003      	beq.n	8009522 <_dtoa_r+0x982>
 800951a:	4641      	mov	r1, r8
 800951c:	4620      	mov	r0, r4
 800951e:	f000 fba9 	bl	8009c74 <_Bfree>
 8009522:	4639      	mov	r1, r7
 8009524:	4620      	mov	r0, r4
 8009526:	f000 fba5 	bl	8009c74 <_Bfree>
 800952a:	e6a5      	b.n	8009278 <_dtoa_r+0x6d8>
 800952c:	2600      	movs	r6, #0
 800952e:	4637      	mov	r7, r6
 8009530:	e7e1      	b.n	80094f6 <_dtoa_r+0x956>
 8009532:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8009534:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8009538:	4637      	mov	r7, r6
 800953a:	e599      	b.n	8009070 <_dtoa_r+0x4d0>
 800953c:	9b08      	ldr	r3, [sp, #32]
 800953e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8009542:	2b00      	cmp	r3, #0
 8009544:	f000 80fd 	beq.w	8009742 <_dtoa_r+0xba2>
 8009548:	2d00      	cmp	r5, #0
 800954a:	dd05      	ble.n	8009558 <_dtoa_r+0x9b8>
 800954c:	4639      	mov	r1, r7
 800954e:	462a      	mov	r2, r5
 8009550:	4620      	mov	r0, r4
 8009552:	f000 fd61 	bl	800a018 <__lshift>
 8009556:	4607      	mov	r7, r0
 8009558:	9b06      	ldr	r3, [sp, #24]
 800955a:	2b00      	cmp	r3, #0
 800955c:	d05c      	beq.n	8009618 <_dtoa_r+0xa78>
 800955e:	6879      	ldr	r1, [r7, #4]
 8009560:	4620      	mov	r0, r4
 8009562:	f000 fb47 	bl	8009bf4 <_Balloc>
 8009566:	4605      	mov	r5, r0
 8009568:	b928      	cbnz	r0, 8009576 <_dtoa_r+0x9d6>
 800956a:	4b80      	ldr	r3, [pc, #512]	; (800976c <_dtoa_r+0xbcc>)
 800956c:	4602      	mov	r2, r0
 800956e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009572:	f7ff bb2e 	b.w	8008bd2 <_dtoa_r+0x32>
 8009576:	693a      	ldr	r2, [r7, #16]
 8009578:	3202      	adds	r2, #2
 800957a:	0092      	lsls	r2, r2, #2
 800957c:	f107 010c 	add.w	r1, r7, #12
 8009580:	300c      	adds	r0, #12
 8009582:	f7fe fbed 	bl	8007d60 <memcpy>
 8009586:	2201      	movs	r2, #1
 8009588:	4629      	mov	r1, r5
 800958a:	4620      	mov	r0, r4
 800958c:	f000 fd44 	bl	800a018 <__lshift>
 8009590:	9b00      	ldr	r3, [sp, #0]
 8009592:	3301      	adds	r3, #1
 8009594:	9301      	str	r3, [sp, #4]
 8009596:	9b00      	ldr	r3, [sp, #0]
 8009598:	444b      	add	r3, r9
 800959a:	9307      	str	r3, [sp, #28]
 800959c:	9b02      	ldr	r3, [sp, #8]
 800959e:	f003 0301 	and.w	r3, r3, #1
 80095a2:	46b8      	mov	r8, r7
 80095a4:	9306      	str	r3, [sp, #24]
 80095a6:	4607      	mov	r7, r0
 80095a8:	9b01      	ldr	r3, [sp, #4]
 80095aa:	4631      	mov	r1, r6
 80095ac:	3b01      	subs	r3, #1
 80095ae:	4658      	mov	r0, fp
 80095b0:	9302      	str	r3, [sp, #8]
 80095b2:	f7ff fa67 	bl	8008a84 <quorem>
 80095b6:	4603      	mov	r3, r0
 80095b8:	3330      	adds	r3, #48	; 0x30
 80095ba:	9004      	str	r0, [sp, #16]
 80095bc:	4641      	mov	r1, r8
 80095be:	4658      	mov	r0, fp
 80095c0:	9308      	str	r3, [sp, #32]
 80095c2:	f000 fd95 	bl	800a0f0 <__mcmp>
 80095c6:	463a      	mov	r2, r7
 80095c8:	4681      	mov	r9, r0
 80095ca:	4631      	mov	r1, r6
 80095cc:	4620      	mov	r0, r4
 80095ce:	f000 fdab 	bl	800a128 <__mdiff>
 80095d2:	68c2      	ldr	r2, [r0, #12]
 80095d4:	9b08      	ldr	r3, [sp, #32]
 80095d6:	4605      	mov	r5, r0
 80095d8:	bb02      	cbnz	r2, 800961c <_dtoa_r+0xa7c>
 80095da:	4601      	mov	r1, r0
 80095dc:	4658      	mov	r0, fp
 80095de:	f000 fd87 	bl	800a0f0 <__mcmp>
 80095e2:	9b08      	ldr	r3, [sp, #32]
 80095e4:	4602      	mov	r2, r0
 80095e6:	4629      	mov	r1, r5
 80095e8:	4620      	mov	r0, r4
 80095ea:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80095ee:	f000 fb41 	bl	8009c74 <_Bfree>
 80095f2:	9b05      	ldr	r3, [sp, #20]
 80095f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80095f6:	9d01      	ldr	r5, [sp, #4]
 80095f8:	ea43 0102 	orr.w	r1, r3, r2
 80095fc:	9b06      	ldr	r3, [sp, #24]
 80095fe:	430b      	orrs	r3, r1
 8009600:	9b08      	ldr	r3, [sp, #32]
 8009602:	d10d      	bne.n	8009620 <_dtoa_r+0xa80>
 8009604:	2b39      	cmp	r3, #57	; 0x39
 8009606:	d029      	beq.n	800965c <_dtoa_r+0xabc>
 8009608:	f1b9 0f00 	cmp.w	r9, #0
 800960c:	dd01      	ble.n	8009612 <_dtoa_r+0xa72>
 800960e:	9b04      	ldr	r3, [sp, #16]
 8009610:	3331      	adds	r3, #49	; 0x31
 8009612:	9a02      	ldr	r2, [sp, #8]
 8009614:	7013      	strb	r3, [r2, #0]
 8009616:	e774      	b.n	8009502 <_dtoa_r+0x962>
 8009618:	4638      	mov	r0, r7
 800961a:	e7b9      	b.n	8009590 <_dtoa_r+0x9f0>
 800961c:	2201      	movs	r2, #1
 800961e:	e7e2      	b.n	80095e6 <_dtoa_r+0xa46>
 8009620:	f1b9 0f00 	cmp.w	r9, #0
 8009624:	db06      	blt.n	8009634 <_dtoa_r+0xa94>
 8009626:	9905      	ldr	r1, [sp, #20]
 8009628:	ea41 0909 	orr.w	r9, r1, r9
 800962c:	9906      	ldr	r1, [sp, #24]
 800962e:	ea59 0101 	orrs.w	r1, r9, r1
 8009632:	d120      	bne.n	8009676 <_dtoa_r+0xad6>
 8009634:	2a00      	cmp	r2, #0
 8009636:	ddec      	ble.n	8009612 <_dtoa_r+0xa72>
 8009638:	4659      	mov	r1, fp
 800963a:	2201      	movs	r2, #1
 800963c:	4620      	mov	r0, r4
 800963e:	9301      	str	r3, [sp, #4]
 8009640:	f000 fcea 	bl	800a018 <__lshift>
 8009644:	4631      	mov	r1, r6
 8009646:	4683      	mov	fp, r0
 8009648:	f000 fd52 	bl	800a0f0 <__mcmp>
 800964c:	2800      	cmp	r0, #0
 800964e:	9b01      	ldr	r3, [sp, #4]
 8009650:	dc02      	bgt.n	8009658 <_dtoa_r+0xab8>
 8009652:	d1de      	bne.n	8009612 <_dtoa_r+0xa72>
 8009654:	07da      	lsls	r2, r3, #31
 8009656:	d5dc      	bpl.n	8009612 <_dtoa_r+0xa72>
 8009658:	2b39      	cmp	r3, #57	; 0x39
 800965a:	d1d8      	bne.n	800960e <_dtoa_r+0xa6e>
 800965c:	9a02      	ldr	r2, [sp, #8]
 800965e:	2339      	movs	r3, #57	; 0x39
 8009660:	7013      	strb	r3, [r2, #0]
 8009662:	462b      	mov	r3, r5
 8009664:	461d      	mov	r5, r3
 8009666:	3b01      	subs	r3, #1
 8009668:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800966c:	2a39      	cmp	r2, #57	; 0x39
 800966e:	d050      	beq.n	8009712 <_dtoa_r+0xb72>
 8009670:	3201      	adds	r2, #1
 8009672:	701a      	strb	r2, [r3, #0]
 8009674:	e745      	b.n	8009502 <_dtoa_r+0x962>
 8009676:	2a00      	cmp	r2, #0
 8009678:	dd03      	ble.n	8009682 <_dtoa_r+0xae2>
 800967a:	2b39      	cmp	r3, #57	; 0x39
 800967c:	d0ee      	beq.n	800965c <_dtoa_r+0xabc>
 800967e:	3301      	adds	r3, #1
 8009680:	e7c7      	b.n	8009612 <_dtoa_r+0xa72>
 8009682:	9a01      	ldr	r2, [sp, #4]
 8009684:	9907      	ldr	r1, [sp, #28]
 8009686:	f802 3c01 	strb.w	r3, [r2, #-1]
 800968a:	428a      	cmp	r2, r1
 800968c:	d02a      	beq.n	80096e4 <_dtoa_r+0xb44>
 800968e:	4659      	mov	r1, fp
 8009690:	2300      	movs	r3, #0
 8009692:	220a      	movs	r2, #10
 8009694:	4620      	mov	r0, r4
 8009696:	f000 fb0f 	bl	8009cb8 <__multadd>
 800969a:	45b8      	cmp	r8, r7
 800969c:	4683      	mov	fp, r0
 800969e:	f04f 0300 	mov.w	r3, #0
 80096a2:	f04f 020a 	mov.w	r2, #10
 80096a6:	4641      	mov	r1, r8
 80096a8:	4620      	mov	r0, r4
 80096aa:	d107      	bne.n	80096bc <_dtoa_r+0xb1c>
 80096ac:	f000 fb04 	bl	8009cb8 <__multadd>
 80096b0:	4680      	mov	r8, r0
 80096b2:	4607      	mov	r7, r0
 80096b4:	9b01      	ldr	r3, [sp, #4]
 80096b6:	3301      	adds	r3, #1
 80096b8:	9301      	str	r3, [sp, #4]
 80096ba:	e775      	b.n	80095a8 <_dtoa_r+0xa08>
 80096bc:	f000 fafc 	bl	8009cb8 <__multadd>
 80096c0:	4639      	mov	r1, r7
 80096c2:	4680      	mov	r8, r0
 80096c4:	2300      	movs	r3, #0
 80096c6:	220a      	movs	r2, #10
 80096c8:	4620      	mov	r0, r4
 80096ca:	f000 faf5 	bl	8009cb8 <__multadd>
 80096ce:	4607      	mov	r7, r0
 80096d0:	e7f0      	b.n	80096b4 <_dtoa_r+0xb14>
 80096d2:	f1b9 0f00 	cmp.w	r9, #0
 80096d6:	9a00      	ldr	r2, [sp, #0]
 80096d8:	bfcc      	ite	gt
 80096da:	464d      	movgt	r5, r9
 80096dc:	2501      	movle	r5, #1
 80096de:	4415      	add	r5, r2
 80096e0:	f04f 0800 	mov.w	r8, #0
 80096e4:	4659      	mov	r1, fp
 80096e6:	2201      	movs	r2, #1
 80096e8:	4620      	mov	r0, r4
 80096ea:	9301      	str	r3, [sp, #4]
 80096ec:	f000 fc94 	bl	800a018 <__lshift>
 80096f0:	4631      	mov	r1, r6
 80096f2:	4683      	mov	fp, r0
 80096f4:	f000 fcfc 	bl	800a0f0 <__mcmp>
 80096f8:	2800      	cmp	r0, #0
 80096fa:	dcb2      	bgt.n	8009662 <_dtoa_r+0xac2>
 80096fc:	d102      	bne.n	8009704 <_dtoa_r+0xb64>
 80096fe:	9b01      	ldr	r3, [sp, #4]
 8009700:	07db      	lsls	r3, r3, #31
 8009702:	d4ae      	bmi.n	8009662 <_dtoa_r+0xac2>
 8009704:	462b      	mov	r3, r5
 8009706:	461d      	mov	r5, r3
 8009708:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800970c:	2a30      	cmp	r2, #48	; 0x30
 800970e:	d0fa      	beq.n	8009706 <_dtoa_r+0xb66>
 8009710:	e6f7      	b.n	8009502 <_dtoa_r+0x962>
 8009712:	9a00      	ldr	r2, [sp, #0]
 8009714:	429a      	cmp	r2, r3
 8009716:	d1a5      	bne.n	8009664 <_dtoa_r+0xac4>
 8009718:	f10a 0a01 	add.w	sl, sl, #1
 800971c:	2331      	movs	r3, #49	; 0x31
 800971e:	e779      	b.n	8009614 <_dtoa_r+0xa74>
 8009720:	4b13      	ldr	r3, [pc, #76]	; (8009770 <_dtoa_r+0xbd0>)
 8009722:	f7ff baaf 	b.w	8008c84 <_dtoa_r+0xe4>
 8009726:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009728:	2b00      	cmp	r3, #0
 800972a:	f47f aa86 	bne.w	8008c3a <_dtoa_r+0x9a>
 800972e:	4b11      	ldr	r3, [pc, #68]	; (8009774 <_dtoa_r+0xbd4>)
 8009730:	f7ff baa8 	b.w	8008c84 <_dtoa_r+0xe4>
 8009734:	f1b9 0f00 	cmp.w	r9, #0
 8009738:	dc03      	bgt.n	8009742 <_dtoa_r+0xba2>
 800973a:	9b05      	ldr	r3, [sp, #20]
 800973c:	2b02      	cmp	r3, #2
 800973e:	f73f aec9 	bgt.w	80094d4 <_dtoa_r+0x934>
 8009742:	9d00      	ldr	r5, [sp, #0]
 8009744:	4631      	mov	r1, r6
 8009746:	4658      	mov	r0, fp
 8009748:	f7ff f99c 	bl	8008a84 <quorem>
 800974c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8009750:	f805 3b01 	strb.w	r3, [r5], #1
 8009754:	9a00      	ldr	r2, [sp, #0]
 8009756:	1aaa      	subs	r2, r5, r2
 8009758:	4591      	cmp	r9, r2
 800975a:	ddba      	ble.n	80096d2 <_dtoa_r+0xb32>
 800975c:	4659      	mov	r1, fp
 800975e:	2300      	movs	r3, #0
 8009760:	220a      	movs	r2, #10
 8009762:	4620      	mov	r0, r4
 8009764:	f000 faa8 	bl	8009cb8 <__multadd>
 8009768:	4683      	mov	fp, r0
 800976a:	e7eb      	b.n	8009744 <_dtoa_r+0xba4>
 800976c:	0800b294 	.word	0x0800b294
 8009770:	0800b150 	.word	0x0800b150
 8009774:	0800b228 	.word	0x0800b228

08009778 <__sflush_r>:
 8009778:	898a      	ldrh	r2, [r1, #12]
 800977a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800977e:	4605      	mov	r5, r0
 8009780:	0710      	lsls	r0, r2, #28
 8009782:	460c      	mov	r4, r1
 8009784:	d458      	bmi.n	8009838 <__sflush_r+0xc0>
 8009786:	684b      	ldr	r3, [r1, #4]
 8009788:	2b00      	cmp	r3, #0
 800978a:	dc05      	bgt.n	8009798 <__sflush_r+0x20>
 800978c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800978e:	2b00      	cmp	r3, #0
 8009790:	dc02      	bgt.n	8009798 <__sflush_r+0x20>
 8009792:	2000      	movs	r0, #0
 8009794:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009798:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800979a:	2e00      	cmp	r6, #0
 800979c:	d0f9      	beq.n	8009792 <__sflush_r+0x1a>
 800979e:	2300      	movs	r3, #0
 80097a0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80097a4:	682f      	ldr	r7, [r5, #0]
 80097a6:	602b      	str	r3, [r5, #0]
 80097a8:	d032      	beq.n	8009810 <__sflush_r+0x98>
 80097aa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80097ac:	89a3      	ldrh	r3, [r4, #12]
 80097ae:	075a      	lsls	r2, r3, #29
 80097b0:	d505      	bpl.n	80097be <__sflush_r+0x46>
 80097b2:	6863      	ldr	r3, [r4, #4]
 80097b4:	1ac0      	subs	r0, r0, r3
 80097b6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80097b8:	b10b      	cbz	r3, 80097be <__sflush_r+0x46>
 80097ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80097bc:	1ac0      	subs	r0, r0, r3
 80097be:	2300      	movs	r3, #0
 80097c0:	4602      	mov	r2, r0
 80097c2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80097c4:	6a21      	ldr	r1, [r4, #32]
 80097c6:	4628      	mov	r0, r5
 80097c8:	47b0      	blx	r6
 80097ca:	1c43      	adds	r3, r0, #1
 80097cc:	89a3      	ldrh	r3, [r4, #12]
 80097ce:	d106      	bne.n	80097de <__sflush_r+0x66>
 80097d0:	6829      	ldr	r1, [r5, #0]
 80097d2:	291d      	cmp	r1, #29
 80097d4:	d82c      	bhi.n	8009830 <__sflush_r+0xb8>
 80097d6:	4a2a      	ldr	r2, [pc, #168]	; (8009880 <__sflush_r+0x108>)
 80097d8:	40ca      	lsrs	r2, r1
 80097da:	07d6      	lsls	r6, r2, #31
 80097dc:	d528      	bpl.n	8009830 <__sflush_r+0xb8>
 80097de:	2200      	movs	r2, #0
 80097e0:	6062      	str	r2, [r4, #4]
 80097e2:	04d9      	lsls	r1, r3, #19
 80097e4:	6922      	ldr	r2, [r4, #16]
 80097e6:	6022      	str	r2, [r4, #0]
 80097e8:	d504      	bpl.n	80097f4 <__sflush_r+0x7c>
 80097ea:	1c42      	adds	r2, r0, #1
 80097ec:	d101      	bne.n	80097f2 <__sflush_r+0x7a>
 80097ee:	682b      	ldr	r3, [r5, #0]
 80097f0:	b903      	cbnz	r3, 80097f4 <__sflush_r+0x7c>
 80097f2:	6560      	str	r0, [r4, #84]	; 0x54
 80097f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80097f6:	602f      	str	r7, [r5, #0]
 80097f8:	2900      	cmp	r1, #0
 80097fa:	d0ca      	beq.n	8009792 <__sflush_r+0x1a>
 80097fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009800:	4299      	cmp	r1, r3
 8009802:	d002      	beq.n	800980a <__sflush_r+0x92>
 8009804:	4628      	mov	r0, r5
 8009806:	f000 fd83 	bl	800a310 <_free_r>
 800980a:	2000      	movs	r0, #0
 800980c:	6360      	str	r0, [r4, #52]	; 0x34
 800980e:	e7c1      	b.n	8009794 <__sflush_r+0x1c>
 8009810:	6a21      	ldr	r1, [r4, #32]
 8009812:	2301      	movs	r3, #1
 8009814:	4628      	mov	r0, r5
 8009816:	47b0      	blx	r6
 8009818:	1c41      	adds	r1, r0, #1
 800981a:	d1c7      	bne.n	80097ac <__sflush_r+0x34>
 800981c:	682b      	ldr	r3, [r5, #0]
 800981e:	2b00      	cmp	r3, #0
 8009820:	d0c4      	beq.n	80097ac <__sflush_r+0x34>
 8009822:	2b1d      	cmp	r3, #29
 8009824:	d001      	beq.n	800982a <__sflush_r+0xb2>
 8009826:	2b16      	cmp	r3, #22
 8009828:	d101      	bne.n	800982e <__sflush_r+0xb6>
 800982a:	602f      	str	r7, [r5, #0]
 800982c:	e7b1      	b.n	8009792 <__sflush_r+0x1a>
 800982e:	89a3      	ldrh	r3, [r4, #12]
 8009830:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009834:	81a3      	strh	r3, [r4, #12]
 8009836:	e7ad      	b.n	8009794 <__sflush_r+0x1c>
 8009838:	690f      	ldr	r7, [r1, #16]
 800983a:	2f00      	cmp	r7, #0
 800983c:	d0a9      	beq.n	8009792 <__sflush_r+0x1a>
 800983e:	0793      	lsls	r3, r2, #30
 8009840:	680e      	ldr	r6, [r1, #0]
 8009842:	bf08      	it	eq
 8009844:	694b      	ldreq	r3, [r1, #20]
 8009846:	600f      	str	r7, [r1, #0]
 8009848:	bf18      	it	ne
 800984a:	2300      	movne	r3, #0
 800984c:	eba6 0807 	sub.w	r8, r6, r7
 8009850:	608b      	str	r3, [r1, #8]
 8009852:	f1b8 0f00 	cmp.w	r8, #0
 8009856:	dd9c      	ble.n	8009792 <__sflush_r+0x1a>
 8009858:	6a21      	ldr	r1, [r4, #32]
 800985a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800985c:	4643      	mov	r3, r8
 800985e:	463a      	mov	r2, r7
 8009860:	4628      	mov	r0, r5
 8009862:	47b0      	blx	r6
 8009864:	2800      	cmp	r0, #0
 8009866:	dc06      	bgt.n	8009876 <__sflush_r+0xfe>
 8009868:	89a3      	ldrh	r3, [r4, #12]
 800986a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800986e:	81a3      	strh	r3, [r4, #12]
 8009870:	f04f 30ff 	mov.w	r0, #4294967295
 8009874:	e78e      	b.n	8009794 <__sflush_r+0x1c>
 8009876:	4407      	add	r7, r0
 8009878:	eba8 0800 	sub.w	r8, r8, r0
 800987c:	e7e9      	b.n	8009852 <__sflush_r+0xda>
 800987e:	bf00      	nop
 8009880:	20400001 	.word	0x20400001

08009884 <_fflush_r>:
 8009884:	b538      	push	{r3, r4, r5, lr}
 8009886:	690b      	ldr	r3, [r1, #16]
 8009888:	4605      	mov	r5, r0
 800988a:	460c      	mov	r4, r1
 800988c:	b913      	cbnz	r3, 8009894 <_fflush_r+0x10>
 800988e:	2500      	movs	r5, #0
 8009890:	4628      	mov	r0, r5
 8009892:	bd38      	pop	{r3, r4, r5, pc}
 8009894:	b118      	cbz	r0, 800989e <_fflush_r+0x1a>
 8009896:	6983      	ldr	r3, [r0, #24]
 8009898:	b90b      	cbnz	r3, 800989e <_fflush_r+0x1a>
 800989a:	f000 f887 	bl	80099ac <__sinit>
 800989e:	4b14      	ldr	r3, [pc, #80]	; (80098f0 <_fflush_r+0x6c>)
 80098a0:	429c      	cmp	r4, r3
 80098a2:	d11b      	bne.n	80098dc <_fflush_r+0x58>
 80098a4:	686c      	ldr	r4, [r5, #4]
 80098a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d0ef      	beq.n	800988e <_fflush_r+0xa>
 80098ae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80098b0:	07d0      	lsls	r0, r2, #31
 80098b2:	d404      	bmi.n	80098be <_fflush_r+0x3a>
 80098b4:	0599      	lsls	r1, r3, #22
 80098b6:	d402      	bmi.n	80098be <_fflush_r+0x3a>
 80098b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80098ba:	f000 f92c 	bl	8009b16 <__retarget_lock_acquire_recursive>
 80098be:	4628      	mov	r0, r5
 80098c0:	4621      	mov	r1, r4
 80098c2:	f7ff ff59 	bl	8009778 <__sflush_r>
 80098c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80098c8:	07da      	lsls	r2, r3, #31
 80098ca:	4605      	mov	r5, r0
 80098cc:	d4e0      	bmi.n	8009890 <_fflush_r+0xc>
 80098ce:	89a3      	ldrh	r3, [r4, #12]
 80098d0:	059b      	lsls	r3, r3, #22
 80098d2:	d4dd      	bmi.n	8009890 <_fflush_r+0xc>
 80098d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80098d6:	f000 f91f 	bl	8009b18 <__retarget_lock_release_recursive>
 80098da:	e7d9      	b.n	8009890 <_fflush_r+0xc>
 80098dc:	4b05      	ldr	r3, [pc, #20]	; (80098f4 <_fflush_r+0x70>)
 80098de:	429c      	cmp	r4, r3
 80098e0:	d101      	bne.n	80098e6 <_fflush_r+0x62>
 80098e2:	68ac      	ldr	r4, [r5, #8]
 80098e4:	e7df      	b.n	80098a6 <_fflush_r+0x22>
 80098e6:	4b04      	ldr	r3, [pc, #16]	; (80098f8 <_fflush_r+0x74>)
 80098e8:	429c      	cmp	r4, r3
 80098ea:	bf08      	it	eq
 80098ec:	68ec      	ldreq	r4, [r5, #12]
 80098ee:	e7da      	b.n	80098a6 <_fflush_r+0x22>
 80098f0:	0800b2c8 	.word	0x0800b2c8
 80098f4:	0800b2e8 	.word	0x0800b2e8
 80098f8:	0800b2a8 	.word	0x0800b2a8

080098fc <std>:
 80098fc:	2300      	movs	r3, #0
 80098fe:	b510      	push	{r4, lr}
 8009900:	4604      	mov	r4, r0
 8009902:	e9c0 3300 	strd	r3, r3, [r0]
 8009906:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800990a:	6083      	str	r3, [r0, #8]
 800990c:	8181      	strh	r1, [r0, #12]
 800990e:	6643      	str	r3, [r0, #100]	; 0x64
 8009910:	81c2      	strh	r2, [r0, #14]
 8009912:	6183      	str	r3, [r0, #24]
 8009914:	4619      	mov	r1, r3
 8009916:	2208      	movs	r2, #8
 8009918:	305c      	adds	r0, #92	; 0x5c
 800991a:	f7fe fa2f 	bl	8007d7c <memset>
 800991e:	4b05      	ldr	r3, [pc, #20]	; (8009934 <std+0x38>)
 8009920:	6263      	str	r3, [r4, #36]	; 0x24
 8009922:	4b05      	ldr	r3, [pc, #20]	; (8009938 <std+0x3c>)
 8009924:	62a3      	str	r3, [r4, #40]	; 0x28
 8009926:	4b05      	ldr	r3, [pc, #20]	; (800993c <std+0x40>)
 8009928:	62e3      	str	r3, [r4, #44]	; 0x2c
 800992a:	4b05      	ldr	r3, [pc, #20]	; (8009940 <std+0x44>)
 800992c:	6224      	str	r4, [r4, #32]
 800992e:	6323      	str	r3, [r4, #48]	; 0x30
 8009930:	bd10      	pop	{r4, pc}
 8009932:	bf00      	nop
 8009934:	0800a9f1 	.word	0x0800a9f1
 8009938:	0800aa13 	.word	0x0800aa13
 800993c:	0800aa4b 	.word	0x0800aa4b
 8009940:	0800aa6f 	.word	0x0800aa6f

08009944 <_cleanup_r>:
 8009944:	4901      	ldr	r1, [pc, #4]	; (800994c <_cleanup_r+0x8>)
 8009946:	f000 b8c1 	b.w	8009acc <_fwalk_reent>
 800994a:	bf00      	nop
 800994c:	08009885 	.word	0x08009885

08009950 <__sfmoreglue>:
 8009950:	b570      	push	{r4, r5, r6, lr}
 8009952:	1e4a      	subs	r2, r1, #1
 8009954:	2568      	movs	r5, #104	; 0x68
 8009956:	4355      	muls	r5, r2
 8009958:	460e      	mov	r6, r1
 800995a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800995e:	f000 fd27 	bl	800a3b0 <_malloc_r>
 8009962:	4604      	mov	r4, r0
 8009964:	b140      	cbz	r0, 8009978 <__sfmoreglue+0x28>
 8009966:	2100      	movs	r1, #0
 8009968:	e9c0 1600 	strd	r1, r6, [r0]
 800996c:	300c      	adds	r0, #12
 800996e:	60a0      	str	r0, [r4, #8]
 8009970:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009974:	f7fe fa02 	bl	8007d7c <memset>
 8009978:	4620      	mov	r0, r4
 800997a:	bd70      	pop	{r4, r5, r6, pc}

0800997c <__sfp_lock_acquire>:
 800997c:	4801      	ldr	r0, [pc, #4]	; (8009984 <__sfp_lock_acquire+0x8>)
 800997e:	f000 b8ca 	b.w	8009b16 <__retarget_lock_acquire_recursive>
 8009982:	bf00      	nop
 8009984:	20000c14 	.word	0x20000c14

08009988 <__sfp_lock_release>:
 8009988:	4801      	ldr	r0, [pc, #4]	; (8009990 <__sfp_lock_release+0x8>)
 800998a:	f000 b8c5 	b.w	8009b18 <__retarget_lock_release_recursive>
 800998e:	bf00      	nop
 8009990:	20000c14 	.word	0x20000c14

08009994 <__sinit_lock_acquire>:
 8009994:	4801      	ldr	r0, [pc, #4]	; (800999c <__sinit_lock_acquire+0x8>)
 8009996:	f000 b8be 	b.w	8009b16 <__retarget_lock_acquire_recursive>
 800999a:	bf00      	nop
 800999c:	20000c0f 	.word	0x20000c0f

080099a0 <__sinit_lock_release>:
 80099a0:	4801      	ldr	r0, [pc, #4]	; (80099a8 <__sinit_lock_release+0x8>)
 80099a2:	f000 b8b9 	b.w	8009b18 <__retarget_lock_release_recursive>
 80099a6:	bf00      	nop
 80099a8:	20000c0f 	.word	0x20000c0f

080099ac <__sinit>:
 80099ac:	b510      	push	{r4, lr}
 80099ae:	4604      	mov	r4, r0
 80099b0:	f7ff fff0 	bl	8009994 <__sinit_lock_acquire>
 80099b4:	69a3      	ldr	r3, [r4, #24]
 80099b6:	b11b      	cbz	r3, 80099c0 <__sinit+0x14>
 80099b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80099bc:	f7ff bff0 	b.w	80099a0 <__sinit_lock_release>
 80099c0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80099c4:	6523      	str	r3, [r4, #80]	; 0x50
 80099c6:	4b13      	ldr	r3, [pc, #76]	; (8009a14 <__sinit+0x68>)
 80099c8:	4a13      	ldr	r2, [pc, #76]	; (8009a18 <__sinit+0x6c>)
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	62a2      	str	r2, [r4, #40]	; 0x28
 80099ce:	42a3      	cmp	r3, r4
 80099d0:	bf04      	itt	eq
 80099d2:	2301      	moveq	r3, #1
 80099d4:	61a3      	streq	r3, [r4, #24]
 80099d6:	4620      	mov	r0, r4
 80099d8:	f000 f820 	bl	8009a1c <__sfp>
 80099dc:	6060      	str	r0, [r4, #4]
 80099de:	4620      	mov	r0, r4
 80099e0:	f000 f81c 	bl	8009a1c <__sfp>
 80099e4:	60a0      	str	r0, [r4, #8]
 80099e6:	4620      	mov	r0, r4
 80099e8:	f000 f818 	bl	8009a1c <__sfp>
 80099ec:	2200      	movs	r2, #0
 80099ee:	60e0      	str	r0, [r4, #12]
 80099f0:	2104      	movs	r1, #4
 80099f2:	6860      	ldr	r0, [r4, #4]
 80099f4:	f7ff ff82 	bl	80098fc <std>
 80099f8:	68a0      	ldr	r0, [r4, #8]
 80099fa:	2201      	movs	r2, #1
 80099fc:	2109      	movs	r1, #9
 80099fe:	f7ff ff7d 	bl	80098fc <std>
 8009a02:	68e0      	ldr	r0, [r4, #12]
 8009a04:	2202      	movs	r2, #2
 8009a06:	2112      	movs	r1, #18
 8009a08:	f7ff ff78 	bl	80098fc <std>
 8009a0c:	2301      	movs	r3, #1
 8009a0e:	61a3      	str	r3, [r4, #24]
 8009a10:	e7d2      	b.n	80099b8 <__sinit+0xc>
 8009a12:	bf00      	nop
 8009a14:	0800b13c 	.word	0x0800b13c
 8009a18:	08009945 	.word	0x08009945

08009a1c <__sfp>:
 8009a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a1e:	4607      	mov	r7, r0
 8009a20:	f7ff ffac 	bl	800997c <__sfp_lock_acquire>
 8009a24:	4b1e      	ldr	r3, [pc, #120]	; (8009aa0 <__sfp+0x84>)
 8009a26:	681e      	ldr	r6, [r3, #0]
 8009a28:	69b3      	ldr	r3, [r6, #24]
 8009a2a:	b913      	cbnz	r3, 8009a32 <__sfp+0x16>
 8009a2c:	4630      	mov	r0, r6
 8009a2e:	f7ff ffbd 	bl	80099ac <__sinit>
 8009a32:	3648      	adds	r6, #72	; 0x48
 8009a34:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009a38:	3b01      	subs	r3, #1
 8009a3a:	d503      	bpl.n	8009a44 <__sfp+0x28>
 8009a3c:	6833      	ldr	r3, [r6, #0]
 8009a3e:	b30b      	cbz	r3, 8009a84 <__sfp+0x68>
 8009a40:	6836      	ldr	r6, [r6, #0]
 8009a42:	e7f7      	b.n	8009a34 <__sfp+0x18>
 8009a44:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009a48:	b9d5      	cbnz	r5, 8009a80 <__sfp+0x64>
 8009a4a:	4b16      	ldr	r3, [pc, #88]	; (8009aa4 <__sfp+0x88>)
 8009a4c:	60e3      	str	r3, [r4, #12]
 8009a4e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009a52:	6665      	str	r5, [r4, #100]	; 0x64
 8009a54:	f000 f85e 	bl	8009b14 <__retarget_lock_init_recursive>
 8009a58:	f7ff ff96 	bl	8009988 <__sfp_lock_release>
 8009a5c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009a60:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009a64:	6025      	str	r5, [r4, #0]
 8009a66:	61a5      	str	r5, [r4, #24]
 8009a68:	2208      	movs	r2, #8
 8009a6a:	4629      	mov	r1, r5
 8009a6c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009a70:	f7fe f984 	bl	8007d7c <memset>
 8009a74:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009a78:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009a7c:	4620      	mov	r0, r4
 8009a7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a80:	3468      	adds	r4, #104	; 0x68
 8009a82:	e7d9      	b.n	8009a38 <__sfp+0x1c>
 8009a84:	2104      	movs	r1, #4
 8009a86:	4638      	mov	r0, r7
 8009a88:	f7ff ff62 	bl	8009950 <__sfmoreglue>
 8009a8c:	4604      	mov	r4, r0
 8009a8e:	6030      	str	r0, [r6, #0]
 8009a90:	2800      	cmp	r0, #0
 8009a92:	d1d5      	bne.n	8009a40 <__sfp+0x24>
 8009a94:	f7ff ff78 	bl	8009988 <__sfp_lock_release>
 8009a98:	230c      	movs	r3, #12
 8009a9a:	603b      	str	r3, [r7, #0]
 8009a9c:	e7ee      	b.n	8009a7c <__sfp+0x60>
 8009a9e:	bf00      	nop
 8009aa0:	0800b13c 	.word	0x0800b13c
 8009aa4:	ffff0001 	.word	0xffff0001

08009aa8 <fiprintf>:
 8009aa8:	b40e      	push	{r1, r2, r3}
 8009aaa:	b503      	push	{r0, r1, lr}
 8009aac:	4601      	mov	r1, r0
 8009aae:	ab03      	add	r3, sp, #12
 8009ab0:	4805      	ldr	r0, [pc, #20]	; (8009ac8 <fiprintf+0x20>)
 8009ab2:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ab6:	6800      	ldr	r0, [r0, #0]
 8009ab8:	9301      	str	r3, [sp, #4]
 8009aba:	f000 fe59 	bl	800a770 <_vfiprintf_r>
 8009abe:	b002      	add	sp, #8
 8009ac0:	f85d eb04 	ldr.w	lr, [sp], #4
 8009ac4:	b003      	add	sp, #12
 8009ac6:	4770      	bx	lr
 8009ac8:	2000002c 	.word	0x2000002c

08009acc <_fwalk_reent>:
 8009acc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ad0:	4606      	mov	r6, r0
 8009ad2:	4688      	mov	r8, r1
 8009ad4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009ad8:	2700      	movs	r7, #0
 8009ada:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009ade:	f1b9 0901 	subs.w	r9, r9, #1
 8009ae2:	d505      	bpl.n	8009af0 <_fwalk_reent+0x24>
 8009ae4:	6824      	ldr	r4, [r4, #0]
 8009ae6:	2c00      	cmp	r4, #0
 8009ae8:	d1f7      	bne.n	8009ada <_fwalk_reent+0xe>
 8009aea:	4638      	mov	r0, r7
 8009aec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009af0:	89ab      	ldrh	r3, [r5, #12]
 8009af2:	2b01      	cmp	r3, #1
 8009af4:	d907      	bls.n	8009b06 <_fwalk_reent+0x3a>
 8009af6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009afa:	3301      	adds	r3, #1
 8009afc:	d003      	beq.n	8009b06 <_fwalk_reent+0x3a>
 8009afe:	4629      	mov	r1, r5
 8009b00:	4630      	mov	r0, r6
 8009b02:	47c0      	blx	r8
 8009b04:	4307      	orrs	r7, r0
 8009b06:	3568      	adds	r5, #104	; 0x68
 8009b08:	e7e9      	b.n	8009ade <_fwalk_reent+0x12>
	...

08009b0c <_localeconv_r>:
 8009b0c:	4800      	ldr	r0, [pc, #0]	; (8009b10 <_localeconv_r+0x4>)
 8009b0e:	4770      	bx	lr
 8009b10:	20000180 	.word	0x20000180

08009b14 <__retarget_lock_init_recursive>:
 8009b14:	4770      	bx	lr

08009b16 <__retarget_lock_acquire_recursive>:
 8009b16:	4770      	bx	lr

08009b18 <__retarget_lock_release_recursive>:
 8009b18:	4770      	bx	lr

08009b1a <__swhatbuf_r>:
 8009b1a:	b570      	push	{r4, r5, r6, lr}
 8009b1c:	460e      	mov	r6, r1
 8009b1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b22:	2900      	cmp	r1, #0
 8009b24:	b096      	sub	sp, #88	; 0x58
 8009b26:	4614      	mov	r4, r2
 8009b28:	461d      	mov	r5, r3
 8009b2a:	da07      	bge.n	8009b3c <__swhatbuf_r+0x22>
 8009b2c:	2300      	movs	r3, #0
 8009b2e:	602b      	str	r3, [r5, #0]
 8009b30:	89b3      	ldrh	r3, [r6, #12]
 8009b32:	061a      	lsls	r2, r3, #24
 8009b34:	d410      	bmi.n	8009b58 <__swhatbuf_r+0x3e>
 8009b36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009b3a:	e00e      	b.n	8009b5a <__swhatbuf_r+0x40>
 8009b3c:	466a      	mov	r2, sp
 8009b3e:	f000 ffc5 	bl	800aacc <_fstat_r>
 8009b42:	2800      	cmp	r0, #0
 8009b44:	dbf2      	blt.n	8009b2c <__swhatbuf_r+0x12>
 8009b46:	9a01      	ldr	r2, [sp, #4]
 8009b48:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009b4c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009b50:	425a      	negs	r2, r3
 8009b52:	415a      	adcs	r2, r3
 8009b54:	602a      	str	r2, [r5, #0]
 8009b56:	e7ee      	b.n	8009b36 <__swhatbuf_r+0x1c>
 8009b58:	2340      	movs	r3, #64	; 0x40
 8009b5a:	2000      	movs	r0, #0
 8009b5c:	6023      	str	r3, [r4, #0]
 8009b5e:	b016      	add	sp, #88	; 0x58
 8009b60:	bd70      	pop	{r4, r5, r6, pc}
	...

08009b64 <__smakebuf_r>:
 8009b64:	898b      	ldrh	r3, [r1, #12]
 8009b66:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009b68:	079d      	lsls	r5, r3, #30
 8009b6a:	4606      	mov	r6, r0
 8009b6c:	460c      	mov	r4, r1
 8009b6e:	d507      	bpl.n	8009b80 <__smakebuf_r+0x1c>
 8009b70:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009b74:	6023      	str	r3, [r4, #0]
 8009b76:	6123      	str	r3, [r4, #16]
 8009b78:	2301      	movs	r3, #1
 8009b7a:	6163      	str	r3, [r4, #20]
 8009b7c:	b002      	add	sp, #8
 8009b7e:	bd70      	pop	{r4, r5, r6, pc}
 8009b80:	ab01      	add	r3, sp, #4
 8009b82:	466a      	mov	r2, sp
 8009b84:	f7ff ffc9 	bl	8009b1a <__swhatbuf_r>
 8009b88:	9900      	ldr	r1, [sp, #0]
 8009b8a:	4605      	mov	r5, r0
 8009b8c:	4630      	mov	r0, r6
 8009b8e:	f000 fc0f 	bl	800a3b0 <_malloc_r>
 8009b92:	b948      	cbnz	r0, 8009ba8 <__smakebuf_r+0x44>
 8009b94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b98:	059a      	lsls	r2, r3, #22
 8009b9a:	d4ef      	bmi.n	8009b7c <__smakebuf_r+0x18>
 8009b9c:	f023 0303 	bic.w	r3, r3, #3
 8009ba0:	f043 0302 	orr.w	r3, r3, #2
 8009ba4:	81a3      	strh	r3, [r4, #12]
 8009ba6:	e7e3      	b.n	8009b70 <__smakebuf_r+0xc>
 8009ba8:	4b0d      	ldr	r3, [pc, #52]	; (8009be0 <__smakebuf_r+0x7c>)
 8009baa:	62b3      	str	r3, [r6, #40]	; 0x28
 8009bac:	89a3      	ldrh	r3, [r4, #12]
 8009bae:	6020      	str	r0, [r4, #0]
 8009bb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009bb4:	81a3      	strh	r3, [r4, #12]
 8009bb6:	9b00      	ldr	r3, [sp, #0]
 8009bb8:	6163      	str	r3, [r4, #20]
 8009bba:	9b01      	ldr	r3, [sp, #4]
 8009bbc:	6120      	str	r0, [r4, #16]
 8009bbe:	b15b      	cbz	r3, 8009bd8 <__smakebuf_r+0x74>
 8009bc0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009bc4:	4630      	mov	r0, r6
 8009bc6:	f000 ff93 	bl	800aaf0 <_isatty_r>
 8009bca:	b128      	cbz	r0, 8009bd8 <__smakebuf_r+0x74>
 8009bcc:	89a3      	ldrh	r3, [r4, #12]
 8009bce:	f023 0303 	bic.w	r3, r3, #3
 8009bd2:	f043 0301 	orr.w	r3, r3, #1
 8009bd6:	81a3      	strh	r3, [r4, #12]
 8009bd8:	89a0      	ldrh	r0, [r4, #12]
 8009bda:	4305      	orrs	r5, r0
 8009bdc:	81a5      	strh	r5, [r4, #12]
 8009bde:	e7cd      	b.n	8009b7c <__smakebuf_r+0x18>
 8009be0:	08009945 	.word	0x08009945

08009be4 <malloc>:
 8009be4:	4b02      	ldr	r3, [pc, #8]	; (8009bf0 <malloc+0xc>)
 8009be6:	4601      	mov	r1, r0
 8009be8:	6818      	ldr	r0, [r3, #0]
 8009bea:	f000 bbe1 	b.w	800a3b0 <_malloc_r>
 8009bee:	bf00      	nop
 8009bf0:	2000002c 	.word	0x2000002c

08009bf4 <_Balloc>:
 8009bf4:	b570      	push	{r4, r5, r6, lr}
 8009bf6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009bf8:	4604      	mov	r4, r0
 8009bfa:	460d      	mov	r5, r1
 8009bfc:	b976      	cbnz	r6, 8009c1c <_Balloc+0x28>
 8009bfe:	2010      	movs	r0, #16
 8009c00:	f7ff fff0 	bl	8009be4 <malloc>
 8009c04:	4602      	mov	r2, r0
 8009c06:	6260      	str	r0, [r4, #36]	; 0x24
 8009c08:	b920      	cbnz	r0, 8009c14 <_Balloc+0x20>
 8009c0a:	4b18      	ldr	r3, [pc, #96]	; (8009c6c <_Balloc+0x78>)
 8009c0c:	4818      	ldr	r0, [pc, #96]	; (8009c70 <_Balloc+0x7c>)
 8009c0e:	2166      	movs	r1, #102	; 0x66
 8009c10:	f7fe ff1a 	bl	8008a48 <__assert_func>
 8009c14:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009c18:	6006      	str	r6, [r0, #0]
 8009c1a:	60c6      	str	r6, [r0, #12]
 8009c1c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009c1e:	68f3      	ldr	r3, [r6, #12]
 8009c20:	b183      	cbz	r3, 8009c44 <_Balloc+0x50>
 8009c22:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009c24:	68db      	ldr	r3, [r3, #12]
 8009c26:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009c2a:	b9b8      	cbnz	r0, 8009c5c <_Balloc+0x68>
 8009c2c:	2101      	movs	r1, #1
 8009c2e:	fa01 f605 	lsl.w	r6, r1, r5
 8009c32:	1d72      	adds	r2, r6, #5
 8009c34:	0092      	lsls	r2, r2, #2
 8009c36:	4620      	mov	r0, r4
 8009c38:	f000 fb5a 	bl	800a2f0 <_calloc_r>
 8009c3c:	b160      	cbz	r0, 8009c58 <_Balloc+0x64>
 8009c3e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009c42:	e00e      	b.n	8009c62 <_Balloc+0x6e>
 8009c44:	2221      	movs	r2, #33	; 0x21
 8009c46:	2104      	movs	r1, #4
 8009c48:	4620      	mov	r0, r4
 8009c4a:	f000 fb51 	bl	800a2f0 <_calloc_r>
 8009c4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009c50:	60f0      	str	r0, [r6, #12]
 8009c52:	68db      	ldr	r3, [r3, #12]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d1e4      	bne.n	8009c22 <_Balloc+0x2e>
 8009c58:	2000      	movs	r0, #0
 8009c5a:	bd70      	pop	{r4, r5, r6, pc}
 8009c5c:	6802      	ldr	r2, [r0, #0]
 8009c5e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009c62:	2300      	movs	r3, #0
 8009c64:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009c68:	e7f7      	b.n	8009c5a <_Balloc+0x66>
 8009c6a:	bf00      	nop
 8009c6c:	0800b174 	.word	0x0800b174
 8009c70:	0800b308 	.word	0x0800b308

08009c74 <_Bfree>:
 8009c74:	b570      	push	{r4, r5, r6, lr}
 8009c76:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009c78:	4605      	mov	r5, r0
 8009c7a:	460c      	mov	r4, r1
 8009c7c:	b976      	cbnz	r6, 8009c9c <_Bfree+0x28>
 8009c7e:	2010      	movs	r0, #16
 8009c80:	f7ff ffb0 	bl	8009be4 <malloc>
 8009c84:	4602      	mov	r2, r0
 8009c86:	6268      	str	r0, [r5, #36]	; 0x24
 8009c88:	b920      	cbnz	r0, 8009c94 <_Bfree+0x20>
 8009c8a:	4b09      	ldr	r3, [pc, #36]	; (8009cb0 <_Bfree+0x3c>)
 8009c8c:	4809      	ldr	r0, [pc, #36]	; (8009cb4 <_Bfree+0x40>)
 8009c8e:	218a      	movs	r1, #138	; 0x8a
 8009c90:	f7fe feda 	bl	8008a48 <__assert_func>
 8009c94:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009c98:	6006      	str	r6, [r0, #0]
 8009c9a:	60c6      	str	r6, [r0, #12]
 8009c9c:	b13c      	cbz	r4, 8009cae <_Bfree+0x3a>
 8009c9e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009ca0:	6862      	ldr	r2, [r4, #4]
 8009ca2:	68db      	ldr	r3, [r3, #12]
 8009ca4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009ca8:	6021      	str	r1, [r4, #0]
 8009caa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009cae:	bd70      	pop	{r4, r5, r6, pc}
 8009cb0:	0800b174 	.word	0x0800b174
 8009cb4:	0800b308 	.word	0x0800b308

08009cb8 <__multadd>:
 8009cb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009cbc:	690e      	ldr	r6, [r1, #16]
 8009cbe:	4607      	mov	r7, r0
 8009cc0:	4698      	mov	r8, r3
 8009cc2:	460c      	mov	r4, r1
 8009cc4:	f101 0014 	add.w	r0, r1, #20
 8009cc8:	2300      	movs	r3, #0
 8009cca:	6805      	ldr	r5, [r0, #0]
 8009ccc:	b2a9      	uxth	r1, r5
 8009cce:	fb02 8101 	mla	r1, r2, r1, r8
 8009cd2:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8009cd6:	0c2d      	lsrs	r5, r5, #16
 8009cd8:	fb02 c505 	mla	r5, r2, r5, ip
 8009cdc:	b289      	uxth	r1, r1
 8009cde:	3301      	adds	r3, #1
 8009ce0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8009ce4:	429e      	cmp	r6, r3
 8009ce6:	f840 1b04 	str.w	r1, [r0], #4
 8009cea:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8009cee:	dcec      	bgt.n	8009cca <__multadd+0x12>
 8009cf0:	f1b8 0f00 	cmp.w	r8, #0
 8009cf4:	d022      	beq.n	8009d3c <__multadd+0x84>
 8009cf6:	68a3      	ldr	r3, [r4, #8]
 8009cf8:	42b3      	cmp	r3, r6
 8009cfa:	dc19      	bgt.n	8009d30 <__multadd+0x78>
 8009cfc:	6861      	ldr	r1, [r4, #4]
 8009cfe:	4638      	mov	r0, r7
 8009d00:	3101      	adds	r1, #1
 8009d02:	f7ff ff77 	bl	8009bf4 <_Balloc>
 8009d06:	4605      	mov	r5, r0
 8009d08:	b928      	cbnz	r0, 8009d16 <__multadd+0x5e>
 8009d0a:	4602      	mov	r2, r0
 8009d0c:	4b0d      	ldr	r3, [pc, #52]	; (8009d44 <__multadd+0x8c>)
 8009d0e:	480e      	ldr	r0, [pc, #56]	; (8009d48 <__multadd+0x90>)
 8009d10:	21b5      	movs	r1, #181	; 0xb5
 8009d12:	f7fe fe99 	bl	8008a48 <__assert_func>
 8009d16:	6922      	ldr	r2, [r4, #16]
 8009d18:	3202      	adds	r2, #2
 8009d1a:	f104 010c 	add.w	r1, r4, #12
 8009d1e:	0092      	lsls	r2, r2, #2
 8009d20:	300c      	adds	r0, #12
 8009d22:	f7fe f81d 	bl	8007d60 <memcpy>
 8009d26:	4621      	mov	r1, r4
 8009d28:	4638      	mov	r0, r7
 8009d2a:	f7ff ffa3 	bl	8009c74 <_Bfree>
 8009d2e:	462c      	mov	r4, r5
 8009d30:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8009d34:	3601      	adds	r6, #1
 8009d36:	f8c3 8014 	str.w	r8, [r3, #20]
 8009d3a:	6126      	str	r6, [r4, #16]
 8009d3c:	4620      	mov	r0, r4
 8009d3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d42:	bf00      	nop
 8009d44:	0800b294 	.word	0x0800b294
 8009d48:	0800b308 	.word	0x0800b308

08009d4c <__hi0bits>:
 8009d4c:	0c03      	lsrs	r3, r0, #16
 8009d4e:	041b      	lsls	r3, r3, #16
 8009d50:	b9d3      	cbnz	r3, 8009d88 <__hi0bits+0x3c>
 8009d52:	0400      	lsls	r0, r0, #16
 8009d54:	2310      	movs	r3, #16
 8009d56:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009d5a:	bf04      	itt	eq
 8009d5c:	0200      	lsleq	r0, r0, #8
 8009d5e:	3308      	addeq	r3, #8
 8009d60:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009d64:	bf04      	itt	eq
 8009d66:	0100      	lsleq	r0, r0, #4
 8009d68:	3304      	addeq	r3, #4
 8009d6a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009d6e:	bf04      	itt	eq
 8009d70:	0080      	lsleq	r0, r0, #2
 8009d72:	3302      	addeq	r3, #2
 8009d74:	2800      	cmp	r0, #0
 8009d76:	db05      	blt.n	8009d84 <__hi0bits+0x38>
 8009d78:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009d7c:	f103 0301 	add.w	r3, r3, #1
 8009d80:	bf08      	it	eq
 8009d82:	2320      	moveq	r3, #32
 8009d84:	4618      	mov	r0, r3
 8009d86:	4770      	bx	lr
 8009d88:	2300      	movs	r3, #0
 8009d8a:	e7e4      	b.n	8009d56 <__hi0bits+0xa>

08009d8c <__lo0bits>:
 8009d8c:	6803      	ldr	r3, [r0, #0]
 8009d8e:	f013 0207 	ands.w	r2, r3, #7
 8009d92:	4601      	mov	r1, r0
 8009d94:	d00b      	beq.n	8009dae <__lo0bits+0x22>
 8009d96:	07da      	lsls	r2, r3, #31
 8009d98:	d424      	bmi.n	8009de4 <__lo0bits+0x58>
 8009d9a:	0798      	lsls	r0, r3, #30
 8009d9c:	bf49      	itett	mi
 8009d9e:	085b      	lsrmi	r3, r3, #1
 8009da0:	089b      	lsrpl	r3, r3, #2
 8009da2:	2001      	movmi	r0, #1
 8009da4:	600b      	strmi	r3, [r1, #0]
 8009da6:	bf5c      	itt	pl
 8009da8:	600b      	strpl	r3, [r1, #0]
 8009daa:	2002      	movpl	r0, #2
 8009dac:	4770      	bx	lr
 8009dae:	b298      	uxth	r0, r3
 8009db0:	b9b0      	cbnz	r0, 8009de0 <__lo0bits+0x54>
 8009db2:	0c1b      	lsrs	r3, r3, #16
 8009db4:	2010      	movs	r0, #16
 8009db6:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009dba:	bf04      	itt	eq
 8009dbc:	0a1b      	lsreq	r3, r3, #8
 8009dbe:	3008      	addeq	r0, #8
 8009dc0:	071a      	lsls	r2, r3, #28
 8009dc2:	bf04      	itt	eq
 8009dc4:	091b      	lsreq	r3, r3, #4
 8009dc6:	3004      	addeq	r0, #4
 8009dc8:	079a      	lsls	r2, r3, #30
 8009dca:	bf04      	itt	eq
 8009dcc:	089b      	lsreq	r3, r3, #2
 8009dce:	3002      	addeq	r0, #2
 8009dd0:	07da      	lsls	r2, r3, #31
 8009dd2:	d403      	bmi.n	8009ddc <__lo0bits+0x50>
 8009dd4:	085b      	lsrs	r3, r3, #1
 8009dd6:	f100 0001 	add.w	r0, r0, #1
 8009dda:	d005      	beq.n	8009de8 <__lo0bits+0x5c>
 8009ddc:	600b      	str	r3, [r1, #0]
 8009dde:	4770      	bx	lr
 8009de0:	4610      	mov	r0, r2
 8009de2:	e7e8      	b.n	8009db6 <__lo0bits+0x2a>
 8009de4:	2000      	movs	r0, #0
 8009de6:	4770      	bx	lr
 8009de8:	2020      	movs	r0, #32
 8009dea:	4770      	bx	lr

08009dec <__i2b>:
 8009dec:	b510      	push	{r4, lr}
 8009dee:	460c      	mov	r4, r1
 8009df0:	2101      	movs	r1, #1
 8009df2:	f7ff feff 	bl	8009bf4 <_Balloc>
 8009df6:	4602      	mov	r2, r0
 8009df8:	b928      	cbnz	r0, 8009e06 <__i2b+0x1a>
 8009dfa:	4b05      	ldr	r3, [pc, #20]	; (8009e10 <__i2b+0x24>)
 8009dfc:	4805      	ldr	r0, [pc, #20]	; (8009e14 <__i2b+0x28>)
 8009dfe:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009e02:	f7fe fe21 	bl	8008a48 <__assert_func>
 8009e06:	2301      	movs	r3, #1
 8009e08:	6144      	str	r4, [r0, #20]
 8009e0a:	6103      	str	r3, [r0, #16]
 8009e0c:	bd10      	pop	{r4, pc}
 8009e0e:	bf00      	nop
 8009e10:	0800b294 	.word	0x0800b294
 8009e14:	0800b308 	.word	0x0800b308

08009e18 <__multiply>:
 8009e18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e1c:	4614      	mov	r4, r2
 8009e1e:	690a      	ldr	r2, [r1, #16]
 8009e20:	6923      	ldr	r3, [r4, #16]
 8009e22:	429a      	cmp	r2, r3
 8009e24:	bfb8      	it	lt
 8009e26:	460b      	movlt	r3, r1
 8009e28:	460d      	mov	r5, r1
 8009e2a:	bfbc      	itt	lt
 8009e2c:	4625      	movlt	r5, r4
 8009e2e:	461c      	movlt	r4, r3
 8009e30:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8009e34:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009e38:	68ab      	ldr	r3, [r5, #8]
 8009e3a:	6869      	ldr	r1, [r5, #4]
 8009e3c:	eb0a 0709 	add.w	r7, sl, r9
 8009e40:	42bb      	cmp	r3, r7
 8009e42:	b085      	sub	sp, #20
 8009e44:	bfb8      	it	lt
 8009e46:	3101      	addlt	r1, #1
 8009e48:	f7ff fed4 	bl	8009bf4 <_Balloc>
 8009e4c:	b930      	cbnz	r0, 8009e5c <__multiply+0x44>
 8009e4e:	4602      	mov	r2, r0
 8009e50:	4b42      	ldr	r3, [pc, #264]	; (8009f5c <__multiply+0x144>)
 8009e52:	4843      	ldr	r0, [pc, #268]	; (8009f60 <__multiply+0x148>)
 8009e54:	f240 115d 	movw	r1, #349	; 0x15d
 8009e58:	f7fe fdf6 	bl	8008a48 <__assert_func>
 8009e5c:	f100 0614 	add.w	r6, r0, #20
 8009e60:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8009e64:	4633      	mov	r3, r6
 8009e66:	2200      	movs	r2, #0
 8009e68:	4543      	cmp	r3, r8
 8009e6a:	d31e      	bcc.n	8009eaa <__multiply+0x92>
 8009e6c:	f105 0c14 	add.w	ip, r5, #20
 8009e70:	f104 0314 	add.w	r3, r4, #20
 8009e74:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8009e78:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8009e7c:	9202      	str	r2, [sp, #8]
 8009e7e:	ebac 0205 	sub.w	r2, ip, r5
 8009e82:	3a15      	subs	r2, #21
 8009e84:	f022 0203 	bic.w	r2, r2, #3
 8009e88:	3204      	adds	r2, #4
 8009e8a:	f105 0115 	add.w	r1, r5, #21
 8009e8e:	458c      	cmp	ip, r1
 8009e90:	bf38      	it	cc
 8009e92:	2204      	movcc	r2, #4
 8009e94:	9201      	str	r2, [sp, #4]
 8009e96:	9a02      	ldr	r2, [sp, #8]
 8009e98:	9303      	str	r3, [sp, #12]
 8009e9a:	429a      	cmp	r2, r3
 8009e9c:	d808      	bhi.n	8009eb0 <__multiply+0x98>
 8009e9e:	2f00      	cmp	r7, #0
 8009ea0:	dc55      	bgt.n	8009f4e <__multiply+0x136>
 8009ea2:	6107      	str	r7, [r0, #16]
 8009ea4:	b005      	add	sp, #20
 8009ea6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009eaa:	f843 2b04 	str.w	r2, [r3], #4
 8009eae:	e7db      	b.n	8009e68 <__multiply+0x50>
 8009eb0:	f8b3 a000 	ldrh.w	sl, [r3]
 8009eb4:	f1ba 0f00 	cmp.w	sl, #0
 8009eb8:	d020      	beq.n	8009efc <__multiply+0xe4>
 8009eba:	f105 0e14 	add.w	lr, r5, #20
 8009ebe:	46b1      	mov	r9, r6
 8009ec0:	2200      	movs	r2, #0
 8009ec2:	f85e 4b04 	ldr.w	r4, [lr], #4
 8009ec6:	f8d9 b000 	ldr.w	fp, [r9]
 8009eca:	b2a1      	uxth	r1, r4
 8009ecc:	fa1f fb8b 	uxth.w	fp, fp
 8009ed0:	fb0a b101 	mla	r1, sl, r1, fp
 8009ed4:	4411      	add	r1, r2
 8009ed6:	f8d9 2000 	ldr.w	r2, [r9]
 8009eda:	0c24      	lsrs	r4, r4, #16
 8009edc:	0c12      	lsrs	r2, r2, #16
 8009ede:	fb0a 2404 	mla	r4, sl, r4, r2
 8009ee2:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8009ee6:	b289      	uxth	r1, r1
 8009ee8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8009eec:	45f4      	cmp	ip, lr
 8009eee:	f849 1b04 	str.w	r1, [r9], #4
 8009ef2:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8009ef6:	d8e4      	bhi.n	8009ec2 <__multiply+0xaa>
 8009ef8:	9901      	ldr	r1, [sp, #4]
 8009efa:	5072      	str	r2, [r6, r1]
 8009efc:	9a03      	ldr	r2, [sp, #12]
 8009efe:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009f02:	3304      	adds	r3, #4
 8009f04:	f1b9 0f00 	cmp.w	r9, #0
 8009f08:	d01f      	beq.n	8009f4a <__multiply+0x132>
 8009f0a:	6834      	ldr	r4, [r6, #0]
 8009f0c:	f105 0114 	add.w	r1, r5, #20
 8009f10:	46b6      	mov	lr, r6
 8009f12:	f04f 0a00 	mov.w	sl, #0
 8009f16:	880a      	ldrh	r2, [r1, #0]
 8009f18:	f8be b002 	ldrh.w	fp, [lr, #2]
 8009f1c:	fb09 b202 	mla	r2, r9, r2, fp
 8009f20:	4492      	add	sl, r2
 8009f22:	b2a4      	uxth	r4, r4
 8009f24:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8009f28:	f84e 4b04 	str.w	r4, [lr], #4
 8009f2c:	f851 4b04 	ldr.w	r4, [r1], #4
 8009f30:	f8be 2000 	ldrh.w	r2, [lr]
 8009f34:	0c24      	lsrs	r4, r4, #16
 8009f36:	fb09 2404 	mla	r4, r9, r4, r2
 8009f3a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8009f3e:	458c      	cmp	ip, r1
 8009f40:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009f44:	d8e7      	bhi.n	8009f16 <__multiply+0xfe>
 8009f46:	9a01      	ldr	r2, [sp, #4]
 8009f48:	50b4      	str	r4, [r6, r2]
 8009f4a:	3604      	adds	r6, #4
 8009f4c:	e7a3      	b.n	8009e96 <__multiply+0x7e>
 8009f4e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d1a5      	bne.n	8009ea2 <__multiply+0x8a>
 8009f56:	3f01      	subs	r7, #1
 8009f58:	e7a1      	b.n	8009e9e <__multiply+0x86>
 8009f5a:	bf00      	nop
 8009f5c:	0800b294 	.word	0x0800b294
 8009f60:	0800b308 	.word	0x0800b308

08009f64 <__pow5mult>:
 8009f64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f68:	4615      	mov	r5, r2
 8009f6a:	f012 0203 	ands.w	r2, r2, #3
 8009f6e:	4606      	mov	r6, r0
 8009f70:	460f      	mov	r7, r1
 8009f72:	d007      	beq.n	8009f84 <__pow5mult+0x20>
 8009f74:	4c25      	ldr	r4, [pc, #148]	; (800a00c <__pow5mult+0xa8>)
 8009f76:	3a01      	subs	r2, #1
 8009f78:	2300      	movs	r3, #0
 8009f7a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009f7e:	f7ff fe9b 	bl	8009cb8 <__multadd>
 8009f82:	4607      	mov	r7, r0
 8009f84:	10ad      	asrs	r5, r5, #2
 8009f86:	d03d      	beq.n	800a004 <__pow5mult+0xa0>
 8009f88:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009f8a:	b97c      	cbnz	r4, 8009fac <__pow5mult+0x48>
 8009f8c:	2010      	movs	r0, #16
 8009f8e:	f7ff fe29 	bl	8009be4 <malloc>
 8009f92:	4602      	mov	r2, r0
 8009f94:	6270      	str	r0, [r6, #36]	; 0x24
 8009f96:	b928      	cbnz	r0, 8009fa4 <__pow5mult+0x40>
 8009f98:	4b1d      	ldr	r3, [pc, #116]	; (800a010 <__pow5mult+0xac>)
 8009f9a:	481e      	ldr	r0, [pc, #120]	; (800a014 <__pow5mult+0xb0>)
 8009f9c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009fa0:	f7fe fd52 	bl	8008a48 <__assert_func>
 8009fa4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009fa8:	6004      	str	r4, [r0, #0]
 8009faa:	60c4      	str	r4, [r0, #12]
 8009fac:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009fb0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009fb4:	b94c      	cbnz	r4, 8009fca <__pow5mult+0x66>
 8009fb6:	f240 2171 	movw	r1, #625	; 0x271
 8009fba:	4630      	mov	r0, r6
 8009fbc:	f7ff ff16 	bl	8009dec <__i2b>
 8009fc0:	2300      	movs	r3, #0
 8009fc2:	f8c8 0008 	str.w	r0, [r8, #8]
 8009fc6:	4604      	mov	r4, r0
 8009fc8:	6003      	str	r3, [r0, #0]
 8009fca:	f04f 0900 	mov.w	r9, #0
 8009fce:	07eb      	lsls	r3, r5, #31
 8009fd0:	d50a      	bpl.n	8009fe8 <__pow5mult+0x84>
 8009fd2:	4639      	mov	r1, r7
 8009fd4:	4622      	mov	r2, r4
 8009fd6:	4630      	mov	r0, r6
 8009fd8:	f7ff ff1e 	bl	8009e18 <__multiply>
 8009fdc:	4639      	mov	r1, r7
 8009fde:	4680      	mov	r8, r0
 8009fe0:	4630      	mov	r0, r6
 8009fe2:	f7ff fe47 	bl	8009c74 <_Bfree>
 8009fe6:	4647      	mov	r7, r8
 8009fe8:	106d      	asrs	r5, r5, #1
 8009fea:	d00b      	beq.n	800a004 <__pow5mult+0xa0>
 8009fec:	6820      	ldr	r0, [r4, #0]
 8009fee:	b938      	cbnz	r0, 800a000 <__pow5mult+0x9c>
 8009ff0:	4622      	mov	r2, r4
 8009ff2:	4621      	mov	r1, r4
 8009ff4:	4630      	mov	r0, r6
 8009ff6:	f7ff ff0f 	bl	8009e18 <__multiply>
 8009ffa:	6020      	str	r0, [r4, #0]
 8009ffc:	f8c0 9000 	str.w	r9, [r0]
 800a000:	4604      	mov	r4, r0
 800a002:	e7e4      	b.n	8009fce <__pow5mult+0x6a>
 800a004:	4638      	mov	r0, r7
 800a006:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a00a:	bf00      	nop
 800a00c:	0800b458 	.word	0x0800b458
 800a010:	0800b174 	.word	0x0800b174
 800a014:	0800b308 	.word	0x0800b308

0800a018 <__lshift>:
 800a018:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a01c:	460c      	mov	r4, r1
 800a01e:	6849      	ldr	r1, [r1, #4]
 800a020:	6923      	ldr	r3, [r4, #16]
 800a022:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a026:	68a3      	ldr	r3, [r4, #8]
 800a028:	4607      	mov	r7, r0
 800a02a:	4691      	mov	r9, r2
 800a02c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a030:	f108 0601 	add.w	r6, r8, #1
 800a034:	42b3      	cmp	r3, r6
 800a036:	db0b      	blt.n	800a050 <__lshift+0x38>
 800a038:	4638      	mov	r0, r7
 800a03a:	f7ff fddb 	bl	8009bf4 <_Balloc>
 800a03e:	4605      	mov	r5, r0
 800a040:	b948      	cbnz	r0, 800a056 <__lshift+0x3e>
 800a042:	4602      	mov	r2, r0
 800a044:	4b28      	ldr	r3, [pc, #160]	; (800a0e8 <__lshift+0xd0>)
 800a046:	4829      	ldr	r0, [pc, #164]	; (800a0ec <__lshift+0xd4>)
 800a048:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a04c:	f7fe fcfc 	bl	8008a48 <__assert_func>
 800a050:	3101      	adds	r1, #1
 800a052:	005b      	lsls	r3, r3, #1
 800a054:	e7ee      	b.n	800a034 <__lshift+0x1c>
 800a056:	2300      	movs	r3, #0
 800a058:	f100 0114 	add.w	r1, r0, #20
 800a05c:	f100 0210 	add.w	r2, r0, #16
 800a060:	4618      	mov	r0, r3
 800a062:	4553      	cmp	r3, sl
 800a064:	db33      	blt.n	800a0ce <__lshift+0xb6>
 800a066:	6920      	ldr	r0, [r4, #16]
 800a068:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a06c:	f104 0314 	add.w	r3, r4, #20
 800a070:	f019 091f 	ands.w	r9, r9, #31
 800a074:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a078:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a07c:	d02b      	beq.n	800a0d6 <__lshift+0xbe>
 800a07e:	f1c9 0e20 	rsb	lr, r9, #32
 800a082:	468a      	mov	sl, r1
 800a084:	2200      	movs	r2, #0
 800a086:	6818      	ldr	r0, [r3, #0]
 800a088:	fa00 f009 	lsl.w	r0, r0, r9
 800a08c:	4302      	orrs	r2, r0
 800a08e:	f84a 2b04 	str.w	r2, [sl], #4
 800a092:	f853 2b04 	ldr.w	r2, [r3], #4
 800a096:	459c      	cmp	ip, r3
 800a098:	fa22 f20e 	lsr.w	r2, r2, lr
 800a09c:	d8f3      	bhi.n	800a086 <__lshift+0x6e>
 800a09e:	ebac 0304 	sub.w	r3, ip, r4
 800a0a2:	3b15      	subs	r3, #21
 800a0a4:	f023 0303 	bic.w	r3, r3, #3
 800a0a8:	3304      	adds	r3, #4
 800a0aa:	f104 0015 	add.w	r0, r4, #21
 800a0ae:	4584      	cmp	ip, r0
 800a0b0:	bf38      	it	cc
 800a0b2:	2304      	movcc	r3, #4
 800a0b4:	50ca      	str	r2, [r1, r3]
 800a0b6:	b10a      	cbz	r2, 800a0bc <__lshift+0xa4>
 800a0b8:	f108 0602 	add.w	r6, r8, #2
 800a0bc:	3e01      	subs	r6, #1
 800a0be:	4638      	mov	r0, r7
 800a0c0:	612e      	str	r6, [r5, #16]
 800a0c2:	4621      	mov	r1, r4
 800a0c4:	f7ff fdd6 	bl	8009c74 <_Bfree>
 800a0c8:	4628      	mov	r0, r5
 800a0ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0ce:	f842 0f04 	str.w	r0, [r2, #4]!
 800a0d2:	3301      	adds	r3, #1
 800a0d4:	e7c5      	b.n	800a062 <__lshift+0x4a>
 800a0d6:	3904      	subs	r1, #4
 800a0d8:	f853 2b04 	ldr.w	r2, [r3], #4
 800a0dc:	f841 2f04 	str.w	r2, [r1, #4]!
 800a0e0:	459c      	cmp	ip, r3
 800a0e2:	d8f9      	bhi.n	800a0d8 <__lshift+0xc0>
 800a0e4:	e7ea      	b.n	800a0bc <__lshift+0xa4>
 800a0e6:	bf00      	nop
 800a0e8:	0800b294 	.word	0x0800b294
 800a0ec:	0800b308 	.word	0x0800b308

0800a0f0 <__mcmp>:
 800a0f0:	b530      	push	{r4, r5, lr}
 800a0f2:	6902      	ldr	r2, [r0, #16]
 800a0f4:	690c      	ldr	r4, [r1, #16]
 800a0f6:	1b12      	subs	r2, r2, r4
 800a0f8:	d10e      	bne.n	800a118 <__mcmp+0x28>
 800a0fa:	f100 0314 	add.w	r3, r0, #20
 800a0fe:	3114      	adds	r1, #20
 800a100:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a104:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a108:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a10c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a110:	42a5      	cmp	r5, r4
 800a112:	d003      	beq.n	800a11c <__mcmp+0x2c>
 800a114:	d305      	bcc.n	800a122 <__mcmp+0x32>
 800a116:	2201      	movs	r2, #1
 800a118:	4610      	mov	r0, r2
 800a11a:	bd30      	pop	{r4, r5, pc}
 800a11c:	4283      	cmp	r3, r0
 800a11e:	d3f3      	bcc.n	800a108 <__mcmp+0x18>
 800a120:	e7fa      	b.n	800a118 <__mcmp+0x28>
 800a122:	f04f 32ff 	mov.w	r2, #4294967295
 800a126:	e7f7      	b.n	800a118 <__mcmp+0x28>

0800a128 <__mdiff>:
 800a128:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a12c:	460c      	mov	r4, r1
 800a12e:	4606      	mov	r6, r0
 800a130:	4611      	mov	r1, r2
 800a132:	4620      	mov	r0, r4
 800a134:	4617      	mov	r7, r2
 800a136:	f7ff ffdb 	bl	800a0f0 <__mcmp>
 800a13a:	1e05      	subs	r5, r0, #0
 800a13c:	d110      	bne.n	800a160 <__mdiff+0x38>
 800a13e:	4629      	mov	r1, r5
 800a140:	4630      	mov	r0, r6
 800a142:	f7ff fd57 	bl	8009bf4 <_Balloc>
 800a146:	b930      	cbnz	r0, 800a156 <__mdiff+0x2e>
 800a148:	4b39      	ldr	r3, [pc, #228]	; (800a230 <__mdiff+0x108>)
 800a14a:	4602      	mov	r2, r0
 800a14c:	f240 2132 	movw	r1, #562	; 0x232
 800a150:	4838      	ldr	r0, [pc, #224]	; (800a234 <__mdiff+0x10c>)
 800a152:	f7fe fc79 	bl	8008a48 <__assert_func>
 800a156:	2301      	movs	r3, #1
 800a158:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a15c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a160:	bfa4      	itt	ge
 800a162:	463b      	movge	r3, r7
 800a164:	4627      	movge	r7, r4
 800a166:	4630      	mov	r0, r6
 800a168:	6879      	ldr	r1, [r7, #4]
 800a16a:	bfa6      	itte	ge
 800a16c:	461c      	movge	r4, r3
 800a16e:	2500      	movge	r5, #0
 800a170:	2501      	movlt	r5, #1
 800a172:	f7ff fd3f 	bl	8009bf4 <_Balloc>
 800a176:	b920      	cbnz	r0, 800a182 <__mdiff+0x5a>
 800a178:	4b2d      	ldr	r3, [pc, #180]	; (800a230 <__mdiff+0x108>)
 800a17a:	4602      	mov	r2, r0
 800a17c:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a180:	e7e6      	b.n	800a150 <__mdiff+0x28>
 800a182:	693e      	ldr	r6, [r7, #16]
 800a184:	60c5      	str	r5, [r0, #12]
 800a186:	6925      	ldr	r5, [r4, #16]
 800a188:	f107 0114 	add.w	r1, r7, #20
 800a18c:	f104 0914 	add.w	r9, r4, #20
 800a190:	f100 0e14 	add.w	lr, r0, #20
 800a194:	f107 0210 	add.w	r2, r7, #16
 800a198:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800a19c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800a1a0:	46f2      	mov	sl, lr
 800a1a2:	2700      	movs	r7, #0
 800a1a4:	f859 3b04 	ldr.w	r3, [r9], #4
 800a1a8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a1ac:	fa1f f883 	uxth.w	r8, r3
 800a1b0:	fa17 f78b 	uxtah	r7, r7, fp
 800a1b4:	0c1b      	lsrs	r3, r3, #16
 800a1b6:	eba7 0808 	sub.w	r8, r7, r8
 800a1ba:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a1be:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a1c2:	fa1f f888 	uxth.w	r8, r8
 800a1c6:	141f      	asrs	r7, r3, #16
 800a1c8:	454d      	cmp	r5, r9
 800a1ca:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a1ce:	f84a 3b04 	str.w	r3, [sl], #4
 800a1d2:	d8e7      	bhi.n	800a1a4 <__mdiff+0x7c>
 800a1d4:	1b2b      	subs	r3, r5, r4
 800a1d6:	3b15      	subs	r3, #21
 800a1d8:	f023 0303 	bic.w	r3, r3, #3
 800a1dc:	3304      	adds	r3, #4
 800a1de:	3415      	adds	r4, #21
 800a1e0:	42a5      	cmp	r5, r4
 800a1e2:	bf38      	it	cc
 800a1e4:	2304      	movcc	r3, #4
 800a1e6:	4419      	add	r1, r3
 800a1e8:	4473      	add	r3, lr
 800a1ea:	469e      	mov	lr, r3
 800a1ec:	460d      	mov	r5, r1
 800a1ee:	4565      	cmp	r5, ip
 800a1f0:	d30e      	bcc.n	800a210 <__mdiff+0xe8>
 800a1f2:	f10c 0203 	add.w	r2, ip, #3
 800a1f6:	1a52      	subs	r2, r2, r1
 800a1f8:	f022 0203 	bic.w	r2, r2, #3
 800a1fc:	3903      	subs	r1, #3
 800a1fe:	458c      	cmp	ip, r1
 800a200:	bf38      	it	cc
 800a202:	2200      	movcc	r2, #0
 800a204:	441a      	add	r2, r3
 800a206:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a20a:	b17b      	cbz	r3, 800a22c <__mdiff+0x104>
 800a20c:	6106      	str	r6, [r0, #16]
 800a20e:	e7a5      	b.n	800a15c <__mdiff+0x34>
 800a210:	f855 8b04 	ldr.w	r8, [r5], #4
 800a214:	fa17 f488 	uxtah	r4, r7, r8
 800a218:	1422      	asrs	r2, r4, #16
 800a21a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800a21e:	b2a4      	uxth	r4, r4
 800a220:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800a224:	f84e 4b04 	str.w	r4, [lr], #4
 800a228:	1417      	asrs	r7, r2, #16
 800a22a:	e7e0      	b.n	800a1ee <__mdiff+0xc6>
 800a22c:	3e01      	subs	r6, #1
 800a22e:	e7ea      	b.n	800a206 <__mdiff+0xde>
 800a230:	0800b294 	.word	0x0800b294
 800a234:	0800b308 	.word	0x0800b308

0800a238 <__d2b>:
 800a238:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a23c:	4689      	mov	r9, r1
 800a23e:	2101      	movs	r1, #1
 800a240:	ec57 6b10 	vmov	r6, r7, d0
 800a244:	4690      	mov	r8, r2
 800a246:	f7ff fcd5 	bl	8009bf4 <_Balloc>
 800a24a:	4604      	mov	r4, r0
 800a24c:	b930      	cbnz	r0, 800a25c <__d2b+0x24>
 800a24e:	4602      	mov	r2, r0
 800a250:	4b25      	ldr	r3, [pc, #148]	; (800a2e8 <__d2b+0xb0>)
 800a252:	4826      	ldr	r0, [pc, #152]	; (800a2ec <__d2b+0xb4>)
 800a254:	f240 310a 	movw	r1, #778	; 0x30a
 800a258:	f7fe fbf6 	bl	8008a48 <__assert_func>
 800a25c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a260:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a264:	bb35      	cbnz	r5, 800a2b4 <__d2b+0x7c>
 800a266:	2e00      	cmp	r6, #0
 800a268:	9301      	str	r3, [sp, #4]
 800a26a:	d028      	beq.n	800a2be <__d2b+0x86>
 800a26c:	4668      	mov	r0, sp
 800a26e:	9600      	str	r6, [sp, #0]
 800a270:	f7ff fd8c 	bl	8009d8c <__lo0bits>
 800a274:	9900      	ldr	r1, [sp, #0]
 800a276:	b300      	cbz	r0, 800a2ba <__d2b+0x82>
 800a278:	9a01      	ldr	r2, [sp, #4]
 800a27a:	f1c0 0320 	rsb	r3, r0, #32
 800a27e:	fa02 f303 	lsl.w	r3, r2, r3
 800a282:	430b      	orrs	r3, r1
 800a284:	40c2      	lsrs	r2, r0
 800a286:	6163      	str	r3, [r4, #20]
 800a288:	9201      	str	r2, [sp, #4]
 800a28a:	9b01      	ldr	r3, [sp, #4]
 800a28c:	61a3      	str	r3, [r4, #24]
 800a28e:	2b00      	cmp	r3, #0
 800a290:	bf14      	ite	ne
 800a292:	2202      	movne	r2, #2
 800a294:	2201      	moveq	r2, #1
 800a296:	6122      	str	r2, [r4, #16]
 800a298:	b1d5      	cbz	r5, 800a2d0 <__d2b+0x98>
 800a29a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a29e:	4405      	add	r5, r0
 800a2a0:	f8c9 5000 	str.w	r5, [r9]
 800a2a4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a2a8:	f8c8 0000 	str.w	r0, [r8]
 800a2ac:	4620      	mov	r0, r4
 800a2ae:	b003      	add	sp, #12
 800a2b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a2b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a2b8:	e7d5      	b.n	800a266 <__d2b+0x2e>
 800a2ba:	6161      	str	r1, [r4, #20]
 800a2bc:	e7e5      	b.n	800a28a <__d2b+0x52>
 800a2be:	a801      	add	r0, sp, #4
 800a2c0:	f7ff fd64 	bl	8009d8c <__lo0bits>
 800a2c4:	9b01      	ldr	r3, [sp, #4]
 800a2c6:	6163      	str	r3, [r4, #20]
 800a2c8:	2201      	movs	r2, #1
 800a2ca:	6122      	str	r2, [r4, #16]
 800a2cc:	3020      	adds	r0, #32
 800a2ce:	e7e3      	b.n	800a298 <__d2b+0x60>
 800a2d0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a2d4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a2d8:	f8c9 0000 	str.w	r0, [r9]
 800a2dc:	6918      	ldr	r0, [r3, #16]
 800a2de:	f7ff fd35 	bl	8009d4c <__hi0bits>
 800a2e2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a2e6:	e7df      	b.n	800a2a8 <__d2b+0x70>
 800a2e8:	0800b294 	.word	0x0800b294
 800a2ec:	0800b308 	.word	0x0800b308

0800a2f0 <_calloc_r>:
 800a2f0:	b513      	push	{r0, r1, r4, lr}
 800a2f2:	434a      	muls	r2, r1
 800a2f4:	4611      	mov	r1, r2
 800a2f6:	9201      	str	r2, [sp, #4]
 800a2f8:	f000 f85a 	bl	800a3b0 <_malloc_r>
 800a2fc:	4604      	mov	r4, r0
 800a2fe:	b118      	cbz	r0, 800a308 <_calloc_r+0x18>
 800a300:	9a01      	ldr	r2, [sp, #4]
 800a302:	2100      	movs	r1, #0
 800a304:	f7fd fd3a 	bl	8007d7c <memset>
 800a308:	4620      	mov	r0, r4
 800a30a:	b002      	add	sp, #8
 800a30c:	bd10      	pop	{r4, pc}
	...

0800a310 <_free_r>:
 800a310:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a312:	2900      	cmp	r1, #0
 800a314:	d048      	beq.n	800a3a8 <_free_r+0x98>
 800a316:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a31a:	9001      	str	r0, [sp, #4]
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	f1a1 0404 	sub.w	r4, r1, #4
 800a322:	bfb8      	it	lt
 800a324:	18e4      	addlt	r4, r4, r3
 800a326:	f000 fc31 	bl	800ab8c <__malloc_lock>
 800a32a:	4a20      	ldr	r2, [pc, #128]	; (800a3ac <_free_r+0x9c>)
 800a32c:	9801      	ldr	r0, [sp, #4]
 800a32e:	6813      	ldr	r3, [r2, #0]
 800a330:	4615      	mov	r5, r2
 800a332:	b933      	cbnz	r3, 800a342 <_free_r+0x32>
 800a334:	6063      	str	r3, [r4, #4]
 800a336:	6014      	str	r4, [r2, #0]
 800a338:	b003      	add	sp, #12
 800a33a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a33e:	f000 bc2b 	b.w	800ab98 <__malloc_unlock>
 800a342:	42a3      	cmp	r3, r4
 800a344:	d90b      	bls.n	800a35e <_free_r+0x4e>
 800a346:	6821      	ldr	r1, [r4, #0]
 800a348:	1862      	adds	r2, r4, r1
 800a34a:	4293      	cmp	r3, r2
 800a34c:	bf04      	itt	eq
 800a34e:	681a      	ldreq	r2, [r3, #0]
 800a350:	685b      	ldreq	r3, [r3, #4]
 800a352:	6063      	str	r3, [r4, #4]
 800a354:	bf04      	itt	eq
 800a356:	1852      	addeq	r2, r2, r1
 800a358:	6022      	streq	r2, [r4, #0]
 800a35a:	602c      	str	r4, [r5, #0]
 800a35c:	e7ec      	b.n	800a338 <_free_r+0x28>
 800a35e:	461a      	mov	r2, r3
 800a360:	685b      	ldr	r3, [r3, #4]
 800a362:	b10b      	cbz	r3, 800a368 <_free_r+0x58>
 800a364:	42a3      	cmp	r3, r4
 800a366:	d9fa      	bls.n	800a35e <_free_r+0x4e>
 800a368:	6811      	ldr	r1, [r2, #0]
 800a36a:	1855      	adds	r5, r2, r1
 800a36c:	42a5      	cmp	r5, r4
 800a36e:	d10b      	bne.n	800a388 <_free_r+0x78>
 800a370:	6824      	ldr	r4, [r4, #0]
 800a372:	4421      	add	r1, r4
 800a374:	1854      	adds	r4, r2, r1
 800a376:	42a3      	cmp	r3, r4
 800a378:	6011      	str	r1, [r2, #0]
 800a37a:	d1dd      	bne.n	800a338 <_free_r+0x28>
 800a37c:	681c      	ldr	r4, [r3, #0]
 800a37e:	685b      	ldr	r3, [r3, #4]
 800a380:	6053      	str	r3, [r2, #4]
 800a382:	4421      	add	r1, r4
 800a384:	6011      	str	r1, [r2, #0]
 800a386:	e7d7      	b.n	800a338 <_free_r+0x28>
 800a388:	d902      	bls.n	800a390 <_free_r+0x80>
 800a38a:	230c      	movs	r3, #12
 800a38c:	6003      	str	r3, [r0, #0]
 800a38e:	e7d3      	b.n	800a338 <_free_r+0x28>
 800a390:	6825      	ldr	r5, [r4, #0]
 800a392:	1961      	adds	r1, r4, r5
 800a394:	428b      	cmp	r3, r1
 800a396:	bf04      	itt	eq
 800a398:	6819      	ldreq	r1, [r3, #0]
 800a39a:	685b      	ldreq	r3, [r3, #4]
 800a39c:	6063      	str	r3, [r4, #4]
 800a39e:	bf04      	itt	eq
 800a3a0:	1949      	addeq	r1, r1, r5
 800a3a2:	6021      	streq	r1, [r4, #0]
 800a3a4:	6054      	str	r4, [r2, #4]
 800a3a6:	e7c7      	b.n	800a338 <_free_r+0x28>
 800a3a8:	b003      	add	sp, #12
 800a3aa:	bd30      	pop	{r4, r5, pc}
 800a3ac:	20000224 	.word	0x20000224

0800a3b0 <_malloc_r>:
 800a3b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3b2:	1ccd      	adds	r5, r1, #3
 800a3b4:	f025 0503 	bic.w	r5, r5, #3
 800a3b8:	3508      	adds	r5, #8
 800a3ba:	2d0c      	cmp	r5, #12
 800a3bc:	bf38      	it	cc
 800a3be:	250c      	movcc	r5, #12
 800a3c0:	2d00      	cmp	r5, #0
 800a3c2:	4606      	mov	r6, r0
 800a3c4:	db01      	blt.n	800a3ca <_malloc_r+0x1a>
 800a3c6:	42a9      	cmp	r1, r5
 800a3c8:	d903      	bls.n	800a3d2 <_malloc_r+0x22>
 800a3ca:	230c      	movs	r3, #12
 800a3cc:	6033      	str	r3, [r6, #0]
 800a3ce:	2000      	movs	r0, #0
 800a3d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a3d2:	f000 fbdb 	bl	800ab8c <__malloc_lock>
 800a3d6:	4921      	ldr	r1, [pc, #132]	; (800a45c <_malloc_r+0xac>)
 800a3d8:	680a      	ldr	r2, [r1, #0]
 800a3da:	4614      	mov	r4, r2
 800a3dc:	b99c      	cbnz	r4, 800a406 <_malloc_r+0x56>
 800a3de:	4f20      	ldr	r7, [pc, #128]	; (800a460 <_malloc_r+0xb0>)
 800a3e0:	683b      	ldr	r3, [r7, #0]
 800a3e2:	b923      	cbnz	r3, 800a3ee <_malloc_r+0x3e>
 800a3e4:	4621      	mov	r1, r4
 800a3e6:	4630      	mov	r0, r6
 800a3e8:	f000 faf2 	bl	800a9d0 <_sbrk_r>
 800a3ec:	6038      	str	r0, [r7, #0]
 800a3ee:	4629      	mov	r1, r5
 800a3f0:	4630      	mov	r0, r6
 800a3f2:	f000 faed 	bl	800a9d0 <_sbrk_r>
 800a3f6:	1c43      	adds	r3, r0, #1
 800a3f8:	d123      	bne.n	800a442 <_malloc_r+0x92>
 800a3fa:	230c      	movs	r3, #12
 800a3fc:	6033      	str	r3, [r6, #0]
 800a3fe:	4630      	mov	r0, r6
 800a400:	f000 fbca 	bl	800ab98 <__malloc_unlock>
 800a404:	e7e3      	b.n	800a3ce <_malloc_r+0x1e>
 800a406:	6823      	ldr	r3, [r4, #0]
 800a408:	1b5b      	subs	r3, r3, r5
 800a40a:	d417      	bmi.n	800a43c <_malloc_r+0x8c>
 800a40c:	2b0b      	cmp	r3, #11
 800a40e:	d903      	bls.n	800a418 <_malloc_r+0x68>
 800a410:	6023      	str	r3, [r4, #0]
 800a412:	441c      	add	r4, r3
 800a414:	6025      	str	r5, [r4, #0]
 800a416:	e004      	b.n	800a422 <_malloc_r+0x72>
 800a418:	6863      	ldr	r3, [r4, #4]
 800a41a:	42a2      	cmp	r2, r4
 800a41c:	bf0c      	ite	eq
 800a41e:	600b      	streq	r3, [r1, #0]
 800a420:	6053      	strne	r3, [r2, #4]
 800a422:	4630      	mov	r0, r6
 800a424:	f000 fbb8 	bl	800ab98 <__malloc_unlock>
 800a428:	f104 000b 	add.w	r0, r4, #11
 800a42c:	1d23      	adds	r3, r4, #4
 800a42e:	f020 0007 	bic.w	r0, r0, #7
 800a432:	1ac2      	subs	r2, r0, r3
 800a434:	d0cc      	beq.n	800a3d0 <_malloc_r+0x20>
 800a436:	1a1b      	subs	r3, r3, r0
 800a438:	50a3      	str	r3, [r4, r2]
 800a43a:	e7c9      	b.n	800a3d0 <_malloc_r+0x20>
 800a43c:	4622      	mov	r2, r4
 800a43e:	6864      	ldr	r4, [r4, #4]
 800a440:	e7cc      	b.n	800a3dc <_malloc_r+0x2c>
 800a442:	1cc4      	adds	r4, r0, #3
 800a444:	f024 0403 	bic.w	r4, r4, #3
 800a448:	42a0      	cmp	r0, r4
 800a44a:	d0e3      	beq.n	800a414 <_malloc_r+0x64>
 800a44c:	1a21      	subs	r1, r4, r0
 800a44e:	4630      	mov	r0, r6
 800a450:	f000 fabe 	bl	800a9d0 <_sbrk_r>
 800a454:	3001      	adds	r0, #1
 800a456:	d1dd      	bne.n	800a414 <_malloc_r+0x64>
 800a458:	e7cf      	b.n	800a3fa <_malloc_r+0x4a>
 800a45a:	bf00      	nop
 800a45c:	20000224 	.word	0x20000224
 800a460:	20000228 	.word	0x20000228

0800a464 <__ssputs_r>:
 800a464:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a468:	688e      	ldr	r6, [r1, #8]
 800a46a:	429e      	cmp	r6, r3
 800a46c:	4682      	mov	sl, r0
 800a46e:	460c      	mov	r4, r1
 800a470:	4690      	mov	r8, r2
 800a472:	461f      	mov	r7, r3
 800a474:	d838      	bhi.n	800a4e8 <__ssputs_r+0x84>
 800a476:	898a      	ldrh	r2, [r1, #12]
 800a478:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a47c:	d032      	beq.n	800a4e4 <__ssputs_r+0x80>
 800a47e:	6825      	ldr	r5, [r4, #0]
 800a480:	6909      	ldr	r1, [r1, #16]
 800a482:	eba5 0901 	sub.w	r9, r5, r1
 800a486:	6965      	ldr	r5, [r4, #20]
 800a488:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a48c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a490:	3301      	adds	r3, #1
 800a492:	444b      	add	r3, r9
 800a494:	106d      	asrs	r5, r5, #1
 800a496:	429d      	cmp	r5, r3
 800a498:	bf38      	it	cc
 800a49a:	461d      	movcc	r5, r3
 800a49c:	0553      	lsls	r3, r2, #21
 800a49e:	d531      	bpl.n	800a504 <__ssputs_r+0xa0>
 800a4a0:	4629      	mov	r1, r5
 800a4a2:	f7ff ff85 	bl	800a3b0 <_malloc_r>
 800a4a6:	4606      	mov	r6, r0
 800a4a8:	b950      	cbnz	r0, 800a4c0 <__ssputs_r+0x5c>
 800a4aa:	230c      	movs	r3, #12
 800a4ac:	f8ca 3000 	str.w	r3, [sl]
 800a4b0:	89a3      	ldrh	r3, [r4, #12]
 800a4b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a4b6:	81a3      	strh	r3, [r4, #12]
 800a4b8:	f04f 30ff 	mov.w	r0, #4294967295
 800a4bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a4c0:	6921      	ldr	r1, [r4, #16]
 800a4c2:	464a      	mov	r2, r9
 800a4c4:	f7fd fc4c 	bl	8007d60 <memcpy>
 800a4c8:	89a3      	ldrh	r3, [r4, #12]
 800a4ca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a4ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a4d2:	81a3      	strh	r3, [r4, #12]
 800a4d4:	6126      	str	r6, [r4, #16]
 800a4d6:	6165      	str	r5, [r4, #20]
 800a4d8:	444e      	add	r6, r9
 800a4da:	eba5 0509 	sub.w	r5, r5, r9
 800a4de:	6026      	str	r6, [r4, #0]
 800a4e0:	60a5      	str	r5, [r4, #8]
 800a4e2:	463e      	mov	r6, r7
 800a4e4:	42be      	cmp	r6, r7
 800a4e6:	d900      	bls.n	800a4ea <__ssputs_r+0x86>
 800a4e8:	463e      	mov	r6, r7
 800a4ea:	4632      	mov	r2, r6
 800a4ec:	6820      	ldr	r0, [r4, #0]
 800a4ee:	4641      	mov	r1, r8
 800a4f0:	f000 fb32 	bl	800ab58 <memmove>
 800a4f4:	68a3      	ldr	r3, [r4, #8]
 800a4f6:	6822      	ldr	r2, [r4, #0]
 800a4f8:	1b9b      	subs	r3, r3, r6
 800a4fa:	4432      	add	r2, r6
 800a4fc:	60a3      	str	r3, [r4, #8]
 800a4fe:	6022      	str	r2, [r4, #0]
 800a500:	2000      	movs	r0, #0
 800a502:	e7db      	b.n	800a4bc <__ssputs_r+0x58>
 800a504:	462a      	mov	r2, r5
 800a506:	f000 fb4d 	bl	800aba4 <_realloc_r>
 800a50a:	4606      	mov	r6, r0
 800a50c:	2800      	cmp	r0, #0
 800a50e:	d1e1      	bne.n	800a4d4 <__ssputs_r+0x70>
 800a510:	6921      	ldr	r1, [r4, #16]
 800a512:	4650      	mov	r0, sl
 800a514:	f7ff fefc 	bl	800a310 <_free_r>
 800a518:	e7c7      	b.n	800a4aa <__ssputs_r+0x46>
	...

0800a51c <_svfiprintf_r>:
 800a51c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a520:	4698      	mov	r8, r3
 800a522:	898b      	ldrh	r3, [r1, #12]
 800a524:	061b      	lsls	r3, r3, #24
 800a526:	b09d      	sub	sp, #116	; 0x74
 800a528:	4607      	mov	r7, r0
 800a52a:	460d      	mov	r5, r1
 800a52c:	4614      	mov	r4, r2
 800a52e:	d50e      	bpl.n	800a54e <_svfiprintf_r+0x32>
 800a530:	690b      	ldr	r3, [r1, #16]
 800a532:	b963      	cbnz	r3, 800a54e <_svfiprintf_r+0x32>
 800a534:	2140      	movs	r1, #64	; 0x40
 800a536:	f7ff ff3b 	bl	800a3b0 <_malloc_r>
 800a53a:	6028      	str	r0, [r5, #0]
 800a53c:	6128      	str	r0, [r5, #16]
 800a53e:	b920      	cbnz	r0, 800a54a <_svfiprintf_r+0x2e>
 800a540:	230c      	movs	r3, #12
 800a542:	603b      	str	r3, [r7, #0]
 800a544:	f04f 30ff 	mov.w	r0, #4294967295
 800a548:	e0d1      	b.n	800a6ee <_svfiprintf_r+0x1d2>
 800a54a:	2340      	movs	r3, #64	; 0x40
 800a54c:	616b      	str	r3, [r5, #20]
 800a54e:	2300      	movs	r3, #0
 800a550:	9309      	str	r3, [sp, #36]	; 0x24
 800a552:	2320      	movs	r3, #32
 800a554:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a558:	f8cd 800c 	str.w	r8, [sp, #12]
 800a55c:	2330      	movs	r3, #48	; 0x30
 800a55e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a708 <_svfiprintf_r+0x1ec>
 800a562:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a566:	f04f 0901 	mov.w	r9, #1
 800a56a:	4623      	mov	r3, r4
 800a56c:	469a      	mov	sl, r3
 800a56e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a572:	b10a      	cbz	r2, 800a578 <_svfiprintf_r+0x5c>
 800a574:	2a25      	cmp	r2, #37	; 0x25
 800a576:	d1f9      	bne.n	800a56c <_svfiprintf_r+0x50>
 800a578:	ebba 0b04 	subs.w	fp, sl, r4
 800a57c:	d00b      	beq.n	800a596 <_svfiprintf_r+0x7a>
 800a57e:	465b      	mov	r3, fp
 800a580:	4622      	mov	r2, r4
 800a582:	4629      	mov	r1, r5
 800a584:	4638      	mov	r0, r7
 800a586:	f7ff ff6d 	bl	800a464 <__ssputs_r>
 800a58a:	3001      	adds	r0, #1
 800a58c:	f000 80aa 	beq.w	800a6e4 <_svfiprintf_r+0x1c8>
 800a590:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a592:	445a      	add	r2, fp
 800a594:	9209      	str	r2, [sp, #36]	; 0x24
 800a596:	f89a 3000 	ldrb.w	r3, [sl]
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	f000 80a2 	beq.w	800a6e4 <_svfiprintf_r+0x1c8>
 800a5a0:	2300      	movs	r3, #0
 800a5a2:	f04f 32ff 	mov.w	r2, #4294967295
 800a5a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a5aa:	f10a 0a01 	add.w	sl, sl, #1
 800a5ae:	9304      	str	r3, [sp, #16]
 800a5b0:	9307      	str	r3, [sp, #28]
 800a5b2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a5b6:	931a      	str	r3, [sp, #104]	; 0x68
 800a5b8:	4654      	mov	r4, sl
 800a5ba:	2205      	movs	r2, #5
 800a5bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a5c0:	4851      	ldr	r0, [pc, #324]	; (800a708 <_svfiprintf_r+0x1ec>)
 800a5c2:	f7f5 fe0d 	bl	80001e0 <memchr>
 800a5c6:	9a04      	ldr	r2, [sp, #16]
 800a5c8:	b9d8      	cbnz	r0, 800a602 <_svfiprintf_r+0xe6>
 800a5ca:	06d0      	lsls	r0, r2, #27
 800a5cc:	bf44      	itt	mi
 800a5ce:	2320      	movmi	r3, #32
 800a5d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a5d4:	0711      	lsls	r1, r2, #28
 800a5d6:	bf44      	itt	mi
 800a5d8:	232b      	movmi	r3, #43	; 0x2b
 800a5da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a5de:	f89a 3000 	ldrb.w	r3, [sl]
 800a5e2:	2b2a      	cmp	r3, #42	; 0x2a
 800a5e4:	d015      	beq.n	800a612 <_svfiprintf_r+0xf6>
 800a5e6:	9a07      	ldr	r2, [sp, #28]
 800a5e8:	4654      	mov	r4, sl
 800a5ea:	2000      	movs	r0, #0
 800a5ec:	f04f 0c0a 	mov.w	ip, #10
 800a5f0:	4621      	mov	r1, r4
 800a5f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a5f6:	3b30      	subs	r3, #48	; 0x30
 800a5f8:	2b09      	cmp	r3, #9
 800a5fa:	d94e      	bls.n	800a69a <_svfiprintf_r+0x17e>
 800a5fc:	b1b0      	cbz	r0, 800a62c <_svfiprintf_r+0x110>
 800a5fe:	9207      	str	r2, [sp, #28]
 800a600:	e014      	b.n	800a62c <_svfiprintf_r+0x110>
 800a602:	eba0 0308 	sub.w	r3, r0, r8
 800a606:	fa09 f303 	lsl.w	r3, r9, r3
 800a60a:	4313      	orrs	r3, r2
 800a60c:	9304      	str	r3, [sp, #16]
 800a60e:	46a2      	mov	sl, r4
 800a610:	e7d2      	b.n	800a5b8 <_svfiprintf_r+0x9c>
 800a612:	9b03      	ldr	r3, [sp, #12]
 800a614:	1d19      	adds	r1, r3, #4
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	9103      	str	r1, [sp, #12]
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	bfbb      	ittet	lt
 800a61e:	425b      	neglt	r3, r3
 800a620:	f042 0202 	orrlt.w	r2, r2, #2
 800a624:	9307      	strge	r3, [sp, #28]
 800a626:	9307      	strlt	r3, [sp, #28]
 800a628:	bfb8      	it	lt
 800a62a:	9204      	strlt	r2, [sp, #16]
 800a62c:	7823      	ldrb	r3, [r4, #0]
 800a62e:	2b2e      	cmp	r3, #46	; 0x2e
 800a630:	d10c      	bne.n	800a64c <_svfiprintf_r+0x130>
 800a632:	7863      	ldrb	r3, [r4, #1]
 800a634:	2b2a      	cmp	r3, #42	; 0x2a
 800a636:	d135      	bne.n	800a6a4 <_svfiprintf_r+0x188>
 800a638:	9b03      	ldr	r3, [sp, #12]
 800a63a:	1d1a      	adds	r2, r3, #4
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	9203      	str	r2, [sp, #12]
 800a640:	2b00      	cmp	r3, #0
 800a642:	bfb8      	it	lt
 800a644:	f04f 33ff 	movlt.w	r3, #4294967295
 800a648:	3402      	adds	r4, #2
 800a64a:	9305      	str	r3, [sp, #20]
 800a64c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a718 <_svfiprintf_r+0x1fc>
 800a650:	7821      	ldrb	r1, [r4, #0]
 800a652:	2203      	movs	r2, #3
 800a654:	4650      	mov	r0, sl
 800a656:	f7f5 fdc3 	bl	80001e0 <memchr>
 800a65a:	b140      	cbz	r0, 800a66e <_svfiprintf_r+0x152>
 800a65c:	2340      	movs	r3, #64	; 0x40
 800a65e:	eba0 000a 	sub.w	r0, r0, sl
 800a662:	fa03 f000 	lsl.w	r0, r3, r0
 800a666:	9b04      	ldr	r3, [sp, #16]
 800a668:	4303      	orrs	r3, r0
 800a66a:	3401      	adds	r4, #1
 800a66c:	9304      	str	r3, [sp, #16]
 800a66e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a672:	4826      	ldr	r0, [pc, #152]	; (800a70c <_svfiprintf_r+0x1f0>)
 800a674:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a678:	2206      	movs	r2, #6
 800a67a:	f7f5 fdb1 	bl	80001e0 <memchr>
 800a67e:	2800      	cmp	r0, #0
 800a680:	d038      	beq.n	800a6f4 <_svfiprintf_r+0x1d8>
 800a682:	4b23      	ldr	r3, [pc, #140]	; (800a710 <_svfiprintf_r+0x1f4>)
 800a684:	bb1b      	cbnz	r3, 800a6ce <_svfiprintf_r+0x1b2>
 800a686:	9b03      	ldr	r3, [sp, #12]
 800a688:	3307      	adds	r3, #7
 800a68a:	f023 0307 	bic.w	r3, r3, #7
 800a68e:	3308      	adds	r3, #8
 800a690:	9303      	str	r3, [sp, #12]
 800a692:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a694:	4433      	add	r3, r6
 800a696:	9309      	str	r3, [sp, #36]	; 0x24
 800a698:	e767      	b.n	800a56a <_svfiprintf_r+0x4e>
 800a69a:	fb0c 3202 	mla	r2, ip, r2, r3
 800a69e:	460c      	mov	r4, r1
 800a6a0:	2001      	movs	r0, #1
 800a6a2:	e7a5      	b.n	800a5f0 <_svfiprintf_r+0xd4>
 800a6a4:	2300      	movs	r3, #0
 800a6a6:	3401      	adds	r4, #1
 800a6a8:	9305      	str	r3, [sp, #20]
 800a6aa:	4619      	mov	r1, r3
 800a6ac:	f04f 0c0a 	mov.w	ip, #10
 800a6b0:	4620      	mov	r0, r4
 800a6b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a6b6:	3a30      	subs	r2, #48	; 0x30
 800a6b8:	2a09      	cmp	r2, #9
 800a6ba:	d903      	bls.n	800a6c4 <_svfiprintf_r+0x1a8>
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d0c5      	beq.n	800a64c <_svfiprintf_r+0x130>
 800a6c0:	9105      	str	r1, [sp, #20]
 800a6c2:	e7c3      	b.n	800a64c <_svfiprintf_r+0x130>
 800a6c4:	fb0c 2101 	mla	r1, ip, r1, r2
 800a6c8:	4604      	mov	r4, r0
 800a6ca:	2301      	movs	r3, #1
 800a6cc:	e7f0      	b.n	800a6b0 <_svfiprintf_r+0x194>
 800a6ce:	ab03      	add	r3, sp, #12
 800a6d0:	9300      	str	r3, [sp, #0]
 800a6d2:	462a      	mov	r2, r5
 800a6d4:	4b0f      	ldr	r3, [pc, #60]	; (800a714 <_svfiprintf_r+0x1f8>)
 800a6d6:	a904      	add	r1, sp, #16
 800a6d8:	4638      	mov	r0, r7
 800a6da:	f7fd fbf7 	bl	8007ecc <_printf_float>
 800a6de:	1c42      	adds	r2, r0, #1
 800a6e0:	4606      	mov	r6, r0
 800a6e2:	d1d6      	bne.n	800a692 <_svfiprintf_r+0x176>
 800a6e4:	89ab      	ldrh	r3, [r5, #12]
 800a6e6:	065b      	lsls	r3, r3, #25
 800a6e8:	f53f af2c 	bmi.w	800a544 <_svfiprintf_r+0x28>
 800a6ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a6ee:	b01d      	add	sp, #116	; 0x74
 800a6f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6f4:	ab03      	add	r3, sp, #12
 800a6f6:	9300      	str	r3, [sp, #0]
 800a6f8:	462a      	mov	r2, r5
 800a6fa:	4b06      	ldr	r3, [pc, #24]	; (800a714 <_svfiprintf_r+0x1f8>)
 800a6fc:	a904      	add	r1, sp, #16
 800a6fe:	4638      	mov	r0, r7
 800a700:	f7fd fe88 	bl	8008414 <_printf_i>
 800a704:	e7eb      	b.n	800a6de <_svfiprintf_r+0x1c2>
 800a706:	bf00      	nop
 800a708:	0800b464 	.word	0x0800b464
 800a70c:	0800b46e 	.word	0x0800b46e
 800a710:	08007ecd 	.word	0x08007ecd
 800a714:	0800a465 	.word	0x0800a465
 800a718:	0800b46a 	.word	0x0800b46a

0800a71c <__sfputc_r>:
 800a71c:	6893      	ldr	r3, [r2, #8]
 800a71e:	3b01      	subs	r3, #1
 800a720:	2b00      	cmp	r3, #0
 800a722:	b410      	push	{r4}
 800a724:	6093      	str	r3, [r2, #8]
 800a726:	da08      	bge.n	800a73a <__sfputc_r+0x1e>
 800a728:	6994      	ldr	r4, [r2, #24]
 800a72a:	42a3      	cmp	r3, r4
 800a72c:	db01      	blt.n	800a732 <__sfputc_r+0x16>
 800a72e:	290a      	cmp	r1, #10
 800a730:	d103      	bne.n	800a73a <__sfputc_r+0x1e>
 800a732:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a736:	f7fe b8c7 	b.w	80088c8 <__swbuf_r>
 800a73a:	6813      	ldr	r3, [r2, #0]
 800a73c:	1c58      	adds	r0, r3, #1
 800a73e:	6010      	str	r0, [r2, #0]
 800a740:	7019      	strb	r1, [r3, #0]
 800a742:	4608      	mov	r0, r1
 800a744:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a748:	4770      	bx	lr

0800a74a <__sfputs_r>:
 800a74a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a74c:	4606      	mov	r6, r0
 800a74e:	460f      	mov	r7, r1
 800a750:	4614      	mov	r4, r2
 800a752:	18d5      	adds	r5, r2, r3
 800a754:	42ac      	cmp	r4, r5
 800a756:	d101      	bne.n	800a75c <__sfputs_r+0x12>
 800a758:	2000      	movs	r0, #0
 800a75a:	e007      	b.n	800a76c <__sfputs_r+0x22>
 800a75c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a760:	463a      	mov	r2, r7
 800a762:	4630      	mov	r0, r6
 800a764:	f7ff ffda 	bl	800a71c <__sfputc_r>
 800a768:	1c43      	adds	r3, r0, #1
 800a76a:	d1f3      	bne.n	800a754 <__sfputs_r+0xa>
 800a76c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a770 <_vfiprintf_r>:
 800a770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a774:	460d      	mov	r5, r1
 800a776:	b09d      	sub	sp, #116	; 0x74
 800a778:	4614      	mov	r4, r2
 800a77a:	4698      	mov	r8, r3
 800a77c:	4606      	mov	r6, r0
 800a77e:	b118      	cbz	r0, 800a788 <_vfiprintf_r+0x18>
 800a780:	6983      	ldr	r3, [r0, #24]
 800a782:	b90b      	cbnz	r3, 800a788 <_vfiprintf_r+0x18>
 800a784:	f7ff f912 	bl	80099ac <__sinit>
 800a788:	4b89      	ldr	r3, [pc, #548]	; (800a9b0 <_vfiprintf_r+0x240>)
 800a78a:	429d      	cmp	r5, r3
 800a78c:	d11b      	bne.n	800a7c6 <_vfiprintf_r+0x56>
 800a78e:	6875      	ldr	r5, [r6, #4]
 800a790:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a792:	07d9      	lsls	r1, r3, #31
 800a794:	d405      	bmi.n	800a7a2 <_vfiprintf_r+0x32>
 800a796:	89ab      	ldrh	r3, [r5, #12]
 800a798:	059a      	lsls	r2, r3, #22
 800a79a:	d402      	bmi.n	800a7a2 <_vfiprintf_r+0x32>
 800a79c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a79e:	f7ff f9ba 	bl	8009b16 <__retarget_lock_acquire_recursive>
 800a7a2:	89ab      	ldrh	r3, [r5, #12]
 800a7a4:	071b      	lsls	r3, r3, #28
 800a7a6:	d501      	bpl.n	800a7ac <_vfiprintf_r+0x3c>
 800a7a8:	692b      	ldr	r3, [r5, #16]
 800a7aa:	b9eb      	cbnz	r3, 800a7e8 <_vfiprintf_r+0x78>
 800a7ac:	4629      	mov	r1, r5
 800a7ae:	4630      	mov	r0, r6
 800a7b0:	f7fe f8dc 	bl	800896c <__swsetup_r>
 800a7b4:	b1c0      	cbz	r0, 800a7e8 <_vfiprintf_r+0x78>
 800a7b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a7b8:	07dc      	lsls	r4, r3, #31
 800a7ba:	d50e      	bpl.n	800a7da <_vfiprintf_r+0x6a>
 800a7bc:	f04f 30ff 	mov.w	r0, #4294967295
 800a7c0:	b01d      	add	sp, #116	; 0x74
 800a7c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7c6:	4b7b      	ldr	r3, [pc, #492]	; (800a9b4 <_vfiprintf_r+0x244>)
 800a7c8:	429d      	cmp	r5, r3
 800a7ca:	d101      	bne.n	800a7d0 <_vfiprintf_r+0x60>
 800a7cc:	68b5      	ldr	r5, [r6, #8]
 800a7ce:	e7df      	b.n	800a790 <_vfiprintf_r+0x20>
 800a7d0:	4b79      	ldr	r3, [pc, #484]	; (800a9b8 <_vfiprintf_r+0x248>)
 800a7d2:	429d      	cmp	r5, r3
 800a7d4:	bf08      	it	eq
 800a7d6:	68f5      	ldreq	r5, [r6, #12]
 800a7d8:	e7da      	b.n	800a790 <_vfiprintf_r+0x20>
 800a7da:	89ab      	ldrh	r3, [r5, #12]
 800a7dc:	0598      	lsls	r0, r3, #22
 800a7de:	d4ed      	bmi.n	800a7bc <_vfiprintf_r+0x4c>
 800a7e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a7e2:	f7ff f999 	bl	8009b18 <__retarget_lock_release_recursive>
 800a7e6:	e7e9      	b.n	800a7bc <_vfiprintf_r+0x4c>
 800a7e8:	2300      	movs	r3, #0
 800a7ea:	9309      	str	r3, [sp, #36]	; 0x24
 800a7ec:	2320      	movs	r3, #32
 800a7ee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a7f2:	f8cd 800c 	str.w	r8, [sp, #12]
 800a7f6:	2330      	movs	r3, #48	; 0x30
 800a7f8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a9bc <_vfiprintf_r+0x24c>
 800a7fc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a800:	f04f 0901 	mov.w	r9, #1
 800a804:	4623      	mov	r3, r4
 800a806:	469a      	mov	sl, r3
 800a808:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a80c:	b10a      	cbz	r2, 800a812 <_vfiprintf_r+0xa2>
 800a80e:	2a25      	cmp	r2, #37	; 0x25
 800a810:	d1f9      	bne.n	800a806 <_vfiprintf_r+0x96>
 800a812:	ebba 0b04 	subs.w	fp, sl, r4
 800a816:	d00b      	beq.n	800a830 <_vfiprintf_r+0xc0>
 800a818:	465b      	mov	r3, fp
 800a81a:	4622      	mov	r2, r4
 800a81c:	4629      	mov	r1, r5
 800a81e:	4630      	mov	r0, r6
 800a820:	f7ff ff93 	bl	800a74a <__sfputs_r>
 800a824:	3001      	adds	r0, #1
 800a826:	f000 80aa 	beq.w	800a97e <_vfiprintf_r+0x20e>
 800a82a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a82c:	445a      	add	r2, fp
 800a82e:	9209      	str	r2, [sp, #36]	; 0x24
 800a830:	f89a 3000 	ldrb.w	r3, [sl]
 800a834:	2b00      	cmp	r3, #0
 800a836:	f000 80a2 	beq.w	800a97e <_vfiprintf_r+0x20e>
 800a83a:	2300      	movs	r3, #0
 800a83c:	f04f 32ff 	mov.w	r2, #4294967295
 800a840:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a844:	f10a 0a01 	add.w	sl, sl, #1
 800a848:	9304      	str	r3, [sp, #16]
 800a84a:	9307      	str	r3, [sp, #28]
 800a84c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a850:	931a      	str	r3, [sp, #104]	; 0x68
 800a852:	4654      	mov	r4, sl
 800a854:	2205      	movs	r2, #5
 800a856:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a85a:	4858      	ldr	r0, [pc, #352]	; (800a9bc <_vfiprintf_r+0x24c>)
 800a85c:	f7f5 fcc0 	bl	80001e0 <memchr>
 800a860:	9a04      	ldr	r2, [sp, #16]
 800a862:	b9d8      	cbnz	r0, 800a89c <_vfiprintf_r+0x12c>
 800a864:	06d1      	lsls	r1, r2, #27
 800a866:	bf44      	itt	mi
 800a868:	2320      	movmi	r3, #32
 800a86a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a86e:	0713      	lsls	r3, r2, #28
 800a870:	bf44      	itt	mi
 800a872:	232b      	movmi	r3, #43	; 0x2b
 800a874:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a878:	f89a 3000 	ldrb.w	r3, [sl]
 800a87c:	2b2a      	cmp	r3, #42	; 0x2a
 800a87e:	d015      	beq.n	800a8ac <_vfiprintf_r+0x13c>
 800a880:	9a07      	ldr	r2, [sp, #28]
 800a882:	4654      	mov	r4, sl
 800a884:	2000      	movs	r0, #0
 800a886:	f04f 0c0a 	mov.w	ip, #10
 800a88a:	4621      	mov	r1, r4
 800a88c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a890:	3b30      	subs	r3, #48	; 0x30
 800a892:	2b09      	cmp	r3, #9
 800a894:	d94e      	bls.n	800a934 <_vfiprintf_r+0x1c4>
 800a896:	b1b0      	cbz	r0, 800a8c6 <_vfiprintf_r+0x156>
 800a898:	9207      	str	r2, [sp, #28]
 800a89a:	e014      	b.n	800a8c6 <_vfiprintf_r+0x156>
 800a89c:	eba0 0308 	sub.w	r3, r0, r8
 800a8a0:	fa09 f303 	lsl.w	r3, r9, r3
 800a8a4:	4313      	orrs	r3, r2
 800a8a6:	9304      	str	r3, [sp, #16]
 800a8a8:	46a2      	mov	sl, r4
 800a8aa:	e7d2      	b.n	800a852 <_vfiprintf_r+0xe2>
 800a8ac:	9b03      	ldr	r3, [sp, #12]
 800a8ae:	1d19      	adds	r1, r3, #4
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	9103      	str	r1, [sp, #12]
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	bfbb      	ittet	lt
 800a8b8:	425b      	neglt	r3, r3
 800a8ba:	f042 0202 	orrlt.w	r2, r2, #2
 800a8be:	9307      	strge	r3, [sp, #28]
 800a8c0:	9307      	strlt	r3, [sp, #28]
 800a8c2:	bfb8      	it	lt
 800a8c4:	9204      	strlt	r2, [sp, #16]
 800a8c6:	7823      	ldrb	r3, [r4, #0]
 800a8c8:	2b2e      	cmp	r3, #46	; 0x2e
 800a8ca:	d10c      	bne.n	800a8e6 <_vfiprintf_r+0x176>
 800a8cc:	7863      	ldrb	r3, [r4, #1]
 800a8ce:	2b2a      	cmp	r3, #42	; 0x2a
 800a8d0:	d135      	bne.n	800a93e <_vfiprintf_r+0x1ce>
 800a8d2:	9b03      	ldr	r3, [sp, #12]
 800a8d4:	1d1a      	adds	r2, r3, #4
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	9203      	str	r2, [sp, #12]
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	bfb8      	it	lt
 800a8de:	f04f 33ff 	movlt.w	r3, #4294967295
 800a8e2:	3402      	adds	r4, #2
 800a8e4:	9305      	str	r3, [sp, #20]
 800a8e6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a9cc <_vfiprintf_r+0x25c>
 800a8ea:	7821      	ldrb	r1, [r4, #0]
 800a8ec:	2203      	movs	r2, #3
 800a8ee:	4650      	mov	r0, sl
 800a8f0:	f7f5 fc76 	bl	80001e0 <memchr>
 800a8f4:	b140      	cbz	r0, 800a908 <_vfiprintf_r+0x198>
 800a8f6:	2340      	movs	r3, #64	; 0x40
 800a8f8:	eba0 000a 	sub.w	r0, r0, sl
 800a8fc:	fa03 f000 	lsl.w	r0, r3, r0
 800a900:	9b04      	ldr	r3, [sp, #16]
 800a902:	4303      	orrs	r3, r0
 800a904:	3401      	adds	r4, #1
 800a906:	9304      	str	r3, [sp, #16]
 800a908:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a90c:	482c      	ldr	r0, [pc, #176]	; (800a9c0 <_vfiprintf_r+0x250>)
 800a90e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a912:	2206      	movs	r2, #6
 800a914:	f7f5 fc64 	bl	80001e0 <memchr>
 800a918:	2800      	cmp	r0, #0
 800a91a:	d03f      	beq.n	800a99c <_vfiprintf_r+0x22c>
 800a91c:	4b29      	ldr	r3, [pc, #164]	; (800a9c4 <_vfiprintf_r+0x254>)
 800a91e:	bb1b      	cbnz	r3, 800a968 <_vfiprintf_r+0x1f8>
 800a920:	9b03      	ldr	r3, [sp, #12]
 800a922:	3307      	adds	r3, #7
 800a924:	f023 0307 	bic.w	r3, r3, #7
 800a928:	3308      	adds	r3, #8
 800a92a:	9303      	str	r3, [sp, #12]
 800a92c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a92e:	443b      	add	r3, r7
 800a930:	9309      	str	r3, [sp, #36]	; 0x24
 800a932:	e767      	b.n	800a804 <_vfiprintf_r+0x94>
 800a934:	fb0c 3202 	mla	r2, ip, r2, r3
 800a938:	460c      	mov	r4, r1
 800a93a:	2001      	movs	r0, #1
 800a93c:	e7a5      	b.n	800a88a <_vfiprintf_r+0x11a>
 800a93e:	2300      	movs	r3, #0
 800a940:	3401      	adds	r4, #1
 800a942:	9305      	str	r3, [sp, #20]
 800a944:	4619      	mov	r1, r3
 800a946:	f04f 0c0a 	mov.w	ip, #10
 800a94a:	4620      	mov	r0, r4
 800a94c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a950:	3a30      	subs	r2, #48	; 0x30
 800a952:	2a09      	cmp	r2, #9
 800a954:	d903      	bls.n	800a95e <_vfiprintf_r+0x1ee>
 800a956:	2b00      	cmp	r3, #0
 800a958:	d0c5      	beq.n	800a8e6 <_vfiprintf_r+0x176>
 800a95a:	9105      	str	r1, [sp, #20]
 800a95c:	e7c3      	b.n	800a8e6 <_vfiprintf_r+0x176>
 800a95e:	fb0c 2101 	mla	r1, ip, r1, r2
 800a962:	4604      	mov	r4, r0
 800a964:	2301      	movs	r3, #1
 800a966:	e7f0      	b.n	800a94a <_vfiprintf_r+0x1da>
 800a968:	ab03      	add	r3, sp, #12
 800a96a:	9300      	str	r3, [sp, #0]
 800a96c:	462a      	mov	r2, r5
 800a96e:	4b16      	ldr	r3, [pc, #88]	; (800a9c8 <_vfiprintf_r+0x258>)
 800a970:	a904      	add	r1, sp, #16
 800a972:	4630      	mov	r0, r6
 800a974:	f7fd faaa 	bl	8007ecc <_printf_float>
 800a978:	4607      	mov	r7, r0
 800a97a:	1c78      	adds	r0, r7, #1
 800a97c:	d1d6      	bne.n	800a92c <_vfiprintf_r+0x1bc>
 800a97e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a980:	07d9      	lsls	r1, r3, #31
 800a982:	d405      	bmi.n	800a990 <_vfiprintf_r+0x220>
 800a984:	89ab      	ldrh	r3, [r5, #12]
 800a986:	059a      	lsls	r2, r3, #22
 800a988:	d402      	bmi.n	800a990 <_vfiprintf_r+0x220>
 800a98a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a98c:	f7ff f8c4 	bl	8009b18 <__retarget_lock_release_recursive>
 800a990:	89ab      	ldrh	r3, [r5, #12]
 800a992:	065b      	lsls	r3, r3, #25
 800a994:	f53f af12 	bmi.w	800a7bc <_vfiprintf_r+0x4c>
 800a998:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a99a:	e711      	b.n	800a7c0 <_vfiprintf_r+0x50>
 800a99c:	ab03      	add	r3, sp, #12
 800a99e:	9300      	str	r3, [sp, #0]
 800a9a0:	462a      	mov	r2, r5
 800a9a2:	4b09      	ldr	r3, [pc, #36]	; (800a9c8 <_vfiprintf_r+0x258>)
 800a9a4:	a904      	add	r1, sp, #16
 800a9a6:	4630      	mov	r0, r6
 800a9a8:	f7fd fd34 	bl	8008414 <_printf_i>
 800a9ac:	e7e4      	b.n	800a978 <_vfiprintf_r+0x208>
 800a9ae:	bf00      	nop
 800a9b0:	0800b2c8 	.word	0x0800b2c8
 800a9b4:	0800b2e8 	.word	0x0800b2e8
 800a9b8:	0800b2a8 	.word	0x0800b2a8
 800a9bc:	0800b464 	.word	0x0800b464
 800a9c0:	0800b46e 	.word	0x0800b46e
 800a9c4:	08007ecd 	.word	0x08007ecd
 800a9c8:	0800a74b 	.word	0x0800a74b
 800a9cc:	0800b46a 	.word	0x0800b46a

0800a9d0 <_sbrk_r>:
 800a9d0:	b538      	push	{r3, r4, r5, lr}
 800a9d2:	4d06      	ldr	r5, [pc, #24]	; (800a9ec <_sbrk_r+0x1c>)
 800a9d4:	2300      	movs	r3, #0
 800a9d6:	4604      	mov	r4, r0
 800a9d8:	4608      	mov	r0, r1
 800a9da:	602b      	str	r3, [r5, #0]
 800a9dc:	f7f8 f814 	bl	8002a08 <_sbrk>
 800a9e0:	1c43      	adds	r3, r0, #1
 800a9e2:	d102      	bne.n	800a9ea <_sbrk_r+0x1a>
 800a9e4:	682b      	ldr	r3, [r5, #0]
 800a9e6:	b103      	cbz	r3, 800a9ea <_sbrk_r+0x1a>
 800a9e8:	6023      	str	r3, [r4, #0]
 800a9ea:	bd38      	pop	{r3, r4, r5, pc}
 800a9ec:	20000c18 	.word	0x20000c18

0800a9f0 <__sread>:
 800a9f0:	b510      	push	{r4, lr}
 800a9f2:	460c      	mov	r4, r1
 800a9f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9f8:	f000 f8fa 	bl	800abf0 <_read_r>
 800a9fc:	2800      	cmp	r0, #0
 800a9fe:	bfab      	itete	ge
 800aa00:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800aa02:	89a3      	ldrhlt	r3, [r4, #12]
 800aa04:	181b      	addge	r3, r3, r0
 800aa06:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800aa0a:	bfac      	ite	ge
 800aa0c:	6563      	strge	r3, [r4, #84]	; 0x54
 800aa0e:	81a3      	strhlt	r3, [r4, #12]
 800aa10:	bd10      	pop	{r4, pc}

0800aa12 <__swrite>:
 800aa12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa16:	461f      	mov	r7, r3
 800aa18:	898b      	ldrh	r3, [r1, #12]
 800aa1a:	05db      	lsls	r3, r3, #23
 800aa1c:	4605      	mov	r5, r0
 800aa1e:	460c      	mov	r4, r1
 800aa20:	4616      	mov	r6, r2
 800aa22:	d505      	bpl.n	800aa30 <__swrite+0x1e>
 800aa24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa28:	2302      	movs	r3, #2
 800aa2a:	2200      	movs	r2, #0
 800aa2c:	f000 f870 	bl	800ab10 <_lseek_r>
 800aa30:	89a3      	ldrh	r3, [r4, #12]
 800aa32:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aa36:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800aa3a:	81a3      	strh	r3, [r4, #12]
 800aa3c:	4632      	mov	r2, r6
 800aa3e:	463b      	mov	r3, r7
 800aa40:	4628      	mov	r0, r5
 800aa42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aa46:	f000 b817 	b.w	800aa78 <_write_r>

0800aa4a <__sseek>:
 800aa4a:	b510      	push	{r4, lr}
 800aa4c:	460c      	mov	r4, r1
 800aa4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa52:	f000 f85d 	bl	800ab10 <_lseek_r>
 800aa56:	1c43      	adds	r3, r0, #1
 800aa58:	89a3      	ldrh	r3, [r4, #12]
 800aa5a:	bf15      	itete	ne
 800aa5c:	6560      	strne	r0, [r4, #84]	; 0x54
 800aa5e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800aa62:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800aa66:	81a3      	strheq	r3, [r4, #12]
 800aa68:	bf18      	it	ne
 800aa6a:	81a3      	strhne	r3, [r4, #12]
 800aa6c:	bd10      	pop	{r4, pc}

0800aa6e <__sclose>:
 800aa6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa72:	f000 b81b 	b.w	800aaac <_close_r>
	...

0800aa78 <_write_r>:
 800aa78:	b538      	push	{r3, r4, r5, lr}
 800aa7a:	4d07      	ldr	r5, [pc, #28]	; (800aa98 <_write_r+0x20>)
 800aa7c:	4604      	mov	r4, r0
 800aa7e:	4608      	mov	r0, r1
 800aa80:	4611      	mov	r1, r2
 800aa82:	2200      	movs	r2, #0
 800aa84:	602a      	str	r2, [r5, #0]
 800aa86:	461a      	mov	r2, r3
 800aa88:	f7f7 ff6d 	bl	8002966 <_write>
 800aa8c:	1c43      	adds	r3, r0, #1
 800aa8e:	d102      	bne.n	800aa96 <_write_r+0x1e>
 800aa90:	682b      	ldr	r3, [r5, #0]
 800aa92:	b103      	cbz	r3, 800aa96 <_write_r+0x1e>
 800aa94:	6023      	str	r3, [r4, #0]
 800aa96:	bd38      	pop	{r3, r4, r5, pc}
 800aa98:	20000c18 	.word	0x20000c18

0800aa9c <abort>:
 800aa9c:	b508      	push	{r3, lr}
 800aa9e:	2006      	movs	r0, #6
 800aaa0:	f000 f8e0 	bl	800ac64 <raise>
 800aaa4:	2001      	movs	r0, #1
 800aaa6:	f7f7 ff37 	bl	8002918 <_exit>
	...

0800aaac <_close_r>:
 800aaac:	b538      	push	{r3, r4, r5, lr}
 800aaae:	4d06      	ldr	r5, [pc, #24]	; (800aac8 <_close_r+0x1c>)
 800aab0:	2300      	movs	r3, #0
 800aab2:	4604      	mov	r4, r0
 800aab4:	4608      	mov	r0, r1
 800aab6:	602b      	str	r3, [r5, #0]
 800aab8:	f7f7 ff71 	bl	800299e <_close>
 800aabc:	1c43      	adds	r3, r0, #1
 800aabe:	d102      	bne.n	800aac6 <_close_r+0x1a>
 800aac0:	682b      	ldr	r3, [r5, #0]
 800aac2:	b103      	cbz	r3, 800aac6 <_close_r+0x1a>
 800aac4:	6023      	str	r3, [r4, #0]
 800aac6:	bd38      	pop	{r3, r4, r5, pc}
 800aac8:	20000c18 	.word	0x20000c18

0800aacc <_fstat_r>:
 800aacc:	b538      	push	{r3, r4, r5, lr}
 800aace:	4d07      	ldr	r5, [pc, #28]	; (800aaec <_fstat_r+0x20>)
 800aad0:	2300      	movs	r3, #0
 800aad2:	4604      	mov	r4, r0
 800aad4:	4608      	mov	r0, r1
 800aad6:	4611      	mov	r1, r2
 800aad8:	602b      	str	r3, [r5, #0]
 800aada:	f7f7 ff6c 	bl	80029b6 <_fstat>
 800aade:	1c43      	adds	r3, r0, #1
 800aae0:	d102      	bne.n	800aae8 <_fstat_r+0x1c>
 800aae2:	682b      	ldr	r3, [r5, #0]
 800aae4:	b103      	cbz	r3, 800aae8 <_fstat_r+0x1c>
 800aae6:	6023      	str	r3, [r4, #0]
 800aae8:	bd38      	pop	{r3, r4, r5, pc}
 800aaea:	bf00      	nop
 800aaec:	20000c18 	.word	0x20000c18

0800aaf0 <_isatty_r>:
 800aaf0:	b538      	push	{r3, r4, r5, lr}
 800aaf2:	4d06      	ldr	r5, [pc, #24]	; (800ab0c <_isatty_r+0x1c>)
 800aaf4:	2300      	movs	r3, #0
 800aaf6:	4604      	mov	r4, r0
 800aaf8:	4608      	mov	r0, r1
 800aafa:	602b      	str	r3, [r5, #0]
 800aafc:	f7f7 ff6b 	bl	80029d6 <_isatty>
 800ab00:	1c43      	adds	r3, r0, #1
 800ab02:	d102      	bne.n	800ab0a <_isatty_r+0x1a>
 800ab04:	682b      	ldr	r3, [r5, #0]
 800ab06:	b103      	cbz	r3, 800ab0a <_isatty_r+0x1a>
 800ab08:	6023      	str	r3, [r4, #0]
 800ab0a:	bd38      	pop	{r3, r4, r5, pc}
 800ab0c:	20000c18 	.word	0x20000c18

0800ab10 <_lseek_r>:
 800ab10:	b538      	push	{r3, r4, r5, lr}
 800ab12:	4d07      	ldr	r5, [pc, #28]	; (800ab30 <_lseek_r+0x20>)
 800ab14:	4604      	mov	r4, r0
 800ab16:	4608      	mov	r0, r1
 800ab18:	4611      	mov	r1, r2
 800ab1a:	2200      	movs	r2, #0
 800ab1c:	602a      	str	r2, [r5, #0]
 800ab1e:	461a      	mov	r2, r3
 800ab20:	f7f7 ff64 	bl	80029ec <_lseek>
 800ab24:	1c43      	adds	r3, r0, #1
 800ab26:	d102      	bne.n	800ab2e <_lseek_r+0x1e>
 800ab28:	682b      	ldr	r3, [r5, #0]
 800ab2a:	b103      	cbz	r3, 800ab2e <_lseek_r+0x1e>
 800ab2c:	6023      	str	r3, [r4, #0]
 800ab2e:	bd38      	pop	{r3, r4, r5, pc}
 800ab30:	20000c18 	.word	0x20000c18

0800ab34 <__ascii_mbtowc>:
 800ab34:	b082      	sub	sp, #8
 800ab36:	b901      	cbnz	r1, 800ab3a <__ascii_mbtowc+0x6>
 800ab38:	a901      	add	r1, sp, #4
 800ab3a:	b142      	cbz	r2, 800ab4e <__ascii_mbtowc+0x1a>
 800ab3c:	b14b      	cbz	r3, 800ab52 <__ascii_mbtowc+0x1e>
 800ab3e:	7813      	ldrb	r3, [r2, #0]
 800ab40:	600b      	str	r3, [r1, #0]
 800ab42:	7812      	ldrb	r2, [r2, #0]
 800ab44:	1e10      	subs	r0, r2, #0
 800ab46:	bf18      	it	ne
 800ab48:	2001      	movne	r0, #1
 800ab4a:	b002      	add	sp, #8
 800ab4c:	4770      	bx	lr
 800ab4e:	4610      	mov	r0, r2
 800ab50:	e7fb      	b.n	800ab4a <__ascii_mbtowc+0x16>
 800ab52:	f06f 0001 	mvn.w	r0, #1
 800ab56:	e7f8      	b.n	800ab4a <__ascii_mbtowc+0x16>

0800ab58 <memmove>:
 800ab58:	4288      	cmp	r0, r1
 800ab5a:	b510      	push	{r4, lr}
 800ab5c:	eb01 0402 	add.w	r4, r1, r2
 800ab60:	d902      	bls.n	800ab68 <memmove+0x10>
 800ab62:	4284      	cmp	r4, r0
 800ab64:	4623      	mov	r3, r4
 800ab66:	d807      	bhi.n	800ab78 <memmove+0x20>
 800ab68:	1e43      	subs	r3, r0, #1
 800ab6a:	42a1      	cmp	r1, r4
 800ab6c:	d008      	beq.n	800ab80 <memmove+0x28>
 800ab6e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ab72:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ab76:	e7f8      	b.n	800ab6a <memmove+0x12>
 800ab78:	4402      	add	r2, r0
 800ab7a:	4601      	mov	r1, r0
 800ab7c:	428a      	cmp	r2, r1
 800ab7e:	d100      	bne.n	800ab82 <memmove+0x2a>
 800ab80:	bd10      	pop	{r4, pc}
 800ab82:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ab86:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ab8a:	e7f7      	b.n	800ab7c <memmove+0x24>

0800ab8c <__malloc_lock>:
 800ab8c:	4801      	ldr	r0, [pc, #4]	; (800ab94 <__malloc_lock+0x8>)
 800ab8e:	f7fe bfc2 	b.w	8009b16 <__retarget_lock_acquire_recursive>
 800ab92:	bf00      	nop
 800ab94:	20000c10 	.word	0x20000c10

0800ab98 <__malloc_unlock>:
 800ab98:	4801      	ldr	r0, [pc, #4]	; (800aba0 <__malloc_unlock+0x8>)
 800ab9a:	f7fe bfbd 	b.w	8009b18 <__retarget_lock_release_recursive>
 800ab9e:	bf00      	nop
 800aba0:	20000c10 	.word	0x20000c10

0800aba4 <_realloc_r>:
 800aba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aba6:	4607      	mov	r7, r0
 800aba8:	4614      	mov	r4, r2
 800abaa:	460e      	mov	r6, r1
 800abac:	b921      	cbnz	r1, 800abb8 <_realloc_r+0x14>
 800abae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800abb2:	4611      	mov	r1, r2
 800abb4:	f7ff bbfc 	b.w	800a3b0 <_malloc_r>
 800abb8:	b922      	cbnz	r2, 800abc4 <_realloc_r+0x20>
 800abba:	f7ff fba9 	bl	800a310 <_free_r>
 800abbe:	4625      	mov	r5, r4
 800abc0:	4628      	mov	r0, r5
 800abc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800abc4:	f000 f877 	bl	800acb6 <_malloc_usable_size_r>
 800abc8:	42a0      	cmp	r0, r4
 800abca:	d20f      	bcs.n	800abec <_realloc_r+0x48>
 800abcc:	4621      	mov	r1, r4
 800abce:	4638      	mov	r0, r7
 800abd0:	f7ff fbee 	bl	800a3b0 <_malloc_r>
 800abd4:	4605      	mov	r5, r0
 800abd6:	2800      	cmp	r0, #0
 800abd8:	d0f2      	beq.n	800abc0 <_realloc_r+0x1c>
 800abda:	4631      	mov	r1, r6
 800abdc:	4622      	mov	r2, r4
 800abde:	f7fd f8bf 	bl	8007d60 <memcpy>
 800abe2:	4631      	mov	r1, r6
 800abe4:	4638      	mov	r0, r7
 800abe6:	f7ff fb93 	bl	800a310 <_free_r>
 800abea:	e7e9      	b.n	800abc0 <_realloc_r+0x1c>
 800abec:	4635      	mov	r5, r6
 800abee:	e7e7      	b.n	800abc0 <_realloc_r+0x1c>

0800abf0 <_read_r>:
 800abf0:	b538      	push	{r3, r4, r5, lr}
 800abf2:	4d07      	ldr	r5, [pc, #28]	; (800ac10 <_read_r+0x20>)
 800abf4:	4604      	mov	r4, r0
 800abf6:	4608      	mov	r0, r1
 800abf8:	4611      	mov	r1, r2
 800abfa:	2200      	movs	r2, #0
 800abfc:	602a      	str	r2, [r5, #0]
 800abfe:	461a      	mov	r2, r3
 800ac00:	f7f7 fe94 	bl	800292c <_read>
 800ac04:	1c43      	adds	r3, r0, #1
 800ac06:	d102      	bne.n	800ac0e <_read_r+0x1e>
 800ac08:	682b      	ldr	r3, [r5, #0]
 800ac0a:	b103      	cbz	r3, 800ac0e <_read_r+0x1e>
 800ac0c:	6023      	str	r3, [r4, #0]
 800ac0e:	bd38      	pop	{r3, r4, r5, pc}
 800ac10:	20000c18 	.word	0x20000c18

0800ac14 <_raise_r>:
 800ac14:	291f      	cmp	r1, #31
 800ac16:	b538      	push	{r3, r4, r5, lr}
 800ac18:	4604      	mov	r4, r0
 800ac1a:	460d      	mov	r5, r1
 800ac1c:	d904      	bls.n	800ac28 <_raise_r+0x14>
 800ac1e:	2316      	movs	r3, #22
 800ac20:	6003      	str	r3, [r0, #0]
 800ac22:	f04f 30ff 	mov.w	r0, #4294967295
 800ac26:	bd38      	pop	{r3, r4, r5, pc}
 800ac28:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ac2a:	b112      	cbz	r2, 800ac32 <_raise_r+0x1e>
 800ac2c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ac30:	b94b      	cbnz	r3, 800ac46 <_raise_r+0x32>
 800ac32:	4620      	mov	r0, r4
 800ac34:	f000 f830 	bl	800ac98 <_getpid_r>
 800ac38:	462a      	mov	r2, r5
 800ac3a:	4601      	mov	r1, r0
 800ac3c:	4620      	mov	r0, r4
 800ac3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ac42:	f000 b817 	b.w	800ac74 <_kill_r>
 800ac46:	2b01      	cmp	r3, #1
 800ac48:	d00a      	beq.n	800ac60 <_raise_r+0x4c>
 800ac4a:	1c59      	adds	r1, r3, #1
 800ac4c:	d103      	bne.n	800ac56 <_raise_r+0x42>
 800ac4e:	2316      	movs	r3, #22
 800ac50:	6003      	str	r3, [r0, #0]
 800ac52:	2001      	movs	r0, #1
 800ac54:	e7e7      	b.n	800ac26 <_raise_r+0x12>
 800ac56:	2400      	movs	r4, #0
 800ac58:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ac5c:	4628      	mov	r0, r5
 800ac5e:	4798      	blx	r3
 800ac60:	2000      	movs	r0, #0
 800ac62:	e7e0      	b.n	800ac26 <_raise_r+0x12>

0800ac64 <raise>:
 800ac64:	4b02      	ldr	r3, [pc, #8]	; (800ac70 <raise+0xc>)
 800ac66:	4601      	mov	r1, r0
 800ac68:	6818      	ldr	r0, [r3, #0]
 800ac6a:	f7ff bfd3 	b.w	800ac14 <_raise_r>
 800ac6e:	bf00      	nop
 800ac70:	2000002c 	.word	0x2000002c

0800ac74 <_kill_r>:
 800ac74:	b538      	push	{r3, r4, r5, lr}
 800ac76:	4d07      	ldr	r5, [pc, #28]	; (800ac94 <_kill_r+0x20>)
 800ac78:	2300      	movs	r3, #0
 800ac7a:	4604      	mov	r4, r0
 800ac7c:	4608      	mov	r0, r1
 800ac7e:	4611      	mov	r1, r2
 800ac80:	602b      	str	r3, [r5, #0]
 800ac82:	f7f7 fe39 	bl	80028f8 <_kill>
 800ac86:	1c43      	adds	r3, r0, #1
 800ac88:	d102      	bne.n	800ac90 <_kill_r+0x1c>
 800ac8a:	682b      	ldr	r3, [r5, #0]
 800ac8c:	b103      	cbz	r3, 800ac90 <_kill_r+0x1c>
 800ac8e:	6023      	str	r3, [r4, #0]
 800ac90:	bd38      	pop	{r3, r4, r5, pc}
 800ac92:	bf00      	nop
 800ac94:	20000c18 	.word	0x20000c18

0800ac98 <_getpid_r>:
 800ac98:	f7f7 be26 	b.w	80028e8 <_getpid>

0800ac9c <__ascii_wctomb>:
 800ac9c:	b149      	cbz	r1, 800acb2 <__ascii_wctomb+0x16>
 800ac9e:	2aff      	cmp	r2, #255	; 0xff
 800aca0:	bf85      	ittet	hi
 800aca2:	238a      	movhi	r3, #138	; 0x8a
 800aca4:	6003      	strhi	r3, [r0, #0]
 800aca6:	700a      	strbls	r2, [r1, #0]
 800aca8:	f04f 30ff 	movhi.w	r0, #4294967295
 800acac:	bf98      	it	ls
 800acae:	2001      	movls	r0, #1
 800acb0:	4770      	bx	lr
 800acb2:	4608      	mov	r0, r1
 800acb4:	4770      	bx	lr

0800acb6 <_malloc_usable_size_r>:
 800acb6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800acba:	1f18      	subs	r0, r3, #4
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	bfbc      	itt	lt
 800acc0:	580b      	ldrlt	r3, [r1, r0]
 800acc2:	18c0      	addlt	r0, r0, r3
 800acc4:	4770      	bx	lr
	...

0800acc8 <_init>:
 800acc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acca:	bf00      	nop
 800accc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800acce:	bc08      	pop	{r3}
 800acd0:	469e      	mov	lr, r3
 800acd2:	4770      	bx	lr

0800acd4 <_fini>:
 800acd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acd6:	bf00      	nop
 800acd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800acda:	bc08      	pop	{r3}
 800acdc:	469e      	mov	lr, r3
 800acde:	4770      	bx	lr
