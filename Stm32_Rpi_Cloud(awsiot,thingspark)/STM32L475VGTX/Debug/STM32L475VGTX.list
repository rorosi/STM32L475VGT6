
STM32L475VGTX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b0c  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  08006c98  08006c98  00016c98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d50  08006d50  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08006d50  08006d50  00016d50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006d58  08006d58  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d58  08006d58  00016d58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006d5c  08006d5c  00016d5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08006d60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000708  2000000c  08006d6c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000714  08006d6c  00020714  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ee42  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000397d  00000000  00000000  0003ee7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016b0  00000000  00000000  00042800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001518  00000000  00000000  00043eb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000292f9  00000000  00000000  000453c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c727  00000000  00000000  0006e6c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f450e  00000000  00000000  0008ade8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0017f2f6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006160  00000000  00000000  0017f34c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006c7c 	.word	0x08006c7c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08006c7c 	.word	0x08006c7c

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2iz>:
 8000a74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a78:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a7c:	d215      	bcs.n	8000aaa <__aeabi_d2iz+0x36>
 8000a7e:	d511      	bpl.n	8000aa4 <__aeabi_d2iz+0x30>
 8000a80:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a88:	d912      	bls.n	8000ab0 <__aeabi_d2iz+0x3c>
 8000a8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a96:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9e:	bf18      	it	ne
 8000aa0:	4240      	negne	r0, r0
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aae:	d105      	bne.n	8000abc <__aeabi_d2iz+0x48>
 8000ab0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ab4:	bf08      	it	eq
 8000ab6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aba:	4770      	bx	lr
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2uiz>:
 8000ac4:	004a      	lsls	r2, r1, #1
 8000ac6:	d211      	bcs.n	8000aec <__aeabi_d2uiz+0x28>
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000acc:	d211      	bcs.n	8000af2 <__aeabi_d2uiz+0x2e>
 8000ace:	d50d      	bpl.n	8000aec <__aeabi_d2uiz+0x28>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d40e      	bmi.n	8000af8 <__aeabi_d2uiz+0x34>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aea:	4770      	bx	lr
 8000aec:	f04f 0000 	mov.w	r0, #0
 8000af0:	4770      	bx	lr
 8000af2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000af6:	d102      	bne.n	8000afe <__aeabi_d2uiz+0x3a>
 8000af8:	f04f 30ff 	mov.w	r0, #4294967295
 8000afc:	4770      	bx	lr
 8000afe:	f04f 0000 	mov.w	r0, #0
 8000b02:	4770      	bx	lr

08000b04 <__aeabi_uldivmod>:
 8000b04:	b953      	cbnz	r3, 8000b1c <__aeabi_uldivmod+0x18>
 8000b06:	b94a      	cbnz	r2, 8000b1c <__aeabi_uldivmod+0x18>
 8000b08:	2900      	cmp	r1, #0
 8000b0a:	bf08      	it	eq
 8000b0c:	2800      	cmpeq	r0, #0
 8000b0e:	bf1c      	itt	ne
 8000b10:	f04f 31ff 	movne.w	r1, #4294967295
 8000b14:	f04f 30ff 	movne.w	r0, #4294967295
 8000b18:	f000 b96e 	b.w	8000df8 <__aeabi_idiv0>
 8000b1c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b20:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b24:	f000 f806 	bl	8000b34 <__udivmoddi4>
 8000b28:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b30:	b004      	add	sp, #16
 8000b32:	4770      	bx	lr

08000b34 <__udivmoddi4>:
 8000b34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b38:	9d08      	ldr	r5, [sp, #32]
 8000b3a:	4604      	mov	r4, r0
 8000b3c:	468c      	mov	ip, r1
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	f040 8083 	bne.w	8000c4a <__udivmoddi4+0x116>
 8000b44:	428a      	cmp	r2, r1
 8000b46:	4617      	mov	r7, r2
 8000b48:	d947      	bls.n	8000bda <__udivmoddi4+0xa6>
 8000b4a:	fab2 f282 	clz	r2, r2
 8000b4e:	b142      	cbz	r2, 8000b62 <__udivmoddi4+0x2e>
 8000b50:	f1c2 0020 	rsb	r0, r2, #32
 8000b54:	fa24 f000 	lsr.w	r0, r4, r0
 8000b58:	4091      	lsls	r1, r2
 8000b5a:	4097      	lsls	r7, r2
 8000b5c:	ea40 0c01 	orr.w	ip, r0, r1
 8000b60:	4094      	lsls	r4, r2
 8000b62:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000b66:	0c23      	lsrs	r3, r4, #16
 8000b68:	fbbc f6f8 	udiv	r6, ip, r8
 8000b6c:	fa1f fe87 	uxth.w	lr, r7
 8000b70:	fb08 c116 	mls	r1, r8, r6, ip
 8000b74:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b78:	fb06 f10e 	mul.w	r1, r6, lr
 8000b7c:	4299      	cmp	r1, r3
 8000b7e:	d909      	bls.n	8000b94 <__udivmoddi4+0x60>
 8000b80:	18fb      	adds	r3, r7, r3
 8000b82:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b86:	f080 8119 	bcs.w	8000dbc <__udivmoddi4+0x288>
 8000b8a:	4299      	cmp	r1, r3
 8000b8c:	f240 8116 	bls.w	8000dbc <__udivmoddi4+0x288>
 8000b90:	3e02      	subs	r6, #2
 8000b92:	443b      	add	r3, r7
 8000b94:	1a5b      	subs	r3, r3, r1
 8000b96:	b2a4      	uxth	r4, r4
 8000b98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b9c:	fb08 3310 	mls	r3, r8, r0, r3
 8000ba0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ba4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ba8:	45a6      	cmp	lr, r4
 8000baa:	d909      	bls.n	8000bc0 <__udivmoddi4+0x8c>
 8000bac:	193c      	adds	r4, r7, r4
 8000bae:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bb2:	f080 8105 	bcs.w	8000dc0 <__udivmoddi4+0x28c>
 8000bb6:	45a6      	cmp	lr, r4
 8000bb8:	f240 8102 	bls.w	8000dc0 <__udivmoddi4+0x28c>
 8000bbc:	3802      	subs	r0, #2
 8000bbe:	443c      	add	r4, r7
 8000bc0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bc4:	eba4 040e 	sub.w	r4, r4, lr
 8000bc8:	2600      	movs	r6, #0
 8000bca:	b11d      	cbz	r5, 8000bd4 <__udivmoddi4+0xa0>
 8000bcc:	40d4      	lsrs	r4, r2
 8000bce:	2300      	movs	r3, #0
 8000bd0:	e9c5 4300 	strd	r4, r3, [r5]
 8000bd4:	4631      	mov	r1, r6
 8000bd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bda:	b902      	cbnz	r2, 8000bde <__udivmoddi4+0xaa>
 8000bdc:	deff      	udf	#255	; 0xff
 8000bde:	fab2 f282 	clz	r2, r2
 8000be2:	2a00      	cmp	r2, #0
 8000be4:	d150      	bne.n	8000c88 <__udivmoddi4+0x154>
 8000be6:	1bcb      	subs	r3, r1, r7
 8000be8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bec:	fa1f f887 	uxth.w	r8, r7
 8000bf0:	2601      	movs	r6, #1
 8000bf2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000bf6:	0c21      	lsrs	r1, r4, #16
 8000bf8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000bfc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c00:	fb08 f30c 	mul.w	r3, r8, ip
 8000c04:	428b      	cmp	r3, r1
 8000c06:	d907      	bls.n	8000c18 <__udivmoddi4+0xe4>
 8000c08:	1879      	adds	r1, r7, r1
 8000c0a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c0e:	d202      	bcs.n	8000c16 <__udivmoddi4+0xe2>
 8000c10:	428b      	cmp	r3, r1
 8000c12:	f200 80e9 	bhi.w	8000de8 <__udivmoddi4+0x2b4>
 8000c16:	4684      	mov	ip, r0
 8000c18:	1ac9      	subs	r1, r1, r3
 8000c1a:	b2a3      	uxth	r3, r4
 8000c1c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c20:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c24:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000c28:	fb08 f800 	mul.w	r8, r8, r0
 8000c2c:	45a0      	cmp	r8, r4
 8000c2e:	d907      	bls.n	8000c40 <__udivmoddi4+0x10c>
 8000c30:	193c      	adds	r4, r7, r4
 8000c32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c36:	d202      	bcs.n	8000c3e <__udivmoddi4+0x10a>
 8000c38:	45a0      	cmp	r8, r4
 8000c3a:	f200 80d9 	bhi.w	8000df0 <__udivmoddi4+0x2bc>
 8000c3e:	4618      	mov	r0, r3
 8000c40:	eba4 0408 	sub.w	r4, r4, r8
 8000c44:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c48:	e7bf      	b.n	8000bca <__udivmoddi4+0x96>
 8000c4a:	428b      	cmp	r3, r1
 8000c4c:	d909      	bls.n	8000c62 <__udivmoddi4+0x12e>
 8000c4e:	2d00      	cmp	r5, #0
 8000c50:	f000 80b1 	beq.w	8000db6 <__udivmoddi4+0x282>
 8000c54:	2600      	movs	r6, #0
 8000c56:	e9c5 0100 	strd	r0, r1, [r5]
 8000c5a:	4630      	mov	r0, r6
 8000c5c:	4631      	mov	r1, r6
 8000c5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c62:	fab3 f683 	clz	r6, r3
 8000c66:	2e00      	cmp	r6, #0
 8000c68:	d14a      	bne.n	8000d00 <__udivmoddi4+0x1cc>
 8000c6a:	428b      	cmp	r3, r1
 8000c6c:	d302      	bcc.n	8000c74 <__udivmoddi4+0x140>
 8000c6e:	4282      	cmp	r2, r0
 8000c70:	f200 80b8 	bhi.w	8000de4 <__udivmoddi4+0x2b0>
 8000c74:	1a84      	subs	r4, r0, r2
 8000c76:	eb61 0103 	sbc.w	r1, r1, r3
 8000c7a:	2001      	movs	r0, #1
 8000c7c:	468c      	mov	ip, r1
 8000c7e:	2d00      	cmp	r5, #0
 8000c80:	d0a8      	beq.n	8000bd4 <__udivmoddi4+0xa0>
 8000c82:	e9c5 4c00 	strd	r4, ip, [r5]
 8000c86:	e7a5      	b.n	8000bd4 <__udivmoddi4+0xa0>
 8000c88:	f1c2 0320 	rsb	r3, r2, #32
 8000c8c:	fa20 f603 	lsr.w	r6, r0, r3
 8000c90:	4097      	lsls	r7, r2
 8000c92:	fa01 f002 	lsl.w	r0, r1, r2
 8000c96:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c9a:	40d9      	lsrs	r1, r3
 8000c9c:	4330      	orrs	r0, r6
 8000c9e:	0c03      	lsrs	r3, r0, #16
 8000ca0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ca4:	fa1f f887 	uxth.w	r8, r7
 8000ca8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000cac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cb0:	fb06 f108 	mul.w	r1, r6, r8
 8000cb4:	4299      	cmp	r1, r3
 8000cb6:	fa04 f402 	lsl.w	r4, r4, r2
 8000cba:	d909      	bls.n	8000cd0 <__udivmoddi4+0x19c>
 8000cbc:	18fb      	adds	r3, r7, r3
 8000cbe:	f106 3cff 	add.w	ip, r6, #4294967295
 8000cc2:	f080 808d 	bcs.w	8000de0 <__udivmoddi4+0x2ac>
 8000cc6:	4299      	cmp	r1, r3
 8000cc8:	f240 808a 	bls.w	8000de0 <__udivmoddi4+0x2ac>
 8000ccc:	3e02      	subs	r6, #2
 8000cce:	443b      	add	r3, r7
 8000cd0:	1a5b      	subs	r3, r3, r1
 8000cd2:	b281      	uxth	r1, r0
 8000cd4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cd8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cdc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ce0:	fb00 f308 	mul.w	r3, r0, r8
 8000ce4:	428b      	cmp	r3, r1
 8000ce6:	d907      	bls.n	8000cf8 <__udivmoddi4+0x1c4>
 8000ce8:	1879      	adds	r1, r7, r1
 8000cea:	f100 3cff 	add.w	ip, r0, #4294967295
 8000cee:	d273      	bcs.n	8000dd8 <__udivmoddi4+0x2a4>
 8000cf0:	428b      	cmp	r3, r1
 8000cf2:	d971      	bls.n	8000dd8 <__udivmoddi4+0x2a4>
 8000cf4:	3802      	subs	r0, #2
 8000cf6:	4439      	add	r1, r7
 8000cf8:	1acb      	subs	r3, r1, r3
 8000cfa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000cfe:	e778      	b.n	8000bf2 <__udivmoddi4+0xbe>
 8000d00:	f1c6 0c20 	rsb	ip, r6, #32
 8000d04:	fa03 f406 	lsl.w	r4, r3, r6
 8000d08:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d0c:	431c      	orrs	r4, r3
 8000d0e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d12:	fa01 f306 	lsl.w	r3, r1, r6
 8000d16:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000d1a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000d1e:	431f      	orrs	r7, r3
 8000d20:	0c3b      	lsrs	r3, r7, #16
 8000d22:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d26:	fa1f f884 	uxth.w	r8, r4
 8000d2a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d2e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000d32:	fb09 fa08 	mul.w	sl, r9, r8
 8000d36:	458a      	cmp	sl, r1
 8000d38:	fa02 f206 	lsl.w	r2, r2, r6
 8000d3c:	fa00 f306 	lsl.w	r3, r0, r6
 8000d40:	d908      	bls.n	8000d54 <__udivmoddi4+0x220>
 8000d42:	1861      	adds	r1, r4, r1
 8000d44:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d48:	d248      	bcs.n	8000ddc <__udivmoddi4+0x2a8>
 8000d4a:	458a      	cmp	sl, r1
 8000d4c:	d946      	bls.n	8000ddc <__udivmoddi4+0x2a8>
 8000d4e:	f1a9 0902 	sub.w	r9, r9, #2
 8000d52:	4421      	add	r1, r4
 8000d54:	eba1 010a 	sub.w	r1, r1, sl
 8000d58:	b2bf      	uxth	r7, r7
 8000d5a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d5e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d62:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000d66:	fb00 f808 	mul.w	r8, r0, r8
 8000d6a:	45b8      	cmp	r8, r7
 8000d6c:	d907      	bls.n	8000d7e <__udivmoddi4+0x24a>
 8000d6e:	19e7      	adds	r7, r4, r7
 8000d70:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d74:	d22e      	bcs.n	8000dd4 <__udivmoddi4+0x2a0>
 8000d76:	45b8      	cmp	r8, r7
 8000d78:	d92c      	bls.n	8000dd4 <__udivmoddi4+0x2a0>
 8000d7a:	3802      	subs	r0, #2
 8000d7c:	4427      	add	r7, r4
 8000d7e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d82:	eba7 0708 	sub.w	r7, r7, r8
 8000d86:	fba0 8902 	umull	r8, r9, r0, r2
 8000d8a:	454f      	cmp	r7, r9
 8000d8c:	46c6      	mov	lr, r8
 8000d8e:	4649      	mov	r1, r9
 8000d90:	d31a      	bcc.n	8000dc8 <__udivmoddi4+0x294>
 8000d92:	d017      	beq.n	8000dc4 <__udivmoddi4+0x290>
 8000d94:	b15d      	cbz	r5, 8000dae <__udivmoddi4+0x27a>
 8000d96:	ebb3 020e 	subs.w	r2, r3, lr
 8000d9a:	eb67 0701 	sbc.w	r7, r7, r1
 8000d9e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000da2:	40f2      	lsrs	r2, r6
 8000da4:	ea4c 0202 	orr.w	r2, ip, r2
 8000da8:	40f7      	lsrs	r7, r6
 8000daa:	e9c5 2700 	strd	r2, r7, [r5]
 8000dae:	2600      	movs	r6, #0
 8000db0:	4631      	mov	r1, r6
 8000db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db6:	462e      	mov	r6, r5
 8000db8:	4628      	mov	r0, r5
 8000dba:	e70b      	b.n	8000bd4 <__udivmoddi4+0xa0>
 8000dbc:	4606      	mov	r6, r0
 8000dbe:	e6e9      	b.n	8000b94 <__udivmoddi4+0x60>
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	e6fd      	b.n	8000bc0 <__udivmoddi4+0x8c>
 8000dc4:	4543      	cmp	r3, r8
 8000dc6:	d2e5      	bcs.n	8000d94 <__udivmoddi4+0x260>
 8000dc8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000dcc:	eb69 0104 	sbc.w	r1, r9, r4
 8000dd0:	3801      	subs	r0, #1
 8000dd2:	e7df      	b.n	8000d94 <__udivmoddi4+0x260>
 8000dd4:	4608      	mov	r0, r1
 8000dd6:	e7d2      	b.n	8000d7e <__udivmoddi4+0x24a>
 8000dd8:	4660      	mov	r0, ip
 8000dda:	e78d      	b.n	8000cf8 <__udivmoddi4+0x1c4>
 8000ddc:	4681      	mov	r9, r0
 8000dde:	e7b9      	b.n	8000d54 <__udivmoddi4+0x220>
 8000de0:	4666      	mov	r6, ip
 8000de2:	e775      	b.n	8000cd0 <__udivmoddi4+0x19c>
 8000de4:	4630      	mov	r0, r6
 8000de6:	e74a      	b.n	8000c7e <__udivmoddi4+0x14a>
 8000de8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000dec:	4439      	add	r1, r7
 8000dee:	e713      	b.n	8000c18 <__udivmoddi4+0xe4>
 8000df0:	3802      	subs	r0, #2
 8000df2:	443c      	add	r4, r7
 8000df4:	e724      	b.n	8000c40 <__udivmoddi4+0x10c>
 8000df6:	bf00      	nop

08000df8 <__aeabi_idiv0>:
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop

08000dfc <MX_DFSDM1_Init>:

DFSDM_Channel_HandleTypeDef hdfsdm1_channel1;

/* DFSDM1 init function */
void MX_DFSDM1_Init(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8000e00:	4b18      	ldr	r3, [pc, #96]	; (8000e64 <MX_DFSDM1_Init+0x68>)
 8000e02:	4a19      	ldr	r2, [pc, #100]	; (8000e68 <MX_DFSDM1_Init+0x6c>)
 8000e04:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8000e06:	4b17      	ldr	r3, [pc, #92]	; (8000e64 <MX_DFSDM1_Init+0x68>)
 8000e08:	2201      	movs	r2, #1
 8000e0a:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000e0c:	4b15      	ldr	r3, [pc, #84]	; (8000e64 <MX_DFSDM1_Init+0x68>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 8000e12:	4b14      	ldr	r3, [pc, #80]	; (8000e64 <MX_DFSDM1_Init+0x68>)
 8000e14:	2202      	movs	r2, #2
 8000e16:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000e18:	4b12      	ldr	r3, [pc, #72]	; (8000e64 <MX_DFSDM1_Init+0x68>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000e1e:	4b11      	ldr	r3, [pc, #68]	; (8000e64 <MX_DFSDM1_Init+0x68>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8000e24:	4b0f      	ldr	r3, [pc, #60]	; (8000e64 <MX_DFSDM1_Init+0x68>)
 8000e26:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e2a:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000e2c:	4b0d      	ldr	r3, [pc, #52]	; (8000e64 <MX_DFSDM1_Init+0x68>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000e32:	4b0c      	ldr	r3, [pc, #48]	; (8000e64 <MX_DFSDM1_Init+0x68>)
 8000e34:	2204      	movs	r2, #4
 8000e36:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000e38:	4b0a      	ldr	r3, [pc, #40]	; (8000e64 <MX_DFSDM1_Init+0x68>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8000e3e:	4b09      	ldr	r3, [pc, #36]	; (8000e64 <MX_DFSDM1_Init+0x68>)
 8000e40:	2201      	movs	r2, #1
 8000e42:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8000e44:	4b07      	ldr	r3, [pc, #28]	; (8000e64 <MX_DFSDM1_Init+0x68>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8000e4a:	4b06      	ldr	r3, [pc, #24]	; (8000e64 <MX_DFSDM1_Init+0x68>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8000e50:	4804      	ldr	r0, [pc, #16]	; (8000e64 <MX_DFSDM1_Init+0x68>)
 8000e52:	f002 fd21 	bl	8003898 <HAL_DFSDM_ChannelInit>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d001      	beq.n	8000e60 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 8000e5c:	f000 fb4c 	bl	80014f8 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000e60:	bf00      	nop
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	20000050 	.word	0x20000050
 8000e68:	40016020 	.word	0x40016020

08000e6c <HAL_DFSDM_ChannelMspInit>:

static uint32_t DFSDM1_Init = 0;

void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* dfsdm_channelHandle)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b0ac      	sub	sp, #176	; 0xb0
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e74:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000e78:	2200      	movs	r2, #0
 8000e7a:	601a      	str	r2, [r3, #0]
 8000e7c:	605a      	str	r2, [r3, #4]
 8000e7e:	609a      	str	r2, [r3, #8]
 8000e80:	60da      	str	r2, [r3, #12]
 8000e82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e84:	f107 0314 	add.w	r3, r7, #20
 8000e88:	2288      	movs	r2, #136	; 0x88
 8000e8a:	2100      	movs	r1, #0
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f005 feed 	bl	8006c6c <memset>
  if(DFSDM1_Init == 0)
 8000e92:	4b25      	ldr	r3, [pc, #148]	; (8000f28 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d142      	bne.n	8000f20 <HAL_DFSDM_ChannelMspInit+0xb4>
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8000e9a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e9e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ea6:	f107 0314 	add.w	r3, r7, #20
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f004 f980 	bl	80051b0 <HAL_RCCEx_PeriphCLKConfig>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d001      	beq.n	8000eba <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8000eb6:	f000 fb1f 	bl	80014f8 <Error_Handler>
    }

    /* DFSDM1 clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000eba:	4b1c      	ldr	r3, [pc, #112]	; (8000f2c <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000ebc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ebe:	4a1b      	ldr	r2, [pc, #108]	; (8000f2c <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000ec0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000ec4:	6613      	str	r3, [r2, #96]	; 0x60
 8000ec6:	4b19      	ldr	r3, [pc, #100]	; (8000f2c <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000ec8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000eca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000ece:	613b      	str	r3, [r7, #16]
 8000ed0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ed2:	4b16      	ldr	r3, [pc, #88]	; (8000f2c <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000ed4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ed6:	4a15      	ldr	r2, [pc, #84]	; (8000f2c <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000ed8:	f043 0310 	orr.w	r3, r3, #16
 8000edc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ede:	4b13      	ldr	r3, [pc, #76]	; (8000f2c <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000ee0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ee2:	f003 0310 	and.w	r3, r3, #16
 8000ee6:	60fb      	str	r3, [r7, #12]
 8000ee8:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8000eea:	f44f 7320 	mov.w	r3, #640	; 0x280
 8000eee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef2:	2302      	movs	r3, #2
 8000ef4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000efe:	2300      	movs	r3, #0
 8000f00:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000f04:	2306      	movs	r3, #6
 8000f06:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f0a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000f0e:	4619      	mov	r1, r3
 8000f10:	4807      	ldr	r0, [pc, #28]	; (8000f30 <HAL_DFSDM_ChannelMspInit+0xc4>)
 8000f12:	f002 fdcd 	bl	8003ab0 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8000f16:	4b04      	ldr	r3, [pc, #16]	; (8000f28 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	3301      	adds	r3, #1
 8000f1c:	4a02      	ldr	r2, [pc, #8]	; (8000f28 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000f1e:	6013      	str	r3, [r2, #0]
  }
}
 8000f20:	bf00      	nop
 8000f22:	37b0      	adds	r7, #176	; 0xb0
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	20000028 	.word	0x20000028
 8000f2c:	40021000 	.word	0x40021000
 8000f30:	48001000 	.word	0x48001000

08000f34 <MX_GPIO_Init>:
     PD6   ------> USART2_RX
     PB8   ------> I2C1_SCL
     PB9   ------> I2C1_SDA
*/
void MX_GPIO_Init(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b08a      	sub	sp, #40	; 0x28
 8000f38:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f3a:	f107 0314 	add.w	r3, r7, #20
 8000f3e:	2200      	movs	r2, #0
 8000f40:	601a      	str	r2, [r3, #0]
 8000f42:	605a      	str	r2, [r3, #4]
 8000f44:	609a      	str	r2, [r3, #8]
 8000f46:	60da      	str	r2, [r3, #12]
 8000f48:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f4a:	4bbd      	ldr	r3, [pc, #756]	; (8001240 <MX_GPIO_Init+0x30c>)
 8000f4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f4e:	4abc      	ldr	r2, [pc, #752]	; (8001240 <MX_GPIO_Init+0x30c>)
 8000f50:	f043 0310 	orr.w	r3, r3, #16
 8000f54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f56:	4bba      	ldr	r3, [pc, #744]	; (8001240 <MX_GPIO_Init+0x30c>)
 8000f58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f5a:	f003 0310 	and.w	r3, r3, #16
 8000f5e:	613b      	str	r3, [r7, #16]
 8000f60:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f62:	4bb7      	ldr	r3, [pc, #732]	; (8001240 <MX_GPIO_Init+0x30c>)
 8000f64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f66:	4ab6      	ldr	r2, [pc, #728]	; (8001240 <MX_GPIO_Init+0x30c>)
 8000f68:	f043 0304 	orr.w	r3, r3, #4
 8000f6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f6e:	4bb4      	ldr	r3, [pc, #720]	; (8001240 <MX_GPIO_Init+0x30c>)
 8000f70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f72:	f003 0304 	and.w	r3, r3, #4
 8000f76:	60fb      	str	r3, [r7, #12]
 8000f78:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f7a:	4bb1      	ldr	r3, [pc, #708]	; (8001240 <MX_GPIO_Init+0x30c>)
 8000f7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f7e:	4ab0      	ldr	r2, [pc, #704]	; (8001240 <MX_GPIO_Init+0x30c>)
 8000f80:	f043 0301 	orr.w	r3, r3, #1
 8000f84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f86:	4bae      	ldr	r3, [pc, #696]	; (8001240 <MX_GPIO_Init+0x30c>)
 8000f88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f8a:	f003 0301 	and.w	r3, r3, #1
 8000f8e:	60bb      	str	r3, [r7, #8]
 8000f90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f92:	4bab      	ldr	r3, [pc, #684]	; (8001240 <MX_GPIO_Init+0x30c>)
 8000f94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f96:	4aaa      	ldr	r2, [pc, #680]	; (8001240 <MX_GPIO_Init+0x30c>)
 8000f98:	f043 0302 	orr.w	r3, r3, #2
 8000f9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f9e:	4ba8      	ldr	r3, [pc, #672]	; (8001240 <MX_GPIO_Init+0x30c>)
 8000fa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fa2:	f003 0302 	and.w	r3, r3, #2
 8000fa6:	607b      	str	r3, [r7, #4]
 8000fa8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000faa:	4ba5      	ldr	r3, [pc, #660]	; (8001240 <MX_GPIO_Init+0x30c>)
 8000fac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fae:	4aa4      	ldr	r2, [pc, #656]	; (8001240 <MX_GPIO_Init+0x30c>)
 8000fb0:	f043 0308 	orr.w	r3, r3, #8
 8000fb4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fb6:	4ba2      	ldr	r3, [pc, #648]	; (8001240 <MX_GPIO_Init+0x30c>)
 8000fb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fba:	f003 0308 	and.w	r3, r3, #8
 8000fbe:	603b      	str	r3, [r7, #0]
 8000fc0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	f44f 718a 	mov.w	r1, #276	; 0x114
 8000fc8:	489e      	ldr	r0, [pc, #632]	; (8001244 <MX_GPIO_Init+0x310>)
 8000fca:	f002 ff1b 	bl	8003e04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8000fce:	2200      	movs	r2, #0
 8000fd0:	f248 1104 	movw	r1, #33028	; 0x8104
 8000fd4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fd8:	f002 ff14 	bl	8003e04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000fdc:	2200      	movs	r2, #0
 8000fde:	f24f 0114 	movw	r1, #61460	; 0xf014
 8000fe2:	4899      	ldr	r0, [pc, #612]	; (8001248 <MX_GPIO_Init+0x314>)
 8000fe4:	f002 ff0e 	bl	8003e04 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8000fe8:	2200      	movs	r2, #0
 8000fea:	f241 0181 	movw	r1, #4225	; 0x1081
 8000fee:	4897      	ldr	r0, [pc, #604]	; (800124c <MX_GPIO_Init+0x318>)
 8000ff0:	f002 ff08 	bl	8003e04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ffa:	4894      	ldr	r0, [pc, #592]	; (800124c <MX_GPIO_Init+0x318>)
 8000ffc:	f002 ff02 	bl	8003e04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8001000:	2200      	movs	r2, #0
 8001002:	f44f 7110 	mov.w	r1, #576	; 0x240
 8001006:	4892      	ldr	r0, [pc, #584]	; (8001250 <MX_GPIO_Init+0x31c>)
 8001008:	f002 fefc 	bl	8003e04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 800100c:	2201      	movs	r2, #1
 800100e:	2120      	movs	r1, #32
 8001010:	488d      	ldr	r0, [pc, #564]	; (8001248 <MX_GPIO_Init+0x314>)
 8001012:	f002 fef7 	bl	8003e04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8001016:	2201      	movs	r2, #1
 8001018:	2101      	movs	r1, #1
 800101a:	488a      	ldr	r0, [pc, #552]	; (8001244 <MX_GPIO_Init+0x310>)
 800101c:	f002 fef2 	bl	8003e04 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8001020:	f240 1315 	movw	r3, #277	; 0x115
 8001024:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001026:	2301      	movs	r3, #1
 8001028:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102a:	2300      	movs	r3, #0
 800102c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800102e:	2300      	movs	r3, #0
 8001030:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001032:	f107 0314 	add.w	r3, r7, #20
 8001036:	4619      	mov	r1, r3
 8001038:	4882      	ldr	r0, [pc, #520]	; (8001244 <MX_GPIO_Init+0x310>)
 800103a:	f002 fd39 	bl	8003ab0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 800103e:	236a      	movs	r3, #106	; 0x6a
 8001040:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001042:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001046:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001048:	2300      	movs	r3, #0
 800104a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800104c:	f107 0314 	add.w	r3, r7, #20
 8001050:	4619      	mov	r1, r3
 8001052:	487c      	ldr	r0, [pc, #496]	; (8001244 <MX_GPIO_Init+0x310>)
 8001054:	f002 fd2c 	bl	8003ab0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8001058:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800105c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800105e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001062:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001064:	2300      	movs	r3, #0
 8001066:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8001068:	f107 0314 	add.w	r3, r7, #20
 800106c:	4619      	mov	r1, r3
 800106e:	4878      	ldr	r0, [pc, #480]	; (8001250 <MX_GPIO_Init+0x31c>)
 8001070:	f002 fd1e 	bl	8003ab0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8001074:	233f      	movs	r3, #63	; 0x3f
 8001076:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001078:	230b      	movs	r3, #11
 800107a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107c:	2300      	movs	r3, #0
 800107e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001080:	f107 0314 	add.w	r3, r7, #20
 8001084:	4619      	mov	r1, r3
 8001086:	4872      	ldr	r0, [pc, #456]	; (8001250 <MX_GPIO_Init+0x31c>)
 8001088:	f002 fd12 	bl	8003ab0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 800108c:	f248 1304 	movw	r3, #33028	; 0x8104
 8001090:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001092:	2301      	movs	r3, #1
 8001094:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001096:	2300      	movs	r3, #0
 8001098:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800109a:	2300      	movs	r3, #0
 800109c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800109e:	f107 0314 	add.w	r3, r7, #20
 80010a2:	4619      	mov	r1, r3
 80010a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010a8:	f002 fd02 	bl	8003ab0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 80010ac:	2308      	movs	r3, #8
 80010ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b0:	2302      	movs	r3, #2
 80010b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b4:	2300      	movs	r3, #0
 80010b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b8:	2300      	movs	r3, #0
 80010ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80010bc:	2301      	movs	r3, #1
 80010be:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 80010c0:	f107 0314 	add.w	r3, r7, #20
 80010c4:	4619      	mov	r1, r3
 80010c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010ca:	f002 fcf1 	bl	8003ab0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 80010ce:	2310      	movs	r3, #16
 80010d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80010d2:	230b      	movs	r3, #11
 80010d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d6:	2300      	movs	r3, #0
 80010d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 80010da:	f107 0314 	add.w	r3, r7, #20
 80010de:	4619      	mov	r1, r3
 80010e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010e4:	f002 fce4 	bl	8003ab0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 80010e8:	23e0      	movs	r3, #224	; 0xe0
 80010ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ec:	2302      	movs	r3, #2
 80010ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f0:	2300      	movs	r3, #0
 80010f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010f4:	2303      	movs	r3, #3
 80010f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80010f8:	2305      	movs	r3, #5
 80010fa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010fc:	f107 0314 	add.w	r3, r7, #20
 8001100:	4619      	mov	r1, r3
 8001102:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001106:	f002 fcd3 	bl	8003ab0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 800110a:	2301      	movs	r3, #1
 800110c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800110e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001112:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001114:	2300      	movs	r3, #0
 8001116:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8001118:	f107 0314 	add.w	r3, r7, #20
 800111c:	4619      	mov	r1, r3
 800111e:	484a      	ldr	r0, [pc, #296]	; (8001248 <MX_GPIO_Init+0x314>)
 8001120:	f002 fcc6 	bl	8003ab0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8001124:	2302      	movs	r3, #2
 8001126:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001128:	230b      	movs	r3, #11
 800112a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112c:	2300      	movs	r3, #0
 800112e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8001130:	f107 0314 	add.w	r3, r7, #20
 8001134:	4619      	mov	r1, r3
 8001136:	4844      	ldr	r0, [pc, #272]	; (8001248 <MX_GPIO_Init+0x314>)
 8001138:	f002 fcba 	bl	8003ab0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 800113c:	f24f 0334 	movw	r3, #61492	; 0xf034
 8001140:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001142:	2301      	movs	r3, #1
 8001144:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001146:	2300      	movs	r3, #0
 8001148:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800114a:	2300      	movs	r3, #0
 800114c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800114e:	f107 0314 	add.w	r3, r7, #20
 8001152:	4619      	mov	r1, r3
 8001154:	483c      	ldr	r0, [pc, #240]	; (8001248 <MX_GPIO_Init+0x314>)
 8001156:	f002 fcab 	bl	8003ab0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 800115a:	f64c 4304 	movw	r3, #52228	; 0xcc04
 800115e:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001160:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001164:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001166:	2300      	movs	r3, #0
 8001168:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800116a:	f107 0314 	add.w	r3, r7, #20
 800116e:	4619      	mov	r1, r3
 8001170:	4836      	ldr	r0, [pc, #216]	; (800124c <MX_GPIO_Init+0x318>)
 8001172:	f002 fc9d 	bl	8003ab0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8001176:	f243 0381 	movw	r3, #12417	; 0x3081
 800117a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800117c:	2301      	movs	r3, #1
 800117e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001180:	2300      	movs	r3, #0
 8001182:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001184:	2300      	movs	r3, #0
 8001186:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001188:	f107 0314 	add.w	r3, r7, #20
 800118c:	4619      	mov	r1, r3
 800118e:	482f      	ldr	r0, [pc, #188]	; (800124c <MX_GPIO_Init+0x318>)
 8001190:	f002 fc8e 	bl	8003ab0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8001194:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001198:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800119a:	2301      	movs	r3, #1
 800119c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119e:	2300      	movs	r3, #0
 80011a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a2:	2300      	movs	r3, #0
 80011a4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011a6:	f107 0314 	add.w	r3, r7, #20
 80011aa:	4619      	mov	r1, r3
 80011ac:	4828      	ldr	r0, [pc, #160]	; (8001250 <MX_GPIO_Init+0x31c>)
 80011ae:	f002 fc7f 	bl	8003ab0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 80011b2:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80011b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011b8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80011bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011be:	2300      	movs	r3, #0
 80011c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011c2:	f107 0314 	add.w	r3, r7, #20
 80011c6:	4619      	mov	r1, r3
 80011c8:	4821      	ldr	r0, [pc, #132]	; (8001250 <MX_GPIO_Init+0x31c>)
 80011ca:	f002 fc71 	bl	8003ab0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 80011ce:	2302      	movs	r3, #2
 80011d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d2:	2302      	movs	r3, #2
 80011d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d6:	2300      	movs	r3, #0
 80011d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011da:	2303      	movs	r3, #3
 80011dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80011de:	2305      	movs	r3, #5
 80011e0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 80011e2:	f107 0314 	add.w	r3, r7, #20
 80011e6:	4619      	mov	r1, r3
 80011e8:	4818      	ldr	r0, [pc, #96]	; (800124c <MX_GPIO_Init+0x318>)
 80011ea:	f002 fc61 	bl	8003ab0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 80011ee:	2378      	movs	r3, #120	; 0x78
 80011f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f2:	2302      	movs	r3, #2
 80011f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f6:	2300      	movs	r3, #0
 80011f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011fa:	2303      	movs	r3, #3
 80011fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80011fe:	2307      	movs	r3, #7
 8001200:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001202:	f107 0314 	add.w	r3, r7, #20
 8001206:	4619      	mov	r1, r3
 8001208:	4810      	ldr	r0, [pc, #64]	; (800124c <MX_GPIO_Init+0x318>)
 800120a:	f002 fc51 	bl	8003ab0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 800120e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001212:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001214:	2312      	movs	r3, #18
 8001216:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001218:	2300      	movs	r3, #0
 800121a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800121c:	2303      	movs	r3, #3
 800121e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001220:	2304      	movs	r3, #4
 8001222:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001224:	f107 0314 	add.w	r3, r7, #20
 8001228:	4619      	mov	r1, r3
 800122a:	4807      	ldr	r0, [pc, #28]	; (8001248 <MX_GPIO_Init+0x314>)
 800122c:	f002 fc40 	bl	8003ab0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001230:	2200      	movs	r2, #0
 8001232:	2100      	movs	r1, #0
 8001234:	2017      	movs	r0, #23
 8001236:	f002 faf8 	bl	800382a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800123a:	2017      	movs	r0, #23
 800123c:	e00a      	b.n	8001254 <MX_GPIO_Init+0x320>
 800123e:	bf00      	nop
 8001240:	40021000 	.word	0x40021000
 8001244:	48001000 	.word	0x48001000
 8001248:	48000400 	.word	0x48000400
 800124c:	48000c00 	.word	0x48000c00
 8001250:	48000800 	.word	0x48000800
 8001254:	f002 fb05 	bl	8003862 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001258:	2200      	movs	r2, #0
 800125a:	2100      	movs	r1, #0
 800125c:	2028      	movs	r0, #40	; 0x28
 800125e:	f002 fae4 	bl	800382a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001262:	2028      	movs	r0, #40	; 0x28
 8001264:	f002 fafd 	bl	8003862 <HAL_NVIC_EnableIRQ>

}
 8001268:	bf00      	nop
 800126a:	3728      	adds	r7, #40	; 0x28
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}

08001270 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001274:	4b1b      	ldr	r3, [pc, #108]	; (80012e4 <MX_I2C2_Init+0x74>)
 8001276:	4a1c      	ldr	r2, [pc, #112]	; (80012e8 <MX_I2C2_Init+0x78>)
 8001278:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 800127a:	4b1a      	ldr	r3, [pc, #104]	; (80012e4 <MX_I2C2_Init+0x74>)
 800127c:	f640 6214 	movw	r2, #3604	; 0xe14
 8001280:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001282:	4b18      	ldr	r3, [pc, #96]	; (80012e4 <MX_I2C2_Init+0x74>)
 8001284:	2200      	movs	r2, #0
 8001286:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001288:	4b16      	ldr	r3, [pc, #88]	; (80012e4 <MX_I2C2_Init+0x74>)
 800128a:	2201      	movs	r2, #1
 800128c:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800128e:	4b15      	ldr	r3, [pc, #84]	; (80012e4 <MX_I2C2_Init+0x74>)
 8001290:	2200      	movs	r2, #0
 8001292:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001294:	4b13      	ldr	r3, [pc, #76]	; (80012e4 <MX_I2C2_Init+0x74>)
 8001296:	2200      	movs	r2, #0
 8001298:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800129a:	4b12      	ldr	r3, [pc, #72]	; (80012e4 <MX_I2C2_Init+0x74>)
 800129c:	2200      	movs	r2, #0
 800129e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012a0:	4b10      	ldr	r3, [pc, #64]	; (80012e4 <MX_I2C2_Init+0x74>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012a6:	4b0f      	ldr	r3, [pc, #60]	; (80012e4 <MX_I2C2_Init+0x74>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80012ac:	480d      	ldr	r0, [pc, #52]	; (80012e4 <MX_I2C2_Init+0x74>)
 80012ae:	f002 fde4 	bl	8003e7a <HAL_I2C_Init>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d001      	beq.n	80012bc <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80012b8:	f000 f91e 	bl	80014f8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80012bc:	2100      	movs	r1, #0
 80012be:	4809      	ldr	r0, [pc, #36]	; (80012e4 <MX_I2C2_Init+0x74>)
 80012c0:	f002 fe6a 	bl	8003f98 <HAL_I2CEx_ConfigAnalogFilter>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 80012ca:	f000 f915 	bl	80014f8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80012ce:	2100      	movs	r1, #0
 80012d0:	4804      	ldr	r0, [pc, #16]	; (80012e4 <MX_I2C2_Init+0x74>)
 80012d2:	f002 feac 	bl	800402e <HAL_I2CEx_ConfigDigitalFilter>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d001      	beq.n	80012e0 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 80012dc:	f000 f90c 	bl	80014f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80012e0:	bf00      	nop
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	20000088 	.word	0x20000088
 80012e8:	40005800 	.word	0x40005800

080012ec <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b0ac      	sub	sp, #176	; 0xb0
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80012f8:	2200      	movs	r2, #0
 80012fa:	601a      	str	r2, [r3, #0]
 80012fc:	605a      	str	r2, [r3, #4]
 80012fe:	609a      	str	r2, [r3, #8]
 8001300:	60da      	str	r2, [r3, #12]
 8001302:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001304:	f107 0314 	add.w	r3, r7, #20
 8001308:	2288      	movs	r2, #136	; 0x88
 800130a:	2100      	movs	r1, #0
 800130c:	4618      	mov	r0, r3
 800130e:	f005 fcad 	bl	8006c6c <memset>
  if(i2cHandle->Instance==I2C2)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4a21      	ldr	r2, [pc, #132]	; (800139c <HAL_I2C_MspInit+0xb0>)
 8001318:	4293      	cmp	r3, r2
 800131a:	d13b      	bne.n	8001394 <HAL_I2C_MspInit+0xa8>
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800131c:	2380      	movs	r3, #128	; 0x80
 800131e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001320:	2300      	movs	r3, #0
 8001322:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001324:	f107 0314 	add.w	r3, r7, #20
 8001328:	4618      	mov	r0, r3
 800132a:	f003 ff41 	bl	80051b0 <HAL_RCCEx_PeriphCLKConfig>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001334:	f000 f8e0 	bl	80014f8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001338:	4b19      	ldr	r3, [pc, #100]	; (80013a0 <HAL_I2C_MspInit+0xb4>)
 800133a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800133c:	4a18      	ldr	r2, [pc, #96]	; (80013a0 <HAL_I2C_MspInit+0xb4>)
 800133e:	f043 0302 	orr.w	r3, r3, #2
 8001342:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001344:	4b16      	ldr	r3, [pc, #88]	; (80013a0 <HAL_I2C_MspInit+0xb4>)
 8001346:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001348:	f003 0302 	and.w	r3, r3, #2
 800134c:	613b      	str	r3, [r7, #16]
 800134e:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8001350:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001354:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001358:	2312      	movs	r3, #18
 800135a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800135e:	2301      	movs	r3, #1
 8001360:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001364:	2303      	movs	r3, #3
 8001366:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800136a:	2304      	movs	r3, #4
 800136c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001370:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001374:	4619      	mov	r1, r3
 8001376:	480b      	ldr	r0, [pc, #44]	; (80013a4 <HAL_I2C_MspInit+0xb8>)
 8001378:	f002 fb9a 	bl	8003ab0 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800137c:	4b08      	ldr	r3, [pc, #32]	; (80013a0 <HAL_I2C_MspInit+0xb4>)
 800137e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001380:	4a07      	ldr	r2, [pc, #28]	; (80013a0 <HAL_I2C_MspInit+0xb4>)
 8001382:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001386:	6593      	str	r3, [r2, #88]	; 0x58
 8001388:	4b05      	ldr	r3, [pc, #20]	; (80013a0 <HAL_I2C_MspInit+0xb4>)
 800138a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800138c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001390:	60fb      	str	r3, [r7, #12]
 8001392:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001394:	bf00      	nop
 8001396:	37b0      	adds	r7, #176	; 0xb0
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	40005800 	.word	0x40005800
 80013a0:	40021000 	.word	0x40021000
 80013a4:	48000400 	.word	0x48000400

080013a8 <_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void _putchar(char c)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	4603      	mov	r3, r0
 80013b0:	71fb      	strb	r3, [r7, #7]
	while(HAL_OK != HAL_UART_Transmit(&huart1, (uint8_t *) &c, 1, 30000))
 80013b2:	bf00      	nop
 80013b4:	1df9      	adds	r1, r7, #7
 80013b6:	f247 5330 	movw	r3, #30000	; 0x7530
 80013ba:	2201      	movs	r2, #1
 80013bc:	480a      	ldr	r0, [pc, #40]	; (80013e8 <_putchar+0x40>)
 80013be:	f004 fcb4 	bl	8005d2a <HAL_UART_Transmit>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d1f5      	bne.n	80013b4 <_putchar+0xc>
	{}
	while(HAL_OK != HAL_UART_Transmit(&huart4, (uint8_t *) &c, 1, 30000))
 80013c8:	bf00      	nop
 80013ca:	1df9      	adds	r1, r7, #7
 80013cc:	f247 5330 	movw	r3, #30000	; 0x7530
 80013d0:	2201      	movs	r2, #1
 80013d2:	4806      	ldr	r0, [pc, #24]	; (80013ec <_putchar+0x44>)
 80013d4:	f004 fca9 	bl	8005d2a <HAL_UART_Transmit>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d1f5      	bne.n	80013ca <_putchar+0x22>
	{}
}
 80013de:	bf00      	nop
 80013e0:	bf00      	nop
 80013e2:	3708      	adds	r7, #8
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	20000200 	.word	0x20000200
 80013ec:	20000284 	.word	0x20000284

080013f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013f4:	f002 f8a5 	bl	8003542 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013f8:	f000 f81c 	bl	8001434 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013fc:	f7ff fd9a 	bl	8000f34 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 8001400:	f7ff fcfc 	bl	8000dfc <MX_DFSDM1_Init>
  MX_I2C2_Init();
 8001404:	f7ff ff34 	bl	8001270 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 8001408:	f001 fcba 	bl	8002d80 <MX_QUADSPI_Init>
  MX_SPI3_Init();
 800140c:	f001 fd22 	bl	8002e54 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8001410:	f001 fe5c 	bl	80030cc <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8001414:	f001 fe8a 	bl	800312c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001418:	f001 ffa0 	bl	800335c <MX_USB_OTG_FS_PCD_Init>
  MX_UART4_Init();
 800141c:	f001 fe26 	bl	800306c <MX_UART4_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  printf("test\r\n");
 8001420:	4803      	ldr	r0, [pc, #12]	; (8001430 <main+0x40>)
 8001422:	f001 fc91 	bl	8002d48 <printf_>
	  HAL_Delay(2000);
 8001426:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800142a:	f002 f8ff 	bl	800362c <HAL_Delay>
	  printf("test\r\n");
 800142e:	e7f7      	b.n	8001420 <main+0x30>
 8001430:	08006c98 	.word	0x08006c98

08001434 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b096      	sub	sp, #88	; 0x58
 8001438:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800143a:	f107 0314 	add.w	r3, r7, #20
 800143e:	2244      	movs	r2, #68	; 0x44
 8001440:	2100      	movs	r1, #0
 8001442:	4618      	mov	r0, r3
 8001444:	f005 fc12 	bl	8006c6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001448:	463b      	mov	r3, r7
 800144a:	2200      	movs	r2, #0
 800144c:	601a      	str	r2, [r3, #0]
 800144e:	605a      	str	r2, [r3, #4]
 8001450:	609a      	str	r2, [r3, #8]
 8001452:	60da      	str	r2, [r3, #12]
 8001454:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001456:	f44f 7000 	mov.w	r0, #512	; 0x200
 800145a:	f002 ff9b 	bl	8004394 <HAL_PWREx_ControlVoltageScaling>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d001      	beq.n	8001468 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001464:	f000 f848 	bl	80014f8 <Error_Handler>
  }
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001468:	f002 ff76 	bl	8004358 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800146c:	4b21      	ldr	r3, [pc, #132]	; (80014f4 <SystemClock_Config+0xc0>)
 800146e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001472:	4a20      	ldr	r2, [pc, #128]	; (80014f4 <SystemClock_Config+0xc0>)
 8001474:	f023 0318 	bic.w	r3, r3, #24
 8001478:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 800147c:	2314      	movs	r3, #20
 800147e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001480:	2301      	movs	r3, #1
 8001482:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001484:	2301      	movs	r3, #1
 8001486:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001488:	2300      	movs	r3, #0
 800148a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800148c:	2360      	movs	r3, #96	; 0x60
 800148e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001490:	2302      	movs	r3, #2
 8001492:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001494:	2301      	movs	r3, #1
 8001496:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001498:	2301      	movs	r3, #1
 800149a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 800149c:	2328      	movs	r3, #40	; 0x28
 800149e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80014a0:	2307      	movs	r3, #7
 80014a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80014a4:	2302      	movs	r3, #2
 80014a6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80014a8:	2302      	movs	r3, #2
 80014aa:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014ac:	f107 0314 	add.w	r3, r7, #20
 80014b0:	4618      	mov	r0, r3
 80014b2:	f003 f891 	bl	80045d8 <HAL_RCC_OscConfig>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d001      	beq.n	80014c0 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80014bc:	f000 f81c 	bl	80014f8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014c0:	230f      	movs	r3, #15
 80014c2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014c4:	2303      	movs	r3, #3
 80014c6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014c8:	2300      	movs	r3, #0
 80014ca:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80014cc:	2300      	movs	r3, #0
 80014ce:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014d0:	2300      	movs	r3, #0
 80014d2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80014d4:	463b      	mov	r3, r7
 80014d6:	2104      	movs	r1, #4
 80014d8:	4618      	mov	r0, r3
 80014da:	f003 fc63 	bl	8004da4 <HAL_RCC_ClockConfig>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80014e4:	f000 f808 	bl	80014f8 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80014e8:	f004 f94c 	bl	8005784 <HAL_RCCEx_EnableMSIPLLMode>
}
 80014ec:	bf00      	nop
 80014ee:	3758      	adds	r7, #88	; 0x58
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	40021000 	.word	0x40021000

080014f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014fc:	b672      	cpsid	i
}
 80014fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001500:	e7fe      	b.n	8001500 <Error_Handler+0x8>

08001502 <_out_null>:
}


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
 8001502:	b480      	push	{r7}
 8001504:	b085      	sub	sp, #20
 8001506:	af00      	add	r7, sp, #0
 8001508:	60b9      	str	r1, [r7, #8]
 800150a:	607a      	str	r2, [r7, #4]
 800150c:	603b      	str	r3, [r7, #0]
 800150e:	4603      	mov	r3, r0
 8001510:	73fb      	strb	r3, [r7, #15]
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
 8001512:	bf00      	nop
 8001514:	3714      	adds	r7, #20
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr

0800151e <_out_char>:


// internal _putchar wrapper
static inline void _out_char(char character, void* buffer, size_t idx, size_t maxlen)
{
 800151e:	b580      	push	{r7, lr}
 8001520:	b084      	sub	sp, #16
 8001522:	af00      	add	r7, sp, #0
 8001524:	60b9      	str	r1, [r7, #8]
 8001526:	607a      	str	r2, [r7, #4]
 8001528:	603b      	str	r3, [r7, #0]
 800152a:	4603      	mov	r3, r0
 800152c:	73fb      	strb	r3, [r7, #15]
  (void)buffer; (void)idx; (void)maxlen;
  if (character) {
 800152e:	7bfb      	ldrb	r3, [r7, #15]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d003      	beq.n	800153c <_out_char+0x1e>
    _putchar(character);
 8001534:	7bfb      	ldrb	r3, [r7, #15]
 8001536:	4618      	mov	r0, r3
 8001538:	f7ff ff36 	bl	80013a8 <_putchar>
  }
}
 800153c:	bf00      	nop
 800153e:	3710      	adds	r7, #16
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}

08001544 <_strnlen_s>:


// internal secure strlen
// \return The length of the string (excluding the terminating 0) limited by 'maxsize'
static inline unsigned int _strnlen_s(const char* str, size_t maxsize)
{
 8001544:	b480      	push	{r7}
 8001546:	b085      	sub	sp, #20
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
 800154c:	6039      	str	r1, [r7, #0]
  const char* s;
  for (s = str; *s && maxsize--; ++s);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	60fb      	str	r3, [r7, #12]
 8001552:	e002      	b.n	800155a <_strnlen_s+0x16>
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	3301      	adds	r3, #1
 8001558:	60fb      	str	r3, [r7, #12]
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	781b      	ldrb	r3, [r3, #0]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d004      	beq.n	800156c <_strnlen_s+0x28>
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	1e5a      	subs	r2, r3, #1
 8001566:	603a      	str	r2, [r7, #0]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d1f3      	bne.n	8001554 <_strnlen_s+0x10>
  return (unsigned int)(s - str);
 800156c:	68fa      	ldr	r2, [r7, #12]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	1ad3      	subs	r3, r2, r3
}
 8001572:	4618      	mov	r0, r3
 8001574:	3714      	adds	r7, #20
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr

0800157e <_is_digit>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
 800157e:	b480      	push	{r7}
 8001580:	b083      	sub	sp, #12
 8001582:	af00      	add	r7, sp, #0
 8001584:	4603      	mov	r3, r0
 8001586:	71fb      	strb	r3, [r7, #7]
  return (ch >= '0') && (ch <= '9');
 8001588:	79fb      	ldrb	r3, [r7, #7]
 800158a:	2b2f      	cmp	r3, #47	; 0x2f
 800158c:	d904      	bls.n	8001598 <_is_digit+0x1a>
 800158e:	79fb      	ldrb	r3, [r7, #7]
 8001590:	2b39      	cmp	r3, #57	; 0x39
 8001592:	d801      	bhi.n	8001598 <_is_digit+0x1a>
 8001594:	2301      	movs	r3, #1
 8001596:	e000      	b.n	800159a <_is_digit+0x1c>
 8001598:	2300      	movs	r3, #0
 800159a:	f003 0301 	and.w	r3, r3, #1
 800159e:	b2db      	uxtb	r3, r3
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	370c      	adds	r7, #12
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr

080015ac <_atoi>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b084      	sub	sp, #16
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  unsigned int i = 0U;
 80015b4:	2300      	movs	r3, #0
 80015b6:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 80015b8:	e00e      	b.n	80015d8 <_atoi+0x2c>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 80015ba:	68fa      	ldr	r2, [r7, #12]
 80015bc:	4613      	mov	r3, r2
 80015be:	009b      	lsls	r3, r3, #2
 80015c0:	4413      	add	r3, r2
 80015c2:	005b      	lsls	r3, r3, #1
 80015c4:	4618      	mov	r0, r3
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	1c59      	adds	r1, r3, #1
 80015cc:	687a      	ldr	r2, [r7, #4]
 80015ce:	6011      	str	r1, [r2, #0]
 80015d0:	781b      	ldrb	r3, [r3, #0]
 80015d2:	4403      	add	r3, r0
 80015d4:	3b30      	subs	r3, #48	; 0x30
 80015d6:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	781b      	ldrb	r3, [r3, #0]
 80015de:	4618      	mov	r0, r3
 80015e0:	f7ff ffcd 	bl	800157e <_is_digit>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d1e7      	bne.n	80015ba <_atoi+0xe>
  }
  return i;
 80015ea:	68fb      	ldr	r3, [r7, #12]
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	3710      	adds	r7, #16
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}

080015f4 <_out_rev>:


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
 80015f4:	b590      	push	{r4, r7, lr}
 80015f6:	b087      	sub	sp, #28
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	60f8      	str	r0, [r7, #12]
 80015fc:	60b9      	str	r1, [r7, #8]
 80015fe:	607a      	str	r2, [r7, #4]
 8001600:	603b      	str	r3, [r7, #0]
  const size_t start_idx = idx;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	613b      	str	r3, [r7, #16]

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 8001606:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001608:	f003 0302 	and.w	r3, r3, #2
 800160c:	2b00      	cmp	r3, #0
 800160e:	d125      	bne.n	800165c <_out_rev+0x68>
 8001610:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001612:	f003 0301 	and.w	r3, r3, #1
 8001616:	2b00      	cmp	r3, #0
 8001618:	d120      	bne.n	800165c <_out_rev+0x68>
    for (size_t i = len; i < width; i++) {
 800161a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800161c:	617b      	str	r3, [r7, #20]
 800161e:	e00a      	b.n	8001636 <_out_rev+0x42>
      out(' ', buffer, idx++, maxlen);
 8001620:	687a      	ldr	r2, [r7, #4]
 8001622:	1c53      	adds	r3, r2, #1
 8001624:	607b      	str	r3, [r7, #4]
 8001626:	68fc      	ldr	r4, [r7, #12]
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	68b9      	ldr	r1, [r7, #8]
 800162c:	2020      	movs	r0, #32
 800162e:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	3301      	adds	r3, #1
 8001634:	617b      	str	r3, [r7, #20]
 8001636:	697a      	ldr	r2, [r7, #20]
 8001638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800163a:	429a      	cmp	r2, r3
 800163c:	d3f0      	bcc.n	8001620 <_out_rev+0x2c>
    }
  }

  // reverse string
  while (len) {
 800163e:	e00d      	b.n	800165c <_out_rev+0x68>
    out(buf[--len], buffer, idx++, maxlen);
 8001640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001642:	3b01      	subs	r3, #1
 8001644:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001646:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800164a:	4413      	add	r3, r2
 800164c:	7818      	ldrb	r0, [r3, #0]
 800164e:	687a      	ldr	r2, [r7, #4]
 8001650:	1c53      	adds	r3, r2, #1
 8001652:	607b      	str	r3, [r7, #4]
 8001654:	68fc      	ldr	r4, [r7, #12]
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	68b9      	ldr	r1, [r7, #8]
 800165a:	47a0      	blx	r4
  while (len) {
 800165c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800165e:	2b00      	cmp	r3, #0
 8001660:	d1ee      	bne.n	8001640 <_out_rev+0x4c>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
 8001662:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001664:	f003 0302 	and.w	r3, r3, #2
 8001668:	2b00      	cmp	r3, #0
 800166a:	d00e      	beq.n	800168a <_out_rev+0x96>
    while (idx - start_idx < width) {
 800166c:	e007      	b.n	800167e <_out_rev+0x8a>
      out(' ', buffer, idx++, maxlen);
 800166e:	687a      	ldr	r2, [r7, #4]
 8001670:	1c53      	adds	r3, r2, #1
 8001672:	607b      	str	r3, [r7, #4]
 8001674:	68fc      	ldr	r4, [r7, #12]
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	68b9      	ldr	r1, [r7, #8]
 800167a:	2020      	movs	r0, #32
 800167c:	47a0      	blx	r4
    while (idx - start_idx < width) {
 800167e:	687a      	ldr	r2, [r7, #4]
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	1ad3      	subs	r3, r2, r3
 8001684:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001686:	429a      	cmp	r2, r3
 8001688:	d8f1      	bhi.n	800166e <_out_rev+0x7a>
    }
  }

  return idx;
 800168a:	687b      	ldr	r3, [r7, #4]
}
 800168c:	4618      	mov	r0, r3
 800168e:	371c      	adds	r7, #28
 8001690:	46bd      	mov	sp, r7
 8001692:	bd90      	pop	{r4, r7, pc}

08001694 <_ntoa_format>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b088      	sub	sp, #32
 8001698:	af04      	add	r7, sp, #16
 800169a:	60f8      	str	r0, [r7, #12]
 800169c:	60b9      	str	r1, [r7, #8]
 800169e:	607a      	str	r2, [r7, #4]
 80016a0:	603b      	str	r3, [r7, #0]
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
 80016a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016a4:	f003 0302 	and.w	r3, r3, #2
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d136      	bne.n	800171a <_ntoa_format+0x86>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 80016ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d018      	beq.n	80016e4 <_ntoa_format+0x50>
 80016b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016b4:	f003 0301 	and.w	r3, r3, #1
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d013      	beq.n	80016e4 <_ntoa_format+0x50>
 80016bc:	f897 3020 	ldrb.w	r3, [r7, #32]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d104      	bne.n	80016ce <_ntoa_format+0x3a>
 80016c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016c6:	f003 030c 	and.w	r3, r3, #12
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d00a      	beq.n	80016e4 <_ntoa_format+0x50>
      width--;
 80016ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016d0:	3b01      	subs	r3, #1
 80016d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80016d4:	e006      	b.n	80016e4 <_ntoa_format+0x50>
      buf[len++] = '0';
 80016d6:	69fb      	ldr	r3, [r7, #28]
 80016d8:	1c5a      	adds	r2, r3, #1
 80016da:	61fa      	str	r2, [r7, #28]
 80016dc:	69ba      	ldr	r2, [r7, #24]
 80016de:	4413      	add	r3, r2
 80016e0:	2230      	movs	r2, #48	; 0x30
 80016e2:	701a      	strb	r2, [r3, #0]
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80016e4:	69fa      	ldr	r2, [r7, #28]
 80016e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016e8:	429a      	cmp	r2, r3
 80016ea:	d20a      	bcs.n	8001702 <_ntoa_format+0x6e>
 80016ec:	69fb      	ldr	r3, [r7, #28]
 80016ee:	2b1f      	cmp	r3, #31
 80016f0:	d9f1      	bls.n	80016d6 <_ntoa_format+0x42>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80016f2:	e006      	b.n	8001702 <_ntoa_format+0x6e>
      buf[len++] = '0';
 80016f4:	69fb      	ldr	r3, [r7, #28]
 80016f6:	1c5a      	adds	r2, r3, #1
 80016f8:	61fa      	str	r2, [r7, #28]
 80016fa:	69ba      	ldr	r2, [r7, #24]
 80016fc:	4413      	add	r3, r2
 80016fe:	2230      	movs	r2, #48	; 0x30
 8001700:	701a      	strb	r2, [r3, #0]
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8001702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001704:	f003 0301 	and.w	r3, r3, #1
 8001708:	2b00      	cmp	r3, #0
 800170a:	d006      	beq.n	800171a <_ntoa_format+0x86>
 800170c:	69fa      	ldr	r2, [r7, #28]
 800170e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001710:	429a      	cmp	r2, r3
 8001712:	d202      	bcs.n	800171a <_ntoa_format+0x86>
 8001714:	69fb      	ldr	r3, [r7, #28]
 8001716:	2b1f      	cmp	r3, #31
 8001718:	d9ec      	bls.n	80016f4 <_ntoa_format+0x60>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
 800171a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800171c:	f003 0310 	and.w	r3, r3, #16
 8001720:	2b00      	cmp	r3, #0
 8001722:	d058      	beq.n	80017d6 <_ntoa_format+0x142>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 8001724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001726:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800172a:	2b00      	cmp	r3, #0
 800172c:	d116      	bne.n	800175c <_ntoa_format+0xc8>
 800172e:	69fb      	ldr	r3, [r7, #28]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d013      	beq.n	800175c <_ntoa_format+0xc8>
 8001734:	69fa      	ldr	r2, [r7, #28]
 8001736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001738:	429a      	cmp	r2, r3
 800173a:	d003      	beq.n	8001744 <_ntoa_format+0xb0>
 800173c:	69fa      	ldr	r2, [r7, #28]
 800173e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001740:	429a      	cmp	r2, r3
 8001742:	d10b      	bne.n	800175c <_ntoa_format+0xc8>
      len--;
 8001744:	69fb      	ldr	r3, [r7, #28]
 8001746:	3b01      	subs	r3, #1
 8001748:	61fb      	str	r3, [r7, #28]
      if (len && (base == 16U)) {
 800174a:	69fb      	ldr	r3, [r7, #28]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d005      	beq.n	800175c <_ntoa_format+0xc8>
 8001750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001752:	2b10      	cmp	r3, #16
 8001754:	d102      	bne.n	800175c <_ntoa_format+0xc8>
        len--;
 8001756:	69fb      	ldr	r3, [r7, #28]
 8001758:	3b01      	subs	r3, #1
 800175a:	61fb      	str	r3, [r7, #28]
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800175c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800175e:	2b10      	cmp	r3, #16
 8001760:	d10f      	bne.n	8001782 <_ntoa_format+0xee>
 8001762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001764:	f003 0320 	and.w	r3, r3, #32
 8001768:	2b00      	cmp	r3, #0
 800176a:	d10a      	bne.n	8001782 <_ntoa_format+0xee>
 800176c:	69fb      	ldr	r3, [r7, #28]
 800176e:	2b1f      	cmp	r3, #31
 8001770:	d807      	bhi.n	8001782 <_ntoa_format+0xee>
      buf[len++] = 'x';
 8001772:	69fb      	ldr	r3, [r7, #28]
 8001774:	1c5a      	adds	r2, r3, #1
 8001776:	61fa      	str	r2, [r7, #28]
 8001778:	69ba      	ldr	r2, [r7, #24]
 800177a:	4413      	add	r3, r2
 800177c:	2278      	movs	r2, #120	; 0x78
 800177e:	701a      	strb	r2, [r3, #0]
 8001780:	e01f      	b.n	80017c2 <_ntoa_format+0x12e>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8001782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001784:	2b10      	cmp	r3, #16
 8001786:	d10f      	bne.n	80017a8 <_ntoa_format+0x114>
 8001788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800178a:	f003 0320 	and.w	r3, r3, #32
 800178e:	2b00      	cmp	r3, #0
 8001790:	d00a      	beq.n	80017a8 <_ntoa_format+0x114>
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	2b1f      	cmp	r3, #31
 8001796:	d807      	bhi.n	80017a8 <_ntoa_format+0x114>
      buf[len++] = 'X';
 8001798:	69fb      	ldr	r3, [r7, #28]
 800179a:	1c5a      	adds	r2, r3, #1
 800179c:	61fa      	str	r2, [r7, #28]
 800179e:	69ba      	ldr	r2, [r7, #24]
 80017a0:	4413      	add	r3, r2
 80017a2:	2258      	movs	r2, #88	; 0x58
 80017a4:	701a      	strb	r2, [r3, #0]
 80017a6:	e00c      	b.n	80017c2 <_ntoa_format+0x12e>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80017a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017aa:	2b02      	cmp	r3, #2
 80017ac:	d109      	bne.n	80017c2 <_ntoa_format+0x12e>
 80017ae:	69fb      	ldr	r3, [r7, #28]
 80017b0:	2b1f      	cmp	r3, #31
 80017b2:	d806      	bhi.n	80017c2 <_ntoa_format+0x12e>
      buf[len++] = 'b';
 80017b4:	69fb      	ldr	r3, [r7, #28]
 80017b6:	1c5a      	adds	r2, r3, #1
 80017b8:	61fa      	str	r2, [r7, #28]
 80017ba:	69ba      	ldr	r2, [r7, #24]
 80017bc:	4413      	add	r3, r2
 80017be:	2262      	movs	r2, #98	; 0x62
 80017c0:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
 80017c2:	69fb      	ldr	r3, [r7, #28]
 80017c4:	2b1f      	cmp	r3, #31
 80017c6:	d806      	bhi.n	80017d6 <_ntoa_format+0x142>
      buf[len++] = '0';
 80017c8:	69fb      	ldr	r3, [r7, #28]
 80017ca:	1c5a      	adds	r2, r3, #1
 80017cc:	61fa      	str	r2, [r7, #28]
 80017ce:	69ba      	ldr	r2, [r7, #24]
 80017d0:	4413      	add	r3, r2
 80017d2:	2230      	movs	r2, #48	; 0x30
 80017d4:	701a      	strb	r2, [r3, #0]
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
 80017d6:	69fb      	ldr	r3, [r7, #28]
 80017d8:	2b1f      	cmp	r3, #31
 80017da:	d824      	bhi.n	8001826 <_ntoa_format+0x192>
    if (negative) {
 80017dc:	f897 3020 	ldrb.w	r3, [r7, #32]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d007      	beq.n	80017f4 <_ntoa_format+0x160>
      buf[len++] = '-';
 80017e4:	69fb      	ldr	r3, [r7, #28]
 80017e6:	1c5a      	adds	r2, r3, #1
 80017e8:	61fa      	str	r2, [r7, #28]
 80017ea:	69ba      	ldr	r2, [r7, #24]
 80017ec:	4413      	add	r3, r2
 80017ee:	222d      	movs	r2, #45	; 0x2d
 80017f0:	701a      	strb	r2, [r3, #0]
 80017f2:	e018      	b.n	8001826 <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_PLUS) {
 80017f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017f6:	f003 0304 	and.w	r3, r3, #4
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d007      	beq.n	800180e <_ntoa_format+0x17a>
      buf[len++] = '+';  // ignore the space if the '+' exists
 80017fe:	69fb      	ldr	r3, [r7, #28]
 8001800:	1c5a      	adds	r2, r3, #1
 8001802:	61fa      	str	r2, [r7, #28]
 8001804:	69ba      	ldr	r2, [r7, #24]
 8001806:	4413      	add	r3, r2
 8001808:	222b      	movs	r2, #43	; 0x2b
 800180a:	701a      	strb	r2, [r3, #0]
 800180c:	e00b      	b.n	8001826 <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_SPACE) {
 800180e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001810:	f003 0308 	and.w	r3, r3, #8
 8001814:	2b00      	cmp	r3, #0
 8001816:	d006      	beq.n	8001826 <_ntoa_format+0x192>
      buf[len++] = ' ';
 8001818:	69fb      	ldr	r3, [r7, #28]
 800181a:	1c5a      	adds	r2, r3, #1
 800181c:	61fa      	str	r2, [r7, #28]
 800181e:	69ba      	ldr	r2, [r7, #24]
 8001820:	4413      	add	r3, r2
 8001822:	2220      	movs	r2, #32
 8001824:	701a      	strb	r2, [r3, #0]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 8001826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001828:	9303      	str	r3, [sp, #12]
 800182a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800182c:	9302      	str	r3, [sp, #8]
 800182e:	69fb      	ldr	r3, [r7, #28]
 8001830:	9301      	str	r3, [sp, #4]
 8001832:	69bb      	ldr	r3, [r7, #24]
 8001834:	9300      	str	r3, [sp, #0]
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	687a      	ldr	r2, [r7, #4]
 800183a:	68b9      	ldr	r1, [r7, #8]
 800183c:	68f8      	ldr	r0, [r7, #12]
 800183e:	f7ff fed9 	bl	80015f4 <_out_rev>
 8001842:	4603      	mov	r3, r0
}
 8001844:	4618      	mov	r0, r3
 8001846:	3710      	adds	r7, #16
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}

0800184c <_ntoa_long>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b096      	sub	sp, #88	; 0x58
 8001850:	af08      	add	r7, sp, #32
 8001852:	60f8      	str	r0, [r7, #12]
 8001854:	60b9      	str	r1, [r7, #8]
 8001856:	607a      	str	r2, [r7, #4]
 8001858:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 800185a:	2300      	movs	r3, #0
 800185c:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 800185e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001860:	2b00      	cmp	r3, #0
 8001862:	d103      	bne.n	800186c <_ntoa_long+0x20>
    flags &= ~FLAGS_HASH;
 8001864:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001866:	f023 0310 	bic.w	r3, r3, #16
 800186a:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 800186c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800186e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001872:	2b00      	cmp	r3, #0
 8001874:	d002      	beq.n	800187c <_ntoa_long+0x30>
 8001876:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001878:	2b00      	cmp	r3, #0
 800187a:	d033      	beq.n	80018e4 <_ntoa_long+0x98>
    do {
      const char digit = (char)(value % base);
 800187c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800187e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001880:	fbb3 f2f2 	udiv	r2, r3, r2
 8001884:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001886:	fb01 f202 	mul.w	r2, r1, r2
 800188a:	1a9b      	subs	r3, r3, r2
 800188c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8001890:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001894:	2b09      	cmp	r3, #9
 8001896:	d804      	bhi.n	80018a2 <_ntoa_long+0x56>
 8001898:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800189c:	3330      	adds	r3, #48	; 0x30
 800189e:	b2da      	uxtb	r2, r3
 80018a0:	e00d      	b.n	80018be <_ntoa_long+0x72>
 80018a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018a4:	f003 0320 	and.w	r3, r3, #32
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d001      	beq.n	80018b0 <_ntoa_long+0x64>
 80018ac:	2241      	movs	r2, #65	; 0x41
 80018ae:	e000      	b.n	80018b2 <_ntoa_long+0x66>
 80018b0:	2261      	movs	r2, #97	; 0x61
 80018b2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80018b6:	4413      	add	r3, r2
 80018b8:	b2db      	uxtb	r3, r3
 80018ba:	3b0a      	subs	r3, #10
 80018bc:	b2da      	uxtb	r2, r3
 80018be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018c0:	1c59      	adds	r1, r3, #1
 80018c2:	6379      	str	r1, [r7, #52]	; 0x34
 80018c4:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80018c8:	440b      	add	r3, r1
 80018ca:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 80018ce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80018d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80018d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80018d6:	643b      	str	r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 80018d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d002      	beq.n	80018e4 <_ntoa_long+0x98>
 80018de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018e0:	2b1f      	cmp	r3, #31
 80018e2:	d9cb      	bls.n	800187c <_ntoa_long+0x30>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 80018e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018e6:	9306      	str	r3, [sp, #24]
 80018e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80018ea:	9305      	str	r3, [sp, #20]
 80018ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80018ee:	9304      	str	r3, [sp, #16]
 80018f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80018f2:	9303      	str	r3, [sp, #12]
 80018f4:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80018f8:	9302      	str	r3, [sp, #8]
 80018fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018fc:	9301      	str	r3, [sp, #4]
 80018fe:	f107 0310 	add.w	r3, r7, #16
 8001902:	9300      	str	r3, [sp, #0]
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	687a      	ldr	r2, [r7, #4]
 8001908:	68b9      	ldr	r1, [r7, #8]
 800190a:	68f8      	ldr	r0, [r7, #12]
 800190c:	f7ff fec2 	bl	8001694 <_ntoa_format>
 8001910:	4603      	mov	r3, r0
}
 8001912:	4618      	mov	r0, r3
 8001914:	3738      	adds	r7, #56	; 0x38
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}

0800191a <_ntoa_long_long>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 800191a:	b580      	push	{r7, lr}
 800191c:	b096      	sub	sp, #88	; 0x58
 800191e:	af08      	add	r7, sp, #32
 8001920:	60f8      	str	r0, [r7, #12]
 8001922:	60b9      	str	r1, [r7, #8]
 8001924:	607a      	str	r2, [r7, #4]
 8001926:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 8001928:	2300      	movs	r3, #0
 800192a:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 800192c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001930:	4313      	orrs	r3, r2
 8001932:	d103      	bne.n	800193c <_ntoa_long_long+0x22>
    flags &= ~FLAGS_HASH;
 8001934:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001936:	f023 0310 	bic.w	r3, r3, #16
 800193a:	663b      	str	r3, [r7, #96]	; 0x60
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 800193c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800193e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001942:	2b00      	cmp	r3, #0
 8001944:	d003      	beq.n	800194e <_ntoa_long_long+0x34>
 8001946:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800194a:	4313      	orrs	r3, r2
 800194c:	d038      	beq.n	80019c0 <_ntoa_long_long+0xa6>
    do {
      const char digit = (char)(value % base);
 800194e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8001952:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001956:	f7ff f8d5 	bl	8000b04 <__aeabi_uldivmod>
 800195a:	4613      	mov	r3, r2
 800195c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8001960:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001964:	2b09      	cmp	r3, #9
 8001966:	d804      	bhi.n	8001972 <_ntoa_long_long+0x58>
 8001968:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800196c:	3330      	adds	r3, #48	; 0x30
 800196e:	b2da      	uxtb	r2, r3
 8001970:	e00d      	b.n	800198e <_ntoa_long_long+0x74>
 8001972:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001974:	f003 0320 	and.w	r3, r3, #32
 8001978:	2b00      	cmp	r3, #0
 800197a:	d001      	beq.n	8001980 <_ntoa_long_long+0x66>
 800197c:	2241      	movs	r2, #65	; 0x41
 800197e:	e000      	b.n	8001982 <_ntoa_long_long+0x68>
 8001980:	2261      	movs	r2, #97	; 0x61
 8001982:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001986:	4413      	add	r3, r2
 8001988:	b2db      	uxtb	r3, r3
 800198a:	3b0a      	subs	r3, #10
 800198c:	b2da      	uxtb	r2, r3
 800198e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001990:	1c59      	adds	r1, r3, #1
 8001992:	6379      	str	r1, [r7, #52]	; 0x34
 8001994:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8001998:	440b      	add	r3, r1
 800199a:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 800199e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80019a2:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80019a6:	f7ff f8ad 	bl	8000b04 <__aeabi_uldivmod>
 80019aa:	4602      	mov	r2, r0
 80019ac:	460b      	mov	r3, r1
 80019ae:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 80019b2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80019b6:	4313      	orrs	r3, r2
 80019b8:	d002      	beq.n	80019c0 <_ntoa_long_long+0xa6>
 80019ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019bc:	2b1f      	cmp	r3, #31
 80019be:	d9c6      	bls.n	800194e <_ntoa_long_long+0x34>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 80019c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80019c2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80019c4:	9206      	str	r2, [sp, #24]
 80019c6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80019c8:	9205      	str	r2, [sp, #20]
 80019ca:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80019cc:	9204      	str	r2, [sp, #16]
 80019ce:	9303      	str	r3, [sp, #12]
 80019d0:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80019d4:	9302      	str	r3, [sp, #8]
 80019d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019d8:	9301      	str	r3, [sp, #4]
 80019da:	f107 0310 	add.w	r3, r7, #16
 80019de:	9300      	str	r3, [sp, #0]
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	687a      	ldr	r2, [r7, #4]
 80019e4:	68b9      	ldr	r1, [r7, #8]
 80019e6:	68f8      	ldr	r0, [r7, #12]
 80019e8:	f7ff fe54 	bl	8001694 <_ntoa_format>
 80019ec:	4603      	mov	r3, r0
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3738      	adds	r7, #56	; 0x38
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
	...

080019f8 <_ftoa>:
#endif


// internal ftoa for fixed decimal floating point
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 80019f8:	b590      	push	{r4, r7, lr}
 80019fa:	b09d      	sub	sp, #116	; 0x74
 80019fc:	af04      	add	r7, sp, #16
 80019fe:	6178      	str	r0, [r7, #20]
 8001a00:	6139      	str	r1, [r7, #16]
 8001a02:	60fa      	str	r2, [r7, #12]
 8001a04:	60bb      	str	r3, [r7, #8]
 8001a06:	ed87 0b00 	vstr	d0, [r7]
  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	65fb      	str	r3, [r7, #92]	; 0x5c
  double diff = 0.0;
 8001a0e:	f04f 0200 	mov.w	r2, #0
 8001a12:	f04f 0300 	mov.w	r3, #0
 8001a16:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

  // powers of 10
  static const double pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for special values
  if (value != value)
 8001a1a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001a1e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001a22:	f7fe fff5 	bl	8000a10 <__aeabi_dcmpeq>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d10f      	bne.n	8001a4c <_ftoa+0x54>
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 8001a2c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001a2e:	9303      	str	r3, [sp, #12]
 8001a30:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001a32:	9302      	str	r3, [sp, #8]
 8001a34:	2303      	movs	r3, #3
 8001a36:	9301      	str	r3, [sp, #4]
 8001a38:	4ba9      	ldr	r3, [pc, #676]	; (8001ce0 <_ftoa+0x2e8>)
 8001a3a:	9300      	str	r3, [sp, #0]
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	68fa      	ldr	r2, [r7, #12]
 8001a40:	6939      	ldr	r1, [r7, #16]
 8001a42:	6978      	ldr	r0, [r7, #20]
 8001a44:	f7ff fdd6 	bl	80015f4 <_out_rev>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	e22b      	b.n	8001ea4 <_ftoa+0x4ac>
  if (value < -DBL_MAX)
 8001a4c:	f04f 32ff 	mov.w	r2, #4294967295
 8001a50:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 8001a54:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001a58:	f7fe ffe4 	bl	8000a24 <__aeabi_dcmplt>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d00f      	beq.n	8001a82 <_ftoa+0x8a>
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 8001a62:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001a64:	9303      	str	r3, [sp, #12]
 8001a66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001a68:	9302      	str	r3, [sp, #8]
 8001a6a:	2304      	movs	r3, #4
 8001a6c:	9301      	str	r3, [sp, #4]
 8001a6e:	4b9d      	ldr	r3, [pc, #628]	; (8001ce4 <_ftoa+0x2ec>)
 8001a70:	9300      	str	r3, [sp, #0]
 8001a72:	68bb      	ldr	r3, [r7, #8]
 8001a74:	68fa      	ldr	r2, [r7, #12]
 8001a76:	6939      	ldr	r1, [r7, #16]
 8001a78:	6978      	ldr	r0, [r7, #20]
 8001a7a:	f7ff fdbb 	bl	80015f4 <_out_rev>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	e210      	b.n	8001ea4 <_ftoa+0x4ac>
  if (value > DBL_MAX)
 8001a82:	f04f 32ff 	mov.w	r2, #4294967295
 8001a86:	4b98      	ldr	r3, [pc, #608]	; (8001ce8 <_ftoa+0x2f0>)
 8001a88:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001a8c:	f7fe ffe8 	bl	8000a60 <__aeabi_dcmpgt>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d01d      	beq.n	8001ad2 <_ftoa+0xda>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 8001a96:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001a98:	f003 0304 	and.w	r3, r3, #4
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d001      	beq.n	8001aa4 <_ftoa+0xac>
 8001aa0:	4b92      	ldr	r3, [pc, #584]	; (8001cec <_ftoa+0x2f4>)
 8001aa2:	e000      	b.n	8001aa6 <_ftoa+0xae>
 8001aa4:	4b92      	ldr	r3, [pc, #584]	; (8001cf0 <_ftoa+0x2f8>)
 8001aa6:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001aa8:	f002 0204 	and.w	r2, r2, #4
 8001aac:	2a00      	cmp	r2, #0
 8001aae:	d001      	beq.n	8001ab4 <_ftoa+0xbc>
 8001ab0:	2204      	movs	r2, #4
 8001ab2:	e000      	b.n	8001ab6 <_ftoa+0xbe>
 8001ab4:	2203      	movs	r2, #3
 8001ab6:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8001ab8:	9103      	str	r1, [sp, #12]
 8001aba:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8001abc:	9102      	str	r1, [sp, #8]
 8001abe:	9201      	str	r2, [sp, #4]
 8001ac0:	9300      	str	r3, [sp, #0]
 8001ac2:	68bb      	ldr	r3, [r7, #8]
 8001ac4:	68fa      	ldr	r2, [r7, #12]
 8001ac6:	6939      	ldr	r1, [r7, #16]
 8001ac8:	6978      	ldr	r0, [r7, #20]
 8001aca:	f7ff fd93 	bl	80015f4 <_out_rev>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	e1e8      	b.n	8001ea4 <_ftoa+0x4ac>

  // test for very large values
  // standard printf behavior is to print EVERY whole number digit -- which could be 100s of characters overflowing your buffers == bad
  if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
 8001ad2:	a37f      	add	r3, pc, #508	; (adr r3, 8001cd0 <_ftoa+0x2d8>)
 8001ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ad8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001adc:	f7fe ffc0 	bl	8000a60 <__aeabi_dcmpgt>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d109      	bne.n	8001afa <_ftoa+0x102>
 8001ae6:	a37c      	add	r3, pc, #496	; (adr r3, 8001cd8 <_ftoa+0x2e0>)
 8001ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aec:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001af0:	f7fe ff98 	bl	8000a24 <__aeabi_dcmplt>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d00f      	beq.n	8001b1a <_ftoa+0x122>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
 8001afa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001afc:	9302      	str	r3, [sp, #8]
 8001afe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001b00:	9301      	str	r3, [sp, #4]
 8001b02:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001b04:	9300      	str	r3, [sp, #0]
 8001b06:	ed97 0b00 	vldr	d0, [r7]
 8001b0a:	68bb      	ldr	r3, [r7, #8]
 8001b0c:	68fa      	ldr	r2, [r7, #12]
 8001b0e:	6939      	ldr	r1, [r7, #16]
 8001b10:	6978      	ldr	r0, [r7, #20]
 8001b12:	f000 f9d1 	bl	8001eb8 <_etoa>
 8001b16:	4603      	mov	r3, r0
 8001b18:	e1c4      	b.n	8001ea4 <_ftoa+0x4ac>
    return 0U;
#endif
  }

  // test for negative
  bool negative = false;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
  if (value < 0) {
 8001b20:	f04f 0200 	mov.w	r2, #0
 8001b24:	f04f 0300 	mov.w	r3, #0
 8001b28:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001b2c:	f7fe ff7a 	bl	8000a24 <__aeabi_dcmplt>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d00e      	beq.n	8001b54 <_ftoa+0x15c>
    negative = true;
 8001b36:	2301      	movs	r3, #1
 8001b38:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
    value = 0 - value;
 8001b3c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001b40:	f04f 0000 	mov.w	r0, #0
 8001b44:	f04f 0100 	mov.w	r1, #0
 8001b48:	f7fe fb42 	bl	80001d0 <__aeabi_dsub>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	460b      	mov	r3, r1
 8001b50:	e9c7 2300 	strd	r2, r3, [r7]
  }

  // set default precision, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
 8001b54:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001b56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d10e      	bne.n	8001b7c <_ftoa+0x184>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8001b5e:	2306      	movs	r3, #6
 8001b60:	673b      	str	r3, [r7, #112]	; 0x70
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 8001b62:	e00b      	b.n	8001b7c <_ftoa+0x184>
    buf[len++] = '0';
 8001b64:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b66:	1c5a      	adds	r2, r3, #1
 8001b68:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001b6a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001b6e:	4413      	add	r3, r2
 8001b70:	2230      	movs	r2, #48	; 0x30
 8001b72:	f803 2c48 	strb.w	r2, [r3, #-72]
    prec--;
 8001b76:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001b78:	3b01      	subs	r3, #1
 8001b7a:	673b      	str	r3, [r7, #112]	; 0x70
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 8001b7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b7e:	2b1f      	cmp	r3, #31
 8001b80:	d802      	bhi.n	8001b88 <_ftoa+0x190>
 8001b82:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001b84:	2b09      	cmp	r3, #9
 8001b86:	d8ed      	bhi.n	8001b64 <_ftoa+0x16c>
  }

  int whole = (int)value;
 8001b88:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001b8c:	f7fe ff72 	bl	8000a74 <__aeabi_d2iz>
 8001b90:	4603      	mov	r3, r0
 8001b92:	657b      	str	r3, [r7, #84]	; 0x54
  double tmp = (value - whole) * pow10[prec];
 8001b94:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8001b96:	f7fe fc69 	bl	800046c <__aeabi_i2d>
 8001b9a:	4602      	mov	r2, r0
 8001b9c:	460b      	mov	r3, r1
 8001b9e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001ba2:	f7fe fb15 	bl	80001d0 <__aeabi_dsub>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	460b      	mov	r3, r1
 8001baa:	4610      	mov	r0, r2
 8001bac:	4619      	mov	r1, r3
 8001bae:	4a51      	ldr	r2, [pc, #324]	; (8001cf4 <_ftoa+0x2fc>)
 8001bb0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001bb2:	00db      	lsls	r3, r3, #3
 8001bb4:	4413      	add	r3, r2
 8001bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bba:	f7fe fcc1 	bl	8000540 <__aeabi_dmul>
 8001bbe:	4602      	mov	r2, r0
 8001bc0:	460b      	mov	r3, r1
 8001bc2:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  unsigned long frac = (unsigned long)tmp;
 8001bc6:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001bca:	f7fe ff7b 	bl	8000ac4 <__aeabi_d2uiz>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	653b      	str	r3, [r7, #80]	; 0x50
  diff = tmp - frac;
 8001bd2:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8001bd4:	f7fe fc3a 	bl	800044c <__aeabi_ui2d>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	460b      	mov	r3, r1
 8001bdc:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001be0:	f7fe faf6 	bl	80001d0 <__aeabi_dsub>
 8001be4:	4602      	mov	r2, r0
 8001be6:	460b      	mov	r3, r1
 8001be8:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

  if (diff > 0.5) {
 8001bec:	f04f 0200 	mov.w	r2, #0
 8001bf0:	4b41      	ldr	r3, [pc, #260]	; (8001cf8 <_ftoa+0x300>)
 8001bf2:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8001bf6:	f7fe ff33 	bl	8000a60 <__aeabi_dcmpgt>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d016      	beq.n	8001c2e <_ftoa+0x236>
    ++frac;
 8001c00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c02:	3301      	adds	r3, #1
 8001c04:	653b      	str	r3, [r7, #80]	; 0x50
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
 8001c06:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8001c08:	f7fe fc20 	bl	800044c <__aeabi_ui2d>
 8001c0c:	4a39      	ldr	r2, [pc, #228]	; (8001cf4 <_ftoa+0x2fc>)
 8001c0e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001c10:	00db      	lsls	r3, r3, #3
 8001c12:	4413      	add	r3, r2
 8001c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c18:	f7fe ff18 	bl	8000a4c <__aeabi_dcmpge>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d01a      	beq.n	8001c58 <_ftoa+0x260>
      frac = 0;
 8001c22:	2300      	movs	r3, #0
 8001c24:	653b      	str	r3, [r7, #80]	; 0x50
      ++whole;
 8001c26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c28:	3301      	adds	r3, #1
 8001c2a:	657b      	str	r3, [r7, #84]	; 0x54
 8001c2c:	e014      	b.n	8001c58 <_ftoa+0x260>
    }
  }
  else if (diff < 0.5) {
 8001c2e:	f04f 0200 	mov.w	r2, #0
 8001c32:	4b31      	ldr	r3, [pc, #196]	; (8001cf8 <_ftoa+0x300>)
 8001c34:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8001c38:	f7fe fef4 	bl	8000a24 <__aeabi_dcmplt>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d10a      	bne.n	8001c58 <_ftoa+0x260>
  }
  else if ((frac == 0U) || (frac & 1U)) {
 8001c42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d004      	beq.n	8001c52 <_ftoa+0x25a>
 8001c48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c4a:	f003 0301 	and.w	r3, r3, #1
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d002      	beq.n	8001c58 <_ftoa+0x260>
    // if halfway, round up if odd OR if last digit is 0
    ++frac;
 8001c52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c54:	3301      	adds	r3, #1
 8001c56:	653b      	str	r3, [r7, #80]	; 0x50
  }

  if (prec == 0U) {
 8001c58:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d134      	bne.n	8001cc8 <_ftoa+0x2d0>
    diff = value - (double)whole;
 8001c5e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8001c60:	f7fe fc04 	bl	800046c <__aeabi_i2d>
 8001c64:	4602      	mov	r2, r0
 8001c66:	460b      	mov	r3, r1
 8001c68:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001c6c:	f7fe fab0 	bl	80001d0 <__aeabi_dsub>
 8001c70:	4602      	mov	r2, r0
 8001c72:	460b      	mov	r3, r1
 8001c74:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 8001c78:	2301      	movs	r3, #1
 8001c7a:	461c      	mov	r4, r3
 8001c7c:	f04f 0200 	mov.w	r2, #0
 8001c80:	4b1d      	ldr	r3, [pc, #116]	; (8001cf8 <_ftoa+0x300>)
 8001c82:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8001c86:	f7fe fecd 	bl	8000a24 <__aeabi_dcmplt>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d101      	bne.n	8001c94 <_ftoa+0x29c>
 8001c90:	2300      	movs	r3, #0
 8001c92:	461c      	mov	r4, r3
 8001c94:	b2e3      	uxtb	r3, r4
 8001c96:	f083 0301 	eor.w	r3, r3, #1
 8001c9a:	b2db      	uxtb	r3, r3
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d109      	bne.n	8001cb4 <_ftoa+0x2bc>
 8001ca0:	f04f 0200 	mov.w	r2, #0
 8001ca4:	4b14      	ldr	r3, [pc, #80]	; (8001cf8 <_ftoa+0x300>)
 8001ca6:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8001caa:	f7fe fed9 	bl	8000a60 <__aeabi_dcmpgt>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d067      	beq.n	8001d84 <_ftoa+0x38c>
 8001cb4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cb6:	f003 0301 	and.w	r3, r3, #1
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	f000 8085 	beq.w	8001dca <_ftoa+0x3d2>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
 8001cc0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cc2:	3301      	adds	r3, #1
 8001cc4:	657b      	str	r3, [r7, #84]	; 0x54
 8001cc6:	e080      	b.n	8001dca <_ftoa+0x3d2>
    }
  }
  else {
    unsigned int count = prec;
 8001cc8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001cca:	64fb      	str	r3, [r7, #76]	; 0x4c
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8001ccc:	e037      	b.n	8001d3e <_ftoa+0x346>
 8001cce:	bf00      	nop
 8001cd0:	00000000 	.word	0x00000000
 8001cd4:	41cdcd65 	.word	0x41cdcd65
 8001cd8:	00000000 	.word	0x00000000
 8001cdc:	c1cdcd65 	.word	0xc1cdcd65
 8001ce0:	08006ca0 	.word	0x08006ca0
 8001ce4:	08006ca4 	.word	0x08006ca4
 8001ce8:	7fefffff 	.word	0x7fefffff
 8001cec:	08006cac 	.word	0x08006cac
 8001cf0:	08006cb4 	.word	0x08006cb4
 8001cf4:	08006cb8 	.word	0x08006cb8
 8001cf8:	3fe00000 	.word	0x3fe00000
      --count;
 8001cfc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001cfe:	3b01      	subs	r3, #1
 8001d00:	64fb      	str	r3, [r7, #76]	; 0x4c
      buf[len++] = (char)(48U + (frac % 10U));
 8001d02:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8001d04:	4b69      	ldr	r3, [pc, #420]	; (8001eac <_ftoa+0x4b4>)
 8001d06:	fba3 2301 	umull	r2, r3, r3, r1
 8001d0a:	08da      	lsrs	r2, r3, #3
 8001d0c:	4613      	mov	r3, r2
 8001d0e:	009b      	lsls	r3, r3, #2
 8001d10:	4413      	add	r3, r2
 8001d12:	005b      	lsls	r3, r3, #1
 8001d14:	1aca      	subs	r2, r1, r3
 8001d16:	b2d2      	uxtb	r2, r2
 8001d18:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d1a:	1c59      	adds	r1, r3, #1
 8001d1c:	65f9      	str	r1, [r7, #92]	; 0x5c
 8001d1e:	3230      	adds	r2, #48	; 0x30
 8001d20:	b2d2      	uxtb	r2, r2
 8001d22:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8001d26:	440b      	add	r3, r1
 8001d28:	f803 2c48 	strb.w	r2, [r3, #-72]
      if (!(frac /= 10U)) {
 8001d2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001d2e:	4a5f      	ldr	r2, [pc, #380]	; (8001eac <_ftoa+0x4b4>)
 8001d30:	fba2 2303 	umull	r2, r3, r2, r3
 8001d34:	08db      	lsrs	r3, r3, #3
 8001d36:	653b      	str	r3, [r7, #80]	; 0x50
 8001d38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d003      	beq.n	8001d46 <_ftoa+0x34e>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8001d3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d40:	2b1f      	cmp	r3, #31
 8001d42:	d9db      	bls.n	8001cfc <_ftoa+0x304>
 8001d44:	e00a      	b.n	8001d5c <_ftoa+0x364>
        break;
 8001d46:	bf00      	nop
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8001d48:	e008      	b.n	8001d5c <_ftoa+0x364>
      buf[len++] = '0';
 8001d4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d4c:	1c5a      	adds	r2, r3, #1
 8001d4e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001d50:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001d54:	4413      	add	r3, r2
 8001d56:	2230      	movs	r2, #48	; 0x30
 8001d58:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8001d5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d5e:	2b1f      	cmp	r3, #31
 8001d60:	d804      	bhi.n	8001d6c <_ftoa+0x374>
 8001d62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d64:	1e5a      	subs	r2, r3, #1
 8001d66:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d1ee      	bne.n	8001d4a <_ftoa+0x352>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
 8001d6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d6e:	2b1f      	cmp	r3, #31
 8001d70:	d82b      	bhi.n	8001dca <_ftoa+0x3d2>
      // add decimal
      buf[len++] = '.';
 8001d72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d74:	1c5a      	adds	r2, r3, #1
 8001d76:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001d78:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001d7c:	4413      	add	r3, r2
 8001d7e:	222e      	movs	r2, #46	; 0x2e
 8001d80:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8001d84:	e021      	b.n	8001dca <_ftoa+0x3d2>
    buf[len++] = (char)(48 + (whole % 10));
 8001d86:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001d88:	4b49      	ldr	r3, [pc, #292]	; (8001eb0 <_ftoa+0x4b8>)
 8001d8a:	fb83 1302 	smull	r1, r3, r3, r2
 8001d8e:	1099      	asrs	r1, r3, #2
 8001d90:	17d3      	asrs	r3, r2, #31
 8001d92:	1ac9      	subs	r1, r1, r3
 8001d94:	460b      	mov	r3, r1
 8001d96:	009b      	lsls	r3, r3, #2
 8001d98:	440b      	add	r3, r1
 8001d9a:	005b      	lsls	r3, r3, #1
 8001d9c:	1ad1      	subs	r1, r2, r3
 8001d9e:	b2ca      	uxtb	r2, r1
 8001da0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001da2:	1c59      	adds	r1, r3, #1
 8001da4:	65f9      	str	r1, [r7, #92]	; 0x5c
 8001da6:	3230      	adds	r2, #48	; 0x30
 8001da8:	b2d2      	uxtb	r2, r2
 8001daa:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8001dae:	440b      	add	r3, r1
 8001db0:	f803 2c48 	strb.w	r2, [r3, #-72]
    if (!(whole /= 10)) {
 8001db4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001db6:	4a3e      	ldr	r2, [pc, #248]	; (8001eb0 <_ftoa+0x4b8>)
 8001db8:	fb82 1203 	smull	r1, r2, r2, r3
 8001dbc:	1092      	asrs	r2, r2, #2
 8001dbe:	17db      	asrs	r3, r3, #31
 8001dc0:	1ad3      	subs	r3, r2, r3
 8001dc2:	657b      	str	r3, [r7, #84]	; 0x54
 8001dc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d003      	beq.n	8001dd2 <_ftoa+0x3da>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8001dca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001dcc:	2b1f      	cmp	r3, #31
 8001dce:	d9da      	bls.n	8001d86 <_ftoa+0x38e>
 8001dd0:	e000      	b.n	8001dd4 <_ftoa+0x3dc>
      break;
 8001dd2:	bf00      	nop
    }
  }

  // pad leading zeros
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 8001dd4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001dd6:	f003 0302 	and.w	r3, r3, #2
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d124      	bne.n	8001e28 <_ftoa+0x430>
 8001dde:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001de0:	f003 0301 	and.w	r3, r3, #1
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d01f      	beq.n	8001e28 <_ftoa+0x430>
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8001de8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d015      	beq.n	8001e1a <_ftoa+0x422>
 8001dee:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d104      	bne.n	8001e00 <_ftoa+0x408>
 8001df6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001df8:	f003 030c 	and.w	r3, r3, #12
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d00c      	beq.n	8001e1a <_ftoa+0x422>
      width--;
 8001e00:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e02:	3b01      	subs	r3, #1
 8001e04:	677b      	str	r3, [r7, #116]	; 0x74
    }
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 8001e06:	e008      	b.n	8001e1a <_ftoa+0x422>
      buf[len++] = '0';
 8001e08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e0a:	1c5a      	adds	r2, r3, #1
 8001e0c:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001e0e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001e12:	4413      	add	r3, r2
 8001e14:	2230      	movs	r2, #48	; 0x30
 8001e16:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 8001e1a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001e1c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e1e:	429a      	cmp	r2, r3
 8001e20:	d202      	bcs.n	8001e28 <_ftoa+0x430>
 8001e22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e24:	2b1f      	cmp	r3, #31
 8001e26:	d9ef      	bls.n	8001e08 <_ftoa+0x410>
    }
  }

  if (len < PRINTF_FTOA_BUFFER_SIZE) {
 8001e28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e2a:	2b1f      	cmp	r3, #31
 8001e2c:	d82a      	bhi.n	8001e84 <_ftoa+0x48c>
    if (negative) {
 8001e2e:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d009      	beq.n	8001e4a <_ftoa+0x452>
      buf[len++] = '-';
 8001e36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e38:	1c5a      	adds	r2, r3, #1
 8001e3a:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001e3c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001e40:	4413      	add	r3, r2
 8001e42:	222d      	movs	r2, #45	; 0x2d
 8001e44:	f803 2c48 	strb.w	r2, [r3, #-72]
 8001e48:	e01c      	b.n	8001e84 <_ftoa+0x48c>
    }
    else if (flags & FLAGS_PLUS) {
 8001e4a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001e4c:	f003 0304 	and.w	r3, r3, #4
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d009      	beq.n	8001e68 <_ftoa+0x470>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8001e54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e56:	1c5a      	adds	r2, r3, #1
 8001e58:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001e5a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001e5e:	4413      	add	r3, r2
 8001e60:	222b      	movs	r2, #43	; 0x2b
 8001e62:	f803 2c48 	strb.w	r2, [r3, #-72]
 8001e66:	e00d      	b.n	8001e84 <_ftoa+0x48c>
    }
    else if (flags & FLAGS_SPACE) {
 8001e68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001e6a:	f003 0308 	and.w	r3, r3, #8
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d008      	beq.n	8001e84 <_ftoa+0x48c>
      buf[len++] = ' ';
 8001e72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e74:	1c5a      	adds	r2, r3, #1
 8001e76:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001e78:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001e7c:	4413      	add	r3, r2
 8001e7e:	2220      	movs	r2, #32
 8001e80:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 8001e84:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001e86:	9303      	str	r3, [sp, #12]
 8001e88:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e8a:	9302      	str	r3, [sp, #8]
 8001e8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e8e:	9301      	str	r3, [sp, #4]
 8001e90:	f107 0318 	add.w	r3, r7, #24
 8001e94:	9300      	str	r3, [sp, #0]
 8001e96:	68bb      	ldr	r3, [r7, #8]
 8001e98:	68fa      	ldr	r2, [r7, #12]
 8001e9a:	6939      	ldr	r1, [r7, #16]
 8001e9c:	6978      	ldr	r0, [r7, #20]
 8001e9e:	f7ff fba9 	bl	80015f4 <_out_rev>
 8001ea2:	4603      	mov	r3, r0
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	3764      	adds	r7, #100	; 0x64
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd90      	pop	{r4, r7, pc}
 8001eac:	cccccccd 	.word	0xcccccccd
 8001eb0:	66666667 	.word	0x66666667
 8001eb4:	00000000 	.word	0x00000000

08001eb8 <_etoa>:


#if defined(PRINTF_SUPPORT_EXPONENTIAL)
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8001eb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ebc:	b09d      	sub	sp, #116	; 0x74
 8001ebe:	af06      	add	r7, sp, #24
 8001ec0:	61f8      	str	r0, [r7, #28]
 8001ec2:	61b9      	str	r1, [r7, #24]
 8001ec4:	617a      	str	r2, [r7, #20]
 8001ec6:	613b      	str	r3, [r7, #16]
 8001ec8:	ed87 0b02 	vstr	d0, [r7, #8]
  // check for NaN and special values
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
 8001ecc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001ed0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001ed4:	f7fe fd9c 	bl	8000a10 <__aeabi_dcmpeq>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d014      	beq.n	8001f08 <_etoa+0x50>
 8001ede:	f04f 32ff 	mov.w	r2, #4294967295
 8001ee2:	4bc3      	ldr	r3, [pc, #780]	; (80021f0 <_etoa+0x338>)
 8001ee4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001ee8:	f7fe fdba 	bl	8000a60 <__aeabi_dcmpgt>
 8001eec:	4603      	mov	r3, r0
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d10a      	bne.n	8001f08 <_etoa+0x50>
 8001ef2:	f04f 32ff 	mov.w	r2, #4294967295
 8001ef6:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 8001efa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001efe:	f7fe fd91 	bl	8000a24 <__aeabi_dcmplt>
 8001f02:	4603      	mov	r3, r0
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d012      	beq.n	8001f2e <_etoa+0x76>
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
 8001f08:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001f0c:	9302      	str	r3, [sp, #8]
 8001f0e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001f12:	9301      	str	r3, [sp, #4]
 8001f14:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001f18:	9300      	str	r3, [sp, #0]
 8001f1a:	ed97 0b02 	vldr	d0, [r7, #8]
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	697a      	ldr	r2, [r7, #20]
 8001f22:	69b9      	ldr	r1, [r7, #24]
 8001f24:	69f8      	ldr	r0, [r7, #28]
 8001f26:	f7ff fd67 	bl	80019f8 <_ftoa>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	e245      	b.n	80023ba <_etoa+0x502>
  }

  // determine the sign
  const bool negative = value < 0;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	461e      	mov	r6, r3
 8001f32:	f04f 0200 	mov.w	r2, #0
 8001f36:	f04f 0300 	mov.w	r3, #0
 8001f3a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001f3e:	f7fe fd71 	bl	8000a24 <__aeabi_dcmplt>
 8001f42:	4603      	mov	r3, r0
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d101      	bne.n	8001f4c <_etoa+0x94>
 8001f48:	2300      	movs	r3, #0
 8001f4a:	461e      	mov	r6, r3
 8001f4c:	f887 604b 	strb.w	r6, [r7, #75]	; 0x4b
  if (negative) {
 8001f50:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d005      	beq.n	8001f64 <_etoa+0xac>
    value = -value;
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	60bb      	str	r3, [r7, #8]
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001f62:	60fb      	str	r3, [r7, #12]
  }

  // default precision
  if (!(flags & FLAGS_PRECISION)) {
 8001f64:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001f68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d102      	bne.n	8001f76 <_etoa+0xbe>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8001f70:	2306      	movs	r3, #6
 8001f72:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  union {
    uint64_t U;
    double   F;
  } conv;

  conv.F = value;
 8001f76:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001f7a:	e9c7 2308 	strd	r2, r3, [r7, #32]
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
 8001f7e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001f82:	f04f 0200 	mov.w	r2, #0
 8001f86:	f04f 0300 	mov.w	r3, #0
 8001f8a:	0d0a      	lsrs	r2, r1, #20
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	4613      	mov	r3, r2
 8001f90:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001f94:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8001f98:	647b      	str	r3, [r7, #68]	; 0x44
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
 8001f9a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001f9e:	f04f 30ff 	mov.w	r0, #4294967295
 8001fa2:	4994      	ldr	r1, [pc, #592]	; (80021f4 <_etoa+0x33c>)
 8001fa4:	ea02 0400 	and.w	r4, r2, r0
 8001fa8:	ea03 0501 	and.w	r5, r3, r1
 8001fac:	f04f 0200 	mov.w	r2, #0
 8001fb0:	4b91      	ldr	r3, [pc, #580]	; (80021f8 <_etoa+0x340>)
 8001fb2:	ea44 0802 	orr.w	r8, r4, r2
 8001fb6:	ea45 0903 	orr.w	r9, r5, r3
 8001fba:	e9c7 8908 	strd	r8, r9, [r7, #32]
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 8001fbe:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001fc0:	f7fe fa54 	bl	800046c <__aeabi_i2d>
 8001fc4:	a37e      	add	r3, pc, #504	; (adr r3, 80021c0 <_etoa+0x308>)
 8001fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fca:	f7fe fab9 	bl	8000540 <__aeabi_dmul>
 8001fce:	4602      	mov	r2, r0
 8001fd0:	460b      	mov	r3, r1
 8001fd2:	4610      	mov	r0, r2
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	a37c      	add	r3, pc, #496	; (adr r3, 80021c8 <_etoa+0x310>)
 8001fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fdc:	f7fe f8fa 	bl	80001d4 <__adddf3>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	460b      	mov	r3, r1
 8001fe4:	4614      	mov	r4, r2
 8001fe6:	461d      	mov	r5, r3
 8001fe8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001fec:	f04f 0200 	mov.w	r2, #0
 8001ff0:	4b82      	ldr	r3, [pc, #520]	; (80021fc <_etoa+0x344>)
 8001ff2:	f7fe f8ed 	bl	80001d0 <__aeabi_dsub>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	460b      	mov	r3, r1
 8001ffa:	4610      	mov	r0, r2
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	a374      	add	r3, pc, #464	; (adr r3, 80021d0 <_etoa+0x318>)
 8002000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002004:	f7fe fa9c 	bl	8000540 <__aeabi_dmul>
 8002008:	4602      	mov	r2, r0
 800200a:	460b      	mov	r3, r1
 800200c:	4620      	mov	r0, r4
 800200e:	4629      	mov	r1, r5
 8002010:	f7fe f8e0 	bl	80001d4 <__adddf3>
 8002014:	4602      	mov	r2, r0
 8002016:	460b      	mov	r3, r1
 8002018:	4610      	mov	r0, r2
 800201a:	4619      	mov	r1, r3
 800201c:	f7fe fd2a 	bl	8000a74 <__aeabi_d2iz>
 8002020:	4603      	mov	r3, r0
 8002022:	657b      	str	r3, [r7, #84]	; 0x54
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
 8002024:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8002026:	f7fe fa21 	bl	800046c <__aeabi_i2d>
 800202a:	a36b      	add	r3, pc, #428	; (adr r3, 80021d8 <_etoa+0x320>)
 800202c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002030:	f7fe fa86 	bl	8000540 <__aeabi_dmul>
 8002034:	4602      	mov	r2, r0
 8002036:	460b      	mov	r3, r1
 8002038:	4610      	mov	r0, r2
 800203a:	4619      	mov	r1, r3
 800203c:	f04f 0200 	mov.w	r2, #0
 8002040:	4b6f      	ldr	r3, [pc, #444]	; (8002200 <_etoa+0x348>)
 8002042:	f7fe f8c7 	bl	80001d4 <__adddf3>
 8002046:	4602      	mov	r2, r0
 8002048:	460b      	mov	r3, r1
 800204a:	4610      	mov	r0, r2
 800204c:	4619      	mov	r1, r3
 800204e:	f7fe fd11 	bl	8000a74 <__aeabi_d2iz>
 8002052:	4603      	mov	r3, r0
 8002054:	647b      	str	r3, [r7, #68]	; 0x44
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
 8002056:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8002058:	f7fe fa08 	bl	800046c <__aeabi_i2d>
 800205c:	a360      	add	r3, pc, #384	; (adr r3, 80021e0 <_etoa+0x328>)
 800205e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002062:	f7fe fa6d 	bl	8000540 <__aeabi_dmul>
 8002066:	4602      	mov	r2, r0
 8002068:	460b      	mov	r3, r1
 800206a:	4614      	mov	r4, r2
 800206c:	461d      	mov	r5, r3
 800206e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002070:	f7fe f9fc 	bl	800046c <__aeabi_i2d>
 8002074:	a35c      	add	r3, pc, #368	; (adr r3, 80021e8 <_etoa+0x330>)
 8002076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800207a:	f7fe fa61 	bl	8000540 <__aeabi_dmul>
 800207e:	4602      	mov	r2, r0
 8002080:	460b      	mov	r3, r1
 8002082:	4620      	mov	r0, r4
 8002084:	4629      	mov	r1, r5
 8002086:	f7fe f8a3 	bl	80001d0 <__aeabi_dsub>
 800208a:	4602      	mov	r2, r0
 800208c:	460b      	mov	r3, r1
 800208e:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  const double z2 = z * z;
 8002092:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002096:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800209a:	f7fe fa51 	bl	8000540 <__aeabi_dmul>
 800209e:	4602      	mov	r2, r0
 80020a0:	460b      	mov	r3, r1
 80020a2:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
 80020a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020a8:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 80020ac:	4618      	mov	r0, r3
 80020ae:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80020b2:	f04f 0200 	mov.w	r2, #0
 80020b6:	f04f 0300 	mov.w	r3, #0
 80020ba:	0503      	lsls	r3, r0, #20
 80020bc:	2200      	movs	r2, #0
 80020be:	e9c7 2308 	strd	r2, r3, [r7, #32]
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 80020c2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80020c6:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80020ca:	4602      	mov	r2, r0
 80020cc:	460b      	mov	r3, r1
 80020ce:	f7fe f881 	bl	80001d4 <__adddf3>
 80020d2:	4602      	mov	r2, r0
 80020d4:	460b      	mov	r3, r1
 80020d6:	4690      	mov	r8, r2
 80020d8:	4699      	mov	r9, r3
 80020da:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80020de:	f04f 0000 	mov.w	r0, #0
 80020e2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80020e6:	f7fe f873 	bl	80001d0 <__aeabi_dsub>
 80020ea:	4602      	mov	r2, r0
 80020ec:	460b      	mov	r3, r1
 80020ee:	4692      	mov	sl, r2
 80020f0:	469b      	mov	fp, r3
 80020f2:	f04f 0200 	mov.w	r2, #0
 80020f6:	4b43      	ldr	r3, [pc, #268]	; (8002204 <_etoa+0x34c>)
 80020f8:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80020fc:	f7fe fb4a 	bl	8000794 <__aeabi_ddiv>
 8002100:	4602      	mov	r2, r0
 8002102:	460b      	mov	r3, r1
 8002104:	4610      	mov	r0, r2
 8002106:	4619      	mov	r1, r3
 8002108:	f04f 0200 	mov.w	r2, #0
 800210c:	4b3e      	ldr	r3, [pc, #248]	; (8002208 <_etoa+0x350>)
 800210e:	f7fe f861 	bl	80001d4 <__adddf3>
 8002112:	4602      	mov	r2, r0
 8002114:	460b      	mov	r3, r1
 8002116:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800211a:	f7fe fb3b 	bl	8000794 <__aeabi_ddiv>
 800211e:	4602      	mov	r2, r0
 8002120:	460b      	mov	r3, r1
 8002122:	4610      	mov	r0, r2
 8002124:	4619      	mov	r1, r3
 8002126:	f04f 0200 	mov.w	r2, #0
 800212a:	4b38      	ldr	r3, [pc, #224]	; (800220c <_etoa+0x354>)
 800212c:	f7fe f852 	bl	80001d4 <__adddf3>
 8002130:	4602      	mov	r2, r0
 8002132:	460b      	mov	r3, r1
 8002134:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002138:	f7fe fb2c 	bl	8000794 <__aeabi_ddiv>
 800213c:	4602      	mov	r2, r0
 800213e:	460b      	mov	r3, r1
 8002140:	4650      	mov	r0, sl
 8002142:	4659      	mov	r1, fp
 8002144:	f7fe f846 	bl	80001d4 <__adddf3>
 8002148:	4602      	mov	r2, r0
 800214a:	460b      	mov	r3, r1
 800214c:	4640      	mov	r0, r8
 800214e:	4649      	mov	r1, r9
 8002150:	f7fe fb20 	bl	8000794 <__aeabi_ddiv>
 8002154:	4602      	mov	r2, r0
 8002156:	460b      	mov	r3, r1
 8002158:	4610      	mov	r0, r2
 800215a:	4619      	mov	r1, r3
 800215c:	f04f 0200 	mov.w	r2, #0
 8002160:	4b25      	ldr	r3, [pc, #148]	; (80021f8 <_etoa+0x340>)
 8002162:	f7fe f837 	bl	80001d4 <__adddf3>
 8002166:	4602      	mov	r2, r0
 8002168:	460b      	mov	r3, r1
 800216a:	4620      	mov	r0, r4
 800216c:	4629      	mov	r1, r5
 800216e:	f7fe f9e7 	bl	8000540 <__aeabi_dmul>
 8002172:	4602      	mov	r2, r0
 8002174:	460b      	mov	r3, r1
 8002176:	e9c7 2308 	strd	r2, r3, [r7, #32]
  // correct for rounding errors
  if (value < conv.F) {
 800217a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800217e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002182:	f7fe fc4f 	bl	8000a24 <__aeabi_dcmplt>
 8002186:	4603      	mov	r3, r0
 8002188:	2b00      	cmp	r3, #0
 800218a:	d00d      	beq.n	80021a8 <_etoa+0x2f0>
    expval--;
 800218c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800218e:	3b01      	subs	r3, #1
 8002190:	657b      	str	r3, [r7, #84]	; 0x54
    conv.F /= 10;
 8002192:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002196:	f04f 0200 	mov.w	r2, #0
 800219a:	4b1b      	ldr	r3, [pc, #108]	; (8002208 <_etoa+0x350>)
 800219c:	f7fe fafa 	bl	8000794 <__aeabi_ddiv>
 80021a0:	4602      	mov	r2, r0
 80021a2:	460b      	mov	r3, r1
 80021a4:	e9c7 2308 	strd	r2, r3, [r7, #32]
  }

  // the exponent format is "%+03d" and largest value is "307", so set aside 4-5 characters
  unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
 80021a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021aa:	2b63      	cmp	r3, #99	; 0x63
 80021ac:	dc30      	bgt.n	8002210 <_etoa+0x358>
 80021ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021b0:	f113 0f63 	cmn.w	r3, #99	; 0x63
 80021b4:	db2c      	blt.n	8002210 <_etoa+0x358>
 80021b6:	2304      	movs	r3, #4
 80021b8:	e02b      	b.n	8002212 <_etoa+0x35a>
 80021ba:	bf00      	nop
 80021bc:	f3af 8000 	nop.w
 80021c0:	509f79fb 	.word	0x509f79fb
 80021c4:	3fd34413 	.word	0x3fd34413
 80021c8:	8b60c8b3 	.word	0x8b60c8b3
 80021cc:	3fc68a28 	.word	0x3fc68a28
 80021d0:	636f4361 	.word	0x636f4361
 80021d4:	3fd287a7 	.word	0x3fd287a7
 80021d8:	0979a371 	.word	0x0979a371
 80021dc:	400a934f 	.word	0x400a934f
 80021e0:	bbb55516 	.word	0xbbb55516
 80021e4:	40026bb1 	.word	0x40026bb1
 80021e8:	fefa39ef 	.word	0xfefa39ef
 80021ec:	3fe62e42 	.word	0x3fe62e42
 80021f0:	7fefffff 	.word	0x7fefffff
 80021f4:	000fffff 	.word	0x000fffff
 80021f8:	3ff00000 	.word	0x3ff00000
 80021fc:	3ff80000 	.word	0x3ff80000
 8002200:	3fe00000 	.word	0x3fe00000
 8002204:	402c0000 	.word	0x402c0000
 8002208:	40240000 	.word	0x40240000
 800220c:	40180000 	.word	0x40180000
 8002210:	2305      	movs	r3, #5
 8002212:	653b      	str	r3, [r7, #80]	; 0x50

  // in "%g" mode, "prec" is the number of *significant figures* not decimals
  if (flags & FLAGS_ADAPT_EXP) {
 8002214:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002218:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800221c:	2b00      	cmp	r3, #0
 800221e:	d03d      	beq.n	800229c <_etoa+0x3e4>
    // do we want to fall-back to "%f" mode?
    if ((value >= 1e-4) && (value < 1e6)) {
 8002220:	a369      	add	r3, pc, #420	; (adr r3, 80023c8 <_etoa+0x510>)
 8002222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002226:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800222a:	f7fe fc0f 	bl	8000a4c <__aeabi_dcmpge>
 800222e:	4603      	mov	r3, r0
 8002230:	2b00      	cmp	r3, #0
 8002232:	d024      	beq.n	800227e <_etoa+0x3c6>
 8002234:	a366      	add	r3, pc, #408	; (adr r3, 80023d0 <_etoa+0x518>)
 8002236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800223a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800223e:	f7fe fbf1 	bl	8000a24 <__aeabi_dcmplt>
 8002242:	4603      	mov	r3, r0
 8002244:	2b00      	cmp	r3, #0
 8002246:	d01a      	beq.n	800227e <_etoa+0x3c6>
      if ((int)prec > expval) {
 8002248:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800224c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800224e:	429a      	cmp	r2, r3
 8002250:	da07      	bge.n	8002262 <_etoa+0x3aa>
        prec = (unsigned)((int)prec - expval - 1);
 8002252:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002256:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002258:	1ad3      	subs	r3, r2, r3
 800225a:	3b01      	subs	r3, #1
 800225c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002260:	e002      	b.n	8002268 <_etoa+0x3b0>
      }
      else {
        prec = 0;
 8002262:	2300      	movs	r3, #0
 8002264:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
      }
      flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
 8002268:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800226c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002270:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      // no characters in exponent
      minwidth = 0U;
 8002274:	2300      	movs	r3, #0
 8002276:	653b      	str	r3, [r7, #80]	; 0x50
      expval   = 0;
 8002278:	2300      	movs	r3, #0
 800227a:	657b      	str	r3, [r7, #84]	; 0x54
 800227c:	e00e      	b.n	800229c <_etoa+0x3e4>
    }
    else {
      // we use one sigfig for the whole part
      if ((prec > 0) && (flags & FLAGS_PRECISION)) {
 800227e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002282:	2b00      	cmp	r3, #0
 8002284:	d00a      	beq.n	800229c <_etoa+0x3e4>
 8002286:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800228a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800228e:	2b00      	cmp	r3, #0
 8002290:	d004      	beq.n	800229c <_etoa+0x3e4>
        --prec;
 8002292:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002296:	3b01      	subs	r3, #1
 8002298:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
      }
    }
  }

  // will everything fit?
  unsigned int fwidth = width;
 800229c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80022a0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (width > minwidth) {
 80022a2:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80022a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80022a8:	429a      	cmp	r2, r3
 80022aa:	d904      	bls.n	80022b6 <_etoa+0x3fe>
    // we didn't fall-back so subtract the characters required for the exponent
    fwidth -= minwidth;
 80022ac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80022ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80022b0:	1ad3      	subs	r3, r2, r3
 80022b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80022b4:	e001      	b.n	80022ba <_etoa+0x402>
  } else {
    // not enough characters, so go back to default sizing
    fwidth = 0U;
 80022b6:	2300      	movs	r3, #0
 80022b8:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  if ((flags & FLAGS_LEFT) && minwidth) {
 80022ba:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80022be:	f003 0302 	and.w	r3, r3, #2
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d004      	beq.n	80022d0 <_etoa+0x418>
 80022c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d001      	beq.n	80022d0 <_etoa+0x418>
    // if we're padding on the right, DON'T pad the floating part
    fwidth = 0U;
 80022cc:	2300      	movs	r3, #0
 80022ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  }

  // rescale the float value
  if (expval) {
 80022d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d009      	beq.n	80022ea <_etoa+0x432>
    value /= conv.F;
 80022d6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80022da:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80022de:	f7fe fa59 	bl	8000794 <__aeabi_ddiv>
 80022e2:	4602      	mov	r2, r0
 80022e4:	460b      	mov	r3, r1
 80022e6:	e9c7 2302 	strd	r2, r3, [r7, #8]
  }

  // output the floating part
  const size_t start_idx = idx;
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);
 80022ee:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d006      	beq.n	8002304 <_etoa+0x44c>
 80022f6:	68bb      	ldr	r3, [r7, #8]
 80022f8:	603b      	str	r3, [r7, #0]
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002300:	607b      	str	r3, [r7, #4]
 8002302:	e003      	b.n	800230c <_etoa+0x454>
 8002304:	ed97 7b02 	vldr	d7, [r7, #8]
 8002308:	ed87 7b00 	vstr	d7, [r7]
 800230c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002310:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002314:	9302      	str	r3, [sp, #8]
 8002316:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002318:	9301      	str	r3, [sp, #4]
 800231a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800231e:	9300      	str	r3, [sp, #0]
 8002320:	ed97 0b00 	vldr	d0, [r7]
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	697a      	ldr	r2, [r7, #20]
 8002328:	69b9      	ldr	r1, [r7, #24]
 800232a:	69f8      	ldr	r0, [r7, #28]
 800232c:	f7ff fb64 	bl	80019f8 <_ftoa>
 8002330:	6178      	str	r0, [r7, #20]

  // output the exponent part
  if (minwidth) {
 8002332:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002334:	2b00      	cmp	r3, #0
 8002336:	d03f      	beq.n	80023b8 <_etoa+0x500>
    // output the exponential symbol
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
 8002338:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800233c:	f003 0320 	and.w	r3, r3, #32
 8002340:	2b00      	cmp	r3, #0
 8002342:	d001      	beq.n	8002348 <_etoa+0x490>
 8002344:	2045      	movs	r0, #69	; 0x45
 8002346:	e000      	b.n	800234a <_etoa+0x492>
 8002348:	2065      	movs	r0, #101	; 0x65
 800234a:	697a      	ldr	r2, [r7, #20]
 800234c:	1c53      	adds	r3, r2, #1
 800234e:	617b      	str	r3, [r7, #20]
 8002350:	69fc      	ldr	r4, [r7, #28]
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	69b9      	ldr	r1, [r7, #24]
 8002356:	47a0      	blx	r4
    // output the exponent value
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
 8002358:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800235a:	2b00      	cmp	r3, #0
 800235c:	bfb8      	it	lt
 800235e:	425b      	neglt	r3, r3
 8002360:	4618      	mov	r0, r3
 8002362:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002364:	0fdb      	lsrs	r3, r3, #31
 8002366:	b2db      	uxtb	r3, r3
 8002368:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800236a:	3a01      	subs	r2, #1
 800236c:	2105      	movs	r1, #5
 800236e:	9105      	str	r1, [sp, #20]
 8002370:	9204      	str	r2, [sp, #16]
 8002372:	2200      	movs	r2, #0
 8002374:	9203      	str	r2, [sp, #12]
 8002376:	220a      	movs	r2, #10
 8002378:	9202      	str	r2, [sp, #8]
 800237a:	9301      	str	r3, [sp, #4]
 800237c:	9000      	str	r0, [sp, #0]
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	697a      	ldr	r2, [r7, #20]
 8002382:	69b9      	ldr	r1, [r7, #24]
 8002384:	69f8      	ldr	r0, [r7, #28]
 8002386:	f7ff fa61 	bl	800184c <_ntoa_long>
 800238a:	6178      	str	r0, [r7, #20]
    // might need to right-pad spaces
    if (flags & FLAGS_LEFT) {
 800238c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002390:	f003 0302 	and.w	r3, r3, #2
 8002394:	2b00      	cmp	r3, #0
 8002396:	d00f      	beq.n	80023b8 <_etoa+0x500>
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
 8002398:	e007      	b.n	80023aa <_etoa+0x4f2>
 800239a:	697a      	ldr	r2, [r7, #20]
 800239c:	1c53      	adds	r3, r2, #1
 800239e:	617b      	str	r3, [r7, #20]
 80023a0:	69fc      	ldr	r4, [r7, #28]
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	69b9      	ldr	r1, [r7, #24]
 80023a6:	2020      	movs	r0, #32
 80023a8:	47a0      	blx	r4
 80023aa:	697a      	ldr	r2, [r7, #20]
 80023ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023ae:	1ad3      	subs	r3, r2, r3
 80023b0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d8f0      	bhi.n	800239a <_etoa+0x4e2>
    }
  }
  return idx;
 80023b8:	697b      	ldr	r3, [r7, #20]
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	375c      	adds	r7, #92	; 0x5c
 80023be:	46bd      	mov	sp, r7
 80023c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80023c4:	f3af 8000 	nop.w
 80023c8:	eb1c432d 	.word	0xeb1c432d
 80023cc:	3f1a36e2 	.word	0x3f1a36e2
 80023d0:	00000000 	.word	0x00000000
 80023d4:	412e8480 	.word	0x412e8480

080023d8 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
 80023d8:	b5b0      	push	{r4, r5, r7, lr}
 80023da:	b0a0      	sub	sp, #128	; 0x80
 80023dc:	af0a      	add	r7, sp, #40	; 0x28
 80023de:	60f8      	str	r0, [r7, #12]
 80023e0:	60b9      	str	r1, [r7, #8]
 80023e2:	607a      	str	r2, [r7, #4]
 80023e4:	603b      	str	r3, [r7, #0]
  unsigned int flags, width, precision, n;
  size_t idx = 0U;
 80023e6:	2300      	movs	r3, #0
 80023e8:	647b      	str	r3, [r7, #68]	; 0x44

  if (!buffer) {
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	f040 8494 	bne.w	8002d1a <_vsnprintf+0x942>
    // use null output function
    out = _out_null;
 80023f2:	4ba0      	ldr	r3, [pc, #640]	; (8002674 <_vsnprintf+0x29c>)
 80023f4:	60fb      	str	r3, [r7, #12]
  }

  while (*format)
 80023f6:	f000 bc90 	b.w	8002d1a <_vsnprintf+0x942>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	781b      	ldrb	r3, [r3, #0]
 80023fe:	2b25      	cmp	r3, #37	; 0x25
 8002400:	d00d      	beq.n	800241e <_vsnprintf+0x46>
      // no
      out(*format, buffer, idx++, maxlen);
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	7818      	ldrb	r0, [r3, #0]
 8002406:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002408:	1c53      	adds	r3, r2, #1
 800240a:	647b      	str	r3, [r7, #68]	; 0x44
 800240c:	68fc      	ldr	r4, [r7, #12]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	68b9      	ldr	r1, [r7, #8]
 8002412:	47a0      	blx	r4
      format++;
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	3301      	adds	r3, #1
 8002418:	603b      	str	r3, [r7, #0]
      continue;
 800241a:	f000 bc7e 	b.w	8002d1a <_vsnprintf+0x942>
    }
    else {
      // yes, evaluate it
      format++;
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	3301      	adds	r3, #1
 8002422:	603b      	str	r3, [r7, #0]
    }

    // evaluate flags
    flags = 0U;
 8002424:	2300      	movs	r3, #0
 8002426:	657b      	str	r3, [r7, #84]	; 0x54
    do {
      switch (*format) {
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	781b      	ldrb	r3, [r3, #0]
 800242c:	3b20      	subs	r3, #32
 800242e:	2b10      	cmp	r3, #16
 8002430:	d856      	bhi.n	80024e0 <_vsnprintf+0x108>
 8002432:	a201      	add	r2, pc, #4	; (adr r2, 8002438 <_vsnprintf+0x60>)
 8002434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002438:	080024b9 	.word	0x080024b9
 800243c:	080024e1 	.word	0x080024e1
 8002440:	080024e1 	.word	0x080024e1
 8002444:	080024cd 	.word	0x080024cd
 8002448:	080024e1 	.word	0x080024e1
 800244c:	080024e1 	.word	0x080024e1
 8002450:	080024e1 	.word	0x080024e1
 8002454:	080024e1 	.word	0x080024e1
 8002458:	080024e1 	.word	0x080024e1
 800245c:	080024e1 	.word	0x080024e1
 8002460:	080024e1 	.word	0x080024e1
 8002464:	080024a5 	.word	0x080024a5
 8002468:	080024e1 	.word	0x080024e1
 800246c:	08002491 	.word	0x08002491
 8002470:	080024e1 	.word	0x080024e1
 8002474:	080024e1 	.word	0x080024e1
 8002478:	0800247d 	.word	0x0800247d
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 800247c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800247e:	f043 0301 	orr.w	r3, r3, #1
 8002482:	657b      	str	r3, [r7, #84]	; 0x54
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	3301      	adds	r3, #1
 8002488:	603b      	str	r3, [r7, #0]
 800248a:	2301      	movs	r3, #1
 800248c:	64bb      	str	r3, [r7, #72]	; 0x48
 800248e:	e02a      	b.n	80024e6 <_vsnprintf+0x10e>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 8002490:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002492:	f043 0302 	orr.w	r3, r3, #2
 8002496:	657b      	str	r3, [r7, #84]	; 0x54
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	3301      	adds	r3, #1
 800249c:	603b      	str	r3, [r7, #0]
 800249e:	2301      	movs	r3, #1
 80024a0:	64bb      	str	r3, [r7, #72]	; 0x48
 80024a2:	e020      	b.n	80024e6 <_vsnprintf+0x10e>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 80024a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024a6:	f043 0304 	orr.w	r3, r3, #4
 80024aa:	657b      	str	r3, [r7, #84]	; 0x54
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	3301      	adds	r3, #1
 80024b0:	603b      	str	r3, [r7, #0]
 80024b2:	2301      	movs	r3, #1
 80024b4:	64bb      	str	r3, [r7, #72]	; 0x48
 80024b6:	e016      	b.n	80024e6 <_vsnprintf+0x10e>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 80024b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024ba:	f043 0308 	orr.w	r3, r3, #8
 80024be:	657b      	str	r3, [r7, #84]	; 0x54
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	3301      	adds	r3, #1
 80024c4:	603b      	str	r3, [r7, #0]
 80024c6:	2301      	movs	r3, #1
 80024c8:	64bb      	str	r3, [r7, #72]	; 0x48
 80024ca:	e00c      	b.n	80024e6 <_vsnprintf+0x10e>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 80024cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024ce:	f043 0310 	orr.w	r3, r3, #16
 80024d2:	657b      	str	r3, [r7, #84]	; 0x54
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	3301      	adds	r3, #1
 80024d8:	603b      	str	r3, [r7, #0]
 80024da:	2301      	movs	r3, #1
 80024dc:	64bb      	str	r3, [r7, #72]	; 0x48
 80024de:	e002      	b.n	80024e6 <_vsnprintf+0x10e>
        default :                                   n = 0U; break;
 80024e0:	2300      	movs	r3, #0
 80024e2:	64bb      	str	r3, [r7, #72]	; 0x48
 80024e4:	bf00      	nop
      }
    } while (n);
 80024e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d19d      	bne.n	8002428 <_vsnprintf+0x50>

    // evaluate width field
    width = 0U;
 80024ec:	2300      	movs	r3, #0
 80024ee:	653b      	str	r3, [r7, #80]	; 0x50
    if (_is_digit(*format)) {
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	781b      	ldrb	r3, [r3, #0]
 80024f4:	4618      	mov	r0, r3
 80024f6:	f7ff f842 	bl	800157e <_is_digit>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d005      	beq.n	800250c <_vsnprintf+0x134>
      width = _atoi(&format);
 8002500:	463b      	mov	r3, r7
 8002502:	4618      	mov	r0, r3
 8002504:	f7ff f852 	bl	80015ac <_atoi>
 8002508:	6538      	str	r0, [r7, #80]	; 0x50
 800250a:	e018      	b.n	800253e <_vsnprintf+0x166>
    }
    else if (*format == '*') {
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	781b      	ldrb	r3, [r3, #0]
 8002510:	2b2a      	cmp	r3, #42	; 0x2a
 8002512:	d114      	bne.n	800253e <_vsnprintf+0x166>
      const int w = va_arg(va, int);
 8002514:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002516:	1d1a      	adds	r2, r3, #4
 8002518:	66ba      	str	r2, [r7, #104]	; 0x68
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	633b      	str	r3, [r7, #48]	; 0x30
      if (w < 0) {
 800251e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002520:	2b00      	cmp	r3, #0
 8002522:	da07      	bge.n	8002534 <_vsnprintf+0x15c>
        flags |= FLAGS_LEFT;    // reverse padding
 8002524:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002526:	f043 0302 	orr.w	r3, r3, #2
 800252a:	657b      	str	r3, [r7, #84]	; 0x54
        width = (unsigned int)-w;
 800252c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800252e:	425b      	negs	r3, r3
 8002530:	653b      	str	r3, [r7, #80]	; 0x50
 8002532:	e001      	b.n	8002538 <_vsnprintf+0x160>
      }
      else {
        width = (unsigned int)w;
 8002534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002536:	653b      	str	r3, [r7, #80]	; 0x50
      }
      format++;
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	3301      	adds	r3, #1
 800253c:	603b      	str	r3, [r7, #0]
    }

    // evaluate precision field
    precision = 0U;
 800253e:	2300      	movs	r3, #0
 8002540:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (*format == '.') {
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	781b      	ldrb	r3, [r3, #0]
 8002546:	2b2e      	cmp	r3, #46	; 0x2e
 8002548:	d124      	bne.n	8002594 <_vsnprintf+0x1bc>
      flags |= FLAGS_PRECISION;
 800254a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800254c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002550:	657b      	str	r3, [r7, #84]	; 0x54
      format++;
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	3301      	adds	r3, #1
 8002556:	603b      	str	r3, [r7, #0]
      if (_is_digit(*format)) {
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	781b      	ldrb	r3, [r3, #0]
 800255c:	4618      	mov	r0, r3
 800255e:	f7ff f80e 	bl	800157e <_is_digit>
 8002562:	4603      	mov	r3, r0
 8002564:	2b00      	cmp	r3, #0
 8002566:	d005      	beq.n	8002574 <_vsnprintf+0x19c>
        precision = _atoi(&format);
 8002568:	463b      	mov	r3, r7
 800256a:	4618      	mov	r0, r3
 800256c:	f7ff f81e 	bl	80015ac <_atoi>
 8002570:	64f8      	str	r0, [r7, #76]	; 0x4c
 8002572:	e00f      	b.n	8002594 <_vsnprintf+0x1bc>
      }
      else if (*format == '*') {
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	781b      	ldrb	r3, [r3, #0]
 8002578:	2b2a      	cmp	r3, #42	; 0x2a
 800257a:	d10b      	bne.n	8002594 <_vsnprintf+0x1bc>
        const int prec = (int)va_arg(va, int);
 800257c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800257e:	1d1a      	adds	r2, r3, #4
 8002580:	66ba      	str	r2, [r7, #104]	; 0x68
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	62fb      	str	r3, [r7, #44]	; 0x2c
        precision = prec > 0 ? (unsigned int)prec : 0U;
 8002586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002588:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800258c:	64fb      	str	r3, [r7, #76]	; 0x4c
        format++;
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	3301      	adds	r3, #1
 8002592:	603b      	str	r3, [r7, #0]
      }
    }

    // evaluate length field
    switch (*format) {
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	781b      	ldrb	r3, [r3, #0]
 8002598:	3b68      	subs	r3, #104	; 0x68
 800259a:	2b12      	cmp	r3, #18
 800259c:	d866      	bhi.n	800266c <_vsnprintf+0x294>
 800259e:	a201      	add	r2, pc, #4	; (adr r2, 80025a4 <_vsnprintf+0x1cc>)
 80025a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025a4:	08002617 	.word	0x08002617
 80025a8:	0800266d 	.word	0x0800266d
 80025ac:	0800264d 	.word	0x0800264d
 80025b0:	0800266d 	.word	0x0800266d
 80025b4:	080025f1 	.word	0x080025f1
 80025b8:	0800266d 	.word	0x0800266d
 80025bc:	0800266d 	.word	0x0800266d
 80025c0:	0800266d 	.word	0x0800266d
 80025c4:	0800266d 	.word	0x0800266d
 80025c8:	0800266d 	.word	0x0800266d
 80025cc:	0800266d 	.word	0x0800266d
 80025d0:	0800266d 	.word	0x0800266d
 80025d4:	0800263d 	.word	0x0800263d
 80025d8:	0800266d 	.word	0x0800266d
 80025dc:	0800266d 	.word	0x0800266d
 80025e0:	0800266d 	.word	0x0800266d
 80025e4:	0800266d 	.word	0x0800266d
 80025e8:	0800266d 	.word	0x0800266d
 80025ec:	0800265d 	.word	0x0800265d
      case 'l' :
        flags |= FLAGS_LONG;
 80025f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025f6:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	3301      	adds	r3, #1
 80025fc:	603b      	str	r3, [r7, #0]
        if (*format == 'l') {
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	781b      	ldrb	r3, [r3, #0]
 8002602:	2b6c      	cmp	r3, #108	; 0x6c
 8002604:	d134      	bne.n	8002670 <_vsnprintf+0x298>
          flags |= FLAGS_LONG_LONG;
 8002606:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002608:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800260c:	657b      	str	r3, [r7, #84]	; 0x54
          format++;
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	3301      	adds	r3, #1
 8002612:	603b      	str	r3, [r7, #0]
        }
        break;
 8002614:	e02c      	b.n	8002670 <_vsnprintf+0x298>
      case 'h' :
        flags |= FLAGS_SHORT;
 8002616:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002618:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800261c:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	3301      	adds	r3, #1
 8002622:	603b      	str	r3, [r7, #0]
        if (*format == 'h') {
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	781b      	ldrb	r3, [r3, #0]
 8002628:	2b68      	cmp	r3, #104	; 0x68
 800262a:	d125      	bne.n	8002678 <_vsnprintf+0x2a0>
          flags |= FLAGS_CHAR;
 800262c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800262e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002632:	657b      	str	r3, [r7, #84]	; 0x54
          format++;
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	3301      	adds	r3, #1
 8002638:	603b      	str	r3, [r7, #0]
        }
        break;
 800263a:	e01d      	b.n	8002678 <_vsnprintf+0x2a0>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 800263c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800263e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002642:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	3301      	adds	r3, #1
 8002648:	603b      	str	r3, [r7, #0]
        break;
 800264a:	e016      	b.n	800267a <_vsnprintf+0x2a2>
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 800264c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800264e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002652:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	3301      	adds	r3, #1
 8002658:	603b      	str	r3, [r7, #0]
        break;
 800265a:	e00e      	b.n	800267a <_vsnprintf+0x2a2>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 800265c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800265e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002662:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	3301      	adds	r3, #1
 8002668:	603b      	str	r3, [r7, #0]
        break;
 800266a:	e006      	b.n	800267a <_vsnprintf+0x2a2>
      default :
        break;
 800266c:	bf00      	nop
 800266e:	e004      	b.n	800267a <_vsnprintf+0x2a2>
        break;
 8002670:	bf00      	nop
 8002672:	e002      	b.n	800267a <_vsnprintf+0x2a2>
 8002674:	08001503 	.word	0x08001503
        break;
 8002678:	bf00      	nop
    }

    // evaluate specifier
    switch (*format) {
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	781b      	ldrb	r3, [r3, #0]
 800267e:	3b25      	subs	r3, #37	; 0x25
 8002680:	2b53      	cmp	r3, #83	; 0x53
 8002682:	f200 833d 	bhi.w	8002d00 <_vsnprintf+0x928>
 8002686:	a201      	add	r2, pc, #4	; (adr r2, 800268c <_vsnprintf+0x2b4>)
 8002688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800268c:	08002ce9 	.word	0x08002ce9
 8002690:	08002d01 	.word	0x08002d01
 8002694:	08002d01 	.word	0x08002d01
 8002698:	08002d01 	.word	0x08002d01
 800269c:	08002d01 	.word	0x08002d01
 80026a0:	08002d01 	.word	0x08002d01
 80026a4:	08002d01 	.word	0x08002d01
 80026a8:	08002d01 	.word	0x08002d01
 80026ac:	08002d01 	.word	0x08002d01
 80026b0:	08002d01 	.word	0x08002d01
 80026b4:	08002d01 	.word	0x08002d01
 80026b8:	08002d01 	.word	0x08002d01
 80026bc:	08002d01 	.word	0x08002d01
 80026c0:	08002d01 	.word	0x08002d01
 80026c4:	08002d01 	.word	0x08002d01
 80026c8:	08002d01 	.word	0x08002d01
 80026cc:	08002d01 	.word	0x08002d01
 80026d0:	08002d01 	.word	0x08002d01
 80026d4:	08002d01 	.word	0x08002d01
 80026d8:	08002d01 	.word	0x08002d01
 80026dc:	08002d01 	.word	0x08002d01
 80026e0:	08002d01 	.word	0x08002d01
 80026e4:	08002d01 	.word	0x08002d01
 80026e8:	08002d01 	.word	0x08002d01
 80026ec:	08002d01 	.word	0x08002d01
 80026f0:	08002d01 	.word	0x08002d01
 80026f4:	08002d01 	.word	0x08002d01
 80026f8:	08002d01 	.word	0x08002d01
 80026fc:	08002d01 	.word	0x08002d01
 8002700:	08002d01 	.word	0x08002d01
 8002704:	08002d01 	.word	0x08002d01
 8002708:	08002d01 	.word	0x08002d01
 800270c:	08002ab7 	.word	0x08002ab7
 8002710:	08002a6b 	.word	0x08002a6b
 8002714:	08002ab7 	.word	0x08002ab7
 8002718:	08002d01 	.word	0x08002d01
 800271c:	08002d01 	.word	0x08002d01
 8002720:	08002d01 	.word	0x08002d01
 8002724:	08002d01 	.word	0x08002d01
 8002728:	08002d01 	.word	0x08002d01
 800272c:	08002d01 	.word	0x08002d01
 8002730:	08002d01 	.word	0x08002d01
 8002734:	08002d01 	.word	0x08002d01
 8002738:	08002d01 	.word	0x08002d01
 800273c:	08002d01 	.word	0x08002d01
 8002740:	08002d01 	.word	0x08002d01
 8002744:	08002d01 	.word	0x08002d01
 8002748:	08002d01 	.word	0x08002d01
 800274c:	08002d01 	.word	0x08002d01
 8002750:	08002d01 	.word	0x08002d01
 8002754:	08002d01 	.word	0x08002d01
 8002758:	080027dd 	.word	0x080027dd
 800275c:	08002d01 	.word	0x08002d01
 8002760:	08002d01 	.word	0x08002d01
 8002764:	08002d01 	.word	0x08002d01
 8002768:	08002d01 	.word	0x08002d01
 800276c:	08002d01 	.word	0x08002d01
 8002770:	08002d01 	.word	0x08002d01
 8002774:	08002d01 	.word	0x08002d01
 8002778:	08002d01 	.word	0x08002d01
 800277c:	08002d01 	.word	0x08002d01
 8002780:	080027dd 	.word	0x080027dd
 8002784:	08002b23 	.word	0x08002b23
 8002788:	080027dd 	.word	0x080027dd
 800278c:	08002ab7 	.word	0x08002ab7
 8002790:	08002a6b 	.word	0x08002a6b
 8002794:	08002ab7 	.word	0x08002ab7
 8002798:	08002d01 	.word	0x08002d01
 800279c:	080027dd 	.word	0x080027dd
 80027a0:	08002d01 	.word	0x08002d01
 80027a4:	08002d01 	.word	0x08002d01
 80027a8:	08002d01 	.word	0x08002d01
 80027ac:	08002d01 	.word	0x08002d01
 80027b0:	08002d01 	.word	0x08002d01
 80027b4:	080027dd 	.word	0x080027dd
 80027b8:	08002c5b 	.word	0x08002c5b
 80027bc:	08002d01 	.word	0x08002d01
 80027c0:	08002d01 	.word	0x08002d01
 80027c4:	08002b97 	.word	0x08002b97
 80027c8:	08002d01 	.word	0x08002d01
 80027cc:	080027dd 	.word	0x080027dd
 80027d0:	08002d01 	.word	0x08002d01
 80027d4:	08002d01 	.word	0x08002d01
 80027d8:	080027dd 	.word	0x080027dd
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	781b      	ldrb	r3, [r3, #0]
 80027e0:	2b78      	cmp	r3, #120	; 0x78
 80027e2:	d003      	beq.n	80027ec <_vsnprintf+0x414>
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	781b      	ldrb	r3, [r3, #0]
 80027e8:	2b58      	cmp	r3, #88	; 0x58
 80027ea:	d102      	bne.n	80027f2 <_vsnprintf+0x41a>
          base = 16U;
 80027ec:	2310      	movs	r3, #16
 80027ee:	643b      	str	r3, [r7, #64]	; 0x40
 80027f0:	e013      	b.n	800281a <_vsnprintf+0x442>
        }
        else if (*format == 'o') {
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	781b      	ldrb	r3, [r3, #0]
 80027f6:	2b6f      	cmp	r3, #111	; 0x6f
 80027f8:	d102      	bne.n	8002800 <_vsnprintf+0x428>
          base =  8U;
 80027fa:	2308      	movs	r3, #8
 80027fc:	643b      	str	r3, [r7, #64]	; 0x40
 80027fe:	e00c      	b.n	800281a <_vsnprintf+0x442>
        }
        else if (*format == 'b') {
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	781b      	ldrb	r3, [r3, #0]
 8002804:	2b62      	cmp	r3, #98	; 0x62
 8002806:	d102      	bne.n	800280e <_vsnprintf+0x436>
          base =  2U;
 8002808:	2302      	movs	r3, #2
 800280a:	643b      	str	r3, [r7, #64]	; 0x40
 800280c:	e005      	b.n	800281a <_vsnprintf+0x442>
        }
        else {
          base = 10U;
 800280e:	230a      	movs	r3, #10
 8002810:	643b      	str	r3, [r7, #64]	; 0x40
          flags &= ~FLAGS_HASH;   // no hash for dec format
 8002812:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002814:	f023 0310 	bic.w	r3, r3, #16
 8002818:	657b      	str	r3, [r7, #84]	; 0x54
        }
        // uppercase
        if (*format == 'X') {
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	781b      	ldrb	r3, [r3, #0]
 800281e:	2b58      	cmp	r3, #88	; 0x58
 8002820:	d103      	bne.n	800282a <_vsnprintf+0x452>
          flags |= FLAGS_UPPERCASE;
 8002822:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002824:	f043 0320 	orr.w	r3, r3, #32
 8002828:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	781b      	ldrb	r3, [r3, #0]
 800282e:	2b69      	cmp	r3, #105	; 0x69
 8002830:	d007      	beq.n	8002842 <_vsnprintf+0x46a>
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	781b      	ldrb	r3, [r3, #0]
 8002836:	2b64      	cmp	r3, #100	; 0x64
 8002838:	d003      	beq.n	8002842 <_vsnprintf+0x46a>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 800283a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800283c:	f023 030c 	bic.w	r3, r3, #12
 8002840:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
 8002842:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002844:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002848:	2b00      	cmp	r3, #0
 800284a:	d003      	beq.n	8002854 <_vsnprintf+0x47c>
          flags &= ~FLAGS_ZEROPAD;
 800284c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800284e:	f023 0301 	bic.w	r3, r3, #1
 8002852:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	781b      	ldrb	r3, [r3, #0]
 8002858:	2b69      	cmp	r3, #105	; 0x69
 800285a:	d004      	beq.n	8002866 <_vsnprintf+0x48e>
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	781b      	ldrb	r3, [r3, #0]
 8002860:	2b64      	cmp	r3, #100	; 0x64
 8002862:	f040 808e 	bne.w	8002982 <_vsnprintf+0x5aa>
          // signed
          if (flags & FLAGS_LONG_LONG) {
 8002866:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002868:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800286c:	2b00      	cmp	r3, #0
 800286e:	d02f      	beq.n	80028d0 <_vsnprintf+0x4f8>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
 8002870:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002872:	3307      	adds	r3, #7
 8002874:	f023 0307 	bic.w	r3, r3, #7
 8002878:	f103 0208 	add.w	r2, r3, #8
 800287c:	66ba      	str	r2, [r7, #104]	; 0x68
 800287e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002882:	e9c7 2304 	strd	r2, r3, [r7, #16]
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8002886:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800288a:	2a00      	cmp	r2, #0
 800288c:	f173 0100 	sbcs.w	r1, r3, #0
 8002890:	da02      	bge.n	8002898 <_vsnprintf+0x4c0>
 8002892:	4252      	negs	r2, r2
 8002894:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8002898:	4610      	mov	r0, r2
 800289a:	4619      	mov	r1, r3
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	0fdb      	lsrs	r3, r3, #31
 80028a0:	b2dc      	uxtb	r4, r3
 80028a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80028a4:	461a      	mov	r2, r3
 80028a6:	f04f 0300 	mov.w	r3, #0
 80028aa:	6d7d      	ldr	r5, [r7, #84]	; 0x54
 80028ac:	9508      	str	r5, [sp, #32]
 80028ae:	6d3d      	ldr	r5, [r7, #80]	; 0x50
 80028b0:	9507      	str	r5, [sp, #28]
 80028b2:	6cfd      	ldr	r5, [r7, #76]	; 0x4c
 80028b4:	9506      	str	r5, [sp, #24]
 80028b6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80028ba:	9402      	str	r4, [sp, #8]
 80028bc:	e9cd 0100 	strd	r0, r1, [sp]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80028c4:	68b9      	ldr	r1, [r7, #8]
 80028c6:	68f8      	ldr	r0, [r7, #12]
 80028c8:	f7ff f827 	bl	800191a <_ntoa_long_long>
 80028cc:	6478      	str	r0, [r7, #68]	; 0x44
          if (flags & FLAGS_LONG_LONG) {
 80028ce:	e0c8      	b.n	8002a62 <_vsnprintf+0x68a>
#endif
          }
          else if (flags & FLAGS_LONG) {
 80028d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d01e      	beq.n	8002918 <_vsnprintf+0x540>
            const long value = va_arg(va, long);
 80028da:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80028dc:	1d1a      	adds	r2, r3, #4
 80028de:	66ba      	str	r2, [r7, #104]	; 0x68
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	61fb      	str	r3, [r7, #28]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 80028e4:	69fb      	ldr	r3, [r7, #28]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	bfb8      	it	lt
 80028ea:	425b      	neglt	r3, r3
 80028ec:	4619      	mov	r1, r3
 80028ee:	69fb      	ldr	r3, [r7, #28]
 80028f0:	0fdb      	lsrs	r3, r3, #31
 80028f2:	b2db      	uxtb	r3, r3
 80028f4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80028f6:	9205      	str	r2, [sp, #20]
 80028f8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80028fa:	9204      	str	r2, [sp, #16]
 80028fc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80028fe:	9203      	str	r2, [sp, #12]
 8002900:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002902:	9202      	str	r2, [sp, #8]
 8002904:	9301      	str	r3, [sp, #4]
 8002906:	9100      	str	r1, [sp, #0]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800290c:	68b9      	ldr	r1, [r7, #8]
 800290e:	68f8      	ldr	r0, [r7, #12]
 8002910:	f7fe ff9c 	bl	800184c <_ntoa_long>
 8002914:	6478      	str	r0, [r7, #68]	; 0x44
          if (flags & FLAGS_LONG_LONG) {
 8002916:	e0a4      	b.n	8002a62 <_vsnprintf+0x68a>
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 8002918:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800291a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800291e:	2b00      	cmp	r3, #0
 8002920:	d005      	beq.n	800292e <_vsnprintf+0x556>
 8002922:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002924:	1d1a      	adds	r2, r3, #4
 8002926:	66ba      	str	r2, [r7, #104]	; 0x68
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	b2db      	uxtb	r3, r3
 800292c:	e00e      	b.n	800294c <_vsnprintf+0x574>
 800292e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002930:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002934:	2b00      	cmp	r3, #0
 8002936:	d005      	beq.n	8002944 <_vsnprintf+0x56c>
 8002938:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800293a:	1d1a      	adds	r2, r3, #4
 800293c:	66ba      	str	r2, [r7, #104]	; 0x68
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	b21b      	sxth	r3, r3
 8002942:	e003      	b.n	800294c <_vsnprintf+0x574>
 8002944:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002946:	1d1a      	adds	r2, r3, #4
 8002948:	66ba      	str	r2, [r7, #104]	; 0x68
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	623b      	str	r3, [r7, #32]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 800294e:	6a3b      	ldr	r3, [r7, #32]
 8002950:	2b00      	cmp	r3, #0
 8002952:	bfb8      	it	lt
 8002954:	425b      	neglt	r3, r3
 8002956:	4619      	mov	r1, r3
 8002958:	6a3b      	ldr	r3, [r7, #32]
 800295a:	0fdb      	lsrs	r3, r3, #31
 800295c:	b2db      	uxtb	r3, r3
 800295e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002960:	9205      	str	r2, [sp, #20]
 8002962:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002964:	9204      	str	r2, [sp, #16]
 8002966:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002968:	9203      	str	r2, [sp, #12]
 800296a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800296c:	9202      	str	r2, [sp, #8]
 800296e:	9301      	str	r3, [sp, #4]
 8002970:	9100      	str	r1, [sp, #0]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002976:	68b9      	ldr	r1, [r7, #8]
 8002978:	68f8      	ldr	r0, [r7, #12]
 800297a:	f7fe ff67 	bl	800184c <_ntoa_long>
 800297e:	6478      	str	r0, [r7, #68]	; 0x44
          if (flags & FLAGS_LONG_LONG) {
 8002980:	e06f      	b.n	8002a62 <_vsnprintf+0x68a>
          }
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
 8002982:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002984:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002988:	2b00      	cmp	r3, #0
 800298a:	d020      	beq.n	80029ce <_vsnprintf+0x5f6>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 800298c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800298e:	3307      	adds	r3, #7
 8002990:	f023 0307 	bic.w	r3, r3, #7
 8002994:	f103 0208 	add.w	r2, r3, #8
 8002998:	66ba      	str	r2, [r7, #104]	; 0x68
 800299a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800299e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80029a0:	4608      	mov	r0, r1
 80029a2:	f04f 0100 	mov.w	r1, #0
 80029a6:	6d7c      	ldr	r4, [r7, #84]	; 0x54
 80029a8:	9408      	str	r4, [sp, #32]
 80029aa:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 80029ac:	9407      	str	r4, [sp, #28]
 80029ae:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 80029b0:	9406      	str	r4, [sp, #24]
 80029b2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80029b6:	2100      	movs	r1, #0
 80029b8:	9102      	str	r1, [sp, #8]
 80029ba:	e9cd 2300 	strd	r2, r3, [sp]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80029c2:	68b9      	ldr	r1, [r7, #8]
 80029c4:	68f8      	ldr	r0, [r7, #12]
 80029c6:	f7fe ffa8 	bl	800191a <_ntoa_long_long>
 80029ca:	6478      	str	r0, [r7, #68]	; 0x44
 80029cc:	e049      	b.n	8002a62 <_vsnprintf+0x68a>
#endif
          }
          else if (flags & FLAGS_LONG) {
 80029ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d016      	beq.n	8002a06 <_vsnprintf+0x62e>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 80029d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80029da:	1d1a      	adds	r2, r3, #4
 80029dc:	66ba      	str	r2, [r7, #104]	; 0x68
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80029e2:	9205      	str	r2, [sp, #20]
 80029e4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80029e6:	9204      	str	r2, [sp, #16]
 80029e8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80029ea:	9203      	str	r2, [sp, #12]
 80029ec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80029ee:	9202      	str	r2, [sp, #8]
 80029f0:	2200      	movs	r2, #0
 80029f2:	9201      	str	r2, [sp, #4]
 80029f4:	9300      	str	r3, [sp, #0]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80029fa:	68b9      	ldr	r1, [r7, #8]
 80029fc:	68f8      	ldr	r0, [r7, #12]
 80029fe:	f7fe ff25 	bl	800184c <_ntoa_long>
 8002a02:	6478      	str	r0, [r7, #68]	; 0x44
 8002a04:	e02d      	b.n	8002a62 <_vsnprintf+0x68a>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 8002a06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d005      	beq.n	8002a1c <_vsnprintf+0x644>
 8002a10:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a12:	1d1a      	adds	r2, r3, #4
 8002a14:	66ba      	str	r2, [r7, #104]	; 0x68
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	e00e      	b.n	8002a3a <_vsnprintf+0x662>
 8002a1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d005      	beq.n	8002a32 <_vsnprintf+0x65a>
 8002a26:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a28:	1d1a      	adds	r2, r3, #4
 8002a2a:	66ba      	str	r2, [r7, #104]	; 0x68
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	b29b      	uxth	r3, r3
 8002a30:	e003      	b.n	8002a3a <_vsnprintf+0x662>
 8002a32:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a34:	1d1a      	adds	r2, r3, #4
 8002a36:	66ba      	str	r2, [r7, #104]	; 0x68
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	627b      	str	r3, [r7, #36]	; 0x24
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 8002a3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a3e:	9305      	str	r3, [sp, #20]
 8002a40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a42:	9304      	str	r3, [sp, #16]
 8002a44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a46:	9303      	str	r3, [sp, #12]
 8002a48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a4a:	9302      	str	r3, [sp, #8]
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	9301      	str	r3, [sp, #4]
 8002a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a52:	9300      	str	r3, [sp, #0]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002a58:	68b9      	ldr	r1, [r7, #8]
 8002a5a:	68f8      	ldr	r0, [r7, #12]
 8002a5c:	f7fe fef6 	bl	800184c <_ntoa_long>
 8002a60:	6478      	str	r0, [r7, #68]	; 0x44
          }
        }
        format++;
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	3301      	adds	r3, #1
 8002a66:	603b      	str	r3, [r7, #0]
        break;
 8002a68:	e157      	b.n	8002d1a <_vsnprintf+0x942>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	781b      	ldrb	r3, [r3, #0]
 8002a6e:	2b46      	cmp	r3, #70	; 0x46
 8002a70:	d103      	bne.n	8002a7a <_vsnprintf+0x6a2>
 8002a72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a74:	f043 0320 	orr.w	r3, r3, #32
 8002a78:	657b      	str	r3, [r7, #84]	; 0x54
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 8002a7a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a7c:	3307      	adds	r3, #7
 8002a7e:	f023 0307 	bic.w	r3, r3, #7
 8002a82:	f103 0208 	add.w	r2, r3, #8
 8002a86:	66ba      	str	r2, [r7, #104]	; 0x68
 8002a88:	ed93 7b00 	vldr	d7, [r3]
 8002a8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a8e:	9302      	str	r3, [sp, #8]
 8002a90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a92:	9301      	str	r3, [sp, #4]
 8002a94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a96:	9300      	str	r3, [sp, #0]
 8002a98:	eeb0 0a47 	vmov.f32	s0, s14
 8002a9c:	eef0 0a67 	vmov.f32	s1, s15
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002aa4:	68b9      	ldr	r1, [r7, #8]
 8002aa6:	68f8      	ldr	r0, [r7, #12]
 8002aa8:	f7fe ffa6 	bl	80019f8 <_ftoa>
 8002aac:	6478      	str	r0, [r7, #68]	; 0x44
        format++;
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	3301      	adds	r3, #1
 8002ab2:	603b      	str	r3, [r7, #0]
        break;
 8002ab4:	e131      	b.n	8002d1a <_vsnprintf+0x942>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
      case 'e':
      case 'E':
      case 'g':
      case 'G':
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	781b      	ldrb	r3, [r3, #0]
 8002aba:	2b67      	cmp	r3, #103	; 0x67
 8002abc:	d003      	beq.n	8002ac6 <_vsnprintf+0x6ee>
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	781b      	ldrb	r3, [r3, #0]
 8002ac2:	2b47      	cmp	r3, #71	; 0x47
 8002ac4:	d103      	bne.n	8002ace <_vsnprintf+0x6f6>
 8002ac6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ac8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002acc:	657b      	str	r3, [r7, #84]	; 0x54
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	781b      	ldrb	r3, [r3, #0]
 8002ad2:	2b45      	cmp	r3, #69	; 0x45
 8002ad4:	d003      	beq.n	8002ade <_vsnprintf+0x706>
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	781b      	ldrb	r3, [r3, #0]
 8002ada:	2b47      	cmp	r3, #71	; 0x47
 8002adc:	d103      	bne.n	8002ae6 <_vsnprintf+0x70e>
 8002ade:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ae0:	f043 0320 	orr.w	r3, r3, #32
 8002ae4:	657b      	str	r3, [r7, #84]	; 0x54
        idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 8002ae6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ae8:	3307      	adds	r3, #7
 8002aea:	f023 0307 	bic.w	r3, r3, #7
 8002aee:	f103 0208 	add.w	r2, r3, #8
 8002af2:	66ba      	str	r2, [r7, #104]	; 0x68
 8002af4:	ed93 7b00 	vldr	d7, [r3]
 8002af8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002afa:	9302      	str	r3, [sp, #8]
 8002afc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002afe:	9301      	str	r3, [sp, #4]
 8002b00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b02:	9300      	str	r3, [sp, #0]
 8002b04:	eeb0 0a47 	vmov.f32	s0, s14
 8002b08:	eef0 0a67 	vmov.f32	s1, s15
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002b10:	68b9      	ldr	r1, [r7, #8]
 8002b12:	68f8      	ldr	r0, [r7, #12]
 8002b14:	f7ff f9d0 	bl	8001eb8 <_etoa>
 8002b18:	6478      	str	r0, [r7, #68]	; 0x44
        format++;
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	3301      	adds	r3, #1
 8002b1e:	603b      	str	r3, [r7, #0]
        break;
 8002b20:	e0fb      	b.n	8002d1a <_vsnprintf+0x942>
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
 8002b22:	2301      	movs	r3, #1
 8002b24:	63fb      	str	r3, [r7, #60]	; 0x3c
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
 8002b26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b28:	f003 0302 	and.w	r3, r3, #2
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d10e      	bne.n	8002b4e <_vsnprintf+0x776>
          while (l++ < width) {
 8002b30:	e007      	b.n	8002b42 <_vsnprintf+0x76a>
            out(' ', buffer, idx++, maxlen);
 8002b32:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002b34:	1c53      	adds	r3, r2, #1
 8002b36:	647b      	str	r3, [r7, #68]	; 0x44
 8002b38:	68fc      	ldr	r4, [r7, #12]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	68b9      	ldr	r1, [r7, #8]
 8002b3e:	2020      	movs	r0, #32
 8002b40:	47a0      	blx	r4
          while (l++ < width) {
 8002b42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b44:	1c5a      	adds	r2, r3, #1
 8002b46:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002b48:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002b4a:	429a      	cmp	r2, r3
 8002b4c:	d8f1      	bhi.n	8002b32 <_vsnprintf+0x75a>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 8002b4e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b50:	1d1a      	adds	r2, r3, #4
 8002b52:	66ba      	str	r2, [r7, #104]	; 0x68
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	b2d8      	uxtb	r0, r3
 8002b58:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002b5a:	1c53      	adds	r3, r2, #1
 8002b5c:	647b      	str	r3, [r7, #68]	; 0x44
 8002b5e:	68fc      	ldr	r4, [r7, #12]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	68b9      	ldr	r1, [r7, #8]
 8002b64:	47a0      	blx	r4
        // post padding
        if (flags & FLAGS_LEFT) {
 8002b66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b68:	f003 0302 	and.w	r3, r3, #2
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d00e      	beq.n	8002b8e <_vsnprintf+0x7b6>
          while (l++ < width) {
 8002b70:	e007      	b.n	8002b82 <_vsnprintf+0x7aa>
            out(' ', buffer, idx++, maxlen);
 8002b72:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002b74:	1c53      	adds	r3, r2, #1
 8002b76:	647b      	str	r3, [r7, #68]	; 0x44
 8002b78:	68fc      	ldr	r4, [r7, #12]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	68b9      	ldr	r1, [r7, #8]
 8002b7e:	2020      	movs	r0, #32
 8002b80:	47a0      	blx	r4
          while (l++ < width) {
 8002b82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b84:	1c5a      	adds	r2, r3, #1
 8002b86:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002b88:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002b8a:	429a      	cmp	r2, r3
 8002b8c:	d8f1      	bhi.n	8002b72 <_vsnprintf+0x79a>
          }
        }
        format++;
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	3301      	adds	r3, #1
 8002b92:	603b      	str	r3, [r7, #0]
        break;
 8002b94:	e0c1      	b.n	8002d1a <_vsnprintf+0x942>
      }

      case 's' : {
        const char* p = va_arg(va, char*);
 8002b96:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b98:	1d1a      	adds	r2, r3, #4
 8002b9a:	66ba      	str	r2, [r7, #104]	; 0x68
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	63bb      	str	r3, [r7, #56]	; 0x38
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 8002ba0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d001      	beq.n	8002baa <_vsnprintf+0x7d2>
 8002ba6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ba8:	e001      	b.n	8002bae <_vsnprintf+0x7d6>
 8002baa:	f04f 33ff 	mov.w	r3, #4294967295
 8002bae:	4619      	mov	r1, r3
 8002bb0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002bb2:	f7fe fcc7 	bl	8001544 <_strnlen_s>
 8002bb6:	6378      	str	r0, [r7, #52]	; 0x34
        // pre padding
        if (flags & FLAGS_PRECISION) {
 8002bb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d005      	beq.n	8002bce <_vsnprintf+0x7f6>
          l = (l < precision ? l : precision);
 8002bc2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002bc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	bf28      	it	cs
 8002bca:	4613      	movcs	r3, r2
 8002bcc:	637b      	str	r3, [r7, #52]	; 0x34
        }
        if (!(flags & FLAGS_LEFT)) {
 8002bce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bd0:	f003 0302 	and.w	r3, r3, #2
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d11a      	bne.n	8002c0e <_vsnprintf+0x836>
          while (l++ < width) {
 8002bd8:	e007      	b.n	8002bea <_vsnprintf+0x812>
            out(' ', buffer, idx++, maxlen);
 8002bda:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002bdc:	1c53      	adds	r3, r2, #1
 8002bde:	647b      	str	r3, [r7, #68]	; 0x44
 8002be0:	68fc      	ldr	r4, [r7, #12]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	68b9      	ldr	r1, [r7, #8]
 8002be6:	2020      	movs	r0, #32
 8002be8:	47a0      	blx	r4
          while (l++ < width) {
 8002bea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bec:	1c5a      	adds	r2, r3, #1
 8002bee:	637a      	str	r2, [r7, #52]	; 0x34
 8002bf0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002bf2:	429a      	cmp	r2, r3
 8002bf4:	d8f1      	bhi.n	8002bda <_vsnprintf+0x802>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8002bf6:	e00a      	b.n	8002c0e <_vsnprintf+0x836>
          out(*(p++), buffer, idx++, maxlen);
 8002bf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bfa:	1c5a      	adds	r2, r3, #1
 8002bfc:	63ba      	str	r2, [r7, #56]	; 0x38
 8002bfe:	7818      	ldrb	r0, [r3, #0]
 8002c00:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002c02:	1c53      	adds	r3, r2, #1
 8002c04:	647b      	str	r3, [r7, #68]	; 0x44
 8002c06:	68fc      	ldr	r4, [r7, #12]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	68b9      	ldr	r1, [r7, #8]
 8002c0c:	47a0      	blx	r4
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8002c0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c10:	781b      	ldrb	r3, [r3, #0]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d009      	beq.n	8002c2a <_vsnprintf+0x852>
 8002c16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d0eb      	beq.n	8002bf8 <_vsnprintf+0x820>
 8002c20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c22:	1e5a      	subs	r2, r3, #1
 8002c24:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d1e6      	bne.n	8002bf8 <_vsnprintf+0x820>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
 8002c2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c2c:	f003 0302 	and.w	r3, r3, #2
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d00e      	beq.n	8002c52 <_vsnprintf+0x87a>
          while (l++ < width) {
 8002c34:	e007      	b.n	8002c46 <_vsnprintf+0x86e>
            out(' ', buffer, idx++, maxlen);
 8002c36:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002c38:	1c53      	adds	r3, r2, #1
 8002c3a:	647b      	str	r3, [r7, #68]	; 0x44
 8002c3c:	68fc      	ldr	r4, [r7, #12]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	68b9      	ldr	r1, [r7, #8]
 8002c42:	2020      	movs	r0, #32
 8002c44:	47a0      	blx	r4
          while (l++ < width) {
 8002c46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c48:	1c5a      	adds	r2, r3, #1
 8002c4a:	637a      	str	r2, [r7, #52]	; 0x34
 8002c4c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002c4e:	429a      	cmp	r2, r3
 8002c50:	d8f1      	bhi.n	8002c36 <_vsnprintf+0x85e>
          }
        }
        format++;
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	3301      	adds	r3, #1
 8002c56:	603b      	str	r3, [r7, #0]
        break;
 8002c58:	e05f      	b.n	8002d1a <_vsnprintf+0x942>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
 8002c5a:	2308      	movs	r3, #8
 8002c5c:	653b      	str	r3, [r7, #80]	; 0x50
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 8002c5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c60:	f043 0321 	orr.w	r3, r3, #33	; 0x21
 8002c64:	657b      	str	r3, [r7, #84]	; 0x54
#if defined(PRINTF_SUPPORT_LONG_LONG)
        const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
 8002c66:	2300      	movs	r3, #0
 8002c68:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        if (is_ll) {
 8002c6c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d01e      	beq.n	8002cb2 <_vsnprintf+0x8da>
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
 8002c74:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002c76:	1d1a      	adds	r2, r3, #4
 8002c78:	66ba      	str	r2, [r7, #104]	; 0x68
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	461a      	mov	r2, r3
 8002c7e:	f04f 0300 	mov.w	r3, #0
 8002c82:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002c84:	9108      	str	r1, [sp, #32]
 8002c86:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8002c88:	9107      	str	r1, [sp, #28]
 8002c8a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002c8c:	9106      	str	r1, [sp, #24]
 8002c8e:	f04f 0010 	mov.w	r0, #16
 8002c92:	f04f 0100 	mov.w	r1, #0
 8002c96:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8002c9a:	2100      	movs	r1, #0
 8002c9c:	9102      	str	r1, [sp, #8]
 8002c9e:	e9cd 2300 	strd	r2, r3, [sp]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002ca6:	68b9      	ldr	r1, [r7, #8]
 8002ca8:	68f8      	ldr	r0, [r7, #12]
 8002caa:	f7fe fe36 	bl	800191a <_ntoa_long_long>
 8002cae:	6478      	str	r0, [r7, #68]	; 0x44
 8002cb0:	e016      	b.n	8002ce0 <_vsnprintf+0x908>
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 8002cb2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002cb4:	1d1a      	adds	r2, r3, #4
 8002cb6:	66ba      	str	r2, [r7, #104]	; 0x68
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	461a      	mov	r2, r3
 8002cbc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cbe:	9305      	str	r3, [sp, #20]
 8002cc0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002cc2:	9304      	str	r3, [sp, #16]
 8002cc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cc6:	9303      	str	r3, [sp, #12]
 8002cc8:	2310      	movs	r3, #16
 8002cca:	9302      	str	r3, [sp, #8]
 8002ccc:	2300      	movs	r3, #0
 8002cce:	9301      	str	r3, [sp, #4]
 8002cd0:	9200      	str	r2, [sp, #0]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002cd6:	68b9      	ldr	r1, [r7, #8]
 8002cd8:	68f8      	ldr	r0, [r7, #12]
 8002cda:	f7fe fdb7 	bl	800184c <_ntoa_long>
 8002cde:	6478      	str	r0, [r7, #68]	; 0x44
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	3301      	adds	r3, #1
 8002ce4:	603b      	str	r3, [r7, #0]
        break;
 8002ce6:	e018      	b.n	8002d1a <_vsnprintf+0x942>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
 8002ce8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002cea:	1c53      	adds	r3, r2, #1
 8002cec:	647b      	str	r3, [r7, #68]	; 0x44
 8002cee:	68fc      	ldr	r4, [r7, #12]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	68b9      	ldr	r1, [r7, #8]
 8002cf4:	2025      	movs	r0, #37	; 0x25
 8002cf6:	47a0      	blx	r4
        format++;
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	3301      	adds	r3, #1
 8002cfc:	603b      	str	r3, [r7, #0]
        break;
 8002cfe:	e00c      	b.n	8002d1a <_vsnprintf+0x942>

      default :
        out(*format, buffer, idx++, maxlen);
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	7818      	ldrb	r0, [r3, #0]
 8002d04:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002d06:	1c53      	adds	r3, r2, #1
 8002d08:	647b      	str	r3, [r7, #68]	; 0x44
 8002d0a:	68fc      	ldr	r4, [r7, #12]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	68b9      	ldr	r1, [r7, #8]
 8002d10:	47a0      	blx	r4
        format++;
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	3301      	adds	r3, #1
 8002d16:	603b      	str	r3, [r7, #0]
        break;
 8002d18:	bf00      	nop
  while (*format)
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	781b      	ldrb	r3, [r3, #0]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	f47f ab6b 	bne.w	80023fa <_vsnprintf+0x22>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 8002d24:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	d302      	bcc.n	8002d32 <_vsnprintf+0x95a>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	1e5a      	subs	r2, r3, #1
 8002d30:	e000      	b.n	8002d34 <_vsnprintf+0x95c>
 8002d32:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002d34:	68fc      	ldr	r4, [r7, #12]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	68b9      	ldr	r1, [r7, #8]
 8002d3a:	2000      	movs	r0, #0
 8002d3c:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
 8002d3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	3758      	adds	r7, #88	; 0x58
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bdb0      	pop	{r4, r5, r7, pc}

08002d48 <printf_>:


///////////////////////////////////////////////////////////////////////////////

int printf_(const char* format, ...)
{
 8002d48:	b40f      	push	{r0, r1, r2, r3}
 8002d4a:	b580      	push	{r7, lr}
 8002d4c:	b086      	sub	sp, #24
 8002d4e:	af02      	add	r7, sp, #8
  va_list va;
  va_start(va, format);
 8002d50:	f107 031c 	add.w	r3, r7, #28
 8002d54:	60bb      	str	r3, [r7, #8]
  char buffer[1];
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
 8002d56:	1d39      	adds	r1, r7, #4
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	9300      	str	r3, [sp, #0]
 8002d5c:	69bb      	ldr	r3, [r7, #24]
 8002d5e:	f04f 32ff 	mov.w	r2, #4294967295
 8002d62:	4806      	ldr	r0, [pc, #24]	; (8002d7c <printf_+0x34>)
 8002d64:	f7ff fb38 	bl	80023d8 <_vsnprintf>
 8002d68:	60f8      	str	r0, [r7, #12]
  va_end(va);
  return ret;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	3710      	adds	r7, #16
 8002d70:	46bd      	mov	sp, r7
 8002d72:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002d76:	b004      	add	sp, #16
 8002d78:	4770      	bx	lr
 8002d7a:	bf00      	nop
 8002d7c:	0800151f 	.word	0x0800151f

08002d80 <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
 8002d84:	4b0f      	ldr	r3, [pc, #60]	; (8002dc4 <MX_QUADSPI_Init+0x44>)
 8002d86:	4a10      	ldr	r2, [pc, #64]	; (8002dc8 <MX_QUADSPI_Init+0x48>)
 8002d88:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 8002d8a:	4b0e      	ldr	r3, [pc, #56]	; (8002dc4 <MX_QUADSPI_Init+0x44>)
 8002d8c:	2202      	movs	r2, #2
 8002d8e:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8002d90:	4b0c      	ldr	r3, [pc, #48]	; (8002dc4 <MX_QUADSPI_Init+0x44>)
 8002d92:	2204      	movs	r2, #4
 8002d94:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8002d96:	4b0b      	ldr	r3, [pc, #44]	; (8002dc4 <MX_QUADSPI_Init+0x44>)
 8002d98:	2210      	movs	r2, #16
 8002d9a:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8002d9c:	4b09      	ldr	r3, [pc, #36]	; (8002dc4 <MX_QUADSPI_Init+0x44>)
 8002d9e:	2217      	movs	r2, #23
 8002da0:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8002da2:	4b08      	ldr	r3, [pc, #32]	; (8002dc4 <MX_QUADSPI_Init+0x44>)
 8002da4:	2200      	movs	r2, #0
 8002da6:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8002da8:	4b06      	ldr	r3, [pc, #24]	; (8002dc4 <MX_QUADSPI_Init+0x44>)
 8002daa:	2200      	movs	r2, #0
 8002dac:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8002dae:	4805      	ldr	r0, [pc, #20]	; (8002dc4 <MX_QUADSPI_Init+0x44>)
 8002db0:	f001 fb56 	bl	8004460 <HAL_QSPI_Init>
 8002db4:	4603      	mov	r3, r0
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d001      	beq.n	8002dbe <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8002dba:	f7fe fb9d 	bl	80014f8 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8002dbe:	bf00      	nop
 8002dc0:	bd80      	pop	{r7, pc}
 8002dc2:	bf00      	nop
 8002dc4:	200000d4 	.word	0x200000d4
 8002dc8:	a0001000 	.word	0xa0001000

08002dcc <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b08a      	sub	sp, #40	; 0x28
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dd4:	f107 0314 	add.w	r3, r7, #20
 8002dd8:	2200      	movs	r2, #0
 8002dda:	601a      	str	r2, [r3, #0]
 8002ddc:	605a      	str	r2, [r3, #4]
 8002dde:	609a      	str	r2, [r3, #8]
 8002de0:	60da      	str	r2, [r3, #12]
 8002de2:	611a      	str	r2, [r3, #16]
  if(qspiHandle->Instance==QUADSPI)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a17      	ldr	r2, [pc, #92]	; (8002e48 <HAL_QSPI_MspInit+0x7c>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d128      	bne.n	8002e40 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8002dee:	4b17      	ldr	r3, [pc, #92]	; (8002e4c <HAL_QSPI_MspInit+0x80>)
 8002df0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002df2:	4a16      	ldr	r2, [pc, #88]	; (8002e4c <HAL_QSPI_MspInit+0x80>)
 8002df4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002df8:	6513      	str	r3, [r2, #80]	; 0x50
 8002dfa:	4b14      	ldr	r3, [pc, #80]	; (8002e4c <HAL_QSPI_MspInit+0x80>)
 8002dfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002dfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e02:	613b      	str	r3, [r7, #16]
 8002e04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002e06:	4b11      	ldr	r3, [pc, #68]	; (8002e4c <HAL_QSPI_MspInit+0x80>)
 8002e08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e0a:	4a10      	ldr	r2, [pc, #64]	; (8002e4c <HAL_QSPI_MspInit+0x80>)
 8002e0c:	f043 0310 	orr.w	r3, r3, #16
 8002e10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002e12:	4b0e      	ldr	r3, [pc, #56]	; (8002e4c <HAL_QSPI_MspInit+0x80>)
 8002e14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e16:	f003 0310 	and.w	r3, r3, #16
 8002e1a:	60fb      	str	r3, [r7, #12]
 8002e1c:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8002e1e:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8002e22:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e24:	2302      	movs	r3, #2
 8002e26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e2c:	2303      	movs	r3, #3
 8002e2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002e30:	230a      	movs	r3, #10
 8002e32:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002e34:	f107 0314 	add.w	r3, r7, #20
 8002e38:	4619      	mov	r1, r3
 8002e3a:	4805      	ldr	r0, [pc, #20]	; (8002e50 <HAL_QSPI_MspInit+0x84>)
 8002e3c:	f000 fe38 	bl	8003ab0 <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 8002e40:	bf00      	nop
 8002e42:	3728      	adds	r7, #40	; 0x28
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd80      	pop	{r7, pc}
 8002e48:	a0001000 	.word	0xa0001000
 8002e4c:	40021000 	.word	0x40021000
 8002e50:	48001000 	.word	0x48001000

08002e54 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8002e58:	4b1b      	ldr	r3, [pc, #108]	; (8002ec8 <MX_SPI3_Init+0x74>)
 8002e5a:	4a1c      	ldr	r2, [pc, #112]	; (8002ecc <MX_SPI3_Init+0x78>)
 8002e5c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8002e5e:	4b1a      	ldr	r3, [pc, #104]	; (8002ec8 <MX_SPI3_Init+0x74>)
 8002e60:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002e64:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8002e66:	4b18      	ldr	r3, [pc, #96]	; (8002ec8 <MX_SPI3_Init+0x74>)
 8002e68:	2200      	movs	r2, #0
 8002e6a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8002e6c:	4b16      	ldr	r3, [pc, #88]	; (8002ec8 <MX_SPI3_Init+0x74>)
 8002e6e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002e72:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002e74:	4b14      	ldr	r3, [pc, #80]	; (8002ec8 <MX_SPI3_Init+0x74>)
 8002e76:	2200      	movs	r2, #0
 8002e78:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002e7a:	4b13      	ldr	r3, [pc, #76]	; (8002ec8 <MX_SPI3_Init+0x74>)
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8002e80:	4b11      	ldr	r3, [pc, #68]	; (8002ec8 <MX_SPI3_Init+0x74>)
 8002e82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e86:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002e88:	4b0f      	ldr	r3, [pc, #60]	; (8002ec8 <MX_SPI3_Init+0x74>)
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002e8e:	4b0e      	ldr	r3, [pc, #56]	; (8002ec8 <MX_SPI3_Init+0x74>)
 8002e90:	2200      	movs	r2, #0
 8002e92:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002e94:	4b0c      	ldr	r3, [pc, #48]	; (8002ec8 <MX_SPI3_Init+0x74>)
 8002e96:	2200      	movs	r2, #0
 8002e98:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e9a:	4b0b      	ldr	r3, [pc, #44]	; (8002ec8 <MX_SPI3_Init+0x74>)
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8002ea0:	4b09      	ldr	r3, [pc, #36]	; (8002ec8 <MX_SPI3_Init+0x74>)
 8002ea2:	2207      	movs	r2, #7
 8002ea4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002ea6:	4b08      	ldr	r3, [pc, #32]	; (8002ec8 <MX_SPI3_Init+0x74>)
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002eac:	4b06      	ldr	r3, [pc, #24]	; (8002ec8 <MX_SPI3_Init+0x74>)
 8002eae:	2208      	movs	r2, #8
 8002eb0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002eb2:	4805      	ldr	r0, [pc, #20]	; (8002ec8 <MX_SPI3_Init+0x74>)
 8002eb4:	f002 fe48 	bl	8005b48 <HAL_SPI_Init>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d001      	beq.n	8002ec2 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8002ebe:	f7fe fb1b 	bl	80014f8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8002ec2:	bf00      	nop
 8002ec4:	bd80      	pop	{r7, pc}
 8002ec6:	bf00      	nop
 8002ec8:	20000118 	.word	0x20000118
 8002ecc:	40003c00 	.word	0x40003c00

08002ed0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b08a      	sub	sp, #40	; 0x28
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ed8:	f107 0314 	add.w	r3, r7, #20
 8002edc:	2200      	movs	r2, #0
 8002ede:	601a      	str	r2, [r3, #0]
 8002ee0:	605a      	str	r2, [r3, #4]
 8002ee2:	609a      	str	r2, [r3, #8]
 8002ee4:	60da      	str	r2, [r3, #12]
 8002ee6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a17      	ldr	r2, [pc, #92]	; (8002f4c <HAL_SPI_MspInit+0x7c>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d128      	bne.n	8002f44 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002ef2:	4b17      	ldr	r3, [pc, #92]	; (8002f50 <HAL_SPI_MspInit+0x80>)
 8002ef4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ef6:	4a16      	ldr	r2, [pc, #88]	; (8002f50 <HAL_SPI_MspInit+0x80>)
 8002ef8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002efc:	6593      	str	r3, [r2, #88]	; 0x58
 8002efe:	4b14      	ldr	r3, [pc, #80]	; (8002f50 <HAL_SPI_MspInit+0x80>)
 8002f00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f02:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f06:	613b      	str	r3, [r7, #16]
 8002f08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f0a:	4b11      	ldr	r3, [pc, #68]	; (8002f50 <HAL_SPI_MspInit+0x80>)
 8002f0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f0e:	4a10      	ldr	r2, [pc, #64]	; (8002f50 <HAL_SPI_MspInit+0x80>)
 8002f10:	f043 0304 	orr.w	r3, r3, #4
 8002f14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f16:	4b0e      	ldr	r3, [pc, #56]	; (8002f50 <HAL_SPI_MspInit+0x80>)
 8002f18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f1a:	f003 0304 	and.w	r3, r3, #4
 8002f1e:	60fb      	str	r3, [r7, #12]
 8002f20:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8002f22:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002f26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f28:	2302      	movs	r3, #2
 8002f2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f30:	2303      	movs	r3, #3
 8002f32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002f34:	2306      	movs	r3, #6
 8002f36:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f38:	f107 0314 	add.w	r3, r7, #20
 8002f3c:	4619      	mov	r1, r3
 8002f3e:	4805      	ldr	r0, [pc, #20]	; (8002f54 <HAL_SPI_MspInit+0x84>)
 8002f40:	f000 fdb6 	bl	8003ab0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8002f44:	bf00      	nop
 8002f46:	3728      	adds	r7, #40	; 0x28
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}
 8002f4c:	40003c00 	.word	0x40003c00
 8002f50:	40021000 	.word	0x40021000
 8002f54:	48000800 	.word	0x48000800

08002f58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b083      	sub	sp, #12
 8002f5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f5e:	4b0f      	ldr	r3, [pc, #60]	; (8002f9c <HAL_MspInit+0x44>)
 8002f60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f62:	4a0e      	ldr	r2, [pc, #56]	; (8002f9c <HAL_MspInit+0x44>)
 8002f64:	f043 0301 	orr.w	r3, r3, #1
 8002f68:	6613      	str	r3, [r2, #96]	; 0x60
 8002f6a:	4b0c      	ldr	r3, [pc, #48]	; (8002f9c <HAL_MspInit+0x44>)
 8002f6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f6e:	f003 0301 	and.w	r3, r3, #1
 8002f72:	607b      	str	r3, [r7, #4]
 8002f74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f76:	4b09      	ldr	r3, [pc, #36]	; (8002f9c <HAL_MspInit+0x44>)
 8002f78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f7a:	4a08      	ldr	r2, [pc, #32]	; (8002f9c <HAL_MspInit+0x44>)
 8002f7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f80:	6593      	str	r3, [r2, #88]	; 0x58
 8002f82:	4b06      	ldr	r3, [pc, #24]	; (8002f9c <HAL_MspInit+0x44>)
 8002f84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f8a:	603b      	str	r3, [r7, #0]
 8002f8c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f8e:	bf00      	nop
 8002f90:	370c      	adds	r7, #12
 8002f92:	46bd      	mov	sp, r7
 8002f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f98:	4770      	bx	lr
 8002f9a:	bf00      	nop
 8002f9c:	40021000 	.word	0x40021000

08002fa0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002fa4:	e7fe      	b.n	8002fa4 <NMI_Handler+0x4>

08002fa6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002fa6:	b480      	push	{r7}
 8002fa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002faa:	e7fe      	b.n	8002faa <HardFault_Handler+0x4>

08002fac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002fac:	b480      	push	{r7}
 8002fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002fb0:	e7fe      	b.n	8002fb0 <MemManage_Handler+0x4>

08002fb2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002fb2:	b480      	push	{r7}
 8002fb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002fb6:	e7fe      	b.n	8002fb6 <BusFault_Handler+0x4>

08002fb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002fbc:	e7fe      	b.n	8002fbc <UsageFault_Handler+0x4>

08002fbe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002fbe:	b480      	push	{r7}
 8002fc0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002fc2:	bf00      	nop
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fca:	4770      	bx	lr

08002fcc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002fd0:	bf00      	nop
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd8:	4770      	bx	lr

08002fda <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002fda:	b480      	push	{r7}
 8002fdc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002fde:	bf00      	nop
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe6:	4770      	bx	lr

08002fe8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002fec:	f000 fafe 	bl	80035ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ff0:	bf00      	nop
 8002ff2:	bd80      	pop	{r7, pc}

08002ff4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8002ff8:	2020      	movs	r0, #32
 8002ffa:	f000 ff1b 	bl	8003e34 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8002ffe:	2040      	movs	r0, #64	; 0x40
 8003000:	f000 ff18 	bl	8003e34 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8003004:	2080      	movs	r0, #128	; 0x80
 8003006:	f000 ff15 	bl	8003e34 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 800300a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800300e:	f000 ff11 	bl	8003e34 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003012:	bf00      	nop
 8003014:	bd80      	pop	{r7, pc}

08003016 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003016:	b580      	push	{r7, lr}
 8003018:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 800301a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800301e:	f000 ff09 	bl	8003e34 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8003022:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003026:	f000 ff05 	bl	8003e34 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800302a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800302e:	f000 ff01 	bl	8003e34 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8003032:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003036:	f000 fefd 	bl	8003e34 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 800303a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800303e:	f000 fef9 	bl	8003e34 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003042:	bf00      	nop
 8003044:	bd80      	pop	{r7, pc}
	...

08003048 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003048:	b480      	push	{r7}
 800304a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800304c:	4b06      	ldr	r3, [pc, #24]	; (8003068 <SystemInit+0x20>)
 800304e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003052:	4a05      	ldr	r2, [pc, #20]	; (8003068 <SystemInit+0x20>)
 8003054:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003058:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800305c:	bf00      	nop
 800305e:	46bd      	mov	sp, r7
 8003060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003064:	4770      	bx	lr
 8003066:	bf00      	nop
 8003068:	e000ed00 	.word	0xe000ed00

0800306c <MX_UART4_Init>:
UART_HandleTypeDef huart1;
UART_HandleTypeDef huart3;

/* UART4 init function */
void MX_UART4_Init(void)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8003070:	4b14      	ldr	r3, [pc, #80]	; (80030c4 <MX_UART4_Init+0x58>)
 8003072:	4a15      	ldr	r2, [pc, #84]	; (80030c8 <MX_UART4_Init+0x5c>)
 8003074:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8003076:	4b13      	ldr	r3, [pc, #76]	; (80030c4 <MX_UART4_Init+0x58>)
 8003078:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800307c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800307e:	4b11      	ldr	r3, [pc, #68]	; (80030c4 <MX_UART4_Init+0x58>)
 8003080:	2200      	movs	r2, #0
 8003082:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8003084:	4b0f      	ldr	r3, [pc, #60]	; (80030c4 <MX_UART4_Init+0x58>)
 8003086:	2200      	movs	r2, #0
 8003088:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800308a:	4b0e      	ldr	r3, [pc, #56]	; (80030c4 <MX_UART4_Init+0x58>)
 800308c:	2200      	movs	r2, #0
 800308e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8003090:	4b0c      	ldr	r3, [pc, #48]	; (80030c4 <MX_UART4_Init+0x58>)
 8003092:	220c      	movs	r2, #12
 8003094:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003096:	4b0b      	ldr	r3, [pc, #44]	; (80030c4 <MX_UART4_Init+0x58>)
 8003098:	2200      	movs	r2, #0
 800309a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800309c:	4b09      	ldr	r3, [pc, #36]	; (80030c4 <MX_UART4_Init+0x58>)
 800309e:	2200      	movs	r2, #0
 80030a0:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80030a2:	4b08      	ldr	r3, [pc, #32]	; (80030c4 <MX_UART4_Init+0x58>)
 80030a4:	2200      	movs	r2, #0
 80030a6:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80030a8:	4b06      	ldr	r3, [pc, #24]	; (80030c4 <MX_UART4_Init+0x58>)
 80030aa:	2200      	movs	r2, #0
 80030ac:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80030ae:	4805      	ldr	r0, [pc, #20]	; (80030c4 <MX_UART4_Init+0x58>)
 80030b0:	f002 fded 	bl	8005c8e <HAL_UART_Init>
 80030b4:	4603      	mov	r3, r0
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d001      	beq.n	80030be <MX_UART4_Init+0x52>
  {
    Error_Handler();
 80030ba:	f7fe fa1d 	bl	80014f8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80030be:	bf00      	nop
 80030c0:	bd80      	pop	{r7, pc}
 80030c2:	bf00      	nop
 80030c4:	20000284 	.word	0x20000284
 80030c8:	40004c00 	.word	0x40004c00

080030cc <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80030d0:	4b14      	ldr	r3, [pc, #80]	; (8003124 <MX_USART1_UART_Init+0x58>)
 80030d2:	4a15      	ldr	r2, [pc, #84]	; (8003128 <MX_USART1_UART_Init+0x5c>)
 80030d4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80030d6:	4b13      	ldr	r3, [pc, #76]	; (8003124 <MX_USART1_UART_Init+0x58>)
 80030d8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80030dc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80030de:	4b11      	ldr	r3, [pc, #68]	; (8003124 <MX_USART1_UART_Init+0x58>)
 80030e0:	2200      	movs	r2, #0
 80030e2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80030e4:	4b0f      	ldr	r3, [pc, #60]	; (8003124 <MX_USART1_UART_Init+0x58>)
 80030e6:	2200      	movs	r2, #0
 80030e8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80030ea:	4b0e      	ldr	r3, [pc, #56]	; (8003124 <MX_USART1_UART_Init+0x58>)
 80030ec:	2200      	movs	r2, #0
 80030ee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80030f0:	4b0c      	ldr	r3, [pc, #48]	; (8003124 <MX_USART1_UART_Init+0x58>)
 80030f2:	220c      	movs	r2, #12
 80030f4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80030f6:	4b0b      	ldr	r3, [pc, #44]	; (8003124 <MX_USART1_UART_Init+0x58>)
 80030f8:	2200      	movs	r2, #0
 80030fa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80030fc:	4b09      	ldr	r3, [pc, #36]	; (8003124 <MX_USART1_UART_Init+0x58>)
 80030fe:	2200      	movs	r2, #0
 8003100:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003102:	4b08      	ldr	r3, [pc, #32]	; (8003124 <MX_USART1_UART_Init+0x58>)
 8003104:	2200      	movs	r2, #0
 8003106:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003108:	4b06      	ldr	r3, [pc, #24]	; (8003124 <MX_USART1_UART_Init+0x58>)
 800310a:	2200      	movs	r2, #0
 800310c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800310e:	4805      	ldr	r0, [pc, #20]	; (8003124 <MX_USART1_UART_Init+0x58>)
 8003110:	f002 fdbd 	bl	8005c8e <HAL_UART_Init>
 8003114:	4603      	mov	r3, r0
 8003116:	2b00      	cmp	r3, #0
 8003118:	d001      	beq.n	800311e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800311a:	f7fe f9ed 	bl	80014f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800311e:	bf00      	nop
 8003120:	bd80      	pop	{r7, pc}
 8003122:	bf00      	nop
 8003124:	20000200 	.word	0x20000200
 8003128:	40013800 	.word	0x40013800

0800312c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003130:	4b14      	ldr	r3, [pc, #80]	; (8003184 <MX_USART3_UART_Init+0x58>)
 8003132:	4a15      	ldr	r2, [pc, #84]	; (8003188 <MX_USART3_UART_Init+0x5c>)
 8003134:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8003136:	4b13      	ldr	r3, [pc, #76]	; (8003184 <MX_USART3_UART_Init+0x58>)
 8003138:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800313c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800313e:	4b11      	ldr	r3, [pc, #68]	; (8003184 <MX_USART3_UART_Init+0x58>)
 8003140:	2200      	movs	r2, #0
 8003142:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003144:	4b0f      	ldr	r3, [pc, #60]	; (8003184 <MX_USART3_UART_Init+0x58>)
 8003146:	2200      	movs	r2, #0
 8003148:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800314a:	4b0e      	ldr	r3, [pc, #56]	; (8003184 <MX_USART3_UART_Init+0x58>)
 800314c:	2200      	movs	r2, #0
 800314e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003150:	4b0c      	ldr	r3, [pc, #48]	; (8003184 <MX_USART3_UART_Init+0x58>)
 8003152:	220c      	movs	r2, #12
 8003154:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003156:	4b0b      	ldr	r3, [pc, #44]	; (8003184 <MX_USART3_UART_Init+0x58>)
 8003158:	2200      	movs	r2, #0
 800315a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800315c:	4b09      	ldr	r3, [pc, #36]	; (8003184 <MX_USART3_UART_Init+0x58>)
 800315e:	2200      	movs	r2, #0
 8003160:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003162:	4b08      	ldr	r3, [pc, #32]	; (8003184 <MX_USART3_UART_Init+0x58>)
 8003164:	2200      	movs	r2, #0
 8003166:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003168:	4b06      	ldr	r3, [pc, #24]	; (8003184 <MX_USART3_UART_Init+0x58>)
 800316a:	2200      	movs	r2, #0
 800316c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800316e:	4805      	ldr	r0, [pc, #20]	; (8003184 <MX_USART3_UART_Init+0x58>)
 8003170:	f002 fd8d 	bl	8005c8e <HAL_UART_Init>
 8003174:	4603      	mov	r3, r0
 8003176:	2b00      	cmp	r3, #0
 8003178:	d001      	beq.n	800317e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800317a:	f7fe f9bd 	bl	80014f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800317e:	bf00      	nop
 8003180:	bd80      	pop	{r7, pc}
 8003182:	bf00      	nop
 8003184:	2000017c 	.word	0x2000017c
 8003188:	40004800 	.word	0x40004800

0800318c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b0b0      	sub	sp, #192	; 0xc0
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003194:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003198:	2200      	movs	r2, #0
 800319a:	601a      	str	r2, [r3, #0]
 800319c:	605a      	str	r2, [r3, #4]
 800319e:	609a      	str	r2, [r3, #8]
 80031a0:	60da      	str	r2, [r3, #12]
 80031a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80031a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80031a8:	2288      	movs	r2, #136	; 0x88
 80031aa:	2100      	movs	r1, #0
 80031ac:	4618      	mov	r0, r3
 80031ae:	f003 fd5d 	bl	8006c6c <memset>
  if(uartHandle->Instance==UART4)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a63      	ldr	r2, [pc, #396]	; (8003344 <HAL_UART_MspInit+0x1b8>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d13c      	bne.n	8003236 <HAL_UART_MspInit+0xaa>
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80031bc:	2308      	movs	r3, #8
 80031be:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80031c0:	2300      	movs	r3, #0
 80031c2:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80031c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80031c8:	4618      	mov	r0, r3
 80031ca:	f001 fff1 	bl	80051b0 <HAL_RCCEx_PeriphCLKConfig>
 80031ce:	4603      	mov	r3, r0
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d001      	beq.n	80031d8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80031d4:	f7fe f990 	bl	80014f8 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80031d8:	4b5b      	ldr	r3, [pc, #364]	; (8003348 <HAL_UART_MspInit+0x1bc>)
 80031da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031dc:	4a5a      	ldr	r2, [pc, #360]	; (8003348 <HAL_UART_MspInit+0x1bc>)
 80031de:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80031e2:	6593      	str	r3, [r2, #88]	; 0x58
 80031e4:	4b58      	ldr	r3, [pc, #352]	; (8003348 <HAL_UART_MspInit+0x1bc>)
 80031e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031e8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80031ec:	623b      	str	r3, [r7, #32]
 80031ee:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031f0:	4b55      	ldr	r3, [pc, #340]	; (8003348 <HAL_UART_MspInit+0x1bc>)
 80031f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031f4:	4a54      	ldr	r2, [pc, #336]	; (8003348 <HAL_UART_MspInit+0x1bc>)
 80031f6:	f043 0301 	orr.w	r3, r3, #1
 80031fa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80031fc:	4b52      	ldr	r3, [pc, #328]	; (8003348 <HAL_UART_MspInit+0x1bc>)
 80031fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003200:	f003 0301 	and.w	r3, r3, #1
 8003204:	61fb      	str	r3, [r7, #28]
 8003206:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8003208:	2303      	movs	r3, #3
 800320a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800320e:	2302      	movs	r3, #2
 8003210:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003214:	2300      	movs	r3, #0
 8003216:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800321a:	2303      	movs	r3, #3
 800321c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8003220:	2308      	movs	r3, #8
 8003222:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003226:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800322a:	4619      	mov	r1, r3
 800322c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003230:	f000 fc3e 	bl	8003ab0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8003234:	e081      	b.n	800333a <HAL_UART_MspInit+0x1ae>
  else if(uartHandle->Instance==USART1)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a44      	ldr	r2, [pc, #272]	; (800334c <HAL_UART_MspInit+0x1c0>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d13b      	bne.n	80032b8 <HAL_UART_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003240:	2301      	movs	r3, #1
 8003242:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003244:	2300      	movs	r3, #0
 8003246:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003248:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800324c:	4618      	mov	r0, r3
 800324e:	f001 ffaf 	bl	80051b0 <HAL_RCCEx_PeriphCLKConfig>
 8003252:	4603      	mov	r3, r0
 8003254:	2b00      	cmp	r3, #0
 8003256:	d001      	beq.n	800325c <HAL_UART_MspInit+0xd0>
      Error_Handler();
 8003258:	f7fe f94e 	bl	80014f8 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 800325c:	4b3a      	ldr	r3, [pc, #232]	; (8003348 <HAL_UART_MspInit+0x1bc>)
 800325e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003260:	4a39      	ldr	r2, [pc, #228]	; (8003348 <HAL_UART_MspInit+0x1bc>)
 8003262:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003266:	6613      	str	r3, [r2, #96]	; 0x60
 8003268:	4b37      	ldr	r3, [pc, #220]	; (8003348 <HAL_UART_MspInit+0x1bc>)
 800326a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800326c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003270:	61bb      	str	r3, [r7, #24]
 8003272:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003274:	4b34      	ldr	r3, [pc, #208]	; (8003348 <HAL_UART_MspInit+0x1bc>)
 8003276:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003278:	4a33      	ldr	r2, [pc, #204]	; (8003348 <HAL_UART_MspInit+0x1bc>)
 800327a:	f043 0302 	orr.w	r3, r3, #2
 800327e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003280:	4b31      	ldr	r3, [pc, #196]	; (8003348 <HAL_UART_MspInit+0x1bc>)
 8003282:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003284:	f003 0302 	and.w	r3, r3, #2
 8003288:	617b      	str	r3, [r7, #20]
 800328a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 800328c:	23c0      	movs	r3, #192	; 0xc0
 800328e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003292:	2302      	movs	r3, #2
 8003294:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003298:	2300      	movs	r3, #0
 800329a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800329e:	2303      	movs	r3, #3
 80032a0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80032a4:	2307      	movs	r3, #7
 80032a6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032aa:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80032ae:	4619      	mov	r1, r3
 80032b0:	4827      	ldr	r0, [pc, #156]	; (8003350 <HAL_UART_MspInit+0x1c4>)
 80032b2:	f000 fbfd 	bl	8003ab0 <HAL_GPIO_Init>
}
 80032b6:	e040      	b.n	800333a <HAL_UART_MspInit+0x1ae>
  else if(uartHandle->Instance==USART3)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a25      	ldr	r2, [pc, #148]	; (8003354 <HAL_UART_MspInit+0x1c8>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d13b      	bne.n	800333a <HAL_UART_MspInit+0x1ae>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80032c2:	2304      	movs	r3, #4
 80032c4:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80032c6:	2300      	movs	r3, #0
 80032c8:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80032ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032ce:	4618      	mov	r0, r3
 80032d0:	f001 ff6e 	bl	80051b0 <HAL_RCCEx_PeriphCLKConfig>
 80032d4:	4603      	mov	r3, r0
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d001      	beq.n	80032de <HAL_UART_MspInit+0x152>
      Error_Handler();
 80032da:	f7fe f90d 	bl	80014f8 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80032de:	4b1a      	ldr	r3, [pc, #104]	; (8003348 <HAL_UART_MspInit+0x1bc>)
 80032e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032e2:	4a19      	ldr	r2, [pc, #100]	; (8003348 <HAL_UART_MspInit+0x1bc>)
 80032e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032e8:	6593      	str	r3, [r2, #88]	; 0x58
 80032ea:	4b17      	ldr	r3, [pc, #92]	; (8003348 <HAL_UART_MspInit+0x1bc>)
 80032ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80032f2:	613b      	str	r3, [r7, #16]
 80032f4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80032f6:	4b14      	ldr	r3, [pc, #80]	; (8003348 <HAL_UART_MspInit+0x1bc>)
 80032f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032fa:	4a13      	ldr	r2, [pc, #76]	; (8003348 <HAL_UART_MspInit+0x1bc>)
 80032fc:	f043 0308 	orr.w	r3, r3, #8
 8003300:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003302:	4b11      	ldr	r3, [pc, #68]	; (8003348 <HAL_UART_MspInit+0x1bc>)
 8003304:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003306:	f003 0308 	and.w	r3, r3, #8
 800330a:	60fb      	str	r3, [r7, #12]
 800330c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 800330e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003312:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003316:	2302      	movs	r3, #2
 8003318:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800331c:	2300      	movs	r3, #0
 800331e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003322:	2303      	movs	r3, #3
 8003324:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003328:	2307      	movs	r3, #7
 800332a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800332e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003332:	4619      	mov	r1, r3
 8003334:	4808      	ldr	r0, [pc, #32]	; (8003358 <HAL_UART_MspInit+0x1cc>)
 8003336:	f000 fbbb 	bl	8003ab0 <HAL_GPIO_Init>
}
 800333a:	bf00      	nop
 800333c:	37c0      	adds	r7, #192	; 0xc0
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}
 8003342:	bf00      	nop
 8003344:	40004c00 	.word	0x40004c00
 8003348:	40021000 	.word	0x40021000
 800334c:	40013800 	.word	0x40013800
 8003350:	48000400 	.word	0x48000400
 8003354:	40004800 	.word	0x40004800
 8003358:	48000c00 	.word	0x48000c00

0800335c <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8003360:	4b14      	ldr	r3, [pc, #80]	; (80033b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003362:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8003366:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8003368:	4b12      	ldr	r3, [pc, #72]	; (80033b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800336a:	2206      	movs	r2, #6
 800336c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800336e:	4b11      	ldr	r3, [pc, #68]	; (80033b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003370:	2202      	movs	r2, #2
 8003372:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8003374:	4b0f      	ldr	r3, [pc, #60]	; (80033b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003376:	2202      	movs	r2, #2
 8003378:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800337a:	4b0e      	ldr	r3, [pc, #56]	; (80033b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800337c:	2200      	movs	r2, #0
 800337e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8003380:	4b0c      	ldr	r3, [pc, #48]	; (80033b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003382:	2200      	movs	r2, #0
 8003384:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8003386:	4b0b      	ldr	r3, [pc, #44]	; (80033b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003388:	2200      	movs	r2, #0
 800338a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800338c:	4b09      	ldr	r3, [pc, #36]	; (80033b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800338e:	2200      	movs	r2, #0
 8003390:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8003392:	4b08      	ldr	r3, [pc, #32]	; (80033b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003394:	2200      	movs	r2, #0
 8003396:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8003398:	4b06      	ldr	r3, [pc, #24]	; (80033b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800339a:	2200      	movs	r2, #0
 800339c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800339e:	4805      	ldr	r0, [pc, #20]	; (80033b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80033a0:	f000 fe91 	bl	80040c6 <HAL_PCD_Init>
 80033a4:	4603      	mov	r3, r0
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d001      	beq.n	80033ae <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80033aa:	f7fe f8a5 	bl	80014f8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80033ae:	bf00      	nop
 80033b0:	bd80      	pop	{r7, pc}
 80033b2:	bf00      	nop
 80033b4:	20000308 	.word	0x20000308

080033b8 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b0ac      	sub	sp, #176	; 0xb0
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033c0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80033c4:	2200      	movs	r2, #0
 80033c6:	601a      	str	r2, [r3, #0]
 80033c8:	605a      	str	r2, [r3, #4]
 80033ca:	609a      	str	r2, [r3, #8]
 80033cc:	60da      	str	r2, [r3, #12]
 80033ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80033d0:	f107 0314 	add.w	r3, r7, #20
 80033d4:	2288      	movs	r2, #136	; 0x88
 80033d6:	2100      	movs	r1, #0
 80033d8:	4618      	mov	r0, r3
 80033da:	f003 fc47 	bl	8006c6c <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80033e6:	d17c      	bne.n	80034e2 <HAL_PCD_MspInit+0x12a>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80033e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80033ec:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80033ee:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80033f2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80033f6:	2301      	movs	r3, #1
 80033f8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80033fa:	2301      	movs	r3, #1
 80033fc:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80033fe:	2318      	movs	r3, #24
 8003400:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8003402:	2307      	movs	r3, #7
 8003404:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8003406:	2302      	movs	r3, #2
 8003408:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800340a:	2302      	movs	r3, #2
 800340c:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800340e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003412:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003414:	f107 0314 	add.w	r3, r7, #20
 8003418:	4618      	mov	r0, r3
 800341a:	f001 fec9 	bl	80051b0 <HAL_RCCEx_PeriphCLKConfig>
 800341e:	4603      	mov	r3, r0
 8003420:	2b00      	cmp	r3, #0
 8003422:	d001      	beq.n	8003428 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8003424:	f7fe f868 	bl	80014f8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003428:	4b30      	ldr	r3, [pc, #192]	; (80034ec <HAL_PCD_MspInit+0x134>)
 800342a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800342c:	4a2f      	ldr	r2, [pc, #188]	; (80034ec <HAL_PCD_MspInit+0x134>)
 800342e:	f043 0301 	orr.w	r3, r3, #1
 8003432:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003434:	4b2d      	ldr	r3, [pc, #180]	; (80034ec <HAL_PCD_MspInit+0x134>)
 8003436:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003438:	f003 0301 	and.w	r3, r3, #1
 800343c:	613b      	str	r3, [r7, #16]
 800343e:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8003440:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003444:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003448:	2300      	movs	r3, #0
 800344a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800344e:	2300      	movs	r3, #0
 8003450:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8003454:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003458:	4619      	mov	r1, r3
 800345a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800345e:	f000 fb27 	bl	8003ab0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8003462:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8003466:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800346a:	2302      	movs	r3, #2
 800346c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003470:	2300      	movs	r3, #0
 8003472:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003476:	2303      	movs	r3, #3
 8003478:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800347c:	230a      	movs	r3, #10
 800347e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003482:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003486:	4619      	mov	r1, r3
 8003488:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800348c:	f000 fb10 	bl	8003ab0 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8003490:	4b16      	ldr	r3, [pc, #88]	; (80034ec <HAL_PCD_MspInit+0x134>)
 8003492:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003494:	4a15      	ldr	r2, [pc, #84]	; (80034ec <HAL_PCD_MspInit+0x134>)
 8003496:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800349a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800349c:	4b13      	ldr	r3, [pc, #76]	; (80034ec <HAL_PCD_MspInit+0x134>)
 800349e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034a4:	60fb      	str	r3, [r7, #12]
 80034a6:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034a8:	4b10      	ldr	r3, [pc, #64]	; (80034ec <HAL_PCD_MspInit+0x134>)
 80034aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d114      	bne.n	80034de <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034b4:	4b0d      	ldr	r3, [pc, #52]	; (80034ec <HAL_PCD_MspInit+0x134>)
 80034b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034b8:	4a0c      	ldr	r2, [pc, #48]	; (80034ec <HAL_PCD_MspInit+0x134>)
 80034ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034be:	6593      	str	r3, [r2, #88]	; 0x58
 80034c0:	4b0a      	ldr	r3, [pc, #40]	; (80034ec <HAL_PCD_MspInit+0x134>)
 80034c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034c8:	60bb      	str	r3, [r7, #8]
 80034ca:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 80034cc:	f000 ffb8 	bl	8004440 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 80034d0:	4b06      	ldr	r3, [pc, #24]	; (80034ec <HAL_PCD_MspInit+0x134>)
 80034d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034d4:	4a05      	ldr	r2, [pc, #20]	; (80034ec <HAL_PCD_MspInit+0x134>)
 80034d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034da:	6593      	str	r3, [r2, #88]	; 0x58
    }
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80034dc:	e001      	b.n	80034e2 <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 80034de:	f000 ffaf 	bl	8004440 <HAL_PWREx_EnableVddUSB>
}
 80034e2:	bf00      	nop
 80034e4:	37b0      	adds	r7, #176	; 0xb0
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}
 80034ea:	bf00      	nop
 80034ec:	40021000 	.word	0x40021000

080034f0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80034f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003528 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80034f4:	f7ff fda8 	bl	8003048 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80034f8:	480c      	ldr	r0, [pc, #48]	; (800352c <LoopForever+0x6>)
  ldr r1, =_edata
 80034fa:	490d      	ldr	r1, [pc, #52]	; (8003530 <LoopForever+0xa>)
  ldr r2, =_sidata
 80034fc:	4a0d      	ldr	r2, [pc, #52]	; (8003534 <LoopForever+0xe>)
  movs r3, #0
 80034fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003500:	e002      	b.n	8003508 <LoopCopyDataInit>

08003502 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003502:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003504:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003506:	3304      	adds	r3, #4

08003508 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003508:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800350a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800350c:	d3f9      	bcc.n	8003502 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800350e:	4a0a      	ldr	r2, [pc, #40]	; (8003538 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003510:	4c0a      	ldr	r4, [pc, #40]	; (800353c <LoopForever+0x16>)
  movs r3, #0
 8003512:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003514:	e001      	b.n	800351a <LoopFillZerobss>

08003516 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003516:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003518:	3204      	adds	r2, #4

0800351a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800351a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800351c:	d3fb      	bcc.n	8003516 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800351e:	f003 fb81 	bl	8006c24 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003522:	f7fd ff65 	bl	80013f0 <main>

08003526 <LoopForever>:

LoopForever:
    b LoopForever
 8003526:	e7fe      	b.n	8003526 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003528:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800352c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003530:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8003534:	08006d60 	.word	0x08006d60
  ldr r2, =_sbss
 8003538:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800353c:	20000714 	.word	0x20000714

08003540 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003540:	e7fe      	b.n	8003540 <ADC1_2_IRQHandler>

08003542 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003542:	b580      	push	{r7, lr}
 8003544:	b082      	sub	sp, #8
 8003546:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003548:	2300      	movs	r3, #0
 800354a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800354c:	2003      	movs	r0, #3
 800354e:	f000 f961 	bl	8003814 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003552:	2000      	movs	r0, #0
 8003554:	f000 f80e 	bl	8003574 <HAL_InitTick>
 8003558:	4603      	mov	r3, r0
 800355a:	2b00      	cmp	r3, #0
 800355c:	d002      	beq.n	8003564 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	71fb      	strb	r3, [r7, #7]
 8003562:	e001      	b.n	8003568 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003564:	f7ff fcf8 	bl	8002f58 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003568:	79fb      	ldrb	r3, [r7, #7]
}
 800356a:	4618      	mov	r0, r3
 800356c:	3708      	adds	r7, #8
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}
	...

08003574 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b084      	sub	sp, #16
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800357c:	2300      	movs	r3, #0
 800357e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003580:	4b17      	ldr	r3, [pc, #92]	; (80035e0 <HAL_InitTick+0x6c>)
 8003582:	781b      	ldrb	r3, [r3, #0]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d023      	beq.n	80035d0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003588:	4b16      	ldr	r3, [pc, #88]	; (80035e4 <HAL_InitTick+0x70>)
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	4b14      	ldr	r3, [pc, #80]	; (80035e0 <HAL_InitTick+0x6c>)
 800358e:	781b      	ldrb	r3, [r3, #0]
 8003590:	4619      	mov	r1, r3
 8003592:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003596:	fbb3 f3f1 	udiv	r3, r3, r1
 800359a:	fbb2 f3f3 	udiv	r3, r2, r3
 800359e:	4618      	mov	r0, r3
 80035a0:	f000 f96d 	bl	800387e <HAL_SYSTICK_Config>
 80035a4:	4603      	mov	r3, r0
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d10f      	bne.n	80035ca <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2b0f      	cmp	r3, #15
 80035ae:	d809      	bhi.n	80035c4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80035b0:	2200      	movs	r2, #0
 80035b2:	6879      	ldr	r1, [r7, #4]
 80035b4:	f04f 30ff 	mov.w	r0, #4294967295
 80035b8:	f000 f937 	bl	800382a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80035bc:	4a0a      	ldr	r2, [pc, #40]	; (80035e8 <HAL_InitTick+0x74>)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6013      	str	r3, [r2, #0]
 80035c2:	e007      	b.n	80035d4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	73fb      	strb	r3, [r7, #15]
 80035c8:	e004      	b.n	80035d4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	73fb      	strb	r3, [r7, #15]
 80035ce:	e001      	b.n	80035d4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80035d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	3710      	adds	r7, #16
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}
 80035de:	bf00      	nop
 80035e0:	20000008 	.word	0x20000008
 80035e4:	20000000 	.word	0x20000000
 80035e8:	20000004 	.word	0x20000004

080035ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80035ec:	b480      	push	{r7}
 80035ee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80035f0:	4b06      	ldr	r3, [pc, #24]	; (800360c <HAL_IncTick+0x20>)
 80035f2:	781b      	ldrb	r3, [r3, #0]
 80035f4:	461a      	mov	r2, r3
 80035f6:	4b06      	ldr	r3, [pc, #24]	; (8003610 <HAL_IncTick+0x24>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4413      	add	r3, r2
 80035fc:	4a04      	ldr	r2, [pc, #16]	; (8003610 <HAL_IncTick+0x24>)
 80035fe:	6013      	str	r3, [r2, #0]
}
 8003600:	bf00      	nop
 8003602:	46bd      	mov	sp, r7
 8003604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003608:	4770      	bx	lr
 800360a:	bf00      	nop
 800360c:	20000008 	.word	0x20000008
 8003610:	20000710 	.word	0x20000710

08003614 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003614:	b480      	push	{r7}
 8003616:	af00      	add	r7, sp, #0
  return uwTick;
 8003618:	4b03      	ldr	r3, [pc, #12]	; (8003628 <HAL_GetTick+0x14>)
 800361a:	681b      	ldr	r3, [r3, #0]
}
 800361c:	4618      	mov	r0, r3
 800361e:	46bd      	mov	sp, r7
 8003620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003624:	4770      	bx	lr
 8003626:	bf00      	nop
 8003628:	20000710 	.word	0x20000710

0800362c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b084      	sub	sp, #16
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003634:	f7ff ffee 	bl	8003614 <HAL_GetTick>
 8003638:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003644:	d005      	beq.n	8003652 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003646:	4b0a      	ldr	r3, [pc, #40]	; (8003670 <HAL_Delay+0x44>)
 8003648:	781b      	ldrb	r3, [r3, #0]
 800364a:	461a      	mov	r2, r3
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	4413      	add	r3, r2
 8003650:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003652:	bf00      	nop
 8003654:	f7ff ffde 	bl	8003614 <HAL_GetTick>
 8003658:	4602      	mov	r2, r0
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	1ad3      	subs	r3, r2, r3
 800365e:	68fa      	ldr	r2, [r7, #12]
 8003660:	429a      	cmp	r2, r3
 8003662:	d8f7      	bhi.n	8003654 <HAL_Delay+0x28>
  {
  }
}
 8003664:	bf00      	nop
 8003666:	bf00      	nop
 8003668:	3710      	adds	r7, #16
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}
 800366e:	bf00      	nop
 8003670:	20000008 	.word	0x20000008

08003674 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003674:	b480      	push	{r7}
 8003676:	b085      	sub	sp, #20
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	f003 0307 	and.w	r3, r3, #7
 8003682:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003684:	4b0c      	ldr	r3, [pc, #48]	; (80036b8 <__NVIC_SetPriorityGrouping+0x44>)
 8003686:	68db      	ldr	r3, [r3, #12]
 8003688:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800368a:	68ba      	ldr	r2, [r7, #8]
 800368c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003690:	4013      	ands	r3, r2
 8003692:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800369c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80036a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80036a6:	4a04      	ldr	r2, [pc, #16]	; (80036b8 <__NVIC_SetPriorityGrouping+0x44>)
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	60d3      	str	r3, [r2, #12]
}
 80036ac:	bf00      	nop
 80036ae:	3714      	adds	r7, #20
 80036b0:	46bd      	mov	sp, r7
 80036b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b6:	4770      	bx	lr
 80036b8:	e000ed00 	.word	0xe000ed00

080036bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80036bc:	b480      	push	{r7}
 80036be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80036c0:	4b04      	ldr	r3, [pc, #16]	; (80036d4 <__NVIC_GetPriorityGrouping+0x18>)
 80036c2:	68db      	ldr	r3, [r3, #12]
 80036c4:	0a1b      	lsrs	r3, r3, #8
 80036c6:	f003 0307 	and.w	r3, r3, #7
}
 80036ca:	4618      	mov	r0, r3
 80036cc:	46bd      	mov	sp, r7
 80036ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d2:	4770      	bx	lr
 80036d4:	e000ed00 	.word	0xe000ed00

080036d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036d8:	b480      	push	{r7}
 80036da:	b083      	sub	sp, #12
 80036dc:	af00      	add	r7, sp, #0
 80036de:	4603      	mov	r3, r0
 80036e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	db0b      	blt.n	8003702 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036ea:	79fb      	ldrb	r3, [r7, #7]
 80036ec:	f003 021f 	and.w	r2, r3, #31
 80036f0:	4907      	ldr	r1, [pc, #28]	; (8003710 <__NVIC_EnableIRQ+0x38>)
 80036f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036f6:	095b      	lsrs	r3, r3, #5
 80036f8:	2001      	movs	r0, #1
 80036fa:	fa00 f202 	lsl.w	r2, r0, r2
 80036fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003702:	bf00      	nop
 8003704:	370c      	adds	r7, #12
 8003706:	46bd      	mov	sp, r7
 8003708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370c:	4770      	bx	lr
 800370e:	bf00      	nop
 8003710:	e000e100 	.word	0xe000e100

08003714 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003714:	b480      	push	{r7}
 8003716:	b083      	sub	sp, #12
 8003718:	af00      	add	r7, sp, #0
 800371a:	4603      	mov	r3, r0
 800371c:	6039      	str	r1, [r7, #0]
 800371e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003720:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003724:	2b00      	cmp	r3, #0
 8003726:	db0a      	blt.n	800373e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	b2da      	uxtb	r2, r3
 800372c:	490c      	ldr	r1, [pc, #48]	; (8003760 <__NVIC_SetPriority+0x4c>)
 800372e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003732:	0112      	lsls	r2, r2, #4
 8003734:	b2d2      	uxtb	r2, r2
 8003736:	440b      	add	r3, r1
 8003738:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800373c:	e00a      	b.n	8003754 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	b2da      	uxtb	r2, r3
 8003742:	4908      	ldr	r1, [pc, #32]	; (8003764 <__NVIC_SetPriority+0x50>)
 8003744:	79fb      	ldrb	r3, [r7, #7]
 8003746:	f003 030f 	and.w	r3, r3, #15
 800374a:	3b04      	subs	r3, #4
 800374c:	0112      	lsls	r2, r2, #4
 800374e:	b2d2      	uxtb	r2, r2
 8003750:	440b      	add	r3, r1
 8003752:	761a      	strb	r2, [r3, #24]
}
 8003754:	bf00      	nop
 8003756:	370c      	adds	r7, #12
 8003758:	46bd      	mov	sp, r7
 800375a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375e:	4770      	bx	lr
 8003760:	e000e100 	.word	0xe000e100
 8003764:	e000ed00 	.word	0xe000ed00

08003768 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003768:	b480      	push	{r7}
 800376a:	b089      	sub	sp, #36	; 0x24
 800376c:	af00      	add	r7, sp, #0
 800376e:	60f8      	str	r0, [r7, #12]
 8003770:	60b9      	str	r1, [r7, #8]
 8003772:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	f003 0307 	and.w	r3, r3, #7
 800377a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800377c:	69fb      	ldr	r3, [r7, #28]
 800377e:	f1c3 0307 	rsb	r3, r3, #7
 8003782:	2b04      	cmp	r3, #4
 8003784:	bf28      	it	cs
 8003786:	2304      	movcs	r3, #4
 8003788:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800378a:	69fb      	ldr	r3, [r7, #28]
 800378c:	3304      	adds	r3, #4
 800378e:	2b06      	cmp	r3, #6
 8003790:	d902      	bls.n	8003798 <NVIC_EncodePriority+0x30>
 8003792:	69fb      	ldr	r3, [r7, #28]
 8003794:	3b03      	subs	r3, #3
 8003796:	e000      	b.n	800379a <NVIC_EncodePriority+0x32>
 8003798:	2300      	movs	r3, #0
 800379a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800379c:	f04f 32ff 	mov.w	r2, #4294967295
 80037a0:	69bb      	ldr	r3, [r7, #24]
 80037a2:	fa02 f303 	lsl.w	r3, r2, r3
 80037a6:	43da      	mvns	r2, r3
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	401a      	ands	r2, r3
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80037b0:	f04f 31ff 	mov.w	r1, #4294967295
 80037b4:	697b      	ldr	r3, [r7, #20]
 80037b6:	fa01 f303 	lsl.w	r3, r1, r3
 80037ba:	43d9      	mvns	r1, r3
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037c0:	4313      	orrs	r3, r2
         );
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	3724      	adds	r7, #36	; 0x24
 80037c6:	46bd      	mov	sp, r7
 80037c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037cc:	4770      	bx	lr
	...

080037d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b082      	sub	sp, #8
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	3b01      	subs	r3, #1
 80037dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80037e0:	d301      	bcc.n	80037e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80037e2:	2301      	movs	r3, #1
 80037e4:	e00f      	b.n	8003806 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80037e6:	4a0a      	ldr	r2, [pc, #40]	; (8003810 <SysTick_Config+0x40>)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	3b01      	subs	r3, #1
 80037ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80037ee:	210f      	movs	r1, #15
 80037f0:	f04f 30ff 	mov.w	r0, #4294967295
 80037f4:	f7ff ff8e 	bl	8003714 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80037f8:	4b05      	ldr	r3, [pc, #20]	; (8003810 <SysTick_Config+0x40>)
 80037fa:	2200      	movs	r2, #0
 80037fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80037fe:	4b04      	ldr	r3, [pc, #16]	; (8003810 <SysTick_Config+0x40>)
 8003800:	2207      	movs	r2, #7
 8003802:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003804:	2300      	movs	r3, #0
}
 8003806:	4618      	mov	r0, r3
 8003808:	3708      	adds	r7, #8
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}
 800380e:	bf00      	nop
 8003810:	e000e010 	.word	0xe000e010

08003814 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b082      	sub	sp, #8
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800381c:	6878      	ldr	r0, [r7, #4]
 800381e:	f7ff ff29 	bl	8003674 <__NVIC_SetPriorityGrouping>
}
 8003822:	bf00      	nop
 8003824:	3708      	adds	r7, #8
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}

0800382a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800382a:	b580      	push	{r7, lr}
 800382c:	b086      	sub	sp, #24
 800382e:	af00      	add	r7, sp, #0
 8003830:	4603      	mov	r3, r0
 8003832:	60b9      	str	r1, [r7, #8]
 8003834:	607a      	str	r2, [r7, #4]
 8003836:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003838:	2300      	movs	r3, #0
 800383a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800383c:	f7ff ff3e 	bl	80036bc <__NVIC_GetPriorityGrouping>
 8003840:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003842:	687a      	ldr	r2, [r7, #4]
 8003844:	68b9      	ldr	r1, [r7, #8]
 8003846:	6978      	ldr	r0, [r7, #20]
 8003848:	f7ff ff8e 	bl	8003768 <NVIC_EncodePriority>
 800384c:	4602      	mov	r2, r0
 800384e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003852:	4611      	mov	r1, r2
 8003854:	4618      	mov	r0, r3
 8003856:	f7ff ff5d 	bl	8003714 <__NVIC_SetPriority>
}
 800385a:	bf00      	nop
 800385c:	3718      	adds	r7, #24
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}

08003862 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003862:	b580      	push	{r7, lr}
 8003864:	b082      	sub	sp, #8
 8003866:	af00      	add	r7, sp, #0
 8003868:	4603      	mov	r3, r0
 800386a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800386c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003870:	4618      	mov	r0, r3
 8003872:	f7ff ff31 	bl	80036d8 <__NVIC_EnableIRQ>
}
 8003876:	bf00      	nop
 8003878:	3708      	adds	r7, #8
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}

0800387e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800387e:	b580      	push	{r7, lr}
 8003880:	b082      	sub	sp, #8
 8003882:	af00      	add	r7, sp, #0
 8003884:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003886:	6878      	ldr	r0, [r7, #4]
 8003888:	f7ff ffa2 	bl	80037d0 <SysTick_Config>
 800388c:	4603      	mov	r3, r0
}
 800388e:	4618      	mov	r0, r3
 8003890:	3708      	adds	r7, #8
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}
	...

08003898 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b082      	sub	sp, #8
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d101      	bne.n	80038aa <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	e0ac      	b.n	8003a04 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4618      	mov	r0, r3
 80038b0:	f000 f8b2 	bl	8003a18 <DFSDM_GetChannelFromInstance>
 80038b4:	4603      	mov	r3, r0
 80038b6:	4a55      	ldr	r2, [pc, #340]	; (8003a0c <HAL_DFSDM_ChannelInit+0x174>)
 80038b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d001      	beq.n	80038c4 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 80038c0:	2301      	movs	r3, #1
 80038c2:	e09f      	b.n	8003a04 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 80038c4:	6878      	ldr	r0, [r7, #4]
 80038c6:	f7fd fad1 	bl	8000e6c <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 80038ca:	4b51      	ldr	r3, [pc, #324]	; (8003a10 <HAL_DFSDM_ChannelInit+0x178>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	3301      	adds	r3, #1
 80038d0:	4a4f      	ldr	r2, [pc, #316]	; (8003a10 <HAL_DFSDM_ChannelInit+0x178>)
 80038d2:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 80038d4:	4b4e      	ldr	r3, [pc, #312]	; (8003a10 <HAL_DFSDM_ChannelInit+0x178>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	2b01      	cmp	r3, #1
 80038da:	d125      	bne.n	8003928 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 80038dc:	4b4d      	ldr	r3, [pc, #308]	; (8003a14 <HAL_DFSDM_ChannelInit+0x17c>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a4c      	ldr	r2, [pc, #304]	; (8003a14 <HAL_DFSDM_ChannelInit+0x17c>)
 80038e2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80038e6:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 80038e8:	4b4a      	ldr	r3, [pc, #296]	; (8003a14 <HAL_DFSDM_ChannelInit+0x17c>)
 80038ea:	681a      	ldr	r2, [r3, #0]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	4948      	ldr	r1, [pc, #288]	; (8003a14 <HAL_DFSDM_ChannelInit+0x17c>)
 80038f2:	4313      	orrs	r3, r2
 80038f4:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 80038f6:	4b47      	ldr	r3, [pc, #284]	; (8003a14 <HAL_DFSDM_ChannelInit+0x17c>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a46      	ldr	r2, [pc, #280]	; (8003a14 <HAL_DFSDM_ChannelInit+0x17c>)
 80038fc:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8003900:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	791b      	ldrb	r3, [r3, #4]
 8003906:	2b01      	cmp	r3, #1
 8003908:	d108      	bne.n	800391c <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 800390a:	4b42      	ldr	r3, [pc, #264]	; (8003a14 <HAL_DFSDM_ChannelInit+0x17c>)
 800390c:	681a      	ldr	r2, [r3, #0]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	68db      	ldr	r3, [r3, #12]
 8003912:	3b01      	subs	r3, #1
 8003914:	041b      	lsls	r3, r3, #16
 8003916:	493f      	ldr	r1, [pc, #252]	; (8003a14 <HAL_DFSDM_ChannelInit+0x17c>)
 8003918:	4313      	orrs	r3, r2
 800391a:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 800391c:	4b3d      	ldr	r3, [pc, #244]	; (8003a14 <HAL_DFSDM_ChannelInit+0x17c>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a3c      	ldr	r2, [pc, #240]	; (8003a14 <HAL_DFSDM_ChannelInit+0x17c>)
 8003922:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003926:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	681a      	ldr	r2, [r3, #0]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8003936:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	6819      	ldr	r1, [r3, #0]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003946:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800394c:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	430a      	orrs	r2, r1
 8003954:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	681a      	ldr	r2, [r3, #0]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f022 020f 	bic.w	r2, r2, #15
 8003964:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	6819      	ldr	r1, [r3, #0]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8003974:	431a      	orrs	r2, r3
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	430a      	orrs	r2, r1
 800397c:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	689a      	ldr	r2, [r3, #8]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 800398c:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	6899      	ldr	r1, [r3, #8]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800399c:	3b01      	subs	r3, #1
 800399e:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80039a0:	431a      	orrs	r2, r3
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	430a      	orrs	r2, r1
 80039a8:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	685a      	ldr	r2, [r3, #4]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f002 0207 	and.w	r2, r2, #7
 80039b8:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	6859      	ldr	r1, [r3, #4]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039c4:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ca:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80039cc:	431a      	orrs	r2, r3
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	430a      	orrs	r2, r1
 80039d4:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80039e4:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2201      	movs	r2, #1
 80039ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4618      	mov	r0, r3
 80039f4:	f000 f810 	bl	8003a18 <DFSDM_GetChannelFromInstance>
 80039f8:	4602      	mov	r2, r0
 80039fa:	4904      	ldr	r1, [pc, #16]	; (8003a0c <HAL_DFSDM_ChannelInit+0x174>)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8003a02:	2300      	movs	r3, #0
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	3708      	adds	r7, #8
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd80      	pop	{r7, pc}
 8003a0c:	20000030 	.word	0x20000030
 8003a10:	2000002c 	.word	0x2000002c
 8003a14:	40016000 	.word	0x40016000

08003a18 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b085      	sub	sp, #20
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	4a1c      	ldr	r2, [pc, #112]	; (8003a94 <DFSDM_GetChannelFromInstance+0x7c>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d102      	bne.n	8003a2e <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	60fb      	str	r3, [r7, #12]
 8003a2c:	e02b      	b.n	8003a86 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	4a19      	ldr	r2, [pc, #100]	; (8003a98 <DFSDM_GetChannelFromInstance+0x80>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d102      	bne.n	8003a3c <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8003a36:	2301      	movs	r3, #1
 8003a38:	60fb      	str	r3, [r7, #12]
 8003a3a:	e024      	b.n	8003a86 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	4a17      	ldr	r2, [pc, #92]	; (8003a9c <DFSDM_GetChannelFromInstance+0x84>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d102      	bne.n	8003a4a <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8003a44:	2302      	movs	r3, #2
 8003a46:	60fb      	str	r3, [r7, #12]
 8003a48:	e01d      	b.n	8003a86 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	4a14      	ldr	r2, [pc, #80]	; (8003aa0 <DFSDM_GetChannelFromInstance+0x88>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d102      	bne.n	8003a58 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8003a52:	2304      	movs	r3, #4
 8003a54:	60fb      	str	r3, [r7, #12]
 8003a56:	e016      	b.n	8003a86 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	4a12      	ldr	r2, [pc, #72]	; (8003aa4 <DFSDM_GetChannelFromInstance+0x8c>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d102      	bne.n	8003a66 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8003a60:	2305      	movs	r3, #5
 8003a62:	60fb      	str	r3, [r7, #12]
 8003a64:	e00f      	b.n	8003a86 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	4a0f      	ldr	r2, [pc, #60]	; (8003aa8 <DFSDM_GetChannelFromInstance+0x90>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d102      	bne.n	8003a74 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8003a6e:	2306      	movs	r3, #6
 8003a70:	60fb      	str	r3, [r7, #12]
 8003a72:	e008      	b.n	8003a86 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	4a0d      	ldr	r2, [pc, #52]	; (8003aac <DFSDM_GetChannelFromInstance+0x94>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d102      	bne.n	8003a82 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8003a7c:	2307      	movs	r3, #7
 8003a7e:	60fb      	str	r3, [r7, #12]
 8003a80:	e001      	b.n	8003a86 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8003a82:	2303      	movs	r3, #3
 8003a84:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8003a86:	68fb      	ldr	r3, [r7, #12]
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	3714      	adds	r7, #20
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a92:	4770      	bx	lr
 8003a94:	40016000 	.word	0x40016000
 8003a98:	40016020 	.word	0x40016020
 8003a9c:	40016040 	.word	0x40016040
 8003aa0:	40016080 	.word	0x40016080
 8003aa4:	400160a0 	.word	0x400160a0
 8003aa8:	400160c0 	.word	0x400160c0
 8003aac:	400160e0 	.word	0x400160e0

08003ab0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b087      	sub	sp, #28
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
 8003ab8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003aba:	2300      	movs	r3, #0
 8003abc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003abe:	e17f      	b.n	8003dc0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	681a      	ldr	r2, [r3, #0]
 8003ac4:	2101      	movs	r1, #1
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	fa01 f303 	lsl.w	r3, r1, r3
 8003acc:	4013      	ands	r3, r2
 8003ace:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	f000 8171 	beq.w	8003dba <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	f003 0303 	and.w	r3, r3, #3
 8003ae0:	2b01      	cmp	r3, #1
 8003ae2:	d005      	beq.n	8003af0 <HAL_GPIO_Init+0x40>
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	f003 0303 	and.w	r3, r3, #3
 8003aec:	2b02      	cmp	r3, #2
 8003aee:	d130      	bne.n	8003b52 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	005b      	lsls	r3, r3, #1
 8003afa:	2203      	movs	r2, #3
 8003afc:	fa02 f303 	lsl.w	r3, r2, r3
 8003b00:	43db      	mvns	r3, r3
 8003b02:	693a      	ldr	r2, [r7, #16]
 8003b04:	4013      	ands	r3, r2
 8003b06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	68da      	ldr	r2, [r3, #12]
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	005b      	lsls	r3, r3, #1
 8003b10:	fa02 f303 	lsl.w	r3, r2, r3
 8003b14:	693a      	ldr	r2, [r7, #16]
 8003b16:	4313      	orrs	r3, r2
 8003b18:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	693a      	ldr	r2, [r7, #16]
 8003b1e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003b26:	2201      	movs	r2, #1
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b2e:	43db      	mvns	r3, r3
 8003b30:	693a      	ldr	r2, [r7, #16]
 8003b32:	4013      	ands	r3, r2
 8003b34:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	091b      	lsrs	r3, r3, #4
 8003b3c:	f003 0201 	and.w	r2, r3, #1
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	fa02 f303 	lsl.w	r3, r2, r3
 8003b46:	693a      	ldr	r2, [r7, #16]
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	693a      	ldr	r2, [r7, #16]
 8003b50:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	f003 0303 	and.w	r3, r3, #3
 8003b5a:	2b03      	cmp	r3, #3
 8003b5c:	d118      	bne.n	8003b90 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b62:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003b64:	2201      	movs	r2, #1
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	fa02 f303 	lsl.w	r3, r2, r3
 8003b6c:	43db      	mvns	r3, r3
 8003b6e:	693a      	ldr	r2, [r7, #16]
 8003b70:	4013      	ands	r3, r2
 8003b72:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	08db      	lsrs	r3, r3, #3
 8003b7a:	f003 0201 	and.w	r2, r3, #1
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	fa02 f303 	lsl.w	r3, r2, r3
 8003b84:	693a      	ldr	r2, [r7, #16]
 8003b86:	4313      	orrs	r3, r2
 8003b88:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	693a      	ldr	r2, [r7, #16]
 8003b8e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	f003 0303 	and.w	r3, r3, #3
 8003b98:	2b03      	cmp	r3, #3
 8003b9a:	d017      	beq.n	8003bcc <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	68db      	ldr	r3, [r3, #12]
 8003ba0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	005b      	lsls	r3, r3, #1
 8003ba6:	2203      	movs	r2, #3
 8003ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bac:	43db      	mvns	r3, r3
 8003bae:	693a      	ldr	r2, [r7, #16]
 8003bb0:	4013      	ands	r3, r2
 8003bb2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	689a      	ldr	r2, [r3, #8]
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	005b      	lsls	r3, r3, #1
 8003bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc0:	693a      	ldr	r2, [r7, #16]
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	693a      	ldr	r2, [r7, #16]
 8003bca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	f003 0303 	and.w	r3, r3, #3
 8003bd4:	2b02      	cmp	r3, #2
 8003bd6:	d123      	bne.n	8003c20 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	08da      	lsrs	r2, r3, #3
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	3208      	adds	r2, #8
 8003be0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003be4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	f003 0307 	and.w	r3, r3, #7
 8003bec:	009b      	lsls	r3, r3, #2
 8003bee:	220f      	movs	r2, #15
 8003bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf4:	43db      	mvns	r3, r3
 8003bf6:	693a      	ldr	r2, [r7, #16]
 8003bf8:	4013      	ands	r3, r2
 8003bfa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	691a      	ldr	r2, [r3, #16]
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	f003 0307 	and.w	r3, r3, #7
 8003c06:	009b      	lsls	r3, r3, #2
 8003c08:	fa02 f303 	lsl.w	r3, r2, r3
 8003c0c:	693a      	ldr	r2, [r7, #16]
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003c12:	697b      	ldr	r3, [r7, #20]
 8003c14:	08da      	lsrs	r2, r3, #3
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	3208      	adds	r2, #8
 8003c1a:	6939      	ldr	r1, [r7, #16]
 8003c1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	005b      	lsls	r3, r3, #1
 8003c2a:	2203      	movs	r2, #3
 8003c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c30:	43db      	mvns	r3, r3
 8003c32:	693a      	ldr	r2, [r7, #16]
 8003c34:	4013      	ands	r3, r2
 8003c36:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	f003 0203 	and.w	r2, r3, #3
 8003c40:	697b      	ldr	r3, [r7, #20]
 8003c42:	005b      	lsls	r3, r3, #1
 8003c44:	fa02 f303 	lsl.w	r3, r2, r3
 8003c48:	693a      	ldr	r2, [r7, #16]
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	693a      	ldr	r2, [r7, #16]
 8003c52:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	f000 80ac 	beq.w	8003dba <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c62:	4b5f      	ldr	r3, [pc, #380]	; (8003de0 <HAL_GPIO_Init+0x330>)
 8003c64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c66:	4a5e      	ldr	r2, [pc, #376]	; (8003de0 <HAL_GPIO_Init+0x330>)
 8003c68:	f043 0301 	orr.w	r3, r3, #1
 8003c6c:	6613      	str	r3, [r2, #96]	; 0x60
 8003c6e:	4b5c      	ldr	r3, [pc, #368]	; (8003de0 <HAL_GPIO_Init+0x330>)
 8003c70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c72:	f003 0301 	and.w	r3, r3, #1
 8003c76:	60bb      	str	r3, [r7, #8]
 8003c78:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003c7a:	4a5a      	ldr	r2, [pc, #360]	; (8003de4 <HAL_GPIO_Init+0x334>)
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	089b      	lsrs	r3, r3, #2
 8003c80:	3302      	adds	r3, #2
 8003c82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c86:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	f003 0303 	and.w	r3, r3, #3
 8003c8e:	009b      	lsls	r3, r3, #2
 8003c90:	220f      	movs	r2, #15
 8003c92:	fa02 f303 	lsl.w	r3, r2, r3
 8003c96:	43db      	mvns	r3, r3
 8003c98:	693a      	ldr	r2, [r7, #16]
 8003c9a:	4013      	ands	r3, r2
 8003c9c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003ca4:	d025      	beq.n	8003cf2 <HAL_GPIO_Init+0x242>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	4a4f      	ldr	r2, [pc, #316]	; (8003de8 <HAL_GPIO_Init+0x338>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d01f      	beq.n	8003cee <HAL_GPIO_Init+0x23e>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	4a4e      	ldr	r2, [pc, #312]	; (8003dec <HAL_GPIO_Init+0x33c>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d019      	beq.n	8003cea <HAL_GPIO_Init+0x23a>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	4a4d      	ldr	r2, [pc, #308]	; (8003df0 <HAL_GPIO_Init+0x340>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d013      	beq.n	8003ce6 <HAL_GPIO_Init+0x236>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	4a4c      	ldr	r2, [pc, #304]	; (8003df4 <HAL_GPIO_Init+0x344>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d00d      	beq.n	8003ce2 <HAL_GPIO_Init+0x232>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	4a4b      	ldr	r2, [pc, #300]	; (8003df8 <HAL_GPIO_Init+0x348>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d007      	beq.n	8003cde <HAL_GPIO_Init+0x22e>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	4a4a      	ldr	r2, [pc, #296]	; (8003dfc <HAL_GPIO_Init+0x34c>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d101      	bne.n	8003cda <HAL_GPIO_Init+0x22a>
 8003cd6:	2306      	movs	r3, #6
 8003cd8:	e00c      	b.n	8003cf4 <HAL_GPIO_Init+0x244>
 8003cda:	2307      	movs	r3, #7
 8003cdc:	e00a      	b.n	8003cf4 <HAL_GPIO_Init+0x244>
 8003cde:	2305      	movs	r3, #5
 8003ce0:	e008      	b.n	8003cf4 <HAL_GPIO_Init+0x244>
 8003ce2:	2304      	movs	r3, #4
 8003ce4:	e006      	b.n	8003cf4 <HAL_GPIO_Init+0x244>
 8003ce6:	2303      	movs	r3, #3
 8003ce8:	e004      	b.n	8003cf4 <HAL_GPIO_Init+0x244>
 8003cea:	2302      	movs	r3, #2
 8003cec:	e002      	b.n	8003cf4 <HAL_GPIO_Init+0x244>
 8003cee:	2301      	movs	r3, #1
 8003cf0:	e000      	b.n	8003cf4 <HAL_GPIO_Init+0x244>
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	697a      	ldr	r2, [r7, #20]
 8003cf6:	f002 0203 	and.w	r2, r2, #3
 8003cfa:	0092      	lsls	r2, r2, #2
 8003cfc:	4093      	lsls	r3, r2
 8003cfe:	693a      	ldr	r2, [r7, #16]
 8003d00:	4313      	orrs	r3, r2
 8003d02:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003d04:	4937      	ldr	r1, [pc, #220]	; (8003de4 <HAL_GPIO_Init+0x334>)
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	089b      	lsrs	r3, r3, #2
 8003d0a:	3302      	adds	r3, #2
 8003d0c:	693a      	ldr	r2, [r7, #16]
 8003d0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003d12:	4b3b      	ldr	r3, [pc, #236]	; (8003e00 <HAL_GPIO_Init+0x350>)
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	43db      	mvns	r3, r3
 8003d1c:	693a      	ldr	r2, [r7, #16]
 8003d1e:	4013      	ands	r3, r2
 8003d20:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d003      	beq.n	8003d36 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003d2e:	693a      	ldr	r2, [r7, #16]
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	4313      	orrs	r3, r2
 8003d34:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003d36:	4a32      	ldr	r2, [pc, #200]	; (8003e00 <HAL_GPIO_Init+0x350>)
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003d3c:	4b30      	ldr	r3, [pc, #192]	; (8003e00 <HAL_GPIO_Init+0x350>)
 8003d3e:	68db      	ldr	r3, [r3, #12]
 8003d40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	43db      	mvns	r3, r3
 8003d46:	693a      	ldr	r2, [r7, #16]
 8003d48:	4013      	ands	r3, r2
 8003d4a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d003      	beq.n	8003d60 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003d58:	693a      	ldr	r2, [r7, #16]
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003d60:	4a27      	ldr	r2, [pc, #156]	; (8003e00 <HAL_GPIO_Init+0x350>)
 8003d62:	693b      	ldr	r3, [r7, #16]
 8003d64:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003d66:	4b26      	ldr	r3, [pc, #152]	; (8003e00 <HAL_GPIO_Init+0x350>)
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	43db      	mvns	r3, r3
 8003d70:	693a      	ldr	r2, [r7, #16]
 8003d72:	4013      	ands	r3, r2
 8003d74:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d003      	beq.n	8003d8a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003d82:	693a      	ldr	r2, [r7, #16]
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	4313      	orrs	r3, r2
 8003d88:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003d8a:	4a1d      	ldr	r2, [pc, #116]	; (8003e00 <HAL_GPIO_Init+0x350>)
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003d90:	4b1b      	ldr	r3, [pc, #108]	; (8003e00 <HAL_GPIO_Init+0x350>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	43db      	mvns	r3, r3
 8003d9a:	693a      	ldr	r2, [r7, #16]
 8003d9c:	4013      	ands	r3, r2
 8003d9e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d003      	beq.n	8003db4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003dac:	693a      	ldr	r2, [r7, #16]
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	4313      	orrs	r3, r2
 8003db2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003db4:	4a12      	ldr	r2, [pc, #72]	; (8003e00 <HAL_GPIO_Init+0x350>)
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	3301      	adds	r3, #1
 8003dbe:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	681a      	ldr	r2, [r3, #0]
 8003dc4:	697b      	ldr	r3, [r7, #20]
 8003dc6:	fa22 f303 	lsr.w	r3, r2, r3
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	f47f ae78 	bne.w	8003ac0 <HAL_GPIO_Init+0x10>
  }
}
 8003dd0:	bf00      	nop
 8003dd2:	bf00      	nop
 8003dd4:	371c      	adds	r7, #28
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ddc:	4770      	bx	lr
 8003dde:	bf00      	nop
 8003de0:	40021000 	.word	0x40021000
 8003de4:	40010000 	.word	0x40010000
 8003de8:	48000400 	.word	0x48000400
 8003dec:	48000800 	.word	0x48000800
 8003df0:	48000c00 	.word	0x48000c00
 8003df4:	48001000 	.word	0x48001000
 8003df8:	48001400 	.word	0x48001400
 8003dfc:	48001800 	.word	0x48001800
 8003e00:	40010400 	.word	0x40010400

08003e04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b083      	sub	sp, #12
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
 8003e0c:	460b      	mov	r3, r1
 8003e0e:	807b      	strh	r3, [r7, #2]
 8003e10:	4613      	mov	r3, r2
 8003e12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003e14:	787b      	ldrb	r3, [r7, #1]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d003      	beq.n	8003e22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003e1a:	887a      	ldrh	r2, [r7, #2]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003e20:	e002      	b.n	8003e28 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003e22:	887a      	ldrh	r2, [r7, #2]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003e28:	bf00      	nop
 8003e2a:	370c      	adds	r7, #12
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e32:	4770      	bx	lr

08003e34 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b082      	sub	sp, #8
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003e3e:	4b08      	ldr	r3, [pc, #32]	; (8003e60 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003e40:	695a      	ldr	r2, [r3, #20]
 8003e42:	88fb      	ldrh	r3, [r7, #6]
 8003e44:	4013      	ands	r3, r2
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d006      	beq.n	8003e58 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003e4a:	4a05      	ldr	r2, [pc, #20]	; (8003e60 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003e4c:	88fb      	ldrh	r3, [r7, #6]
 8003e4e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003e50:	88fb      	ldrh	r3, [r7, #6]
 8003e52:	4618      	mov	r0, r3
 8003e54:	f000 f806 	bl	8003e64 <HAL_GPIO_EXTI_Callback>
  }
}
 8003e58:	bf00      	nop
 8003e5a:	3708      	adds	r7, #8
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bd80      	pop	{r7, pc}
 8003e60:	40010400 	.word	0x40010400

08003e64 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b083      	sub	sp, #12
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003e6e:	bf00      	nop
 8003e70:	370c      	adds	r7, #12
 8003e72:	46bd      	mov	sp, r7
 8003e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e78:	4770      	bx	lr

08003e7a <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003e7a:	b580      	push	{r7, lr}
 8003e7c:	b082      	sub	sp, #8
 8003e7e:	af00      	add	r7, sp, #0
 8003e80:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d101      	bne.n	8003e8c <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	e081      	b.n	8003f90 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e92:	b2db      	uxtb	r3, r3
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d106      	bne.n	8003ea6 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003ea0:	6878      	ldr	r0, [r7, #4]
 8003ea2:	f7fd fa23 	bl	80012ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2224      	movs	r2, #36	; 0x24
 8003eaa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	681a      	ldr	r2, [r3, #0]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f022 0201 	bic.w	r2, r2, #1
 8003ebc:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	685a      	ldr	r2, [r3, #4]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003eca:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	689a      	ldr	r2, [r3, #8]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003eda:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	68db      	ldr	r3, [r3, #12]
 8003ee0:	2b01      	cmp	r3, #1
 8003ee2:	d107      	bne.n	8003ef4 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	689a      	ldr	r2, [r3, #8]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003ef0:	609a      	str	r2, [r3, #8]
 8003ef2:	e006      	b.n	8003f02 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	689a      	ldr	r2, [r3, #8]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003f00:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	68db      	ldr	r3, [r3, #12]
 8003f06:	2b02      	cmp	r3, #2
 8003f08:	d104      	bne.n	8003f14 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003f12:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	687a      	ldr	r2, [r7, #4]
 8003f1c:	6812      	ldr	r2, [r2, #0]
 8003f1e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003f22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f26:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	68da      	ldr	r2, [r3, #12]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003f36:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	691a      	ldr	r2, [r3, #16]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	695b      	ldr	r3, [r3, #20]
 8003f40:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	699b      	ldr	r3, [r3, #24]
 8003f48:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	430a      	orrs	r2, r1
 8003f50:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	69d9      	ldr	r1, [r3, #28]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6a1a      	ldr	r2, [r3, #32]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	430a      	orrs	r2, r1
 8003f60:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	681a      	ldr	r2, [r3, #0]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f042 0201 	orr.w	r2, r2, #1
 8003f70:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2200      	movs	r2, #0
 8003f76:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2220      	movs	r2, #32
 8003f7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2200      	movs	r2, #0
 8003f84:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003f8e:	2300      	movs	r3, #0
}
 8003f90:	4618      	mov	r0, r3
 8003f92:	3708      	adds	r7, #8
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bd80      	pop	{r7, pc}

08003f98 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b083      	sub	sp, #12
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
 8003fa0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003fa8:	b2db      	uxtb	r3, r3
 8003faa:	2b20      	cmp	r3, #32
 8003fac:	d138      	bne.n	8004020 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	d101      	bne.n	8003fbc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003fb8:	2302      	movs	r3, #2
 8003fba:	e032      	b.n	8004022 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2224      	movs	r2, #36	; 0x24
 8003fc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	681a      	ldr	r2, [r3, #0]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f022 0201 	bic.w	r2, r2, #1
 8003fda:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	681a      	ldr	r2, [r3, #0]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003fea:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	6819      	ldr	r1, [r3, #0]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	683a      	ldr	r2, [r7, #0]
 8003ff8:	430a      	orrs	r2, r1
 8003ffa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	681a      	ldr	r2, [r3, #0]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f042 0201 	orr.w	r2, r2, #1
 800400a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2220      	movs	r2, #32
 8004010:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2200      	movs	r2, #0
 8004018:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800401c:	2300      	movs	r3, #0
 800401e:	e000      	b.n	8004022 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004020:	2302      	movs	r3, #2
  }
}
 8004022:	4618      	mov	r0, r3
 8004024:	370c      	adds	r7, #12
 8004026:	46bd      	mov	sp, r7
 8004028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402c:	4770      	bx	lr

0800402e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800402e:	b480      	push	{r7}
 8004030:	b085      	sub	sp, #20
 8004032:	af00      	add	r7, sp, #0
 8004034:	6078      	str	r0, [r7, #4]
 8004036:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800403e:	b2db      	uxtb	r3, r3
 8004040:	2b20      	cmp	r3, #32
 8004042:	d139      	bne.n	80040b8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800404a:	2b01      	cmp	r3, #1
 800404c:	d101      	bne.n	8004052 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800404e:	2302      	movs	r3, #2
 8004050:	e033      	b.n	80040ba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2201      	movs	r2, #1
 8004056:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2224      	movs	r2, #36	; 0x24
 800405e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	681a      	ldr	r2, [r3, #0]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f022 0201 	bic.w	r2, r2, #1
 8004070:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004080:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	021b      	lsls	r3, r3, #8
 8004086:	68fa      	ldr	r2, [r7, #12]
 8004088:	4313      	orrs	r3, r2
 800408a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	68fa      	ldr	r2, [r7, #12]
 8004092:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	681a      	ldr	r2, [r3, #0]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f042 0201 	orr.w	r2, r2, #1
 80040a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2220      	movs	r2, #32
 80040a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2200      	movs	r2, #0
 80040b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80040b4:	2300      	movs	r3, #0
 80040b6:	e000      	b.n	80040ba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80040b8:	2302      	movs	r3, #2
  }
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	3714      	adds	r7, #20
 80040be:	46bd      	mov	sp, r7
 80040c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c4:	4770      	bx	lr

080040c6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80040c6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80040c8:	b08f      	sub	sp, #60	; 0x3c
 80040ca:	af0a      	add	r7, sp, #40	; 0x28
 80040cc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d101      	bne.n	80040d8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	e116      	b.n	8004306 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80040e4:	b2db      	uxtb	r3, r3
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d106      	bne.n	80040f8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2200      	movs	r2, #0
 80040ee:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80040f2:	6878      	ldr	r0, [r7, #4]
 80040f4:	f7ff f960 	bl	80033b8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2203      	movs	r2, #3
 80040fc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004104:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004108:	2b00      	cmp	r3, #0
 800410a:	d102      	bne.n	8004112 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2200      	movs	r2, #0
 8004110:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4618      	mov	r0, r3
 8004118:	f002 fb01 	bl	800671e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	603b      	str	r3, [r7, #0]
 8004122:	687e      	ldr	r6, [r7, #4]
 8004124:	466d      	mov	r5, sp
 8004126:	f106 0410 	add.w	r4, r6, #16
 800412a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800412c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800412e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004130:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004132:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004136:	e885 0003 	stmia.w	r5, {r0, r1}
 800413a:	1d33      	adds	r3, r6, #4
 800413c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800413e:	6838      	ldr	r0, [r7, #0]
 8004140:	f002 fac1 	bl	80066c6 <USB_CoreInit>
 8004144:	4603      	mov	r3, r0
 8004146:	2b00      	cmp	r3, #0
 8004148:	d005      	beq.n	8004156 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2202      	movs	r2, #2
 800414e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	e0d7      	b.n	8004306 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	2100      	movs	r1, #0
 800415c:	4618      	mov	r0, r3
 800415e:	f002 faef 	bl	8006740 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004162:	2300      	movs	r3, #0
 8004164:	73fb      	strb	r3, [r7, #15]
 8004166:	e04a      	b.n	80041fe <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004168:	7bfa      	ldrb	r2, [r7, #15]
 800416a:	6879      	ldr	r1, [r7, #4]
 800416c:	4613      	mov	r3, r2
 800416e:	00db      	lsls	r3, r3, #3
 8004170:	1a9b      	subs	r3, r3, r2
 8004172:	009b      	lsls	r3, r3, #2
 8004174:	440b      	add	r3, r1
 8004176:	333d      	adds	r3, #61	; 0x3d
 8004178:	2201      	movs	r2, #1
 800417a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800417c:	7bfa      	ldrb	r2, [r7, #15]
 800417e:	6879      	ldr	r1, [r7, #4]
 8004180:	4613      	mov	r3, r2
 8004182:	00db      	lsls	r3, r3, #3
 8004184:	1a9b      	subs	r3, r3, r2
 8004186:	009b      	lsls	r3, r3, #2
 8004188:	440b      	add	r3, r1
 800418a:	333c      	adds	r3, #60	; 0x3c
 800418c:	7bfa      	ldrb	r2, [r7, #15]
 800418e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004190:	7bfa      	ldrb	r2, [r7, #15]
 8004192:	7bfb      	ldrb	r3, [r7, #15]
 8004194:	b298      	uxth	r0, r3
 8004196:	6879      	ldr	r1, [r7, #4]
 8004198:	4613      	mov	r3, r2
 800419a:	00db      	lsls	r3, r3, #3
 800419c:	1a9b      	subs	r3, r3, r2
 800419e:	009b      	lsls	r3, r3, #2
 80041a0:	440b      	add	r3, r1
 80041a2:	3342      	adds	r3, #66	; 0x42
 80041a4:	4602      	mov	r2, r0
 80041a6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80041a8:	7bfa      	ldrb	r2, [r7, #15]
 80041aa:	6879      	ldr	r1, [r7, #4]
 80041ac:	4613      	mov	r3, r2
 80041ae:	00db      	lsls	r3, r3, #3
 80041b0:	1a9b      	subs	r3, r3, r2
 80041b2:	009b      	lsls	r3, r3, #2
 80041b4:	440b      	add	r3, r1
 80041b6:	333f      	adds	r3, #63	; 0x3f
 80041b8:	2200      	movs	r2, #0
 80041ba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80041bc:	7bfa      	ldrb	r2, [r7, #15]
 80041be:	6879      	ldr	r1, [r7, #4]
 80041c0:	4613      	mov	r3, r2
 80041c2:	00db      	lsls	r3, r3, #3
 80041c4:	1a9b      	subs	r3, r3, r2
 80041c6:	009b      	lsls	r3, r3, #2
 80041c8:	440b      	add	r3, r1
 80041ca:	3344      	adds	r3, #68	; 0x44
 80041cc:	2200      	movs	r2, #0
 80041ce:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80041d0:	7bfa      	ldrb	r2, [r7, #15]
 80041d2:	6879      	ldr	r1, [r7, #4]
 80041d4:	4613      	mov	r3, r2
 80041d6:	00db      	lsls	r3, r3, #3
 80041d8:	1a9b      	subs	r3, r3, r2
 80041da:	009b      	lsls	r3, r3, #2
 80041dc:	440b      	add	r3, r1
 80041de:	3348      	adds	r3, #72	; 0x48
 80041e0:	2200      	movs	r2, #0
 80041e2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80041e4:	7bfa      	ldrb	r2, [r7, #15]
 80041e6:	6879      	ldr	r1, [r7, #4]
 80041e8:	4613      	mov	r3, r2
 80041ea:	00db      	lsls	r3, r3, #3
 80041ec:	1a9b      	subs	r3, r3, r2
 80041ee:	009b      	lsls	r3, r3, #2
 80041f0:	440b      	add	r3, r1
 80041f2:	3350      	adds	r3, #80	; 0x50
 80041f4:	2200      	movs	r2, #0
 80041f6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80041f8:	7bfb      	ldrb	r3, [r7, #15]
 80041fa:	3301      	adds	r3, #1
 80041fc:	73fb      	strb	r3, [r7, #15]
 80041fe:	7bfa      	ldrb	r2, [r7, #15]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	429a      	cmp	r2, r3
 8004206:	d3af      	bcc.n	8004168 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004208:	2300      	movs	r3, #0
 800420a:	73fb      	strb	r3, [r7, #15]
 800420c:	e044      	b.n	8004298 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800420e:	7bfa      	ldrb	r2, [r7, #15]
 8004210:	6879      	ldr	r1, [r7, #4]
 8004212:	4613      	mov	r3, r2
 8004214:	00db      	lsls	r3, r3, #3
 8004216:	1a9b      	subs	r3, r3, r2
 8004218:	009b      	lsls	r3, r3, #2
 800421a:	440b      	add	r3, r1
 800421c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8004220:	2200      	movs	r2, #0
 8004222:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004224:	7bfa      	ldrb	r2, [r7, #15]
 8004226:	6879      	ldr	r1, [r7, #4]
 8004228:	4613      	mov	r3, r2
 800422a:	00db      	lsls	r3, r3, #3
 800422c:	1a9b      	subs	r3, r3, r2
 800422e:	009b      	lsls	r3, r3, #2
 8004230:	440b      	add	r3, r1
 8004232:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8004236:	7bfa      	ldrb	r2, [r7, #15]
 8004238:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800423a:	7bfa      	ldrb	r2, [r7, #15]
 800423c:	6879      	ldr	r1, [r7, #4]
 800423e:	4613      	mov	r3, r2
 8004240:	00db      	lsls	r3, r3, #3
 8004242:	1a9b      	subs	r3, r3, r2
 8004244:	009b      	lsls	r3, r3, #2
 8004246:	440b      	add	r3, r1
 8004248:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800424c:	2200      	movs	r2, #0
 800424e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004250:	7bfa      	ldrb	r2, [r7, #15]
 8004252:	6879      	ldr	r1, [r7, #4]
 8004254:	4613      	mov	r3, r2
 8004256:	00db      	lsls	r3, r3, #3
 8004258:	1a9b      	subs	r3, r3, r2
 800425a:	009b      	lsls	r3, r3, #2
 800425c:	440b      	add	r3, r1
 800425e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004262:	2200      	movs	r2, #0
 8004264:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004266:	7bfa      	ldrb	r2, [r7, #15]
 8004268:	6879      	ldr	r1, [r7, #4]
 800426a:	4613      	mov	r3, r2
 800426c:	00db      	lsls	r3, r3, #3
 800426e:	1a9b      	subs	r3, r3, r2
 8004270:	009b      	lsls	r3, r3, #2
 8004272:	440b      	add	r3, r1
 8004274:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004278:	2200      	movs	r2, #0
 800427a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800427c:	7bfa      	ldrb	r2, [r7, #15]
 800427e:	6879      	ldr	r1, [r7, #4]
 8004280:	4613      	mov	r3, r2
 8004282:	00db      	lsls	r3, r3, #3
 8004284:	1a9b      	subs	r3, r3, r2
 8004286:	009b      	lsls	r3, r3, #2
 8004288:	440b      	add	r3, r1
 800428a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800428e:	2200      	movs	r2, #0
 8004290:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004292:	7bfb      	ldrb	r3, [r7, #15]
 8004294:	3301      	adds	r3, #1
 8004296:	73fb      	strb	r3, [r7, #15]
 8004298:	7bfa      	ldrb	r2, [r7, #15]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	429a      	cmp	r2, r3
 80042a0:	d3b5      	bcc.n	800420e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	603b      	str	r3, [r7, #0]
 80042a8:	687e      	ldr	r6, [r7, #4]
 80042aa:	466d      	mov	r5, sp
 80042ac:	f106 0410 	add.w	r4, r6, #16
 80042b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80042b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80042b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80042b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80042b8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80042bc:	e885 0003 	stmia.w	r5, {r0, r1}
 80042c0:	1d33      	adds	r3, r6, #4
 80042c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80042c4:	6838      	ldr	r0, [r7, #0]
 80042c6:	f002 fa87 	bl	80067d8 <USB_DevInit>
 80042ca:	4603      	mov	r3, r0
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d005      	beq.n	80042dc <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2202      	movs	r2, #2
 80042d4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80042d8:	2301      	movs	r3, #1
 80042da:	e014      	b.n	8004306 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2200      	movs	r2, #0
 80042e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2201      	movs	r2, #1
 80042e8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	d102      	bne.n	80042fa <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80042f4:	6878      	ldr	r0, [r7, #4]
 80042f6:	f000 f80a 	bl	800430e <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4618      	mov	r0, r3
 8004300:	f002 fc2f 	bl	8006b62 <USB_DevDisconnect>

  return HAL_OK;
 8004304:	2300      	movs	r3, #0
}
 8004306:	4618      	mov	r0, r3
 8004308:	3714      	adds	r7, #20
 800430a:	46bd      	mov	sp, r7
 800430c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800430e <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800430e:	b480      	push	{r7}
 8004310:	b085      	sub	sp, #20
 8004312:	af00      	add	r7, sp, #0
 8004314:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2201      	movs	r2, #1
 8004320:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2200      	movs	r2, #0
 8004328:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	699b      	ldr	r3, [r3, #24]
 8004330:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800433c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004340:	f043 0303 	orr.w	r3, r3, #3
 8004344:	68fa      	ldr	r2, [r7, #12]
 8004346:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8004348:	2300      	movs	r3, #0
}
 800434a:	4618      	mov	r0, r3
 800434c:	3714      	adds	r7, #20
 800434e:	46bd      	mov	sp, r7
 8004350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004354:	4770      	bx	lr
	...

08004358 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004358:	b480      	push	{r7}
 800435a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800435c:	4b05      	ldr	r3, [pc, #20]	; (8004374 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a04      	ldr	r2, [pc, #16]	; (8004374 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004362:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004366:	6013      	str	r3, [r2, #0]
}
 8004368:	bf00      	nop
 800436a:	46bd      	mov	sp, r7
 800436c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004370:	4770      	bx	lr
 8004372:	bf00      	nop
 8004374:	40007000 	.word	0x40007000

08004378 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004378:	b480      	push	{r7}
 800437a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800437c:	4b04      	ldr	r3, [pc, #16]	; (8004390 <HAL_PWREx_GetVoltageRange+0x18>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004384:	4618      	mov	r0, r3
 8004386:	46bd      	mov	sp, r7
 8004388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438c:	4770      	bx	lr
 800438e:	bf00      	nop
 8004390:	40007000 	.word	0x40007000

08004394 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004394:	b480      	push	{r7}
 8004396:	b085      	sub	sp, #20
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043a2:	d130      	bne.n	8004406 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80043a4:	4b23      	ldr	r3, [pc, #140]	; (8004434 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80043ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043b0:	d038      	beq.n	8004424 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80043b2:	4b20      	ldr	r3, [pc, #128]	; (8004434 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80043ba:	4a1e      	ldr	r2, [pc, #120]	; (8004434 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80043bc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80043c0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80043c2:	4b1d      	ldr	r3, [pc, #116]	; (8004438 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	2232      	movs	r2, #50	; 0x32
 80043c8:	fb02 f303 	mul.w	r3, r2, r3
 80043cc:	4a1b      	ldr	r2, [pc, #108]	; (800443c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80043ce:	fba2 2303 	umull	r2, r3, r2, r3
 80043d2:	0c9b      	lsrs	r3, r3, #18
 80043d4:	3301      	adds	r3, #1
 80043d6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80043d8:	e002      	b.n	80043e0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	3b01      	subs	r3, #1
 80043de:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80043e0:	4b14      	ldr	r3, [pc, #80]	; (8004434 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80043e2:	695b      	ldr	r3, [r3, #20]
 80043e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043ec:	d102      	bne.n	80043f4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d1f2      	bne.n	80043da <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80043f4:	4b0f      	ldr	r3, [pc, #60]	; (8004434 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80043f6:	695b      	ldr	r3, [r3, #20]
 80043f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004400:	d110      	bne.n	8004424 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004402:	2303      	movs	r3, #3
 8004404:	e00f      	b.n	8004426 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004406:	4b0b      	ldr	r3, [pc, #44]	; (8004434 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800440e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004412:	d007      	beq.n	8004424 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004414:	4b07      	ldr	r3, [pc, #28]	; (8004434 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800441c:	4a05      	ldr	r2, [pc, #20]	; (8004434 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800441e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004422:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004424:	2300      	movs	r3, #0
}
 8004426:	4618      	mov	r0, r3
 8004428:	3714      	adds	r7, #20
 800442a:	46bd      	mov	sp, r7
 800442c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004430:	4770      	bx	lr
 8004432:	bf00      	nop
 8004434:	40007000 	.word	0x40007000
 8004438:	20000000 	.word	0x20000000
 800443c:	431bde83 	.word	0x431bde83

08004440 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8004440:	b480      	push	{r7}
 8004442:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8004444:	4b05      	ldr	r3, [pc, #20]	; (800445c <HAL_PWREx_EnableVddUSB+0x1c>)
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	4a04      	ldr	r2, [pc, #16]	; (800445c <HAL_PWREx_EnableVddUSB+0x1c>)
 800444a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800444e:	6053      	str	r3, [r2, #4]
}
 8004450:	bf00      	nop
 8004452:	46bd      	mov	sp, r7
 8004454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004458:	4770      	bx	lr
 800445a:	bf00      	nop
 800445c:	40007000 	.word	0x40007000

08004460 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b086      	sub	sp, #24
 8004464:	af02      	add	r7, sp, #8
 8004466:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8004468:	f7ff f8d4 	bl	8003614 <HAL_GetTick>
 800446c:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d101      	bne.n	8004478 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8004474:	2301      	movs	r3, #1
 8004476:	e063      	b.n	8004540 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800447e:	b2db      	uxtb	r3, r3
 8004480:	2b00      	cmp	r3, #0
 8004482:	d10b      	bne.n	800449c <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2200      	movs	r2, #0
 8004488:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800448c:	6878      	ldr	r0, [r7, #4]
 800448e:	f7fe fc9d 	bl	8002dcc <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8004492:	f241 3188 	movw	r1, #5000	; 0x1388
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	f000 f858 	bl	800454c <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	689b      	ldr	r3, [r3, #8]
 80044aa:	3b01      	subs	r3, #1
 80044ac:	021a      	lsls	r2, r3, #8
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	430a      	orrs	r2, r1
 80044b4:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ba:	9300      	str	r3, [sp, #0]
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2200      	movs	r2, #0
 80044c0:	2120      	movs	r1, #32
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	f000 f850 	bl	8004568 <QSPI_WaitFlagStateUntilTimeout>
 80044c8:	4603      	mov	r3, r0
 80044ca:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 80044cc:	7afb      	ldrb	r3, [r7, #11]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d131      	bne.n	8004536 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80044dc:	f023 0310 	bic.w	r3, r3, #16
 80044e0:	687a      	ldr	r2, [r7, #4]
 80044e2:	6852      	ldr	r2, [r2, #4]
 80044e4:	0611      	lsls	r1, r2, #24
 80044e6:	687a      	ldr	r2, [r7, #4]
 80044e8:	68d2      	ldr	r2, [r2, #12]
 80044ea:	4311      	orrs	r1, r2
 80044ec:	687a      	ldr	r2, [r7, #4]
 80044ee:	6812      	ldr	r2, [r2, #0]
 80044f0:	430b      	orrs	r3, r1
 80044f2:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	685a      	ldr	r2, [r3, #4]
 80044fa:	4b13      	ldr	r3, [pc, #76]	; (8004548 <HAL_QSPI_Init+0xe8>)
 80044fc:	4013      	ands	r3, r2
 80044fe:	687a      	ldr	r2, [r7, #4]
 8004500:	6912      	ldr	r2, [r2, #16]
 8004502:	0411      	lsls	r1, r2, #16
 8004504:	687a      	ldr	r2, [r7, #4]
 8004506:	6952      	ldr	r2, [r2, #20]
 8004508:	4311      	orrs	r1, r2
 800450a:	687a      	ldr	r2, [r7, #4]
 800450c:	6992      	ldr	r2, [r2, #24]
 800450e:	4311      	orrs	r1, r2
 8004510:	687a      	ldr	r2, [r7, #4]
 8004512:	6812      	ldr	r2, [r2, #0]
 8004514:	430b      	orrs	r3, r1
 8004516:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	681a      	ldr	r2, [r3, #0]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f042 0201 	orr.w	r2, r2, #1
 8004526:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2200      	movs	r2, #0
 800452c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2201      	movs	r2, #1
 8004532:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2200      	movs	r2, #0
 800453a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 800453e:	7afb      	ldrb	r3, [r7, #11]
}
 8004540:	4618      	mov	r0, r3
 8004542:	3710      	adds	r7, #16
 8004544:	46bd      	mov	sp, r7
 8004546:	bd80      	pop	{r7, pc}
 8004548:	ffe0f8fe 	.word	0xffe0f8fe

0800454c <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800454c:	b480      	push	{r7}
 800454e:	b083      	sub	sp, #12
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
 8004554:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	683a      	ldr	r2, [r7, #0]
 800455a:	641a      	str	r2, [r3, #64]	; 0x40
}
 800455c:	bf00      	nop
 800455e:	370c      	adds	r7, #12
 8004560:	46bd      	mov	sp, r7
 8004562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004566:	4770      	bx	lr

08004568 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b084      	sub	sp, #16
 800456c:	af00      	add	r7, sp, #0
 800456e:	60f8      	str	r0, [r7, #12]
 8004570:	60b9      	str	r1, [r7, #8]
 8004572:	603b      	str	r3, [r7, #0]
 8004574:	4613      	mov	r3, r2
 8004576:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004578:	e01a      	b.n	80045b0 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800457a:	69bb      	ldr	r3, [r7, #24]
 800457c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004580:	d016      	beq.n	80045b0 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004582:	f7ff f847 	bl	8003614 <HAL_GetTick>
 8004586:	4602      	mov	r2, r0
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	1ad3      	subs	r3, r2, r3
 800458c:	69ba      	ldr	r2, [r7, #24]
 800458e:	429a      	cmp	r2, r3
 8004590:	d302      	bcc.n	8004598 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8004592:	69bb      	ldr	r3, [r7, #24]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d10b      	bne.n	80045b0 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	2204      	movs	r2, #4
 800459c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045a4:	f043 0201 	orr.w	r2, r3, #1
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80045ac:	2301      	movs	r3, #1
 80045ae:	e00e      	b.n	80045ce <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	689a      	ldr	r2, [r3, #8]
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	4013      	ands	r3, r2
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	bf14      	ite	ne
 80045be:	2301      	movne	r3, #1
 80045c0:	2300      	moveq	r3, #0
 80045c2:	b2db      	uxtb	r3, r3
 80045c4:	461a      	mov	r2, r3
 80045c6:	79fb      	ldrb	r3, [r7, #7]
 80045c8:	429a      	cmp	r2, r3
 80045ca:	d1d6      	bne.n	800457a <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80045cc:	2300      	movs	r3, #0
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	3710      	adds	r7, #16
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}
	...

080045d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b088      	sub	sp, #32
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d101      	bne.n	80045ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80045e6:	2301      	movs	r3, #1
 80045e8:	e3d4      	b.n	8004d94 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80045ea:	4ba1      	ldr	r3, [pc, #644]	; (8004870 <HAL_RCC_OscConfig+0x298>)
 80045ec:	689b      	ldr	r3, [r3, #8]
 80045ee:	f003 030c 	and.w	r3, r3, #12
 80045f2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80045f4:	4b9e      	ldr	r3, [pc, #632]	; (8004870 <HAL_RCC_OscConfig+0x298>)
 80045f6:	68db      	ldr	r3, [r3, #12]
 80045f8:	f003 0303 	and.w	r3, r3, #3
 80045fc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f003 0310 	and.w	r3, r3, #16
 8004606:	2b00      	cmp	r3, #0
 8004608:	f000 80e4 	beq.w	80047d4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800460c:	69bb      	ldr	r3, [r7, #24]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d007      	beq.n	8004622 <HAL_RCC_OscConfig+0x4a>
 8004612:	69bb      	ldr	r3, [r7, #24]
 8004614:	2b0c      	cmp	r3, #12
 8004616:	f040 808b 	bne.w	8004730 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	2b01      	cmp	r3, #1
 800461e:	f040 8087 	bne.w	8004730 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004622:	4b93      	ldr	r3, [pc, #588]	; (8004870 <HAL_RCC_OscConfig+0x298>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f003 0302 	and.w	r3, r3, #2
 800462a:	2b00      	cmp	r3, #0
 800462c:	d005      	beq.n	800463a <HAL_RCC_OscConfig+0x62>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	699b      	ldr	r3, [r3, #24]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d101      	bne.n	800463a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	e3ac      	b.n	8004d94 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6a1a      	ldr	r2, [r3, #32]
 800463e:	4b8c      	ldr	r3, [pc, #560]	; (8004870 <HAL_RCC_OscConfig+0x298>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f003 0308 	and.w	r3, r3, #8
 8004646:	2b00      	cmp	r3, #0
 8004648:	d004      	beq.n	8004654 <HAL_RCC_OscConfig+0x7c>
 800464a:	4b89      	ldr	r3, [pc, #548]	; (8004870 <HAL_RCC_OscConfig+0x298>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004652:	e005      	b.n	8004660 <HAL_RCC_OscConfig+0x88>
 8004654:	4b86      	ldr	r3, [pc, #536]	; (8004870 <HAL_RCC_OscConfig+0x298>)
 8004656:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800465a:	091b      	lsrs	r3, r3, #4
 800465c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004660:	4293      	cmp	r3, r2
 8004662:	d223      	bcs.n	80046ac <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6a1b      	ldr	r3, [r3, #32]
 8004668:	4618      	mov	r0, r3
 800466a:	f000 fd41 	bl	80050f0 <RCC_SetFlashLatencyFromMSIRange>
 800466e:	4603      	mov	r3, r0
 8004670:	2b00      	cmp	r3, #0
 8004672:	d001      	beq.n	8004678 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004674:	2301      	movs	r3, #1
 8004676:	e38d      	b.n	8004d94 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004678:	4b7d      	ldr	r3, [pc, #500]	; (8004870 <HAL_RCC_OscConfig+0x298>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a7c      	ldr	r2, [pc, #496]	; (8004870 <HAL_RCC_OscConfig+0x298>)
 800467e:	f043 0308 	orr.w	r3, r3, #8
 8004682:	6013      	str	r3, [r2, #0]
 8004684:	4b7a      	ldr	r3, [pc, #488]	; (8004870 <HAL_RCC_OscConfig+0x298>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6a1b      	ldr	r3, [r3, #32]
 8004690:	4977      	ldr	r1, [pc, #476]	; (8004870 <HAL_RCC_OscConfig+0x298>)
 8004692:	4313      	orrs	r3, r2
 8004694:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004696:	4b76      	ldr	r3, [pc, #472]	; (8004870 <HAL_RCC_OscConfig+0x298>)
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	69db      	ldr	r3, [r3, #28]
 80046a2:	021b      	lsls	r3, r3, #8
 80046a4:	4972      	ldr	r1, [pc, #456]	; (8004870 <HAL_RCC_OscConfig+0x298>)
 80046a6:	4313      	orrs	r3, r2
 80046a8:	604b      	str	r3, [r1, #4]
 80046aa:	e025      	b.n	80046f8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80046ac:	4b70      	ldr	r3, [pc, #448]	; (8004870 <HAL_RCC_OscConfig+0x298>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a6f      	ldr	r2, [pc, #444]	; (8004870 <HAL_RCC_OscConfig+0x298>)
 80046b2:	f043 0308 	orr.w	r3, r3, #8
 80046b6:	6013      	str	r3, [r2, #0]
 80046b8:	4b6d      	ldr	r3, [pc, #436]	; (8004870 <HAL_RCC_OscConfig+0x298>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6a1b      	ldr	r3, [r3, #32]
 80046c4:	496a      	ldr	r1, [pc, #424]	; (8004870 <HAL_RCC_OscConfig+0x298>)
 80046c6:	4313      	orrs	r3, r2
 80046c8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80046ca:	4b69      	ldr	r3, [pc, #420]	; (8004870 <HAL_RCC_OscConfig+0x298>)
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	69db      	ldr	r3, [r3, #28]
 80046d6:	021b      	lsls	r3, r3, #8
 80046d8:	4965      	ldr	r1, [pc, #404]	; (8004870 <HAL_RCC_OscConfig+0x298>)
 80046da:	4313      	orrs	r3, r2
 80046dc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80046de:	69bb      	ldr	r3, [r7, #24]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d109      	bne.n	80046f8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6a1b      	ldr	r3, [r3, #32]
 80046e8:	4618      	mov	r0, r3
 80046ea:	f000 fd01 	bl	80050f0 <RCC_SetFlashLatencyFromMSIRange>
 80046ee:	4603      	mov	r3, r0
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d001      	beq.n	80046f8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80046f4:	2301      	movs	r3, #1
 80046f6:	e34d      	b.n	8004d94 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80046f8:	f000 fc36 	bl	8004f68 <HAL_RCC_GetSysClockFreq>
 80046fc:	4602      	mov	r2, r0
 80046fe:	4b5c      	ldr	r3, [pc, #368]	; (8004870 <HAL_RCC_OscConfig+0x298>)
 8004700:	689b      	ldr	r3, [r3, #8]
 8004702:	091b      	lsrs	r3, r3, #4
 8004704:	f003 030f 	and.w	r3, r3, #15
 8004708:	495a      	ldr	r1, [pc, #360]	; (8004874 <HAL_RCC_OscConfig+0x29c>)
 800470a:	5ccb      	ldrb	r3, [r1, r3]
 800470c:	f003 031f 	and.w	r3, r3, #31
 8004710:	fa22 f303 	lsr.w	r3, r2, r3
 8004714:	4a58      	ldr	r2, [pc, #352]	; (8004878 <HAL_RCC_OscConfig+0x2a0>)
 8004716:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004718:	4b58      	ldr	r3, [pc, #352]	; (800487c <HAL_RCC_OscConfig+0x2a4>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4618      	mov	r0, r3
 800471e:	f7fe ff29 	bl	8003574 <HAL_InitTick>
 8004722:	4603      	mov	r3, r0
 8004724:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004726:	7bfb      	ldrb	r3, [r7, #15]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d052      	beq.n	80047d2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800472c:	7bfb      	ldrb	r3, [r7, #15]
 800472e:	e331      	b.n	8004d94 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	699b      	ldr	r3, [r3, #24]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d032      	beq.n	800479e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004738:	4b4d      	ldr	r3, [pc, #308]	; (8004870 <HAL_RCC_OscConfig+0x298>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a4c      	ldr	r2, [pc, #304]	; (8004870 <HAL_RCC_OscConfig+0x298>)
 800473e:	f043 0301 	orr.w	r3, r3, #1
 8004742:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004744:	f7fe ff66 	bl	8003614 <HAL_GetTick>
 8004748:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800474a:	e008      	b.n	800475e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800474c:	f7fe ff62 	bl	8003614 <HAL_GetTick>
 8004750:	4602      	mov	r2, r0
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	1ad3      	subs	r3, r2, r3
 8004756:	2b02      	cmp	r3, #2
 8004758:	d901      	bls.n	800475e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800475a:	2303      	movs	r3, #3
 800475c:	e31a      	b.n	8004d94 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800475e:	4b44      	ldr	r3, [pc, #272]	; (8004870 <HAL_RCC_OscConfig+0x298>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f003 0302 	and.w	r3, r3, #2
 8004766:	2b00      	cmp	r3, #0
 8004768:	d0f0      	beq.n	800474c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800476a:	4b41      	ldr	r3, [pc, #260]	; (8004870 <HAL_RCC_OscConfig+0x298>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a40      	ldr	r2, [pc, #256]	; (8004870 <HAL_RCC_OscConfig+0x298>)
 8004770:	f043 0308 	orr.w	r3, r3, #8
 8004774:	6013      	str	r3, [r2, #0]
 8004776:	4b3e      	ldr	r3, [pc, #248]	; (8004870 <HAL_RCC_OscConfig+0x298>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6a1b      	ldr	r3, [r3, #32]
 8004782:	493b      	ldr	r1, [pc, #236]	; (8004870 <HAL_RCC_OscConfig+0x298>)
 8004784:	4313      	orrs	r3, r2
 8004786:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004788:	4b39      	ldr	r3, [pc, #228]	; (8004870 <HAL_RCC_OscConfig+0x298>)
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	69db      	ldr	r3, [r3, #28]
 8004794:	021b      	lsls	r3, r3, #8
 8004796:	4936      	ldr	r1, [pc, #216]	; (8004870 <HAL_RCC_OscConfig+0x298>)
 8004798:	4313      	orrs	r3, r2
 800479a:	604b      	str	r3, [r1, #4]
 800479c:	e01a      	b.n	80047d4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800479e:	4b34      	ldr	r3, [pc, #208]	; (8004870 <HAL_RCC_OscConfig+0x298>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a33      	ldr	r2, [pc, #204]	; (8004870 <HAL_RCC_OscConfig+0x298>)
 80047a4:	f023 0301 	bic.w	r3, r3, #1
 80047a8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80047aa:	f7fe ff33 	bl	8003614 <HAL_GetTick>
 80047ae:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80047b0:	e008      	b.n	80047c4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80047b2:	f7fe ff2f 	bl	8003614 <HAL_GetTick>
 80047b6:	4602      	mov	r2, r0
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	1ad3      	subs	r3, r2, r3
 80047bc:	2b02      	cmp	r3, #2
 80047be:	d901      	bls.n	80047c4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80047c0:	2303      	movs	r3, #3
 80047c2:	e2e7      	b.n	8004d94 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80047c4:	4b2a      	ldr	r3, [pc, #168]	; (8004870 <HAL_RCC_OscConfig+0x298>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f003 0302 	and.w	r3, r3, #2
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d1f0      	bne.n	80047b2 <HAL_RCC_OscConfig+0x1da>
 80047d0:	e000      	b.n	80047d4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80047d2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f003 0301 	and.w	r3, r3, #1
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d074      	beq.n	80048ca <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80047e0:	69bb      	ldr	r3, [r7, #24]
 80047e2:	2b08      	cmp	r3, #8
 80047e4:	d005      	beq.n	80047f2 <HAL_RCC_OscConfig+0x21a>
 80047e6:	69bb      	ldr	r3, [r7, #24]
 80047e8:	2b0c      	cmp	r3, #12
 80047ea:	d10e      	bne.n	800480a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	2b03      	cmp	r3, #3
 80047f0:	d10b      	bne.n	800480a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047f2:	4b1f      	ldr	r3, [pc, #124]	; (8004870 <HAL_RCC_OscConfig+0x298>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d064      	beq.n	80048c8 <HAL_RCC_OscConfig+0x2f0>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d160      	bne.n	80048c8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004806:	2301      	movs	r3, #1
 8004808:	e2c4      	b.n	8004d94 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004812:	d106      	bne.n	8004822 <HAL_RCC_OscConfig+0x24a>
 8004814:	4b16      	ldr	r3, [pc, #88]	; (8004870 <HAL_RCC_OscConfig+0x298>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a15      	ldr	r2, [pc, #84]	; (8004870 <HAL_RCC_OscConfig+0x298>)
 800481a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800481e:	6013      	str	r3, [r2, #0]
 8004820:	e01d      	b.n	800485e <HAL_RCC_OscConfig+0x286>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800482a:	d10c      	bne.n	8004846 <HAL_RCC_OscConfig+0x26e>
 800482c:	4b10      	ldr	r3, [pc, #64]	; (8004870 <HAL_RCC_OscConfig+0x298>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a0f      	ldr	r2, [pc, #60]	; (8004870 <HAL_RCC_OscConfig+0x298>)
 8004832:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004836:	6013      	str	r3, [r2, #0]
 8004838:	4b0d      	ldr	r3, [pc, #52]	; (8004870 <HAL_RCC_OscConfig+0x298>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a0c      	ldr	r2, [pc, #48]	; (8004870 <HAL_RCC_OscConfig+0x298>)
 800483e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004842:	6013      	str	r3, [r2, #0]
 8004844:	e00b      	b.n	800485e <HAL_RCC_OscConfig+0x286>
 8004846:	4b0a      	ldr	r3, [pc, #40]	; (8004870 <HAL_RCC_OscConfig+0x298>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a09      	ldr	r2, [pc, #36]	; (8004870 <HAL_RCC_OscConfig+0x298>)
 800484c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004850:	6013      	str	r3, [r2, #0]
 8004852:	4b07      	ldr	r3, [pc, #28]	; (8004870 <HAL_RCC_OscConfig+0x298>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a06      	ldr	r2, [pc, #24]	; (8004870 <HAL_RCC_OscConfig+0x298>)
 8004858:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800485c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d01c      	beq.n	80048a0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004866:	f7fe fed5 	bl	8003614 <HAL_GetTick>
 800486a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800486c:	e011      	b.n	8004892 <HAL_RCC_OscConfig+0x2ba>
 800486e:	bf00      	nop
 8004870:	40021000 	.word	0x40021000
 8004874:	08006d08 	.word	0x08006d08
 8004878:	20000000 	.word	0x20000000
 800487c:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004880:	f7fe fec8 	bl	8003614 <HAL_GetTick>
 8004884:	4602      	mov	r2, r0
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	1ad3      	subs	r3, r2, r3
 800488a:	2b64      	cmp	r3, #100	; 0x64
 800488c:	d901      	bls.n	8004892 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800488e:	2303      	movs	r3, #3
 8004890:	e280      	b.n	8004d94 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004892:	4baf      	ldr	r3, [pc, #700]	; (8004b50 <HAL_RCC_OscConfig+0x578>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800489a:	2b00      	cmp	r3, #0
 800489c:	d0f0      	beq.n	8004880 <HAL_RCC_OscConfig+0x2a8>
 800489e:	e014      	b.n	80048ca <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048a0:	f7fe feb8 	bl	8003614 <HAL_GetTick>
 80048a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80048a6:	e008      	b.n	80048ba <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80048a8:	f7fe feb4 	bl	8003614 <HAL_GetTick>
 80048ac:	4602      	mov	r2, r0
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	1ad3      	subs	r3, r2, r3
 80048b2:	2b64      	cmp	r3, #100	; 0x64
 80048b4:	d901      	bls.n	80048ba <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80048b6:	2303      	movs	r3, #3
 80048b8:	e26c      	b.n	8004d94 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80048ba:	4ba5      	ldr	r3, [pc, #660]	; (8004b50 <HAL_RCC_OscConfig+0x578>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d1f0      	bne.n	80048a8 <HAL_RCC_OscConfig+0x2d0>
 80048c6:	e000      	b.n	80048ca <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f003 0302 	and.w	r3, r3, #2
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d060      	beq.n	8004998 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80048d6:	69bb      	ldr	r3, [r7, #24]
 80048d8:	2b04      	cmp	r3, #4
 80048da:	d005      	beq.n	80048e8 <HAL_RCC_OscConfig+0x310>
 80048dc:	69bb      	ldr	r3, [r7, #24]
 80048de:	2b0c      	cmp	r3, #12
 80048e0:	d119      	bne.n	8004916 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	2b02      	cmp	r3, #2
 80048e6:	d116      	bne.n	8004916 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80048e8:	4b99      	ldr	r3, [pc, #612]	; (8004b50 <HAL_RCC_OscConfig+0x578>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d005      	beq.n	8004900 <HAL_RCC_OscConfig+0x328>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	68db      	ldr	r3, [r3, #12]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d101      	bne.n	8004900 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80048fc:	2301      	movs	r3, #1
 80048fe:	e249      	b.n	8004d94 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004900:	4b93      	ldr	r3, [pc, #588]	; (8004b50 <HAL_RCC_OscConfig+0x578>)
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	691b      	ldr	r3, [r3, #16]
 800490c:	061b      	lsls	r3, r3, #24
 800490e:	4990      	ldr	r1, [pc, #576]	; (8004b50 <HAL_RCC_OscConfig+0x578>)
 8004910:	4313      	orrs	r3, r2
 8004912:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004914:	e040      	b.n	8004998 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	68db      	ldr	r3, [r3, #12]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d023      	beq.n	8004966 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800491e:	4b8c      	ldr	r3, [pc, #560]	; (8004b50 <HAL_RCC_OscConfig+0x578>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4a8b      	ldr	r2, [pc, #556]	; (8004b50 <HAL_RCC_OscConfig+0x578>)
 8004924:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004928:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800492a:	f7fe fe73 	bl	8003614 <HAL_GetTick>
 800492e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004930:	e008      	b.n	8004944 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004932:	f7fe fe6f 	bl	8003614 <HAL_GetTick>
 8004936:	4602      	mov	r2, r0
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	1ad3      	subs	r3, r2, r3
 800493c:	2b02      	cmp	r3, #2
 800493e:	d901      	bls.n	8004944 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004940:	2303      	movs	r3, #3
 8004942:	e227      	b.n	8004d94 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004944:	4b82      	ldr	r3, [pc, #520]	; (8004b50 <HAL_RCC_OscConfig+0x578>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800494c:	2b00      	cmp	r3, #0
 800494e:	d0f0      	beq.n	8004932 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004950:	4b7f      	ldr	r3, [pc, #508]	; (8004b50 <HAL_RCC_OscConfig+0x578>)
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	691b      	ldr	r3, [r3, #16]
 800495c:	061b      	lsls	r3, r3, #24
 800495e:	497c      	ldr	r1, [pc, #496]	; (8004b50 <HAL_RCC_OscConfig+0x578>)
 8004960:	4313      	orrs	r3, r2
 8004962:	604b      	str	r3, [r1, #4]
 8004964:	e018      	b.n	8004998 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004966:	4b7a      	ldr	r3, [pc, #488]	; (8004b50 <HAL_RCC_OscConfig+0x578>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a79      	ldr	r2, [pc, #484]	; (8004b50 <HAL_RCC_OscConfig+0x578>)
 800496c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004970:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004972:	f7fe fe4f 	bl	8003614 <HAL_GetTick>
 8004976:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004978:	e008      	b.n	800498c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800497a:	f7fe fe4b 	bl	8003614 <HAL_GetTick>
 800497e:	4602      	mov	r2, r0
 8004980:	693b      	ldr	r3, [r7, #16]
 8004982:	1ad3      	subs	r3, r2, r3
 8004984:	2b02      	cmp	r3, #2
 8004986:	d901      	bls.n	800498c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004988:	2303      	movs	r3, #3
 800498a:	e203      	b.n	8004d94 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800498c:	4b70      	ldr	r3, [pc, #448]	; (8004b50 <HAL_RCC_OscConfig+0x578>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004994:	2b00      	cmp	r3, #0
 8004996:	d1f0      	bne.n	800497a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f003 0308 	and.w	r3, r3, #8
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d03c      	beq.n	8004a1e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	695b      	ldr	r3, [r3, #20]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d01c      	beq.n	80049e6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80049ac:	4b68      	ldr	r3, [pc, #416]	; (8004b50 <HAL_RCC_OscConfig+0x578>)
 80049ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049b2:	4a67      	ldr	r2, [pc, #412]	; (8004b50 <HAL_RCC_OscConfig+0x578>)
 80049b4:	f043 0301 	orr.w	r3, r3, #1
 80049b8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049bc:	f7fe fe2a 	bl	8003614 <HAL_GetTick>
 80049c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80049c2:	e008      	b.n	80049d6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80049c4:	f7fe fe26 	bl	8003614 <HAL_GetTick>
 80049c8:	4602      	mov	r2, r0
 80049ca:	693b      	ldr	r3, [r7, #16]
 80049cc:	1ad3      	subs	r3, r2, r3
 80049ce:	2b02      	cmp	r3, #2
 80049d0:	d901      	bls.n	80049d6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80049d2:	2303      	movs	r3, #3
 80049d4:	e1de      	b.n	8004d94 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80049d6:	4b5e      	ldr	r3, [pc, #376]	; (8004b50 <HAL_RCC_OscConfig+0x578>)
 80049d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049dc:	f003 0302 	and.w	r3, r3, #2
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d0ef      	beq.n	80049c4 <HAL_RCC_OscConfig+0x3ec>
 80049e4:	e01b      	b.n	8004a1e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80049e6:	4b5a      	ldr	r3, [pc, #360]	; (8004b50 <HAL_RCC_OscConfig+0x578>)
 80049e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049ec:	4a58      	ldr	r2, [pc, #352]	; (8004b50 <HAL_RCC_OscConfig+0x578>)
 80049ee:	f023 0301 	bic.w	r3, r3, #1
 80049f2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049f6:	f7fe fe0d 	bl	8003614 <HAL_GetTick>
 80049fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80049fc:	e008      	b.n	8004a10 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80049fe:	f7fe fe09 	bl	8003614 <HAL_GetTick>
 8004a02:	4602      	mov	r2, r0
 8004a04:	693b      	ldr	r3, [r7, #16]
 8004a06:	1ad3      	subs	r3, r2, r3
 8004a08:	2b02      	cmp	r3, #2
 8004a0a:	d901      	bls.n	8004a10 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004a0c:	2303      	movs	r3, #3
 8004a0e:	e1c1      	b.n	8004d94 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004a10:	4b4f      	ldr	r3, [pc, #316]	; (8004b50 <HAL_RCC_OscConfig+0x578>)
 8004a12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a16:	f003 0302 	and.w	r3, r3, #2
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d1ef      	bne.n	80049fe <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f003 0304 	and.w	r3, r3, #4
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	f000 80a6 	beq.w	8004b78 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004a30:	4b47      	ldr	r3, [pc, #284]	; (8004b50 <HAL_RCC_OscConfig+0x578>)
 8004a32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d10d      	bne.n	8004a58 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a3c:	4b44      	ldr	r3, [pc, #272]	; (8004b50 <HAL_RCC_OscConfig+0x578>)
 8004a3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a40:	4a43      	ldr	r2, [pc, #268]	; (8004b50 <HAL_RCC_OscConfig+0x578>)
 8004a42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a46:	6593      	str	r3, [r2, #88]	; 0x58
 8004a48:	4b41      	ldr	r3, [pc, #260]	; (8004b50 <HAL_RCC_OscConfig+0x578>)
 8004a4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a50:	60bb      	str	r3, [r7, #8]
 8004a52:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a54:	2301      	movs	r3, #1
 8004a56:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a58:	4b3e      	ldr	r3, [pc, #248]	; (8004b54 <HAL_RCC_OscConfig+0x57c>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d118      	bne.n	8004a96 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004a64:	4b3b      	ldr	r3, [pc, #236]	; (8004b54 <HAL_RCC_OscConfig+0x57c>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a3a      	ldr	r2, [pc, #232]	; (8004b54 <HAL_RCC_OscConfig+0x57c>)
 8004a6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a6e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a70:	f7fe fdd0 	bl	8003614 <HAL_GetTick>
 8004a74:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a76:	e008      	b.n	8004a8a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a78:	f7fe fdcc 	bl	8003614 <HAL_GetTick>
 8004a7c:	4602      	mov	r2, r0
 8004a7e:	693b      	ldr	r3, [r7, #16]
 8004a80:	1ad3      	subs	r3, r2, r3
 8004a82:	2b02      	cmp	r3, #2
 8004a84:	d901      	bls.n	8004a8a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004a86:	2303      	movs	r3, #3
 8004a88:	e184      	b.n	8004d94 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a8a:	4b32      	ldr	r3, [pc, #200]	; (8004b54 <HAL_RCC_OscConfig+0x57c>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d0f0      	beq.n	8004a78 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	689b      	ldr	r3, [r3, #8]
 8004a9a:	2b01      	cmp	r3, #1
 8004a9c:	d108      	bne.n	8004ab0 <HAL_RCC_OscConfig+0x4d8>
 8004a9e:	4b2c      	ldr	r3, [pc, #176]	; (8004b50 <HAL_RCC_OscConfig+0x578>)
 8004aa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004aa4:	4a2a      	ldr	r2, [pc, #168]	; (8004b50 <HAL_RCC_OscConfig+0x578>)
 8004aa6:	f043 0301 	orr.w	r3, r3, #1
 8004aaa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004aae:	e024      	b.n	8004afa <HAL_RCC_OscConfig+0x522>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	689b      	ldr	r3, [r3, #8]
 8004ab4:	2b05      	cmp	r3, #5
 8004ab6:	d110      	bne.n	8004ada <HAL_RCC_OscConfig+0x502>
 8004ab8:	4b25      	ldr	r3, [pc, #148]	; (8004b50 <HAL_RCC_OscConfig+0x578>)
 8004aba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004abe:	4a24      	ldr	r2, [pc, #144]	; (8004b50 <HAL_RCC_OscConfig+0x578>)
 8004ac0:	f043 0304 	orr.w	r3, r3, #4
 8004ac4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004ac8:	4b21      	ldr	r3, [pc, #132]	; (8004b50 <HAL_RCC_OscConfig+0x578>)
 8004aca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ace:	4a20      	ldr	r2, [pc, #128]	; (8004b50 <HAL_RCC_OscConfig+0x578>)
 8004ad0:	f043 0301 	orr.w	r3, r3, #1
 8004ad4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004ad8:	e00f      	b.n	8004afa <HAL_RCC_OscConfig+0x522>
 8004ada:	4b1d      	ldr	r3, [pc, #116]	; (8004b50 <HAL_RCC_OscConfig+0x578>)
 8004adc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ae0:	4a1b      	ldr	r2, [pc, #108]	; (8004b50 <HAL_RCC_OscConfig+0x578>)
 8004ae2:	f023 0301 	bic.w	r3, r3, #1
 8004ae6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004aea:	4b19      	ldr	r3, [pc, #100]	; (8004b50 <HAL_RCC_OscConfig+0x578>)
 8004aec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004af0:	4a17      	ldr	r2, [pc, #92]	; (8004b50 <HAL_RCC_OscConfig+0x578>)
 8004af2:	f023 0304 	bic.w	r3, r3, #4
 8004af6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	689b      	ldr	r3, [r3, #8]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d016      	beq.n	8004b30 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b02:	f7fe fd87 	bl	8003614 <HAL_GetTick>
 8004b06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b08:	e00a      	b.n	8004b20 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b0a:	f7fe fd83 	bl	8003614 <HAL_GetTick>
 8004b0e:	4602      	mov	r2, r0
 8004b10:	693b      	ldr	r3, [r7, #16]
 8004b12:	1ad3      	subs	r3, r2, r3
 8004b14:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d901      	bls.n	8004b20 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8004b1c:	2303      	movs	r3, #3
 8004b1e:	e139      	b.n	8004d94 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b20:	4b0b      	ldr	r3, [pc, #44]	; (8004b50 <HAL_RCC_OscConfig+0x578>)
 8004b22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b26:	f003 0302 	and.w	r3, r3, #2
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d0ed      	beq.n	8004b0a <HAL_RCC_OscConfig+0x532>
 8004b2e:	e01a      	b.n	8004b66 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b30:	f7fe fd70 	bl	8003614 <HAL_GetTick>
 8004b34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004b36:	e00f      	b.n	8004b58 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b38:	f7fe fd6c 	bl	8003614 <HAL_GetTick>
 8004b3c:	4602      	mov	r2, r0
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	1ad3      	subs	r3, r2, r3
 8004b42:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d906      	bls.n	8004b58 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004b4a:	2303      	movs	r3, #3
 8004b4c:	e122      	b.n	8004d94 <HAL_RCC_OscConfig+0x7bc>
 8004b4e:	bf00      	nop
 8004b50:	40021000 	.word	0x40021000
 8004b54:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004b58:	4b90      	ldr	r3, [pc, #576]	; (8004d9c <HAL_RCC_OscConfig+0x7c4>)
 8004b5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b5e:	f003 0302 	and.w	r3, r3, #2
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d1e8      	bne.n	8004b38 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004b66:	7ffb      	ldrb	r3, [r7, #31]
 8004b68:	2b01      	cmp	r3, #1
 8004b6a:	d105      	bne.n	8004b78 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b6c:	4b8b      	ldr	r3, [pc, #556]	; (8004d9c <HAL_RCC_OscConfig+0x7c4>)
 8004b6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b70:	4a8a      	ldr	r2, [pc, #552]	; (8004d9c <HAL_RCC_OscConfig+0x7c4>)
 8004b72:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b76:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	f000 8108 	beq.w	8004d92 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b86:	2b02      	cmp	r3, #2
 8004b88:	f040 80d0 	bne.w	8004d2c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004b8c:	4b83      	ldr	r3, [pc, #524]	; (8004d9c <HAL_RCC_OscConfig+0x7c4>)
 8004b8e:	68db      	ldr	r3, [r3, #12]
 8004b90:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	f003 0203 	and.w	r2, r3, #3
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b9c:	429a      	cmp	r2, r3
 8004b9e:	d130      	bne.n	8004c02 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004ba0:	697b      	ldr	r3, [r7, #20]
 8004ba2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004baa:	3b01      	subs	r3, #1
 8004bac:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bae:	429a      	cmp	r2, r3
 8004bb0:	d127      	bne.n	8004c02 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004bb2:	697b      	ldr	r3, [r7, #20]
 8004bb4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bbc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004bbe:	429a      	cmp	r2, r3
 8004bc0:	d11f      	bne.n	8004c02 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bc8:	687a      	ldr	r2, [r7, #4]
 8004bca:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004bcc:	2a07      	cmp	r2, #7
 8004bce:	bf14      	ite	ne
 8004bd0:	2201      	movne	r2, #1
 8004bd2:	2200      	moveq	r2, #0
 8004bd4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d113      	bne.n	8004c02 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004bda:	697b      	ldr	r3, [r7, #20]
 8004bdc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004be4:	085b      	lsrs	r3, r3, #1
 8004be6:	3b01      	subs	r3, #1
 8004be8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004bea:	429a      	cmp	r2, r3
 8004bec:	d109      	bne.n	8004c02 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf8:	085b      	lsrs	r3, r3, #1
 8004bfa:	3b01      	subs	r3, #1
 8004bfc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004bfe:	429a      	cmp	r2, r3
 8004c00:	d06e      	beq.n	8004ce0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004c02:	69bb      	ldr	r3, [r7, #24]
 8004c04:	2b0c      	cmp	r3, #12
 8004c06:	d069      	beq.n	8004cdc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004c08:	4b64      	ldr	r3, [pc, #400]	; (8004d9c <HAL_RCC_OscConfig+0x7c4>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d105      	bne.n	8004c20 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004c14:	4b61      	ldr	r3, [pc, #388]	; (8004d9c <HAL_RCC_OscConfig+0x7c4>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d001      	beq.n	8004c24 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004c20:	2301      	movs	r3, #1
 8004c22:	e0b7      	b.n	8004d94 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004c24:	4b5d      	ldr	r3, [pc, #372]	; (8004d9c <HAL_RCC_OscConfig+0x7c4>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4a5c      	ldr	r2, [pc, #368]	; (8004d9c <HAL_RCC_OscConfig+0x7c4>)
 8004c2a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004c2e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004c30:	f7fe fcf0 	bl	8003614 <HAL_GetTick>
 8004c34:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c36:	e008      	b.n	8004c4a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c38:	f7fe fcec 	bl	8003614 <HAL_GetTick>
 8004c3c:	4602      	mov	r2, r0
 8004c3e:	693b      	ldr	r3, [r7, #16]
 8004c40:	1ad3      	subs	r3, r2, r3
 8004c42:	2b02      	cmp	r3, #2
 8004c44:	d901      	bls.n	8004c4a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004c46:	2303      	movs	r3, #3
 8004c48:	e0a4      	b.n	8004d94 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c4a:	4b54      	ldr	r3, [pc, #336]	; (8004d9c <HAL_RCC_OscConfig+0x7c4>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d1f0      	bne.n	8004c38 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004c56:	4b51      	ldr	r3, [pc, #324]	; (8004d9c <HAL_RCC_OscConfig+0x7c4>)
 8004c58:	68da      	ldr	r2, [r3, #12]
 8004c5a:	4b51      	ldr	r3, [pc, #324]	; (8004da0 <HAL_RCC_OscConfig+0x7c8>)
 8004c5c:	4013      	ands	r3, r2
 8004c5e:	687a      	ldr	r2, [r7, #4]
 8004c60:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004c62:	687a      	ldr	r2, [r7, #4]
 8004c64:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004c66:	3a01      	subs	r2, #1
 8004c68:	0112      	lsls	r2, r2, #4
 8004c6a:	4311      	orrs	r1, r2
 8004c6c:	687a      	ldr	r2, [r7, #4]
 8004c6e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004c70:	0212      	lsls	r2, r2, #8
 8004c72:	4311      	orrs	r1, r2
 8004c74:	687a      	ldr	r2, [r7, #4]
 8004c76:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004c78:	0852      	lsrs	r2, r2, #1
 8004c7a:	3a01      	subs	r2, #1
 8004c7c:	0552      	lsls	r2, r2, #21
 8004c7e:	4311      	orrs	r1, r2
 8004c80:	687a      	ldr	r2, [r7, #4]
 8004c82:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004c84:	0852      	lsrs	r2, r2, #1
 8004c86:	3a01      	subs	r2, #1
 8004c88:	0652      	lsls	r2, r2, #25
 8004c8a:	4311      	orrs	r1, r2
 8004c8c:	687a      	ldr	r2, [r7, #4]
 8004c8e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004c90:	0912      	lsrs	r2, r2, #4
 8004c92:	0452      	lsls	r2, r2, #17
 8004c94:	430a      	orrs	r2, r1
 8004c96:	4941      	ldr	r1, [pc, #260]	; (8004d9c <HAL_RCC_OscConfig+0x7c4>)
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004c9c:	4b3f      	ldr	r3, [pc, #252]	; (8004d9c <HAL_RCC_OscConfig+0x7c4>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a3e      	ldr	r2, [pc, #248]	; (8004d9c <HAL_RCC_OscConfig+0x7c4>)
 8004ca2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ca6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004ca8:	4b3c      	ldr	r3, [pc, #240]	; (8004d9c <HAL_RCC_OscConfig+0x7c4>)
 8004caa:	68db      	ldr	r3, [r3, #12]
 8004cac:	4a3b      	ldr	r2, [pc, #236]	; (8004d9c <HAL_RCC_OscConfig+0x7c4>)
 8004cae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004cb2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004cb4:	f7fe fcae 	bl	8003614 <HAL_GetTick>
 8004cb8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004cba:	e008      	b.n	8004cce <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cbc:	f7fe fcaa 	bl	8003614 <HAL_GetTick>
 8004cc0:	4602      	mov	r2, r0
 8004cc2:	693b      	ldr	r3, [r7, #16]
 8004cc4:	1ad3      	subs	r3, r2, r3
 8004cc6:	2b02      	cmp	r3, #2
 8004cc8:	d901      	bls.n	8004cce <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004cca:	2303      	movs	r3, #3
 8004ccc:	e062      	b.n	8004d94 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004cce:	4b33      	ldr	r3, [pc, #204]	; (8004d9c <HAL_RCC_OscConfig+0x7c4>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d0f0      	beq.n	8004cbc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004cda:	e05a      	b.n	8004d92 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004cdc:	2301      	movs	r3, #1
 8004cde:	e059      	b.n	8004d94 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ce0:	4b2e      	ldr	r3, [pc, #184]	; (8004d9c <HAL_RCC_OscConfig+0x7c4>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d152      	bne.n	8004d92 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004cec:	4b2b      	ldr	r3, [pc, #172]	; (8004d9c <HAL_RCC_OscConfig+0x7c4>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a2a      	ldr	r2, [pc, #168]	; (8004d9c <HAL_RCC_OscConfig+0x7c4>)
 8004cf2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004cf6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004cf8:	4b28      	ldr	r3, [pc, #160]	; (8004d9c <HAL_RCC_OscConfig+0x7c4>)
 8004cfa:	68db      	ldr	r3, [r3, #12]
 8004cfc:	4a27      	ldr	r2, [pc, #156]	; (8004d9c <HAL_RCC_OscConfig+0x7c4>)
 8004cfe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d02:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004d04:	f7fe fc86 	bl	8003614 <HAL_GetTick>
 8004d08:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d0a:	e008      	b.n	8004d1e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d0c:	f7fe fc82 	bl	8003614 <HAL_GetTick>
 8004d10:	4602      	mov	r2, r0
 8004d12:	693b      	ldr	r3, [r7, #16]
 8004d14:	1ad3      	subs	r3, r2, r3
 8004d16:	2b02      	cmp	r3, #2
 8004d18:	d901      	bls.n	8004d1e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004d1a:	2303      	movs	r3, #3
 8004d1c:	e03a      	b.n	8004d94 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d1e:	4b1f      	ldr	r3, [pc, #124]	; (8004d9c <HAL_RCC_OscConfig+0x7c4>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d0f0      	beq.n	8004d0c <HAL_RCC_OscConfig+0x734>
 8004d2a:	e032      	b.n	8004d92 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004d2c:	69bb      	ldr	r3, [r7, #24]
 8004d2e:	2b0c      	cmp	r3, #12
 8004d30:	d02d      	beq.n	8004d8e <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d32:	4b1a      	ldr	r3, [pc, #104]	; (8004d9c <HAL_RCC_OscConfig+0x7c4>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a19      	ldr	r2, [pc, #100]	; (8004d9c <HAL_RCC_OscConfig+0x7c4>)
 8004d38:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d3c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8004d3e:	4b17      	ldr	r3, [pc, #92]	; (8004d9c <HAL_RCC_OscConfig+0x7c4>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d105      	bne.n	8004d56 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004d4a:	4b14      	ldr	r3, [pc, #80]	; (8004d9c <HAL_RCC_OscConfig+0x7c4>)
 8004d4c:	68db      	ldr	r3, [r3, #12]
 8004d4e:	4a13      	ldr	r2, [pc, #76]	; (8004d9c <HAL_RCC_OscConfig+0x7c4>)
 8004d50:	f023 0303 	bic.w	r3, r3, #3
 8004d54:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004d56:	4b11      	ldr	r3, [pc, #68]	; (8004d9c <HAL_RCC_OscConfig+0x7c4>)
 8004d58:	68db      	ldr	r3, [r3, #12]
 8004d5a:	4a10      	ldr	r2, [pc, #64]	; (8004d9c <HAL_RCC_OscConfig+0x7c4>)
 8004d5c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004d60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d64:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d66:	f7fe fc55 	bl	8003614 <HAL_GetTick>
 8004d6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d6c:	e008      	b.n	8004d80 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d6e:	f7fe fc51 	bl	8003614 <HAL_GetTick>
 8004d72:	4602      	mov	r2, r0
 8004d74:	693b      	ldr	r3, [r7, #16]
 8004d76:	1ad3      	subs	r3, r2, r3
 8004d78:	2b02      	cmp	r3, #2
 8004d7a:	d901      	bls.n	8004d80 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8004d7c:	2303      	movs	r3, #3
 8004d7e:	e009      	b.n	8004d94 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d80:	4b06      	ldr	r3, [pc, #24]	; (8004d9c <HAL_RCC_OscConfig+0x7c4>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d1f0      	bne.n	8004d6e <HAL_RCC_OscConfig+0x796>
 8004d8c:	e001      	b.n	8004d92 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	e000      	b.n	8004d94 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8004d92:	2300      	movs	r3, #0
}
 8004d94:	4618      	mov	r0, r3
 8004d96:	3720      	adds	r7, #32
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bd80      	pop	{r7, pc}
 8004d9c:	40021000 	.word	0x40021000
 8004da0:	f99d808c 	.word	0xf99d808c

08004da4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b084      	sub	sp, #16
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
 8004dac:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d101      	bne.n	8004db8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004db4:	2301      	movs	r3, #1
 8004db6:	e0c8      	b.n	8004f4a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004db8:	4b66      	ldr	r3, [pc, #408]	; (8004f54 <HAL_RCC_ClockConfig+0x1b0>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f003 0307 	and.w	r3, r3, #7
 8004dc0:	683a      	ldr	r2, [r7, #0]
 8004dc2:	429a      	cmp	r2, r3
 8004dc4:	d910      	bls.n	8004de8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dc6:	4b63      	ldr	r3, [pc, #396]	; (8004f54 <HAL_RCC_ClockConfig+0x1b0>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f023 0207 	bic.w	r2, r3, #7
 8004dce:	4961      	ldr	r1, [pc, #388]	; (8004f54 <HAL_RCC_ClockConfig+0x1b0>)
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dd6:	4b5f      	ldr	r3, [pc, #380]	; (8004f54 <HAL_RCC_ClockConfig+0x1b0>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f003 0307 	and.w	r3, r3, #7
 8004dde:	683a      	ldr	r2, [r7, #0]
 8004de0:	429a      	cmp	r2, r3
 8004de2:	d001      	beq.n	8004de8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004de4:	2301      	movs	r3, #1
 8004de6:	e0b0      	b.n	8004f4a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f003 0301 	and.w	r3, r3, #1
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d04c      	beq.n	8004e8e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	2b03      	cmp	r3, #3
 8004dfa:	d107      	bne.n	8004e0c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004dfc:	4b56      	ldr	r3, [pc, #344]	; (8004f58 <HAL_RCC_ClockConfig+0x1b4>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d121      	bne.n	8004e4c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8004e08:	2301      	movs	r3, #1
 8004e0a:	e09e      	b.n	8004f4a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	2b02      	cmp	r3, #2
 8004e12:	d107      	bne.n	8004e24 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004e14:	4b50      	ldr	r3, [pc, #320]	; (8004f58 <HAL_RCC_ClockConfig+0x1b4>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d115      	bne.n	8004e4c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004e20:	2301      	movs	r3, #1
 8004e22:	e092      	b.n	8004f4a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d107      	bne.n	8004e3c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004e2c:	4b4a      	ldr	r3, [pc, #296]	; (8004f58 <HAL_RCC_ClockConfig+0x1b4>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f003 0302 	and.w	r3, r3, #2
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d109      	bne.n	8004e4c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004e38:	2301      	movs	r3, #1
 8004e3a:	e086      	b.n	8004f4a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004e3c:	4b46      	ldr	r3, [pc, #280]	; (8004f58 <HAL_RCC_ClockConfig+0x1b4>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d101      	bne.n	8004e4c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004e48:	2301      	movs	r3, #1
 8004e4a:	e07e      	b.n	8004f4a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004e4c:	4b42      	ldr	r3, [pc, #264]	; (8004f58 <HAL_RCC_ClockConfig+0x1b4>)
 8004e4e:	689b      	ldr	r3, [r3, #8]
 8004e50:	f023 0203 	bic.w	r2, r3, #3
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	493f      	ldr	r1, [pc, #252]	; (8004f58 <HAL_RCC_ClockConfig+0x1b4>)
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e5e:	f7fe fbd9 	bl	8003614 <HAL_GetTick>
 8004e62:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e64:	e00a      	b.n	8004e7c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e66:	f7fe fbd5 	bl	8003614 <HAL_GetTick>
 8004e6a:	4602      	mov	r2, r0
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	1ad3      	subs	r3, r2, r3
 8004e70:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d901      	bls.n	8004e7c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8004e78:	2303      	movs	r3, #3
 8004e7a:	e066      	b.n	8004f4a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e7c:	4b36      	ldr	r3, [pc, #216]	; (8004f58 <HAL_RCC_ClockConfig+0x1b4>)
 8004e7e:	689b      	ldr	r3, [r3, #8]
 8004e80:	f003 020c 	and.w	r2, r3, #12
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	009b      	lsls	r3, r3, #2
 8004e8a:	429a      	cmp	r2, r3
 8004e8c:	d1eb      	bne.n	8004e66 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f003 0302 	and.w	r3, r3, #2
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d008      	beq.n	8004eac <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e9a:	4b2f      	ldr	r3, [pc, #188]	; (8004f58 <HAL_RCC_ClockConfig+0x1b4>)
 8004e9c:	689b      	ldr	r3, [r3, #8]
 8004e9e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	689b      	ldr	r3, [r3, #8]
 8004ea6:	492c      	ldr	r1, [pc, #176]	; (8004f58 <HAL_RCC_ClockConfig+0x1b4>)
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004eac:	4b29      	ldr	r3, [pc, #164]	; (8004f54 <HAL_RCC_ClockConfig+0x1b0>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f003 0307 	and.w	r3, r3, #7
 8004eb4:	683a      	ldr	r2, [r7, #0]
 8004eb6:	429a      	cmp	r2, r3
 8004eb8:	d210      	bcs.n	8004edc <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004eba:	4b26      	ldr	r3, [pc, #152]	; (8004f54 <HAL_RCC_ClockConfig+0x1b0>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f023 0207 	bic.w	r2, r3, #7
 8004ec2:	4924      	ldr	r1, [pc, #144]	; (8004f54 <HAL_RCC_ClockConfig+0x1b0>)
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004eca:	4b22      	ldr	r3, [pc, #136]	; (8004f54 <HAL_RCC_ClockConfig+0x1b0>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f003 0307 	and.w	r3, r3, #7
 8004ed2:	683a      	ldr	r2, [r7, #0]
 8004ed4:	429a      	cmp	r2, r3
 8004ed6:	d001      	beq.n	8004edc <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8004ed8:	2301      	movs	r3, #1
 8004eda:	e036      	b.n	8004f4a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f003 0304 	and.w	r3, r3, #4
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d008      	beq.n	8004efa <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ee8:	4b1b      	ldr	r3, [pc, #108]	; (8004f58 <HAL_RCC_ClockConfig+0x1b4>)
 8004eea:	689b      	ldr	r3, [r3, #8]
 8004eec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	68db      	ldr	r3, [r3, #12]
 8004ef4:	4918      	ldr	r1, [pc, #96]	; (8004f58 <HAL_RCC_ClockConfig+0x1b4>)
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f003 0308 	and.w	r3, r3, #8
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d009      	beq.n	8004f1a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004f06:	4b14      	ldr	r3, [pc, #80]	; (8004f58 <HAL_RCC_ClockConfig+0x1b4>)
 8004f08:	689b      	ldr	r3, [r3, #8]
 8004f0a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	691b      	ldr	r3, [r3, #16]
 8004f12:	00db      	lsls	r3, r3, #3
 8004f14:	4910      	ldr	r1, [pc, #64]	; (8004f58 <HAL_RCC_ClockConfig+0x1b4>)
 8004f16:	4313      	orrs	r3, r2
 8004f18:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004f1a:	f000 f825 	bl	8004f68 <HAL_RCC_GetSysClockFreq>
 8004f1e:	4602      	mov	r2, r0
 8004f20:	4b0d      	ldr	r3, [pc, #52]	; (8004f58 <HAL_RCC_ClockConfig+0x1b4>)
 8004f22:	689b      	ldr	r3, [r3, #8]
 8004f24:	091b      	lsrs	r3, r3, #4
 8004f26:	f003 030f 	and.w	r3, r3, #15
 8004f2a:	490c      	ldr	r1, [pc, #48]	; (8004f5c <HAL_RCC_ClockConfig+0x1b8>)
 8004f2c:	5ccb      	ldrb	r3, [r1, r3]
 8004f2e:	f003 031f 	and.w	r3, r3, #31
 8004f32:	fa22 f303 	lsr.w	r3, r2, r3
 8004f36:	4a0a      	ldr	r2, [pc, #40]	; (8004f60 <HAL_RCC_ClockConfig+0x1bc>)
 8004f38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004f3a:	4b0a      	ldr	r3, [pc, #40]	; (8004f64 <HAL_RCC_ClockConfig+0x1c0>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4618      	mov	r0, r3
 8004f40:	f7fe fb18 	bl	8003574 <HAL_InitTick>
 8004f44:	4603      	mov	r3, r0
 8004f46:	72fb      	strb	r3, [r7, #11]

  return status;
 8004f48:	7afb      	ldrb	r3, [r7, #11]
}
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	3710      	adds	r7, #16
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd80      	pop	{r7, pc}
 8004f52:	bf00      	nop
 8004f54:	40022000 	.word	0x40022000
 8004f58:	40021000 	.word	0x40021000
 8004f5c:	08006d08 	.word	0x08006d08
 8004f60:	20000000 	.word	0x20000000
 8004f64:	20000004 	.word	0x20000004

08004f68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b089      	sub	sp, #36	; 0x24
 8004f6c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004f6e:	2300      	movs	r3, #0
 8004f70:	61fb      	str	r3, [r7, #28]
 8004f72:	2300      	movs	r3, #0
 8004f74:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f76:	4b3e      	ldr	r3, [pc, #248]	; (8005070 <HAL_RCC_GetSysClockFreq+0x108>)
 8004f78:	689b      	ldr	r3, [r3, #8]
 8004f7a:	f003 030c 	and.w	r3, r3, #12
 8004f7e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004f80:	4b3b      	ldr	r3, [pc, #236]	; (8005070 <HAL_RCC_GetSysClockFreq+0x108>)
 8004f82:	68db      	ldr	r3, [r3, #12]
 8004f84:	f003 0303 	and.w	r3, r3, #3
 8004f88:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004f8a:	693b      	ldr	r3, [r7, #16]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d005      	beq.n	8004f9c <HAL_RCC_GetSysClockFreq+0x34>
 8004f90:	693b      	ldr	r3, [r7, #16]
 8004f92:	2b0c      	cmp	r3, #12
 8004f94:	d121      	bne.n	8004fda <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	2b01      	cmp	r3, #1
 8004f9a:	d11e      	bne.n	8004fda <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004f9c:	4b34      	ldr	r3, [pc, #208]	; (8005070 <HAL_RCC_GetSysClockFreq+0x108>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f003 0308 	and.w	r3, r3, #8
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d107      	bne.n	8004fb8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004fa8:	4b31      	ldr	r3, [pc, #196]	; (8005070 <HAL_RCC_GetSysClockFreq+0x108>)
 8004faa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004fae:	0a1b      	lsrs	r3, r3, #8
 8004fb0:	f003 030f 	and.w	r3, r3, #15
 8004fb4:	61fb      	str	r3, [r7, #28]
 8004fb6:	e005      	b.n	8004fc4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004fb8:	4b2d      	ldr	r3, [pc, #180]	; (8005070 <HAL_RCC_GetSysClockFreq+0x108>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	091b      	lsrs	r3, r3, #4
 8004fbe:	f003 030f 	and.w	r3, r3, #15
 8004fc2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004fc4:	4a2b      	ldr	r2, [pc, #172]	; (8005074 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004fc6:	69fb      	ldr	r3, [r7, #28]
 8004fc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004fcc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d10d      	bne.n	8004ff0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004fd4:	69fb      	ldr	r3, [r7, #28]
 8004fd6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004fd8:	e00a      	b.n	8004ff0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004fda:	693b      	ldr	r3, [r7, #16]
 8004fdc:	2b04      	cmp	r3, #4
 8004fde:	d102      	bne.n	8004fe6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004fe0:	4b25      	ldr	r3, [pc, #148]	; (8005078 <HAL_RCC_GetSysClockFreq+0x110>)
 8004fe2:	61bb      	str	r3, [r7, #24]
 8004fe4:	e004      	b.n	8004ff0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004fe6:	693b      	ldr	r3, [r7, #16]
 8004fe8:	2b08      	cmp	r3, #8
 8004fea:	d101      	bne.n	8004ff0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004fec:	4b23      	ldr	r3, [pc, #140]	; (800507c <HAL_RCC_GetSysClockFreq+0x114>)
 8004fee:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004ff0:	693b      	ldr	r3, [r7, #16]
 8004ff2:	2b0c      	cmp	r3, #12
 8004ff4:	d134      	bne.n	8005060 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004ff6:	4b1e      	ldr	r3, [pc, #120]	; (8005070 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ff8:	68db      	ldr	r3, [r3, #12]
 8004ffa:	f003 0303 	and.w	r3, r3, #3
 8004ffe:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	2b02      	cmp	r3, #2
 8005004:	d003      	beq.n	800500e <HAL_RCC_GetSysClockFreq+0xa6>
 8005006:	68bb      	ldr	r3, [r7, #8]
 8005008:	2b03      	cmp	r3, #3
 800500a:	d003      	beq.n	8005014 <HAL_RCC_GetSysClockFreq+0xac>
 800500c:	e005      	b.n	800501a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800500e:	4b1a      	ldr	r3, [pc, #104]	; (8005078 <HAL_RCC_GetSysClockFreq+0x110>)
 8005010:	617b      	str	r3, [r7, #20]
      break;
 8005012:	e005      	b.n	8005020 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005014:	4b19      	ldr	r3, [pc, #100]	; (800507c <HAL_RCC_GetSysClockFreq+0x114>)
 8005016:	617b      	str	r3, [r7, #20]
      break;
 8005018:	e002      	b.n	8005020 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800501a:	69fb      	ldr	r3, [r7, #28]
 800501c:	617b      	str	r3, [r7, #20]
      break;
 800501e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005020:	4b13      	ldr	r3, [pc, #76]	; (8005070 <HAL_RCC_GetSysClockFreq+0x108>)
 8005022:	68db      	ldr	r3, [r3, #12]
 8005024:	091b      	lsrs	r3, r3, #4
 8005026:	f003 0307 	and.w	r3, r3, #7
 800502a:	3301      	adds	r3, #1
 800502c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800502e:	4b10      	ldr	r3, [pc, #64]	; (8005070 <HAL_RCC_GetSysClockFreq+0x108>)
 8005030:	68db      	ldr	r3, [r3, #12]
 8005032:	0a1b      	lsrs	r3, r3, #8
 8005034:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005038:	697a      	ldr	r2, [r7, #20]
 800503a:	fb02 f203 	mul.w	r2, r2, r3
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	fbb2 f3f3 	udiv	r3, r2, r3
 8005044:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005046:	4b0a      	ldr	r3, [pc, #40]	; (8005070 <HAL_RCC_GetSysClockFreq+0x108>)
 8005048:	68db      	ldr	r3, [r3, #12]
 800504a:	0e5b      	lsrs	r3, r3, #25
 800504c:	f003 0303 	and.w	r3, r3, #3
 8005050:	3301      	adds	r3, #1
 8005052:	005b      	lsls	r3, r3, #1
 8005054:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005056:	697a      	ldr	r2, [r7, #20]
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	fbb2 f3f3 	udiv	r3, r2, r3
 800505e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005060:	69bb      	ldr	r3, [r7, #24]
}
 8005062:	4618      	mov	r0, r3
 8005064:	3724      	adds	r7, #36	; 0x24
 8005066:	46bd      	mov	sp, r7
 8005068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506c:	4770      	bx	lr
 800506e:	bf00      	nop
 8005070:	40021000 	.word	0x40021000
 8005074:	08006d20 	.word	0x08006d20
 8005078:	00f42400 	.word	0x00f42400
 800507c:	007a1200 	.word	0x007a1200

08005080 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005080:	b480      	push	{r7}
 8005082:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005084:	4b03      	ldr	r3, [pc, #12]	; (8005094 <HAL_RCC_GetHCLKFreq+0x14>)
 8005086:	681b      	ldr	r3, [r3, #0]
}
 8005088:	4618      	mov	r0, r3
 800508a:	46bd      	mov	sp, r7
 800508c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005090:	4770      	bx	lr
 8005092:	bf00      	nop
 8005094:	20000000 	.word	0x20000000

08005098 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800509c:	f7ff fff0 	bl	8005080 <HAL_RCC_GetHCLKFreq>
 80050a0:	4602      	mov	r2, r0
 80050a2:	4b06      	ldr	r3, [pc, #24]	; (80050bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80050a4:	689b      	ldr	r3, [r3, #8]
 80050a6:	0a1b      	lsrs	r3, r3, #8
 80050a8:	f003 0307 	and.w	r3, r3, #7
 80050ac:	4904      	ldr	r1, [pc, #16]	; (80050c0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80050ae:	5ccb      	ldrb	r3, [r1, r3]
 80050b0:	f003 031f 	and.w	r3, r3, #31
 80050b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	bd80      	pop	{r7, pc}
 80050bc:	40021000 	.word	0x40021000
 80050c0:	08006d18 	.word	0x08006d18

080050c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80050c8:	f7ff ffda 	bl	8005080 <HAL_RCC_GetHCLKFreq>
 80050cc:	4602      	mov	r2, r0
 80050ce:	4b06      	ldr	r3, [pc, #24]	; (80050e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80050d0:	689b      	ldr	r3, [r3, #8]
 80050d2:	0adb      	lsrs	r3, r3, #11
 80050d4:	f003 0307 	and.w	r3, r3, #7
 80050d8:	4904      	ldr	r1, [pc, #16]	; (80050ec <HAL_RCC_GetPCLK2Freq+0x28>)
 80050da:	5ccb      	ldrb	r3, [r1, r3]
 80050dc:	f003 031f 	and.w	r3, r3, #31
 80050e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050e4:	4618      	mov	r0, r3
 80050e6:	bd80      	pop	{r7, pc}
 80050e8:	40021000 	.word	0x40021000
 80050ec:	08006d18 	.word	0x08006d18

080050f0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b086      	sub	sp, #24
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80050f8:	2300      	movs	r3, #0
 80050fa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80050fc:	4b2a      	ldr	r3, [pc, #168]	; (80051a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80050fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005100:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005104:	2b00      	cmp	r3, #0
 8005106:	d003      	beq.n	8005110 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005108:	f7ff f936 	bl	8004378 <HAL_PWREx_GetVoltageRange>
 800510c:	6178      	str	r0, [r7, #20]
 800510e:	e014      	b.n	800513a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005110:	4b25      	ldr	r3, [pc, #148]	; (80051a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005112:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005114:	4a24      	ldr	r2, [pc, #144]	; (80051a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005116:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800511a:	6593      	str	r3, [r2, #88]	; 0x58
 800511c:	4b22      	ldr	r3, [pc, #136]	; (80051a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800511e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005120:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005124:	60fb      	str	r3, [r7, #12]
 8005126:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005128:	f7ff f926 	bl	8004378 <HAL_PWREx_GetVoltageRange>
 800512c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800512e:	4b1e      	ldr	r3, [pc, #120]	; (80051a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005130:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005132:	4a1d      	ldr	r2, [pc, #116]	; (80051a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005134:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005138:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800513a:	697b      	ldr	r3, [r7, #20]
 800513c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005140:	d10b      	bne.n	800515a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2b80      	cmp	r3, #128	; 0x80
 8005146:	d919      	bls.n	800517c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2ba0      	cmp	r3, #160	; 0xa0
 800514c:	d902      	bls.n	8005154 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800514e:	2302      	movs	r3, #2
 8005150:	613b      	str	r3, [r7, #16]
 8005152:	e013      	b.n	800517c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005154:	2301      	movs	r3, #1
 8005156:	613b      	str	r3, [r7, #16]
 8005158:	e010      	b.n	800517c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2b80      	cmp	r3, #128	; 0x80
 800515e:	d902      	bls.n	8005166 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005160:	2303      	movs	r3, #3
 8005162:	613b      	str	r3, [r7, #16]
 8005164:	e00a      	b.n	800517c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2b80      	cmp	r3, #128	; 0x80
 800516a:	d102      	bne.n	8005172 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800516c:	2302      	movs	r3, #2
 800516e:	613b      	str	r3, [r7, #16]
 8005170:	e004      	b.n	800517c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2b70      	cmp	r3, #112	; 0x70
 8005176:	d101      	bne.n	800517c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005178:	2301      	movs	r3, #1
 800517a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800517c:	4b0b      	ldr	r3, [pc, #44]	; (80051ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f023 0207 	bic.w	r2, r3, #7
 8005184:	4909      	ldr	r1, [pc, #36]	; (80051ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005186:	693b      	ldr	r3, [r7, #16]
 8005188:	4313      	orrs	r3, r2
 800518a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800518c:	4b07      	ldr	r3, [pc, #28]	; (80051ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f003 0307 	and.w	r3, r3, #7
 8005194:	693a      	ldr	r2, [r7, #16]
 8005196:	429a      	cmp	r2, r3
 8005198:	d001      	beq.n	800519e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800519a:	2301      	movs	r3, #1
 800519c:	e000      	b.n	80051a0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800519e:	2300      	movs	r3, #0
}
 80051a0:	4618      	mov	r0, r3
 80051a2:	3718      	adds	r7, #24
 80051a4:	46bd      	mov	sp, r7
 80051a6:	bd80      	pop	{r7, pc}
 80051a8:	40021000 	.word	0x40021000
 80051ac:	40022000 	.word	0x40022000

080051b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b086      	sub	sp, #24
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80051b8:	2300      	movs	r3, #0
 80051ba:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80051bc:	2300      	movs	r3, #0
 80051be:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d041      	beq.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80051d0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80051d4:	d02a      	beq.n	800522c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80051d6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80051da:	d824      	bhi.n	8005226 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80051dc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80051e0:	d008      	beq.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80051e2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80051e6:	d81e      	bhi.n	8005226 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d00a      	beq.n	8005202 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80051ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80051f0:	d010      	beq.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80051f2:	e018      	b.n	8005226 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80051f4:	4b86      	ldr	r3, [pc, #536]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051f6:	68db      	ldr	r3, [r3, #12]
 80051f8:	4a85      	ldr	r2, [pc, #532]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051fe:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005200:	e015      	b.n	800522e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	3304      	adds	r3, #4
 8005206:	2100      	movs	r1, #0
 8005208:	4618      	mov	r0, r3
 800520a:	f000 facb 	bl	80057a4 <RCCEx_PLLSAI1_Config>
 800520e:	4603      	mov	r3, r0
 8005210:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005212:	e00c      	b.n	800522e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	3320      	adds	r3, #32
 8005218:	2100      	movs	r1, #0
 800521a:	4618      	mov	r0, r3
 800521c:	f000 fbb6 	bl	800598c <RCCEx_PLLSAI2_Config>
 8005220:	4603      	mov	r3, r0
 8005222:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005224:	e003      	b.n	800522e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005226:	2301      	movs	r3, #1
 8005228:	74fb      	strb	r3, [r7, #19]
      break;
 800522a:	e000      	b.n	800522e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800522c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800522e:	7cfb      	ldrb	r3, [r7, #19]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d10b      	bne.n	800524c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005234:	4b76      	ldr	r3, [pc, #472]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005236:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800523a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005242:	4973      	ldr	r1, [pc, #460]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005244:	4313      	orrs	r3, r2
 8005246:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800524a:	e001      	b.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800524c:	7cfb      	ldrb	r3, [r7, #19]
 800524e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005258:	2b00      	cmp	r3, #0
 800525a:	d041      	beq.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005260:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005264:	d02a      	beq.n	80052bc <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8005266:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800526a:	d824      	bhi.n	80052b6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800526c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005270:	d008      	beq.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005272:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005276:	d81e      	bhi.n	80052b6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005278:	2b00      	cmp	r3, #0
 800527a:	d00a      	beq.n	8005292 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800527c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005280:	d010      	beq.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005282:	e018      	b.n	80052b6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005284:	4b62      	ldr	r3, [pc, #392]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005286:	68db      	ldr	r3, [r3, #12]
 8005288:	4a61      	ldr	r2, [pc, #388]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800528a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800528e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005290:	e015      	b.n	80052be <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	3304      	adds	r3, #4
 8005296:	2100      	movs	r1, #0
 8005298:	4618      	mov	r0, r3
 800529a:	f000 fa83 	bl	80057a4 <RCCEx_PLLSAI1_Config>
 800529e:	4603      	mov	r3, r0
 80052a0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80052a2:	e00c      	b.n	80052be <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	3320      	adds	r3, #32
 80052a8:	2100      	movs	r1, #0
 80052aa:	4618      	mov	r0, r3
 80052ac:	f000 fb6e 	bl	800598c <RCCEx_PLLSAI2_Config>
 80052b0:	4603      	mov	r3, r0
 80052b2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80052b4:	e003      	b.n	80052be <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80052b6:	2301      	movs	r3, #1
 80052b8:	74fb      	strb	r3, [r7, #19]
      break;
 80052ba:	e000      	b.n	80052be <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80052bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80052be:	7cfb      	ldrb	r3, [r7, #19]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d10b      	bne.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80052c4:	4b52      	ldr	r3, [pc, #328]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052ca:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80052d2:	494f      	ldr	r1, [pc, #316]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052d4:	4313      	orrs	r3, r2
 80052d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80052da:	e001      	b.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052dc:	7cfb      	ldrb	r3, [r7, #19]
 80052de:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	f000 80a0 	beq.w	800542e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80052ee:	2300      	movs	r3, #0
 80052f0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80052f2:	4b47      	ldr	r3, [pc, #284]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d101      	bne.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80052fe:	2301      	movs	r3, #1
 8005300:	e000      	b.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8005302:	2300      	movs	r3, #0
 8005304:	2b00      	cmp	r3, #0
 8005306:	d00d      	beq.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005308:	4b41      	ldr	r3, [pc, #260]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800530a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800530c:	4a40      	ldr	r2, [pc, #256]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800530e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005312:	6593      	str	r3, [r2, #88]	; 0x58
 8005314:	4b3e      	ldr	r3, [pc, #248]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005316:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005318:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800531c:	60bb      	str	r3, [r7, #8]
 800531e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005320:	2301      	movs	r3, #1
 8005322:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005324:	4b3b      	ldr	r3, [pc, #236]	; (8005414 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4a3a      	ldr	r2, [pc, #232]	; (8005414 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800532a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800532e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005330:	f7fe f970 	bl	8003614 <HAL_GetTick>
 8005334:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005336:	e009      	b.n	800534c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005338:	f7fe f96c 	bl	8003614 <HAL_GetTick>
 800533c:	4602      	mov	r2, r0
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	1ad3      	subs	r3, r2, r3
 8005342:	2b02      	cmp	r3, #2
 8005344:	d902      	bls.n	800534c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8005346:	2303      	movs	r3, #3
 8005348:	74fb      	strb	r3, [r7, #19]
        break;
 800534a:	e005      	b.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800534c:	4b31      	ldr	r3, [pc, #196]	; (8005414 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005354:	2b00      	cmp	r3, #0
 8005356:	d0ef      	beq.n	8005338 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005358:	7cfb      	ldrb	r3, [r7, #19]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d15c      	bne.n	8005418 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800535e:	4b2c      	ldr	r3, [pc, #176]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005360:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005364:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005368:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800536a:	697b      	ldr	r3, [r7, #20]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d01f      	beq.n	80053b0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005376:	697a      	ldr	r2, [r7, #20]
 8005378:	429a      	cmp	r2, r3
 800537a:	d019      	beq.n	80053b0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800537c:	4b24      	ldr	r3, [pc, #144]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800537e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005382:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005386:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005388:	4b21      	ldr	r3, [pc, #132]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800538a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800538e:	4a20      	ldr	r2, [pc, #128]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005390:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005394:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005398:	4b1d      	ldr	r3, [pc, #116]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800539a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800539e:	4a1c      	ldr	r2, [pc, #112]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80053a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80053a8:	4a19      	ldr	r2, [pc, #100]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80053aa:	697b      	ldr	r3, [r7, #20]
 80053ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80053b0:	697b      	ldr	r3, [r7, #20]
 80053b2:	f003 0301 	and.w	r3, r3, #1
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d016      	beq.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053ba:	f7fe f92b 	bl	8003614 <HAL_GetTick>
 80053be:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80053c0:	e00b      	b.n	80053da <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053c2:	f7fe f927 	bl	8003614 <HAL_GetTick>
 80053c6:	4602      	mov	r2, r0
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	1ad3      	subs	r3, r2, r3
 80053cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d902      	bls.n	80053da <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80053d4:	2303      	movs	r3, #3
 80053d6:	74fb      	strb	r3, [r7, #19]
            break;
 80053d8:	e006      	b.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80053da:	4b0d      	ldr	r3, [pc, #52]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80053dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053e0:	f003 0302 	and.w	r3, r3, #2
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d0ec      	beq.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80053e8:	7cfb      	ldrb	r3, [r7, #19]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d10c      	bne.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80053ee:	4b08      	ldr	r3, [pc, #32]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80053f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053fe:	4904      	ldr	r1, [pc, #16]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005400:	4313      	orrs	r3, r2
 8005402:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005406:	e009      	b.n	800541c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005408:	7cfb      	ldrb	r3, [r7, #19]
 800540a:	74bb      	strb	r3, [r7, #18]
 800540c:	e006      	b.n	800541c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800540e:	bf00      	nop
 8005410:	40021000 	.word	0x40021000
 8005414:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005418:	7cfb      	ldrb	r3, [r7, #19]
 800541a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800541c:	7c7b      	ldrb	r3, [r7, #17]
 800541e:	2b01      	cmp	r3, #1
 8005420:	d105      	bne.n	800542e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005422:	4b9e      	ldr	r3, [pc, #632]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005424:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005426:	4a9d      	ldr	r2, [pc, #628]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005428:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800542c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f003 0301 	and.w	r3, r3, #1
 8005436:	2b00      	cmp	r3, #0
 8005438:	d00a      	beq.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800543a:	4b98      	ldr	r3, [pc, #608]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800543c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005440:	f023 0203 	bic.w	r2, r3, #3
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005448:	4994      	ldr	r1, [pc, #592]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800544a:	4313      	orrs	r3, r2
 800544c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f003 0302 	and.w	r3, r3, #2
 8005458:	2b00      	cmp	r3, #0
 800545a:	d00a      	beq.n	8005472 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800545c:	4b8f      	ldr	r3, [pc, #572]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800545e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005462:	f023 020c 	bic.w	r2, r3, #12
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800546a:	498c      	ldr	r1, [pc, #560]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800546c:	4313      	orrs	r3, r2
 800546e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f003 0304 	and.w	r3, r3, #4
 800547a:	2b00      	cmp	r3, #0
 800547c:	d00a      	beq.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800547e:	4b87      	ldr	r3, [pc, #540]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005480:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005484:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800548c:	4983      	ldr	r1, [pc, #524]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800548e:	4313      	orrs	r3, r2
 8005490:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f003 0308 	and.w	r3, r3, #8
 800549c:	2b00      	cmp	r3, #0
 800549e:	d00a      	beq.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80054a0:	4b7e      	ldr	r3, [pc, #504]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054a6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054ae:	497b      	ldr	r1, [pc, #492]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054b0:	4313      	orrs	r3, r2
 80054b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f003 0310 	and.w	r3, r3, #16
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d00a      	beq.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80054c2:	4b76      	ldr	r3, [pc, #472]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054d0:	4972      	ldr	r1, [pc, #456]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054d2:	4313      	orrs	r3, r2
 80054d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f003 0320 	and.w	r3, r3, #32
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d00a      	beq.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80054e4:	4b6d      	ldr	r3, [pc, #436]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054ea:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054f2:	496a      	ldr	r1, [pc, #424]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054f4:	4313      	orrs	r3, r2
 80054f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005502:	2b00      	cmp	r3, #0
 8005504:	d00a      	beq.n	800551c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005506:	4b65      	ldr	r3, [pc, #404]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005508:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800550c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005514:	4961      	ldr	r1, [pc, #388]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005516:	4313      	orrs	r3, r2
 8005518:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005524:	2b00      	cmp	r3, #0
 8005526:	d00a      	beq.n	800553e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005528:	4b5c      	ldr	r3, [pc, #368]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800552a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800552e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005536:	4959      	ldr	r1, [pc, #356]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005538:	4313      	orrs	r3, r2
 800553a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005546:	2b00      	cmp	r3, #0
 8005548:	d00a      	beq.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800554a:	4b54      	ldr	r3, [pc, #336]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800554c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005550:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005558:	4950      	ldr	r1, [pc, #320]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800555a:	4313      	orrs	r3, r2
 800555c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005568:	2b00      	cmp	r3, #0
 800556a:	d00a      	beq.n	8005582 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800556c:	4b4b      	ldr	r3, [pc, #300]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800556e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005572:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800557a:	4948      	ldr	r1, [pc, #288]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800557c:	4313      	orrs	r3, r2
 800557e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800558a:	2b00      	cmp	r3, #0
 800558c:	d00a      	beq.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800558e:	4b43      	ldr	r3, [pc, #268]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005590:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005594:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800559c:	493f      	ldr	r1, [pc, #252]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800559e:	4313      	orrs	r3, r2
 80055a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d028      	beq.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80055b0:	4b3a      	ldr	r3, [pc, #232]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055b6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80055be:	4937      	ldr	r1, [pc, #220]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055c0:	4313      	orrs	r3, r2
 80055c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80055ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80055ce:	d106      	bne.n	80055de <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80055d0:	4b32      	ldr	r3, [pc, #200]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055d2:	68db      	ldr	r3, [r3, #12]
 80055d4:	4a31      	ldr	r2, [pc, #196]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80055da:	60d3      	str	r3, [r2, #12]
 80055dc:	e011      	b.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80055e2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80055e6:	d10c      	bne.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	3304      	adds	r3, #4
 80055ec:	2101      	movs	r1, #1
 80055ee:	4618      	mov	r0, r3
 80055f0:	f000 f8d8 	bl	80057a4 <RCCEx_PLLSAI1_Config>
 80055f4:	4603      	mov	r3, r0
 80055f6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80055f8:	7cfb      	ldrb	r3, [r7, #19]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d001      	beq.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80055fe:	7cfb      	ldrb	r3, [r7, #19]
 8005600:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800560a:	2b00      	cmp	r3, #0
 800560c:	d028      	beq.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800560e:	4b23      	ldr	r3, [pc, #140]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005610:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005614:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800561c:	491f      	ldr	r1, [pc, #124]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800561e:	4313      	orrs	r3, r2
 8005620:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005628:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800562c:	d106      	bne.n	800563c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800562e:	4b1b      	ldr	r3, [pc, #108]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005630:	68db      	ldr	r3, [r3, #12]
 8005632:	4a1a      	ldr	r2, [pc, #104]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005638:	60d3      	str	r3, [r2, #12]
 800563a:	e011      	b.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005640:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005644:	d10c      	bne.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	3304      	adds	r3, #4
 800564a:	2101      	movs	r1, #1
 800564c:	4618      	mov	r0, r3
 800564e:	f000 f8a9 	bl	80057a4 <RCCEx_PLLSAI1_Config>
 8005652:	4603      	mov	r3, r0
 8005654:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005656:	7cfb      	ldrb	r3, [r7, #19]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d001      	beq.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800565c:	7cfb      	ldrb	r3, [r7, #19]
 800565e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005668:	2b00      	cmp	r3, #0
 800566a:	d02b      	beq.n	80056c4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800566c:	4b0b      	ldr	r3, [pc, #44]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800566e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005672:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800567a:	4908      	ldr	r1, [pc, #32]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800567c:	4313      	orrs	r3, r2
 800567e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005686:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800568a:	d109      	bne.n	80056a0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800568c:	4b03      	ldr	r3, [pc, #12]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800568e:	68db      	ldr	r3, [r3, #12]
 8005690:	4a02      	ldr	r2, [pc, #8]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005692:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005696:	60d3      	str	r3, [r2, #12]
 8005698:	e014      	b.n	80056c4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800569a:	bf00      	nop
 800569c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056a4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80056a8:	d10c      	bne.n	80056c4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	3304      	adds	r3, #4
 80056ae:	2101      	movs	r1, #1
 80056b0:	4618      	mov	r0, r3
 80056b2:	f000 f877 	bl	80057a4 <RCCEx_PLLSAI1_Config>
 80056b6:	4603      	mov	r3, r0
 80056b8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80056ba:	7cfb      	ldrb	r3, [r7, #19]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d001      	beq.n	80056c4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80056c0:	7cfb      	ldrb	r3, [r7, #19]
 80056c2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d02f      	beq.n	8005730 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80056d0:	4b2b      	ldr	r3, [pc, #172]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80056d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056d6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80056de:	4928      	ldr	r1, [pc, #160]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80056e0:	4313      	orrs	r3, r2
 80056e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80056ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80056ee:	d10d      	bne.n	800570c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	3304      	adds	r3, #4
 80056f4:	2102      	movs	r1, #2
 80056f6:	4618      	mov	r0, r3
 80056f8:	f000 f854 	bl	80057a4 <RCCEx_PLLSAI1_Config>
 80056fc:	4603      	mov	r3, r0
 80056fe:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005700:	7cfb      	ldrb	r3, [r7, #19]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d014      	beq.n	8005730 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005706:	7cfb      	ldrb	r3, [r7, #19]
 8005708:	74bb      	strb	r3, [r7, #18]
 800570a:	e011      	b.n	8005730 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005710:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005714:	d10c      	bne.n	8005730 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	3320      	adds	r3, #32
 800571a:	2102      	movs	r1, #2
 800571c:	4618      	mov	r0, r3
 800571e:	f000 f935 	bl	800598c <RCCEx_PLLSAI2_Config>
 8005722:	4603      	mov	r3, r0
 8005724:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005726:	7cfb      	ldrb	r3, [r7, #19]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d001      	beq.n	8005730 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800572c:	7cfb      	ldrb	r3, [r7, #19]
 800572e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005738:	2b00      	cmp	r3, #0
 800573a:	d00a      	beq.n	8005752 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800573c:	4b10      	ldr	r3, [pc, #64]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800573e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005742:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800574a:	490d      	ldr	r1, [pc, #52]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800574c:	4313      	orrs	r3, r2
 800574e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800575a:	2b00      	cmp	r3, #0
 800575c:	d00b      	beq.n	8005776 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800575e:	4b08      	ldr	r3, [pc, #32]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005760:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005764:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800576e:	4904      	ldr	r1, [pc, #16]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005770:	4313      	orrs	r3, r2
 8005772:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005776:	7cbb      	ldrb	r3, [r7, #18]
}
 8005778:	4618      	mov	r0, r3
 800577a:	3718      	adds	r7, #24
 800577c:	46bd      	mov	sp, r7
 800577e:	bd80      	pop	{r7, pc}
 8005780:	40021000 	.word	0x40021000

08005784 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8005784:	b480      	push	{r7}
 8005786:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8005788:	4b05      	ldr	r3, [pc, #20]	; (80057a0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a04      	ldr	r2, [pc, #16]	; (80057a0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800578e:	f043 0304 	orr.w	r3, r3, #4
 8005792:	6013      	str	r3, [r2, #0]
}
 8005794:	bf00      	nop
 8005796:	46bd      	mov	sp, r7
 8005798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579c:	4770      	bx	lr
 800579e:	bf00      	nop
 80057a0:	40021000 	.word	0x40021000

080057a4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b084      	sub	sp, #16
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
 80057ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80057ae:	2300      	movs	r3, #0
 80057b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80057b2:	4b75      	ldr	r3, [pc, #468]	; (8005988 <RCCEx_PLLSAI1_Config+0x1e4>)
 80057b4:	68db      	ldr	r3, [r3, #12]
 80057b6:	f003 0303 	and.w	r3, r3, #3
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d018      	beq.n	80057f0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80057be:	4b72      	ldr	r3, [pc, #456]	; (8005988 <RCCEx_PLLSAI1_Config+0x1e4>)
 80057c0:	68db      	ldr	r3, [r3, #12]
 80057c2:	f003 0203 	and.w	r2, r3, #3
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	429a      	cmp	r2, r3
 80057cc:	d10d      	bne.n	80057ea <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
       ||
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d009      	beq.n	80057ea <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80057d6:	4b6c      	ldr	r3, [pc, #432]	; (8005988 <RCCEx_PLLSAI1_Config+0x1e4>)
 80057d8:	68db      	ldr	r3, [r3, #12]
 80057da:	091b      	lsrs	r3, r3, #4
 80057dc:	f003 0307 	and.w	r3, r3, #7
 80057e0:	1c5a      	adds	r2, r3, #1
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	685b      	ldr	r3, [r3, #4]
       ||
 80057e6:	429a      	cmp	r2, r3
 80057e8:	d047      	beq.n	800587a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80057ea:	2301      	movs	r3, #1
 80057ec:	73fb      	strb	r3, [r7, #15]
 80057ee:	e044      	b.n	800587a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	2b03      	cmp	r3, #3
 80057f6:	d018      	beq.n	800582a <RCCEx_PLLSAI1_Config+0x86>
 80057f8:	2b03      	cmp	r3, #3
 80057fa:	d825      	bhi.n	8005848 <RCCEx_PLLSAI1_Config+0xa4>
 80057fc:	2b01      	cmp	r3, #1
 80057fe:	d002      	beq.n	8005806 <RCCEx_PLLSAI1_Config+0x62>
 8005800:	2b02      	cmp	r3, #2
 8005802:	d009      	beq.n	8005818 <RCCEx_PLLSAI1_Config+0x74>
 8005804:	e020      	b.n	8005848 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005806:	4b60      	ldr	r3, [pc, #384]	; (8005988 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f003 0302 	and.w	r3, r3, #2
 800580e:	2b00      	cmp	r3, #0
 8005810:	d11d      	bne.n	800584e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005812:	2301      	movs	r3, #1
 8005814:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005816:	e01a      	b.n	800584e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005818:	4b5b      	ldr	r3, [pc, #364]	; (8005988 <RCCEx_PLLSAI1_Config+0x1e4>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005820:	2b00      	cmp	r3, #0
 8005822:	d116      	bne.n	8005852 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005824:	2301      	movs	r3, #1
 8005826:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005828:	e013      	b.n	8005852 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800582a:	4b57      	ldr	r3, [pc, #348]	; (8005988 <RCCEx_PLLSAI1_Config+0x1e4>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005832:	2b00      	cmp	r3, #0
 8005834:	d10f      	bne.n	8005856 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005836:	4b54      	ldr	r3, [pc, #336]	; (8005988 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800583e:	2b00      	cmp	r3, #0
 8005840:	d109      	bne.n	8005856 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005842:	2301      	movs	r3, #1
 8005844:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005846:	e006      	b.n	8005856 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005848:	2301      	movs	r3, #1
 800584a:	73fb      	strb	r3, [r7, #15]
      break;
 800584c:	e004      	b.n	8005858 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800584e:	bf00      	nop
 8005850:	e002      	b.n	8005858 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005852:	bf00      	nop
 8005854:	e000      	b.n	8005858 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005856:	bf00      	nop
    }

    if(status == HAL_OK)
 8005858:	7bfb      	ldrb	r3, [r7, #15]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d10d      	bne.n	800587a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800585e:	4b4a      	ldr	r3, [pc, #296]	; (8005988 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005860:	68db      	ldr	r3, [r3, #12]
 8005862:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6819      	ldr	r1, [r3, #0]
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	685b      	ldr	r3, [r3, #4]
 800586e:	3b01      	subs	r3, #1
 8005870:	011b      	lsls	r3, r3, #4
 8005872:	430b      	orrs	r3, r1
 8005874:	4944      	ldr	r1, [pc, #272]	; (8005988 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005876:	4313      	orrs	r3, r2
 8005878:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800587a:	7bfb      	ldrb	r3, [r7, #15]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d17d      	bne.n	800597c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005880:	4b41      	ldr	r3, [pc, #260]	; (8005988 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a40      	ldr	r2, [pc, #256]	; (8005988 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005886:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800588a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800588c:	f7fd fec2 	bl	8003614 <HAL_GetTick>
 8005890:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005892:	e009      	b.n	80058a8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005894:	f7fd febe 	bl	8003614 <HAL_GetTick>
 8005898:	4602      	mov	r2, r0
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	1ad3      	subs	r3, r2, r3
 800589e:	2b02      	cmp	r3, #2
 80058a0:	d902      	bls.n	80058a8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80058a2:	2303      	movs	r3, #3
 80058a4:	73fb      	strb	r3, [r7, #15]
        break;
 80058a6:	e005      	b.n	80058b4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80058a8:	4b37      	ldr	r3, [pc, #220]	; (8005988 <RCCEx_PLLSAI1_Config+0x1e4>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d1ef      	bne.n	8005894 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80058b4:	7bfb      	ldrb	r3, [r7, #15]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d160      	bne.n	800597c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d111      	bne.n	80058e4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80058c0:	4b31      	ldr	r3, [pc, #196]	; (8005988 <RCCEx_PLLSAI1_Config+0x1e4>)
 80058c2:	691b      	ldr	r3, [r3, #16]
 80058c4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80058c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058cc:	687a      	ldr	r2, [r7, #4]
 80058ce:	6892      	ldr	r2, [r2, #8]
 80058d0:	0211      	lsls	r1, r2, #8
 80058d2:	687a      	ldr	r2, [r7, #4]
 80058d4:	68d2      	ldr	r2, [r2, #12]
 80058d6:	0912      	lsrs	r2, r2, #4
 80058d8:	0452      	lsls	r2, r2, #17
 80058da:	430a      	orrs	r2, r1
 80058dc:	492a      	ldr	r1, [pc, #168]	; (8005988 <RCCEx_PLLSAI1_Config+0x1e4>)
 80058de:	4313      	orrs	r3, r2
 80058e0:	610b      	str	r3, [r1, #16]
 80058e2:	e027      	b.n	8005934 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	2b01      	cmp	r3, #1
 80058e8:	d112      	bne.n	8005910 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80058ea:	4b27      	ldr	r3, [pc, #156]	; (8005988 <RCCEx_PLLSAI1_Config+0x1e4>)
 80058ec:	691b      	ldr	r3, [r3, #16]
 80058ee:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80058f2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80058f6:	687a      	ldr	r2, [r7, #4]
 80058f8:	6892      	ldr	r2, [r2, #8]
 80058fa:	0211      	lsls	r1, r2, #8
 80058fc:	687a      	ldr	r2, [r7, #4]
 80058fe:	6912      	ldr	r2, [r2, #16]
 8005900:	0852      	lsrs	r2, r2, #1
 8005902:	3a01      	subs	r2, #1
 8005904:	0552      	lsls	r2, r2, #21
 8005906:	430a      	orrs	r2, r1
 8005908:	491f      	ldr	r1, [pc, #124]	; (8005988 <RCCEx_PLLSAI1_Config+0x1e4>)
 800590a:	4313      	orrs	r3, r2
 800590c:	610b      	str	r3, [r1, #16]
 800590e:	e011      	b.n	8005934 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005910:	4b1d      	ldr	r3, [pc, #116]	; (8005988 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005912:	691b      	ldr	r3, [r3, #16]
 8005914:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005918:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800591c:	687a      	ldr	r2, [r7, #4]
 800591e:	6892      	ldr	r2, [r2, #8]
 8005920:	0211      	lsls	r1, r2, #8
 8005922:	687a      	ldr	r2, [r7, #4]
 8005924:	6952      	ldr	r2, [r2, #20]
 8005926:	0852      	lsrs	r2, r2, #1
 8005928:	3a01      	subs	r2, #1
 800592a:	0652      	lsls	r2, r2, #25
 800592c:	430a      	orrs	r2, r1
 800592e:	4916      	ldr	r1, [pc, #88]	; (8005988 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005930:	4313      	orrs	r3, r2
 8005932:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005934:	4b14      	ldr	r3, [pc, #80]	; (8005988 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4a13      	ldr	r2, [pc, #76]	; (8005988 <RCCEx_PLLSAI1_Config+0x1e4>)
 800593a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800593e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005940:	f7fd fe68 	bl	8003614 <HAL_GetTick>
 8005944:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005946:	e009      	b.n	800595c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005948:	f7fd fe64 	bl	8003614 <HAL_GetTick>
 800594c:	4602      	mov	r2, r0
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	1ad3      	subs	r3, r2, r3
 8005952:	2b02      	cmp	r3, #2
 8005954:	d902      	bls.n	800595c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8005956:	2303      	movs	r3, #3
 8005958:	73fb      	strb	r3, [r7, #15]
          break;
 800595a:	e005      	b.n	8005968 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800595c:	4b0a      	ldr	r3, [pc, #40]	; (8005988 <RCCEx_PLLSAI1_Config+0x1e4>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005964:	2b00      	cmp	r3, #0
 8005966:	d0ef      	beq.n	8005948 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005968:	7bfb      	ldrb	r3, [r7, #15]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d106      	bne.n	800597c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800596e:	4b06      	ldr	r3, [pc, #24]	; (8005988 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005970:	691a      	ldr	r2, [r3, #16]
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	699b      	ldr	r3, [r3, #24]
 8005976:	4904      	ldr	r1, [pc, #16]	; (8005988 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005978:	4313      	orrs	r3, r2
 800597a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800597c:	7bfb      	ldrb	r3, [r7, #15]
}
 800597e:	4618      	mov	r0, r3
 8005980:	3710      	adds	r7, #16
 8005982:	46bd      	mov	sp, r7
 8005984:	bd80      	pop	{r7, pc}
 8005986:	bf00      	nop
 8005988:	40021000 	.word	0x40021000

0800598c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b084      	sub	sp, #16
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
 8005994:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005996:	2300      	movs	r3, #0
 8005998:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800599a:	4b6a      	ldr	r3, [pc, #424]	; (8005b44 <RCCEx_PLLSAI2_Config+0x1b8>)
 800599c:	68db      	ldr	r3, [r3, #12]
 800599e:	f003 0303 	and.w	r3, r3, #3
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d018      	beq.n	80059d8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80059a6:	4b67      	ldr	r3, [pc, #412]	; (8005b44 <RCCEx_PLLSAI2_Config+0x1b8>)
 80059a8:	68db      	ldr	r3, [r3, #12]
 80059aa:	f003 0203 	and.w	r2, r3, #3
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	429a      	cmp	r2, r3
 80059b4:	d10d      	bne.n	80059d2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
       ||
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d009      	beq.n	80059d2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80059be:	4b61      	ldr	r3, [pc, #388]	; (8005b44 <RCCEx_PLLSAI2_Config+0x1b8>)
 80059c0:	68db      	ldr	r3, [r3, #12]
 80059c2:	091b      	lsrs	r3, r3, #4
 80059c4:	f003 0307 	and.w	r3, r3, #7
 80059c8:	1c5a      	adds	r2, r3, #1
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	685b      	ldr	r3, [r3, #4]
       ||
 80059ce:	429a      	cmp	r2, r3
 80059d0:	d047      	beq.n	8005a62 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80059d2:	2301      	movs	r3, #1
 80059d4:	73fb      	strb	r3, [r7, #15]
 80059d6:	e044      	b.n	8005a62 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	2b03      	cmp	r3, #3
 80059de:	d018      	beq.n	8005a12 <RCCEx_PLLSAI2_Config+0x86>
 80059e0:	2b03      	cmp	r3, #3
 80059e2:	d825      	bhi.n	8005a30 <RCCEx_PLLSAI2_Config+0xa4>
 80059e4:	2b01      	cmp	r3, #1
 80059e6:	d002      	beq.n	80059ee <RCCEx_PLLSAI2_Config+0x62>
 80059e8:	2b02      	cmp	r3, #2
 80059ea:	d009      	beq.n	8005a00 <RCCEx_PLLSAI2_Config+0x74>
 80059ec:	e020      	b.n	8005a30 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80059ee:	4b55      	ldr	r3, [pc, #340]	; (8005b44 <RCCEx_PLLSAI2_Config+0x1b8>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f003 0302 	and.w	r3, r3, #2
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d11d      	bne.n	8005a36 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80059fa:	2301      	movs	r3, #1
 80059fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80059fe:	e01a      	b.n	8005a36 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005a00:	4b50      	ldr	r3, [pc, #320]	; (8005b44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d116      	bne.n	8005a3a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005a10:	e013      	b.n	8005a3a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005a12:	4b4c      	ldr	r3, [pc, #304]	; (8005b44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d10f      	bne.n	8005a3e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005a1e:	4b49      	ldr	r3, [pc, #292]	; (8005b44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d109      	bne.n	8005a3e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005a2e:	e006      	b.n	8005a3e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005a30:	2301      	movs	r3, #1
 8005a32:	73fb      	strb	r3, [r7, #15]
      break;
 8005a34:	e004      	b.n	8005a40 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005a36:	bf00      	nop
 8005a38:	e002      	b.n	8005a40 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005a3a:	bf00      	nop
 8005a3c:	e000      	b.n	8005a40 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005a3e:	bf00      	nop
    }

    if(status == HAL_OK)
 8005a40:	7bfb      	ldrb	r3, [r7, #15]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d10d      	bne.n	8005a62 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005a46:	4b3f      	ldr	r3, [pc, #252]	; (8005b44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a48:	68db      	ldr	r3, [r3, #12]
 8005a4a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6819      	ldr	r1, [r3, #0]
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	685b      	ldr	r3, [r3, #4]
 8005a56:	3b01      	subs	r3, #1
 8005a58:	011b      	lsls	r3, r3, #4
 8005a5a:	430b      	orrs	r3, r1
 8005a5c:	4939      	ldr	r1, [pc, #228]	; (8005b44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005a62:	7bfb      	ldrb	r3, [r7, #15]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d167      	bne.n	8005b38 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005a68:	4b36      	ldr	r3, [pc, #216]	; (8005b44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4a35      	ldr	r2, [pc, #212]	; (8005b44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a72:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a74:	f7fd fdce 	bl	8003614 <HAL_GetTick>
 8005a78:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005a7a:	e009      	b.n	8005a90 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005a7c:	f7fd fdca 	bl	8003614 <HAL_GetTick>
 8005a80:	4602      	mov	r2, r0
 8005a82:	68bb      	ldr	r3, [r7, #8]
 8005a84:	1ad3      	subs	r3, r2, r3
 8005a86:	2b02      	cmp	r3, #2
 8005a88:	d902      	bls.n	8005a90 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005a8a:	2303      	movs	r3, #3
 8005a8c:	73fb      	strb	r3, [r7, #15]
        break;
 8005a8e:	e005      	b.n	8005a9c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005a90:	4b2c      	ldr	r3, [pc, #176]	; (8005b44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d1ef      	bne.n	8005a7c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005a9c:	7bfb      	ldrb	r3, [r7, #15]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d14a      	bne.n	8005b38 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d111      	bne.n	8005acc <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005aa8:	4b26      	ldr	r3, [pc, #152]	; (8005b44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005aaa:	695b      	ldr	r3, [r3, #20]
 8005aac:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005ab0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ab4:	687a      	ldr	r2, [r7, #4]
 8005ab6:	6892      	ldr	r2, [r2, #8]
 8005ab8:	0211      	lsls	r1, r2, #8
 8005aba:	687a      	ldr	r2, [r7, #4]
 8005abc:	68d2      	ldr	r2, [r2, #12]
 8005abe:	0912      	lsrs	r2, r2, #4
 8005ac0:	0452      	lsls	r2, r2, #17
 8005ac2:	430a      	orrs	r2, r1
 8005ac4:	491f      	ldr	r1, [pc, #124]	; (8005b44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	614b      	str	r3, [r1, #20]
 8005aca:	e011      	b.n	8005af0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005acc:	4b1d      	ldr	r3, [pc, #116]	; (8005b44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ace:	695b      	ldr	r3, [r3, #20]
 8005ad0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005ad4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005ad8:	687a      	ldr	r2, [r7, #4]
 8005ada:	6892      	ldr	r2, [r2, #8]
 8005adc:	0211      	lsls	r1, r2, #8
 8005ade:	687a      	ldr	r2, [r7, #4]
 8005ae0:	6912      	ldr	r2, [r2, #16]
 8005ae2:	0852      	lsrs	r2, r2, #1
 8005ae4:	3a01      	subs	r2, #1
 8005ae6:	0652      	lsls	r2, r2, #25
 8005ae8:	430a      	orrs	r2, r1
 8005aea:	4916      	ldr	r1, [pc, #88]	; (8005b44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005aec:	4313      	orrs	r3, r2
 8005aee:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005af0:	4b14      	ldr	r3, [pc, #80]	; (8005b44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4a13      	ldr	r2, [pc, #76]	; (8005b44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005af6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005afa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005afc:	f7fd fd8a 	bl	8003614 <HAL_GetTick>
 8005b00:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005b02:	e009      	b.n	8005b18 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005b04:	f7fd fd86 	bl	8003614 <HAL_GetTick>
 8005b08:	4602      	mov	r2, r0
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	1ad3      	subs	r3, r2, r3
 8005b0e:	2b02      	cmp	r3, #2
 8005b10:	d902      	bls.n	8005b18 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8005b12:	2303      	movs	r3, #3
 8005b14:	73fb      	strb	r3, [r7, #15]
          break;
 8005b16:	e005      	b.n	8005b24 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005b18:	4b0a      	ldr	r3, [pc, #40]	; (8005b44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d0ef      	beq.n	8005b04 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005b24:	7bfb      	ldrb	r3, [r7, #15]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d106      	bne.n	8005b38 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005b2a:	4b06      	ldr	r3, [pc, #24]	; (8005b44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b2c:	695a      	ldr	r2, [r3, #20]
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	695b      	ldr	r3, [r3, #20]
 8005b32:	4904      	ldr	r1, [pc, #16]	; (8005b44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b34:	4313      	orrs	r3, r2
 8005b36:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005b38:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	3710      	adds	r7, #16
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	bd80      	pop	{r7, pc}
 8005b42:	bf00      	nop
 8005b44:	40021000 	.word	0x40021000

08005b48 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b084      	sub	sp, #16
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d101      	bne.n	8005b5a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005b56:	2301      	movs	r3, #1
 8005b58:	e095      	b.n	8005c86 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d108      	bne.n	8005b74 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	685b      	ldr	r3, [r3, #4]
 8005b66:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b6a:	d009      	beq.n	8005b80 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2200      	movs	r2, #0
 8005b70:	61da      	str	r2, [r3, #28]
 8005b72:	e005      	b.n	8005b80 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2200      	movs	r2, #0
 8005b78:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2200      	movs	r2, #0
 8005b84:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005b8c:	b2db      	uxtb	r3, r3
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d106      	bne.n	8005ba0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2200      	movs	r2, #0
 8005b96:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005b9a:	6878      	ldr	r0, [r7, #4]
 8005b9c:	f7fd f998 	bl	8002ed0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2202      	movs	r2, #2
 8005ba4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	681a      	ldr	r2, [r3, #0]
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005bb6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	68db      	ldr	r3, [r3, #12]
 8005bbc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005bc0:	d902      	bls.n	8005bc8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	60fb      	str	r3, [r7, #12]
 8005bc6:	e002      	b.n	8005bce <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005bc8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005bcc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	68db      	ldr	r3, [r3, #12]
 8005bd2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005bd6:	d007      	beq.n	8005be8 <HAL_SPI_Init+0xa0>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	68db      	ldr	r3, [r3, #12]
 8005bdc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005be0:	d002      	beq.n	8005be8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2200      	movs	r2, #0
 8005be6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	685b      	ldr	r3, [r3, #4]
 8005bec:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	689b      	ldr	r3, [r3, #8]
 8005bf4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005bf8:	431a      	orrs	r2, r3
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	691b      	ldr	r3, [r3, #16]
 8005bfe:	f003 0302 	and.w	r3, r3, #2
 8005c02:	431a      	orrs	r2, r3
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	695b      	ldr	r3, [r3, #20]
 8005c08:	f003 0301 	and.w	r3, r3, #1
 8005c0c:	431a      	orrs	r2, r3
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	699b      	ldr	r3, [r3, #24]
 8005c12:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005c16:	431a      	orrs	r2, r3
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	69db      	ldr	r3, [r3, #28]
 8005c1c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005c20:	431a      	orrs	r2, r3
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6a1b      	ldr	r3, [r3, #32]
 8005c26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c2a:	ea42 0103 	orr.w	r1, r2, r3
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c32:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	430a      	orrs	r2, r1
 8005c3c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	699b      	ldr	r3, [r3, #24]
 8005c42:	0c1b      	lsrs	r3, r3, #16
 8005c44:	f003 0204 	and.w	r2, r3, #4
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c4c:	f003 0310 	and.w	r3, r3, #16
 8005c50:	431a      	orrs	r2, r3
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c56:	f003 0308 	and.w	r3, r3, #8
 8005c5a:	431a      	orrs	r2, r3
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	68db      	ldr	r3, [r3, #12]
 8005c60:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005c64:	ea42 0103 	orr.w	r1, r2, r3
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	430a      	orrs	r2, r1
 8005c74:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2200      	movs	r2, #0
 8005c7a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2201      	movs	r2, #1
 8005c80:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005c84:	2300      	movs	r3, #0
}
 8005c86:	4618      	mov	r0, r3
 8005c88:	3710      	adds	r7, #16
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	bd80      	pop	{r7, pc}

08005c8e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005c8e:	b580      	push	{r7, lr}
 8005c90:	b082      	sub	sp, #8
 8005c92:	af00      	add	r7, sp, #0
 8005c94:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d101      	bne.n	8005ca0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005c9c:	2301      	movs	r3, #1
 8005c9e:	e040      	b.n	8005d22 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d106      	bne.n	8005cb6 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2200      	movs	r2, #0
 8005cac:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005cb0:	6878      	ldr	r0, [r7, #4]
 8005cb2:	f7fd fa6b 	bl	800318c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2224      	movs	r2, #36	; 0x24
 8005cba:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	681a      	ldr	r2, [r3, #0]
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f022 0201 	bic.w	r2, r2, #1
 8005cca:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005ccc:	6878      	ldr	r0, [r7, #4]
 8005cce:	f000 f8c1 	bl	8005e54 <UART_SetConfig>
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	2b01      	cmp	r3, #1
 8005cd6:	d101      	bne.n	8005cdc <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005cd8:	2301      	movs	r3, #1
 8005cda:	e022      	b.n	8005d22 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d002      	beq.n	8005cea <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005ce4:	6878      	ldr	r0, [r7, #4]
 8005ce6:	f000 fb3f 	bl	8006368 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	685a      	ldr	r2, [r3, #4]
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005cf8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	689a      	ldr	r2, [r3, #8]
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005d08:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	681a      	ldr	r2, [r3, #0]
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f042 0201 	orr.w	r2, r2, #1
 8005d18:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005d1a:	6878      	ldr	r0, [r7, #4]
 8005d1c:	f000 fbc6 	bl	80064ac <UART_CheckIdleState>
 8005d20:	4603      	mov	r3, r0
}
 8005d22:	4618      	mov	r0, r3
 8005d24:	3708      	adds	r7, #8
 8005d26:	46bd      	mov	sp, r7
 8005d28:	bd80      	pop	{r7, pc}

08005d2a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d2a:	b580      	push	{r7, lr}
 8005d2c:	b08a      	sub	sp, #40	; 0x28
 8005d2e:	af02      	add	r7, sp, #8
 8005d30:	60f8      	str	r0, [r7, #12]
 8005d32:	60b9      	str	r1, [r7, #8]
 8005d34:	603b      	str	r3, [r7, #0]
 8005d36:	4613      	mov	r3, r2
 8005d38:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005d3e:	2b20      	cmp	r3, #32
 8005d40:	f040 8082 	bne.w	8005e48 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d002      	beq.n	8005d50 <HAL_UART_Transmit+0x26>
 8005d4a:	88fb      	ldrh	r3, [r7, #6]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d101      	bne.n	8005d54 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005d50:	2301      	movs	r3, #1
 8005d52:	e07a      	b.n	8005e4a <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005d5a:	2b01      	cmp	r3, #1
 8005d5c:	d101      	bne.n	8005d62 <HAL_UART_Transmit+0x38>
 8005d5e:	2302      	movs	r3, #2
 8005d60:	e073      	b.n	8005e4a <HAL_UART_Transmit+0x120>
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	2201      	movs	r2, #1
 8005d66:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	2221      	movs	r2, #33	; 0x21
 8005d76:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005d78:	f7fd fc4c 	bl	8003614 <HAL_GetTick>
 8005d7c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	88fa      	ldrh	r2, [r7, #6]
 8005d82:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	88fa      	ldrh	r2, [r7, #6]
 8005d8a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	689b      	ldr	r3, [r3, #8]
 8005d92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d96:	d108      	bne.n	8005daa <HAL_UART_Transmit+0x80>
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	691b      	ldr	r3, [r3, #16]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d104      	bne.n	8005daa <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005da0:	2300      	movs	r3, #0
 8005da2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	61bb      	str	r3, [r7, #24]
 8005da8:	e003      	b.n	8005db2 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005daa:	68bb      	ldr	r3, [r7, #8]
 8005dac:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005dae:	2300      	movs	r3, #0
 8005db0:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	2200      	movs	r2, #0
 8005db6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005dba:	e02d      	b.n	8005e18 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	9300      	str	r3, [sp, #0]
 8005dc0:	697b      	ldr	r3, [r7, #20]
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	2180      	movs	r1, #128	; 0x80
 8005dc6:	68f8      	ldr	r0, [r7, #12]
 8005dc8:	f000 fbb9 	bl	800653e <UART_WaitOnFlagUntilTimeout>
 8005dcc:	4603      	mov	r3, r0
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d001      	beq.n	8005dd6 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005dd2:	2303      	movs	r3, #3
 8005dd4:	e039      	b.n	8005e4a <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8005dd6:	69fb      	ldr	r3, [r7, #28]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d10b      	bne.n	8005df4 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005ddc:	69bb      	ldr	r3, [r7, #24]
 8005dde:	881a      	ldrh	r2, [r3, #0]
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005de8:	b292      	uxth	r2, r2
 8005dea:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005dec:	69bb      	ldr	r3, [r7, #24]
 8005dee:	3302      	adds	r3, #2
 8005df0:	61bb      	str	r3, [r7, #24]
 8005df2:	e008      	b.n	8005e06 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005df4:	69fb      	ldr	r3, [r7, #28]
 8005df6:	781a      	ldrb	r2, [r3, #0]
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	b292      	uxth	r2, r2
 8005dfe:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005e00:	69fb      	ldr	r3, [r7, #28]
 8005e02:	3301      	adds	r3, #1
 8005e04:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005e0c:	b29b      	uxth	r3, r3
 8005e0e:	3b01      	subs	r3, #1
 8005e10:	b29a      	uxth	r2, r3
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005e1e:	b29b      	uxth	r3, r3
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d1cb      	bne.n	8005dbc <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	9300      	str	r3, [sp, #0]
 8005e28:	697b      	ldr	r3, [r7, #20]
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	2140      	movs	r1, #64	; 0x40
 8005e2e:	68f8      	ldr	r0, [r7, #12]
 8005e30:	f000 fb85 	bl	800653e <UART_WaitOnFlagUntilTimeout>
 8005e34:	4603      	mov	r3, r0
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d001      	beq.n	8005e3e <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8005e3a:	2303      	movs	r3, #3
 8005e3c:	e005      	b.n	8005e4a <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	2220      	movs	r2, #32
 8005e42:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005e44:	2300      	movs	r3, #0
 8005e46:	e000      	b.n	8005e4a <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8005e48:	2302      	movs	r3, #2
  }
}
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	3720      	adds	r7, #32
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	bd80      	pop	{r7, pc}
	...

08005e54 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e54:	b5b0      	push	{r4, r5, r7, lr}
 8005e56:	b088      	sub	sp, #32
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	689a      	ldr	r2, [r3, #8]
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	691b      	ldr	r3, [r3, #16]
 8005e68:	431a      	orrs	r2, r3
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	695b      	ldr	r3, [r3, #20]
 8005e6e:	431a      	orrs	r2, r3
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	69db      	ldr	r3, [r3, #28]
 8005e74:	4313      	orrs	r3, r2
 8005e76:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	681a      	ldr	r2, [r3, #0]
 8005e7e:	4bad      	ldr	r3, [pc, #692]	; (8006134 <UART_SetConfig+0x2e0>)
 8005e80:	4013      	ands	r3, r2
 8005e82:	687a      	ldr	r2, [r7, #4]
 8005e84:	6812      	ldr	r2, [r2, #0]
 8005e86:	69f9      	ldr	r1, [r7, #28]
 8005e88:	430b      	orrs	r3, r1
 8005e8a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	685b      	ldr	r3, [r3, #4]
 8005e92:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	68da      	ldr	r2, [r3, #12]
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	430a      	orrs	r2, r1
 8005ea0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	699b      	ldr	r3, [r3, #24]
 8005ea6:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4aa2      	ldr	r2, [pc, #648]	; (8006138 <UART_SetConfig+0x2e4>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d004      	beq.n	8005ebc <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6a1b      	ldr	r3, [r3, #32]
 8005eb6:	69fa      	ldr	r2, [r7, #28]
 8005eb8:	4313      	orrs	r3, r2
 8005eba:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	689b      	ldr	r3, [r3, #8]
 8005ec2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	69fa      	ldr	r2, [r7, #28]
 8005ecc:	430a      	orrs	r2, r1
 8005ece:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4a99      	ldr	r2, [pc, #612]	; (800613c <UART_SetConfig+0x2e8>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d121      	bne.n	8005f1e <UART_SetConfig+0xca>
 8005eda:	4b99      	ldr	r3, [pc, #612]	; (8006140 <UART_SetConfig+0x2ec>)
 8005edc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ee0:	f003 0303 	and.w	r3, r3, #3
 8005ee4:	2b03      	cmp	r3, #3
 8005ee6:	d817      	bhi.n	8005f18 <UART_SetConfig+0xc4>
 8005ee8:	a201      	add	r2, pc, #4	; (adr r2, 8005ef0 <UART_SetConfig+0x9c>)
 8005eea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eee:	bf00      	nop
 8005ef0:	08005f01 	.word	0x08005f01
 8005ef4:	08005f0d 	.word	0x08005f0d
 8005ef8:	08005f07 	.word	0x08005f07
 8005efc:	08005f13 	.word	0x08005f13
 8005f00:	2301      	movs	r3, #1
 8005f02:	76fb      	strb	r3, [r7, #27]
 8005f04:	e0e7      	b.n	80060d6 <UART_SetConfig+0x282>
 8005f06:	2302      	movs	r3, #2
 8005f08:	76fb      	strb	r3, [r7, #27]
 8005f0a:	e0e4      	b.n	80060d6 <UART_SetConfig+0x282>
 8005f0c:	2304      	movs	r3, #4
 8005f0e:	76fb      	strb	r3, [r7, #27]
 8005f10:	e0e1      	b.n	80060d6 <UART_SetConfig+0x282>
 8005f12:	2308      	movs	r3, #8
 8005f14:	76fb      	strb	r3, [r7, #27]
 8005f16:	e0de      	b.n	80060d6 <UART_SetConfig+0x282>
 8005f18:	2310      	movs	r3, #16
 8005f1a:	76fb      	strb	r3, [r7, #27]
 8005f1c:	e0db      	b.n	80060d6 <UART_SetConfig+0x282>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	4a88      	ldr	r2, [pc, #544]	; (8006144 <UART_SetConfig+0x2f0>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d132      	bne.n	8005f8e <UART_SetConfig+0x13a>
 8005f28:	4b85      	ldr	r3, [pc, #532]	; (8006140 <UART_SetConfig+0x2ec>)
 8005f2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f2e:	f003 030c 	and.w	r3, r3, #12
 8005f32:	2b0c      	cmp	r3, #12
 8005f34:	d828      	bhi.n	8005f88 <UART_SetConfig+0x134>
 8005f36:	a201      	add	r2, pc, #4	; (adr r2, 8005f3c <UART_SetConfig+0xe8>)
 8005f38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f3c:	08005f71 	.word	0x08005f71
 8005f40:	08005f89 	.word	0x08005f89
 8005f44:	08005f89 	.word	0x08005f89
 8005f48:	08005f89 	.word	0x08005f89
 8005f4c:	08005f7d 	.word	0x08005f7d
 8005f50:	08005f89 	.word	0x08005f89
 8005f54:	08005f89 	.word	0x08005f89
 8005f58:	08005f89 	.word	0x08005f89
 8005f5c:	08005f77 	.word	0x08005f77
 8005f60:	08005f89 	.word	0x08005f89
 8005f64:	08005f89 	.word	0x08005f89
 8005f68:	08005f89 	.word	0x08005f89
 8005f6c:	08005f83 	.word	0x08005f83
 8005f70:	2300      	movs	r3, #0
 8005f72:	76fb      	strb	r3, [r7, #27]
 8005f74:	e0af      	b.n	80060d6 <UART_SetConfig+0x282>
 8005f76:	2302      	movs	r3, #2
 8005f78:	76fb      	strb	r3, [r7, #27]
 8005f7a:	e0ac      	b.n	80060d6 <UART_SetConfig+0x282>
 8005f7c:	2304      	movs	r3, #4
 8005f7e:	76fb      	strb	r3, [r7, #27]
 8005f80:	e0a9      	b.n	80060d6 <UART_SetConfig+0x282>
 8005f82:	2308      	movs	r3, #8
 8005f84:	76fb      	strb	r3, [r7, #27]
 8005f86:	e0a6      	b.n	80060d6 <UART_SetConfig+0x282>
 8005f88:	2310      	movs	r3, #16
 8005f8a:	76fb      	strb	r3, [r7, #27]
 8005f8c:	e0a3      	b.n	80060d6 <UART_SetConfig+0x282>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	4a6d      	ldr	r2, [pc, #436]	; (8006148 <UART_SetConfig+0x2f4>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d120      	bne.n	8005fda <UART_SetConfig+0x186>
 8005f98:	4b69      	ldr	r3, [pc, #420]	; (8006140 <UART_SetConfig+0x2ec>)
 8005f9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f9e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005fa2:	2b30      	cmp	r3, #48	; 0x30
 8005fa4:	d013      	beq.n	8005fce <UART_SetConfig+0x17a>
 8005fa6:	2b30      	cmp	r3, #48	; 0x30
 8005fa8:	d814      	bhi.n	8005fd4 <UART_SetConfig+0x180>
 8005faa:	2b20      	cmp	r3, #32
 8005fac:	d009      	beq.n	8005fc2 <UART_SetConfig+0x16e>
 8005fae:	2b20      	cmp	r3, #32
 8005fb0:	d810      	bhi.n	8005fd4 <UART_SetConfig+0x180>
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d002      	beq.n	8005fbc <UART_SetConfig+0x168>
 8005fb6:	2b10      	cmp	r3, #16
 8005fb8:	d006      	beq.n	8005fc8 <UART_SetConfig+0x174>
 8005fba:	e00b      	b.n	8005fd4 <UART_SetConfig+0x180>
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	76fb      	strb	r3, [r7, #27]
 8005fc0:	e089      	b.n	80060d6 <UART_SetConfig+0x282>
 8005fc2:	2302      	movs	r3, #2
 8005fc4:	76fb      	strb	r3, [r7, #27]
 8005fc6:	e086      	b.n	80060d6 <UART_SetConfig+0x282>
 8005fc8:	2304      	movs	r3, #4
 8005fca:	76fb      	strb	r3, [r7, #27]
 8005fcc:	e083      	b.n	80060d6 <UART_SetConfig+0x282>
 8005fce:	2308      	movs	r3, #8
 8005fd0:	76fb      	strb	r3, [r7, #27]
 8005fd2:	e080      	b.n	80060d6 <UART_SetConfig+0x282>
 8005fd4:	2310      	movs	r3, #16
 8005fd6:	76fb      	strb	r3, [r7, #27]
 8005fd8:	e07d      	b.n	80060d6 <UART_SetConfig+0x282>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4a5b      	ldr	r2, [pc, #364]	; (800614c <UART_SetConfig+0x2f8>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d120      	bne.n	8006026 <UART_SetConfig+0x1d2>
 8005fe4:	4b56      	ldr	r3, [pc, #344]	; (8006140 <UART_SetConfig+0x2ec>)
 8005fe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fea:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005fee:	2bc0      	cmp	r3, #192	; 0xc0
 8005ff0:	d013      	beq.n	800601a <UART_SetConfig+0x1c6>
 8005ff2:	2bc0      	cmp	r3, #192	; 0xc0
 8005ff4:	d814      	bhi.n	8006020 <UART_SetConfig+0x1cc>
 8005ff6:	2b80      	cmp	r3, #128	; 0x80
 8005ff8:	d009      	beq.n	800600e <UART_SetConfig+0x1ba>
 8005ffa:	2b80      	cmp	r3, #128	; 0x80
 8005ffc:	d810      	bhi.n	8006020 <UART_SetConfig+0x1cc>
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d002      	beq.n	8006008 <UART_SetConfig+0x1b4>
 8006002:	2b40      	cmp	r3, #64	; 0x40
 8006004:	d006      	beq.n	8006014 <UART_SetConfig+0x1c0>
 8006006:	e00b      	b.n	8006020 <UART_SetConfig+0x1cc>
 8006008:	2300      	movs	r3, #0
 800600a:	76fb      	strb	r3, [r7, #27]
 800600c:	e063      	b.n	80060d6 <UART_SetConfig+0x282>
 800600e:	2302      	movs	r3, #2
 8006010:	76fb      	strb	r3, [r7, #27]
 8006012:	e060      	b.n	80060d6 <UART_SetConfig+0x282>
 8006014:	2304      	movs	r3, #4
 8006016:	76fb      	strb	r3, [r7, #27]
 8006018:	e05d      	b.n	80060d6 <UART_SetConfig+0x282>
 800601a:	2308      	movs	r3, #8
 800601c:	76fb      	strb	r3, [r7, #27]
 800601e:	e05a      	b.n	80060d6 <UART_SetConfig+0x282>
 8006020:	2310      	movs	r3, #16
 8006022:	76fb      	strb	r3, [r7, #27]
 8006024:	e057      	b.n	80060d6 <UART_SetConfig+0x282>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	4a49      	ldr	r2, [pc, #292]	; (8006150 <UART_SetConfig+0x2fc>)
 800602c:	4293      	cmp	r3, r2
 800602e:	d125      	bne.n	800607c <UART_SetConfig+0x228>
 8006030:	4b43      	ldr	r3, [pc, #268]	; (8006140 <UART_SetConfig+0x2ec>)
 8006032:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006036:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800603a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800603e:	d017      	beq.n	8006070 <UART_SetConfig+0x21c>
 8006040:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006044:	d817      	bhi.n	8006076 <UART_SetConfig+0x222>
 8006046:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800604a:	d00b      	beq.n	8006064 <UART_SetConfig+0x210>
 800604c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006050:	d811      	bhi.n	8006076 <UART_SetConfig+0x222>
 8006052:	2b00      	cmp	r3, #0
 8006054:	d003      	beq.n	800605e <UART_SetConfig+0x20a>
 8006056:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800605a:	d006      	beq.n	800606a <UART_SetConfig+0x216>
 800605c:	e00b      	b.n	8006076 <UART_SetConfig+0x222>
 800605e:	2300      	movs	r3, #0
 8006060:	76fb      	strb	r3, [r7, #27]
 8006062:	e038      	b.n	80060d6 <UART_SetConfig+0x282>
 8006064:	2302      	movs	r3, #2
 8006066:	76fb      	strb	r3, [r7, #27]
 8006068:	e035      	b.n	80060d6 <UART_SetConfig+0x282>
 800606a:	2304      	movs	r3, #4
 800606c:	76fb      	strb	r3, [r7, #27]
 800606e:	e032      	b.n	80060d6 <UART_SetConfig+0x282>
 8006070:	2308      	movs	r3, #8
 8006072:	76fb      	strb	r3, [r7, #27]
 8006074:	e02f      	b.n	80060d6 <UART_SetConfig+0x282>
 8006076:	2310      	movs	r3, #16
 8006078:	76fb      	strb	r3, [r7, #27]
 800607a:	e02c      	b.n	80060d6 <UART_SetConfig+0x282>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	4a2d      	ldr	r2, [pc, #180]	; (8006138 <UART_SetConfig+0x2e4>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d125      	bne.n	80060d2 <UART_SetConfig+0x27e>
 8006086:	4b2e      	ldr	r3, [pc, #184]	; (8006140 <UART_SetConfig+0x2ec>)
 8006088:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800608c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006090:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006094:	d017      	beq.n	80060c6 <UART_SetConfig+0x272>
 8006096:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800609a:	d817      	bhi.n	80060cc <UART_SetConfig+0x278>
 800609c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060a0:	d00b      	beq.n	80060ba <UART_SetConfig+0x266>
 80060a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060a6:	d811      	bhi.n	80060cc <UART_SetConfig+0x278>
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d003      	beq.n	80060b4 <UART_SetConfig+0x260>
 80060ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060b0:	d006      	beq.n	80060c0 <UART_SetConfig+0x26c>
 80060b2:	e00b      	b.n	80060cc <UART_SetConfig+0x278>
 80060b4:	2300      	movs	r3, #0
 80060b6:	76fb      	strb	r3, [r7, #27]
 80060b8:	e00d      	b.n	80060d6 <UART_SetConfig+0x282>
 80060ba:	2302      	movs	r3, #2
 80060bc:	76fb      	strb	r3, [r7, #27]
 80060be:	e00a      	b.n	80060d6 <UART_SetConfig+0x282>
 80060c0:	2304      	movs	r3, #4
 80060c2:	76fb      	strb	r3, [r7, #27]
 80060c4:	e007      	b.n	80060d6 <UART_SetConfig+0x282>
 80060c6:	2308      	movs	r3, #8
 80060c8:	76fb      	strb	r3, [r7, #27]
 80060ca:	e004      	b.n	80060d6 <UART_SetConfig+0x282>
 80060cc:	2310      	movs	r3, #16
 80060ce:	76fb      	strb	r3, [r7, #27]
 80060d0:	e001      	b.n	80060d6 <UART_SetConfig+0x282>
 80060d2:	2310      	movs	r3, #16
 80060d4:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	4a17      	ldr	r2, [pc, #92]	; (8006138 <UART_SetConfig+0x2e4>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	f040 8087 	bne.w	80061f0 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80060e2:	7efb      	ldrb	r3, [r7, #27]
 80060e4:	2b08      	cmp	r3, #8
 80060e6:	d837      	bhi.n	8006158 <UART_SetConfig+0x304>
 80060e8:	a201      	add	r2, pc, #4	; (adr r2, 80060f0 <UART_SetConfig+0x29c>)
 80060ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060ee:	bf00      	nop
 80060f0:	08006115 	.word	0x08006115
 80060f4:	08006159 	.word	0x08006159
 80060f8:	0800611d 	.word	0x0800611d
 80060fc:	08006159 	.word	0x08006159
 8006100:	08006123 	.word	0x08006123
 8006104:	08006159 	.word	0x08006159
 8006108:	08006159 	.word	0x08006159
 800610c:	08006159 	.word	0x08006159
 8006110:	0800612b 	.word	0x0800612b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006114:	f7fe ffc0 	bl	8005098 <HAL_RCC_GetPCLK1Freq>
 8006118:	6178      	str	r0, [r7, #20]
        break;
 800611a:	e022      	b.n	8006162 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800611c:	4b0d      	ldr	r3, [pc, #52]	; (8006154 <UART_SetConfig+0x300>)
 800611e:	617b      	str	r3, [r7, #20]
        break;
 8006120:	e01f      	b.n	8006162 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006122:	f7fe ff21 	bl	8004f68 <HAL_RCC_GetSysClockFreq>
 8006126:	6178      	str	r0, [r7, #20]
        break;
 8006128:	e01b      	b.n	8006162 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800612a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800612e:	617b      	str	r3, [r7, #20]
        break;
 8006130:	e017      	b.n	8006162 <UART_SetConfig+0x30e>
 8006132:	bf00      	nop
 8006134:	efff69f3 	.word	0xefff69f3
 8006138:	40008000 	.word	0x40008000
 800613c:	40013800 	.word	0x40013800
 8006140:	40021000 	.word	0x40021000
 8006144:	40004400 	.word	0x40004400
 8006148:	40004800 	.word	0x40004800
 800614c:	40004c00 	.word	0x40004c00
 8006150:	40005000 	.word	0x40005000
 8006154:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8006158:	2300      	movs	r3, #0
 800615a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800615c:	2301      	movs	r3, #1
 800615e:	76bb      	strb	r3, [r7, #26]
        break;
 8006160:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006162:	697b      	ldr	r3, [r7, #20]
 8006164:	2b00      	cmp	r3, #0
 8006166:	f000 80f1 	beq.w	800634c <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	685a      	ldr	r2, [r3, #4]
 800616e:	4613      	mov	r3, r2
 8006170:	005b      	lsls	r3, r3, #1
 8006172:	4413      	add	r3, r2
 8006174:	697a      	ldr	r2, [r7, #20]
 8006176:	429a      	cmp	r2, r3
 8006178:	d305      	bcc.n	8006186 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	685b      	ldr	r3, [r3, #4]
 800617e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006180:	697a      	ldr	r2, [r7, #20]
 8006182:	429a      	cmp	r2, r3
 8006184:	d902      	bls.n	800618c <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8006186:	2301      	movs	r3, #1
 8006188:	76bb      	strb	r3, [r7, #26]
 800618a:	e0df      	b.n	800634c <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800618c:	697b      	ldr	r3, [r7, #20]
 800618e:	4618      	mov	r0, r3
 8006190:	f04f 0100 	mov.w	r1, #0
 8006194:	f04f 0200 	mov.w	r2, #0
 8006198:	f04f 0300 	mov.w	r3, #0
 800619c:	020b      	lsls	r3, r1, #8
 800619e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80061a2:	0202      	lsls	r2, r0, #8
 80061a4:	6879      	ldr	r1, [r7, #4]
 80061a6:	6849      	ldr	r1, [r1, #4]
 80061a8:	0849      	lsrs	r1, r1, #1
 80061aa:	4608      	mov	r0, r1
 80061ac:	f04f 0100 	mov.w	r1, #0
 80061b0:	1814      	adds	r4, r2, r0
 80061b2:	eb43 0501 	adc.w	r5, r3, r1
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	685b      	ldr	r3, [r3, #4]
 80061ba:	461a      	mov	r2, r3
 80061bc:	f04f 0300 	mov.w	r3, #0
 80061c0:	4620      	mov	r0, r4
 80061c2:	4629      	mov	r1, r5
 80061c4:	f7fa fc9e 	bl	8000b04 <__aeabi_uldivmod>
 80061c8:	4602      	mov	r2, r0
 80061ca:	460b      	mov	r3, r1
 80061cc:	4613      	mov	r3, r2
 80061ce:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80061d0:	693b      	ldr	r3, [r7, #16]
 80061d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80061d6:	d308      	bcc.n	80061ea <UART_SetConfig+0x396>
 80061d8:	693b      	ldr	r3, [r7, #16]
 80061da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80061de:	d204      	bcs.n	80061ea <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	693a      	ldr	r2, [r7, #16]
 80061e6:	60da      	str	r2, [r3, #12]
 80061e8:	e0b0      	b.n	800634c <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 80061ea:	2301      	movs	r3, #1
 80061ec:	76bb      	strb	r3, [r7, #26]
 80061ee:	e0ad      	b.n	800634c <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	69db      	ldr	r3, [r3, #28]
 80061f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061f8:	d15b      	bne.n	80062b2 <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 80061fa:	7efb      	ldrb	r3, [r7, #27]
 80061fc:	2b08      	cmp	r3, #8
 80061fe:	d828      	bhi.n	8006252 <UART_SetConfig+0x3fe>
 8006200:	a201      	add	r2, pc, #4	; (adr r2, 8006208 <UART_SetConfig+0x3b4>)
 8006202:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006206:	bf00      	nop
 8006208:	0800622d 	.word	0x0800622d
 800620c:	08006235 	.word	0x08006235
 8006210:	0800623d 	.word	0x0800623d
 8006214:	08006253 	.word	0x08006253
 8006218:	08006243 	.word	0x08006243
 800621c:	08006253 	.word	0x08006253
 8006220:	08006253 	.word	0x08006253
 8006224:	08006253 	.word	0x08006253
 8006228:	0800624b 	.word	0x0800624b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800622c:	f7fe ff34 	bl	8005098 <HAL_RCC_GetPCLK1Freq>
 8006230:	6178      	str	r0, [r7, #20]
        break;
 8006232:	e013      	b.n	800625c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006234:	f7fe ff46 	bl	80050c4 <HAL_RCC_GetPCLK2Freq>
 8006238:	6178      	str	r0, [r7, #20]
        break;
 800623a:	e00f      	b.n	800625c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800623c:	4b49      	ldr	r3, [pc, #292]	; (8006364 <UART_SetConfig+0x510>)
 800623e:	617b      	str	r3, [r7, #20]
        break;
 8006240:	e00c      	b.n	800625c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006242:	f7fe fe91 	bl	8004f68 <HAL_RCC_GetSysClockFreq>
 8006246:	6178      	str	r0, [r7, #20]
        break;
 8006248:	e008      	b.n	800625c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800624a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800624e:	617b      	str	r3, [r7, #20]
        break;
 8006250:	e004      	b.n	800625c <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8006252:	2300      	movs	r3, #0
 8006254:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006256:	2301      	movs	r3, #1
 8006258:	76bb      	strb	r3, [r7, #26]
        break;
 800625a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800625c:	697b      	ldr	r3, [r7, #20]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d074      	beq.n	800634c <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006262:	697b      	ldr	r3, [r7, #20]
 8006264:	005a      	lsls	r2, r3, #1
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	685b      	ldr	r3, [r3, #4]
 800626a:	085b      	lsrs	r3, r3, #1
 800626c:	441a      	add	r2, r3
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	685b      	ldr	r3, [r3, #4]
 8006272:	fbb2 f3f3 	udiv	r3, r2, r3
 8006276:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006278:	693b      	ldr	r3, [r7, #16]
 800627a:	2b0f      	cmp	r3, #15
 800627c:	d916      	bls.n	80062ac <UART_SetConfig+0x458>
 800627e:	693b      	ldr	r3, [r7, #16]
 8006280:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006284:	d212      	bcs.n	80062ac <UART_SetConfig+0x458>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006286:	693b      	ldr	r3, [r7, #16]
 8006288:	b29b      	uxth	r3, r3
 800628a:	f023 030f 	bic.w	r3, r3, #15
 800628e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006290:	693b      	ldr	r3, [r7, #16]
 8006292:	085b      	lsrs	r3, r3, #1
 8006294:	b29b      	uxth	r3, r3
 8006296:	f003 0307 	and.w	r3, r3, #7
 800629a:	b29a      	uxth	r2, r3
 800629c:	89fb      	ldrh	r3, [r7, #14]
 800629e:	4313      	orrs	r3, r2
 80062a0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	89fa      	ldrh	r2, [r7, #14]
 80062a8:	60da      	str	r2, [r3, #12]
 80062aa:	e04f      	b.n	800634c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80062ac:	2301      	movs	r3, #1
 80062ae:	76bb      	strb	r3, [r7, #26]
 80062b0:	e04c      	b.n	800634c <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80062b2:	7efb      	ldrb	r3, [r7, #27]
 80062b4:	2b08      	cmp	r3, #8
 80062b6:	d828      	bhi.n	800630a <UART_SetConfig+0x4b6>
 80062b8:	a201      	add	r2, pc, #4	; (adr r2, 80062c0 <UART_SetConfig+0x46c>)
 80062ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062be:	bf00      	nop
 80062c0:	080062e5 	.word	0x080062e5
 80062c4:	080062ed 	.word	0x080062ed
 80062c8:	080062f5 	.word	0x080062f5
 80062cc:	0800630b 	.word	0x0800630b
 80062d0:	080062fb 	.word	0x080062fb
 80062d4:	0800630b 	.word	0x0800630b
 80062d8:	0800630b 	.word	0x0800630b
 80062dc:	0800630b 	.word	0x0800630b
 80062e0:	08006303 	.word	0x08006303
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80062e4:	f7fe fed8 	bl	8005098 <HAL_RCC_GetPCLK1Freq>
 80062e8:	6178      	str	r0, [r7, #20]
        break;
 80062ea:	e013      	b.n	8006314 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80062ec:	f7fe feea 	bl	80050c4 <HAL_RCC_GetPCLK2Freq>
 80062f0:	6178      	str	r0, [r7, #20]
        break;
 80062f2:	e00f      	b.n	8006314 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80062f4:	4b1b      	ldr	r3, [pc, #108]	; (8006364 <UART_SetConfig+0x510>)
 80062f6:	617b      	str	r3, [r7, #20]
        break;
 80062f8:	e00c      	b.n	8006314 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80062fa:	f7fe fe35 	bl	8004f68 <HAL_RCC_GetSysClockFreq>
 80062fe:	6178      	str	r0, [r7, #20]
        break;
 8006300:	e008      	b.n	8006314 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006302:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006306:	617b      	str	r3, [r7, #20]
        break;
 8006308:	e004      	b.n	8006314 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 800630a:	2300      	movs	r3, #0
 800630c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800630e:	2301      	movs	r3, #1
 8006310:	76bb      	strb	r3, [r7, #26]
        break;
 8006312:	bf00      	nop
    }

    if (pclk != 0U)
 8006314:	697b      	ldr	r3, [r7, #20]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d018      	beq.n	800634c <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	685b      	ldr	r3, [r3, #4]
 800631e:	085a      	lsrs	r2, r3, #1
 8006320:	697b      	ldr	r3, [r7, #20]
 8006322:	441a      	add	r2, r3
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	685b      	ldr	r3, [r3, #4]
 8006328:	fbb2 f3f3 	udiv	r3, r2, r3
 800632c:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800632e:	693b      	ldr	r3, [r7, #16]
 8006330:	2b0f      	cmp	r3, #15
 8006332:	d909      	bls.n	8006348 <UART_SetConfig+0x4f4>
 8006334:	693b      	ldr	r3, [r7, #16]
 8006336:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800633a:	d205      	bcs.n	8006348 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800633c:	693b      	ldr	r3, [r7, #16]
 800633e:	b29a      	uxth	r2, r3
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	60da      	str	r2, [r3, #12]
 8006346:	e001      	b.n	800634c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8006348:	2301      	movs	r3, #1
 800634a:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2200      	movs	r2, #0
 8006350:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2200      	movs	r2, #0
 8006356:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006358:	7ebb      	ldrb	r3, [r7, #26]
}
 800635a:	4618      	mov	r0, r3
 800635c:	3720      	adds	r7, #32
 800635e:	46bd      	mov	sp, r7
 8006360:	bdb0      	pop	{r4, r5, r7, pc}
 8006362:	bf00      	nop
 8006364:	00f42400 	.word	0x00f42400

08006368 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006368:	b480      	push	{r7}
 800636a:	b083      	sub	sp, #12
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006374:	f003 0301 	and.w	r3, r3, #1
 8006378:	2b00      	cmp	r3, #0
 800637a:	d00a      	beq.n	8006392 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	685b      	ldr	r3, [r3, #4]
 8006382:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	430a      	orrs	r2, r1
 8006390:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006396:	f003 0302 	and.w	r3, r3, #2
 800639a:	2b00      	cmp	r3, #0
 800639c:	d00a      	beq.n	80063b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	685b      	ldr	r3, [r3, #4]
 80063a4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	430a      	orrs	r2, r1
 80063b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063b8:	f003 0304 	and.w	r3, r3, #4
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d00a      	beq.n	80063d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	685b      	ldr	r3, [r3, #4]
 80063c6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	430a      	orrs	r2, r1
 80063d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063da:	f003 0308 	and.w	r3, r3, #8
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d00a      	beq.n	80063f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	685b      	ldr	r3, [r3, #4]
 80063e8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	430a      	orrs	r2, r1
 80063f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063fc:	f003 0310 	and.w	r3, r3, #16
 8006400:	2b00      	cmp	r3, #0
 8006402:	d00a      	beq.n	800641a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	689b      	ldr	r3, [r3, #8]
 800640a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	430a      	orrs	r2, r1
 8006418:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800641e:	f003 0320 	and.w	r3, r3, #32
 8006422:	2b00      	cmp	r3, #0
 8006424:	d00a      	beq.n	800643c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	689b      	ldr	r3, [r3, #8]
 800642c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	430a      	orrs	r2, r1
 800643a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006440:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006444:	2b00      	cmp	r3, #0
 8006446:	d01a      	beq.n	800647e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	685b      	ldr	r3, [r3, #4]
 800644e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	430a      	orrs	r2, r1
 800645c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006462:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006466:	d10a      	bne.n	800647e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	685b      	ldr	r3, [r3, #4]
 800646e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	430a      	orrs	r2, r1
 800647c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006482:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006486:	2b00      	cmp	r3, #0
 8006488:	d00a      	beq.n	80064a0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	685b      	ldr	r3, [r3, #4]
 8006490:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	430a      	orrs	r2, r1
 800649e:	605a      	str	r2, [r3, #4]
  }
}
 80064a0:	bf00      	nop
 80064a2:	370c      	adds	r7, #12
 80064a4:	46bd      	mov	sp, r7
 80064a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064aa:	4770      	bx	lr

080064ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b086      	sub	sp, #24
 80064b0:	af02      	add	r7, sp, #8
 80064b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2200      	movs	r2, #0
 80064b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80064bc:	f7fd f8aa 	bl	8003614 <HAL_GetTick>
 80064c0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f003 0308 	and.w	r3, r3, #8
 80064cc:	2b08      	cmp	r3, #8
 80064ce:	d10e      	bne.n	80064ee <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80064d0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80064d4:	9300      	str	r3, [sp, #0]
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	2200      	movs	r2, #0
 80064da:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80064de:	6878      	ldr	r0, [r7, #4]
 80064e0:	f000 f82d 	bl	800653e <UART_WaitOnFlagUntilTimeout>
 80064e4:	4603      	mov	r3, r0
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d001      	beq.n	80064ee <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80064ea:	2303      	movs	r3, #3
 80064ec:	e023      	b.n	8006536 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f003 0304 	and.w	r3, r3, #4
 80064f8:	2b04      	cmp	r3, #4
 80064fa:	d10e      	bne.n	800651a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80064fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006500:	9300      	str	r3, [sp, #0]
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	2200      	movs	r2, #0
 8006506:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800650a:	6878      	ldr	r0, [r7, #4]
 800650c:	f000 f817 	bl	800653e <UART_WaitOnFlagUntilTimeout>
 8006510:	4603      	mov	r3, r0
 8006512:	2b00      	cmp	r3, #0
 8006514:	d001      	beq.n	800651a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006516:	2303      	movs	r3, #3
 8006518:	e00d      	b.n	8006536 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2220      	movs	r2, #32
 800651e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2220      	movs	r2, #32
 8006524:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2200      	movs	r2, #0
 800652a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2200      	movs	r2, #0
 8006530:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006534:	2300      	movs	r3, #0
}
 8006536:	4618      	mov	r0, r3
 8006538:	3710      	adds	r7, #16
 800653a:	46bd      	mov	sp, r7
 800653c:	bd80      	pop	{r7, pc}

0800653e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800653e:	b580      	push	{r7, lr}
 8006540:	b09c      	sub	sp, #112	; 0x70
 8006542:	af00      	add	r7, sp, #0
 8006544:	60f8      	str	r0, [r7, #12]
 8006546:	60b9      	str	r1, [r7, #8]
 8006548:	603b      	str	r3, [r7, #0]
 800654a:	4613      	mov	r3, r2
 800654c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800654e:	e0a5      	b.n	800669c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006550:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006552:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006556:	f000 80a1 	beq.w	800669c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800655a:	f7fd f85b 	bl	8003614 <HAL_GetTick>
 800655e:	4602      	mov	r2, r0
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	1ad3      	subs	r3, r2, r3
 8006564:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006566:	429a      	cmp	r2, r3
 8006568:	d302      	bcc.n	8006570 <UART_WaitOnFlagUntilTimeout+0x32>
 800656a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800656c:	2b00      	cmp	r3, #0
 800656e:	d13e      	bne.n	80065ee <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006576:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006578:	e853 3f00 	ldrex	r3, [r3]
 800657c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800657e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006580:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006584:	667b      	str	r3, [r7, #100]	; 0x64
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	461a      	mov	r2, r3
 800658c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800658e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006590:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006592:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006594:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006596:	e841 2300 	strex	r3, r2, [r1]
 800659a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800659c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d1e6      	bne.n	8006570 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	3308      	adds	r3, #8
 80065a8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065ac:	e853 3f00 	ldrex	r3, [r3]
 80065b0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80065b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065b4:	f023 0301 	bic.w	r3, r3, #1
 80065b8:	663b      	str	r3, [r7, #96]	; 0x60
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	3308      	adds	r3, #8
 80065c0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80065c2:	64ba      	str	r2, [r7, #72]	; 0x48
 80065c4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065c6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80065c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80065ca:	e841 2300 	strex	r3, r2, [r1]
 80065ce:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80065d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d1e5      	bne.n	80065a2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	2220      	movs	r2, #32
 80065da:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	2220      	movs	r2, #32
 80065e0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	2200      	movs	r2, #0
 80065e6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80065ea:	2303      	movs	r3, #3
 80065ec:	e067      	b.n	80066be <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f003 0304 	and.w	r3, r3, #4
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d04f      	beq.n	800669c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	69db      	ldr	r3, [r3, #28]
 8006602:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006606:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800660a:	d147      	bne.n	800669c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006614:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800661c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800661e:	e853 3f00 	ldrex	r3, [r3]
 8006622:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006626:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800662a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	461a      	mov	r2, r3
 8006632:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006634:	637b      	str	r3, [r7, #52]	; 0x34
 8006636:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006638:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800663a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800663c:	e841 2300 	strex	r3, r2, [r1]
 8006640:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006644:	2b00      	cmp	r3, #0
 8006646:	d1e6      	bne.n	8006616 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	3308      	adds	r3, #8
 800664e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006650:	697b      	ldr	r3, [r7, #20]
 8006652:	e853 3f00 	ldrex	r3, [r3]
 8006656:	613b      	str	r3, [r7, #16]
   return(result);
 8006658:	693b      	ldr	r3, [r7, #16]
 800665a:	f023 0301 	bic.w	r3, r3, #1
 800665e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	3308      	adds	r3, #8
 8006666:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006668:	623a      	str	r2, [r7, #32]
 800666a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800666c:	69f9      	ldr	r1, [r7, #28]
 800666e:	6a3a      	ldr	r2, [r7, #32]
 8006670:	e841 2300 	strex	r3, r2, [r1]
 8006674:	61bb      	str	r3, [r7, #24]
   return(result);
 8006676:	69bb      	ldr	r3, [r7, #24]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d1e5      	bne.n	8006648 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	2220      	movs	r2, #32
 8006680:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	2220      	movs	r2, #32
 8006686:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	2220      	movs	r2, #32
 800668c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	2200      	movs	r2, #0
 8006694:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006698:	2303      	movs	r3, #3
 800669a:	e010      	b.n	80066be <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	69da      	ldr	r2, [r3, #28]
 80066a2:	68bb      	ldr	r3, [r7, #8]
 80066a4:	4013      	ands	r3, r2
 80066a6:	68ba      	ldr	r2, [r7, #8]
 80066a8:	429a      	cmp	r2, r3
 80066aa:	bf0c      	ite	eq
 80066ac:	2301      	moveq	r3, #1
 80066ae:	2300      	movne	r3, #0
 80066b0:	b2db      	uxtb	r3, r3
 80066b2:	461a      	mov	r2, r3
 80066b4:	79fb      	ldrb	r3, [r7, #7]
 80066b6:	429a      	cmp	r2, r3
 80066b8:	f43f af4a 	beq.w	8006550 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80066bc:	2300      	movs	r3, #0
}
 80066be:	4618      	mov	r0, r3
 80066c0:	3770      	adds	r7, #112	; 0x70
 80066c2:	46bd      	mov	sp, r7
 80066c4:	bd80      	pop	{r7, pc}

080066c6 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80066c6:	b084      	sub	sp, #16
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b084      	sub	sp, #16
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
 80066d0:	f107 001c 	add.w	r0, r7, #28
 80066d4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	68db      	ldr	r3, [r3, #12]
 80066dc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 80066e4:	6878      	ldr	r0, [r7, #4]
 80066e6:	f000 fa6b 	bl	8006bc0 <USB_CoreReset>
 80066ea:	4603      	mov	r3, r0
 80066ec:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 80066ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d106      	bne.n	8006702 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066f8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	639a      	str	r2, [r3, #56]	; 0x38
 8006700:	e005      	b.n	800670e <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006706:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 800670e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006710:	4618      	mov	r0, r3
 8006712:	3710      	adds	r7, #16
 8006714:	46bd      	mov	sp, r7
 8006716:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800671a:	b004      	add	sp, #16
 800671c:	4770      	bx	lr

0800671e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800671e:	b480      	push	{r7}
 8006720:	b083      	sub	sp, #12
 8006722:	af00      	add	r7, sp, #0
 8006724:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	689b      	ldr	r3, [r3, #8]
 800672a:	f023 0201 	bic.w	r2, r3, #1
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006732:	2300      	movs	r3, #0
}
 8006734:	4618      	mov	r0, r3
 8006736:	370c      	adds	r7, #12
 8006738:	46bd      	mov	sp, r7
 800673a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673e:	4770      	bx	lr

08006740 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b084      	sub	sp, #16
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
 8006748:	460b      	mov	r3, r1
 800674a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800674c:	2300      	movs	r3, #0
 800674e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	68db      	ldr	r3, [r3, #12]
 8006754:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800675c:	78fb      	ldrb	r3, [r7, #3]
 800675e:	2b01      	cmp	r3, #1
 8006760:	d115      	bne.n	800678e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	68db      	ldr	r3, [r3, #12]
 8006766:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800676e:	2001      	movs	r0, #1
 8006770:	f7fc ff5c 	bl	800362c <HAL_Delay>
      ms++;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	3301      	adds	r3, #1
 8006778:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800677a:	6878      	ldr	r0, [r7, #4]
 800677c:	f000 fa12 	bl	8006ba4 <USB_GetMode>
 8006780:	4603      	mov	r3, r0
 8006782:	2b01      	cmp	r3, #1
 8006784:	d01e      	beq.n	80067c4 <USB_SetCurrentMode+0x84>
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	2b31      	cmp	r3, #49	; 0x31
 800678a:	d9f0      	bls.n	800676e <USB_SetCurrentMode+0x2e>
 800678c:	e01a      	b.n	80067c4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800678e:	78fb      	ldrb	r3, [r7, #3]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d115      	bne.n	80067c0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	68db      	ldr	r3, [r3, #12]
 8006798:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80067a0:	2001      	movs	r0, #1
 80067a2:	f7fc ff43 	bl	800362c <HAL_Delay>
      ms++;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	3301      	adds	r3, #1
 80067aa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80067ac:	6878      	ldr	r0, [r7, #4]
 80067ae:	f000 f9f9 	bl	8006ba4 <USB_GetMode>
 80067b2:	4603      	mov	r3, r0
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d005      	beq.n	80067c4 <USB_SetCurrentMode+0x84>
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	2b31      	cmp	r3, #49	; 0x31
 80067bc:	d9f0      	bls.n	80067a0 <USB_SetCurrentMode+0x60>
 80067be:	e001      	b.n	80067c4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80067c0:	2301      	movs	r3, #1
 80067c2:	e005      	b.n	80067d0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	2b32      	cmp	r3, #50	; 0x32
 80067c8:	d101      	bne.n	80067ce <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80067ca:	2301      	movs	r3, #1
 80067cc:	e000      	b.n	80067d0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80067ce:	2300      	movs	r3, #0
}
 80067d0:	4618      	mov	r0, r3
 80067d2:	3710      	adds	r7, #16
 80067d4:	46bd      	mov	sp, r7
 80067d6:	bd80      	pop	{r7, pc}

080067d8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80067d8:	b084      	sub	sp, #16
 80067da:	b580      	push	{r7, lr}
 80067dc:	b086      	sub	sp, #24
 80067de:	af00      	add	r7, sp, #0
 80067e0:	6078      	str	r0, [r7, #4]
 80067e2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80067e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80067ea:	2300      	movs	r3, #0
 80067ec:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80067f2:	2300      	movs	r3, #0
 80067f4:	613b      	str	r3, [r7, #16]
 80067f6:	e009      	b.n	800680c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80067f8:	687a      	ldr	r2, [r7, #4]
 80067fa:	693b      	ldr	r3, [r7, #16]
 80067fc:	3340      	adds	r3, #64	; 0x40
 80067fe:	009b      	lsls	r3, r3, #2
 8006800:	4413      	add	r3, r2
 8006802:	2200      	movs	r2, #0
 8006804:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006806:	693b      	ldr	r3, [r7, #16]
 8006808:	3301      	adds	r3, #1
 800680a:	613b      	str	r3, [r7, #16]
 800680c:	693b      	ldr	r3, [r7, #16]
 800680e:	2b0e      	cmp	r3, #14
 8006810:	d9f2      	bls.n	80067f8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006812:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006814:	2b00      	cmp	r3, #0
 8006816:	d11c      	bne.n	8006852 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800681e:	685b      	ldr	r3, [r3, #4]
 8006820:	68fa      	ldr	r2, [r7, #12]
 8006822:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006826:	f043 0302 	orr.w	r3, r3, #2
 800682a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006830:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	601a      	str	r2, [r3, #0]
 8006850:	e005      	b.n	800685e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006856:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006864:	461a      	mov	r2, r3
 8006866:	2300      	movs	r3, #0
 8006868:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006870:	4619      	mov	r1, r3
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006878:	461a      	mov	r2, r3
 800687a:	680b      	ldr	r3, [r1, #0]
 800687c:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800687e:	2103      	movs	r1, #3
 8006880:	6878      	ldr	r0, [r7, #4]
 8006882:	f000 f955 	bl	8006b30 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006886:	2110      	movs	r1, #16
 8006888:	6878      	ldr	r0, [r7, #4]
 800688a:	f000 f8f1 	bl	8006a70 <USB_FlushTxFifo>
 800688e:	4603      	mov	r3, r0
 8006890:	2b00      	cmp	r3, #0
 8006892:	d001      	beq.n	8006898 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8006894:	2301      	movs	r3, #1
 8006896:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006898:	6878      	ldr	r0, [r7, #4]
 800689a:	f000 f91b 	bl	8006ad4 <USB_FlushRxFifo>
 800689e:	4603      	mov	r3, r0
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d001      	beq.n	80068a8 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 80068a4:	2301      	movs	r3, #1
 80068a6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068ae:	461a      	mov	r2, r3
 80068b0:	2300      	movs	r3, #0
 80068b2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068ba:	461a      	mov	r2, r3
 80068bc:	2300      	movs	r3, #0
 80068be:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068c6:	461a      	mov	r2, r3
 80068c8:	2300      	movs	r3, #0
 80068ca:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80068cc:	2300      	movs	r3, #0
 80068ce:	613b      	str	r3, [r7, #16]
 80068d0:	e043      	b.n	800695a <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80068d2:	693b      	ldr	r3, [r7, #16]
 80068d4:	015a      	lsls	r2, r3, #5
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	4413      	add	r3, r2
 80068da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80068e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80068e8:	d118      	bne.n	800691c <USB_DevInit+0x144>
    {
      if (i == 0U)
 80068ea:	693b      	ldr	r3, [r7, #16]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d10a      	bne.n	8006906 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80068f0:	693b      	ldr	r3, [r7, #16]
 80068f2:	015a      	lsls	r2, r3, #5
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	4413      	add	r3, r2
 80068f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068fc:	461a      	mov	r2, r3
 80068fe:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006902:	6013      	str	r3, [r2, #0]
 8006904:	e013      	b.n	800692e <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006906:	693b      	ldr	r3, [r7, #16]
 8006908:	015a      	lsls	r2, r3, #5
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	4413      	add	r3, r2
 800690e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006912:	461a      	mov	r2, r3
 8006914:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006918:	6013      	str	r3, [r2, #0]
 800691a:	e008      	b.n	800692e <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800691c:	693b      	ldr	r3, [r7, #16]
 800691e:	015a      	lsls	r2, r3, #5
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	4413      	add	r3, r2
 8006924:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006928:	461a      	mov	r2, r3
 800692a:	2300      	movs	r3, #0
 800692c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800692e:	693b      	ldr	r3, [r7, #16]
 8006930:	015a      	lsls	r2, r3, #5
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	4413      	add	r3, r2
 8006936:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800693a:	461a      	mov	r2, r3
 800693c:	2300      	movs	r3, #0
 800693e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006940:	693b      	ldr	r3, [r7, #16]
 8006942:	015a      	lsls	r2, r3, #5
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	4413      	add	r3, r2
 8006948:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800694c:	461a      	mov	r2, r3
 800694e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006952:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006954:	693b      	ldr	r3, [r7, #16]
 8006956:	3301      	adds	r3, #1
 8006958:	613b      	str	r3, [r7, #16]
 800695a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800695c:	693a      	ldr	r2, [r7, #16]
 800695e:	429a      	cmp	r2, r3
 8006960:	d3b7      	bcc.n	80068d2 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006962:	2300      	movs	r3, #0
 8006964:	613b      	str	r3, [r7, #16]
 8006966:	e043      	b.n	80069f0 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006968:	693b      	ldr	r3, [r7, #16]
 800696a:	015a      	lsls	r2, r3, #5
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	4413      	add	r3, r2
 8006970:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800697a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800697e:	d118      	bne.n	80069b2 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8006980:	693b      	ldr	r3, [r7, #16]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d10a      	bne.n	800699c <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006986:	693b      	ldr	r3, [r7, #16]
 8006988:	015a      	lsls	r2, r3, #5
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	4413      	add	r3, r2
 800698e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006992:	461a      	mov	r2, r3
 8006994:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006998:	6013      	str	r3, [r2, #0]
 800699a:	e013      	b.n	80069c4 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800699c:	693b      	ldr	r3, [r7, #16]
 800699e:	015a      	lsls	r2, r3, #5
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	4413      	add	r3, r2
 80069a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069a8:	461a      	mov	r2, r3
 80069aa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80069ae:	6013      	str	r3, [r2, #0]
 80069b0:	e008      	b.n	80069c4 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80069b2:	693b      	ldr	r3, [r7, #16]
 80069b4:	015a      	lsls	r2, r3, #5
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	4413      	add	r3, r2
 80069ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069be:	461a      	mov	r2, r3
 80069c0:	2300      	movs	r3, #0
 80069c2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80069c4:	693b      	ldr	r3, [r7, #16]
 80069c6:	015a      	lsls	r2, r3, #5
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	4413      	add	r3, r2
 80069cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069d0:	461a      	mov	r2, r3
 80069d2:	2300      	movs	r3, #0
 80069d4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80069d6:	693b      	ldr	r3, [r7, #16]
 80069d8:	015a      	lsls	r2, r3, #5
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	4413      	add	r3, r2
 80069de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069e2:	461a      	mov	r2, r3
 80069e4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80069e8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80069ea:	693b      	ldr	r3, [r7, #16]
 80069ec:	3301      	adds	r3, #1
 80069ee:	613b      	str	r3, [r7, #16]
 80069f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069f2:	693a      	ldr	r2, [r7, #16]
 80069f4:	429a      	cmp	r2, r3
 80069f6:	d3b7      	bcc.n	8006968 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069fe:	691b      	ldr	r3, [r3, #16]
 8006a00:	68fa      	ldr	r2, [r7, #12]
 8006a02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006a06:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a0a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2200      	movs	r2, #0
 8006a10:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006a18:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	699b      	ldr	r3, [r3, #24]
 8006a1e:	f043 0210 	orr.w	r2, r3, #16
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	699a      	ldr	r2, [r3, #24]
 8006a2a:	4b10      	ldr	r3, [pc, #64]	; (8006a6c <USB_DevInit+0x294>)
 8006a2c:	4313      	orrs	r3, r2
 8006a2e:	687a      	ldr	r2, [r7, #4]
 8006a30:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006a32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d005      	beq.n	8006a44 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	699b      	ldr	r3, [r3, #24]
 8006a3c:	f043 0208 	orr.w	r2, r3, #8
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006a44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a46:	2b01      	cmp	r3, #1
 8006a48:	d107      	bne.n	8006a5a <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	699b      	ldr	r3, [r3, #24]
 8006a4e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006a52:	f043 0304 	orr.w	r3, r3, #4
 8006a56:	687a      	ldr	r2, [r7, #4]
 8006a58:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006a5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	3718      	adds	r7, #24
 8006a60:	46bd      	mov	sp, r7
 8006a62:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006a66:	b004      	add	sp, #16
 8006a68:	4770      	bx	lr
 8006a6a:	bf00      	nop
 8006a6c:	803c3800 	.word	0x803c3800

08006a70 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006a70:	b480      	push	{r7}
 8006a72:	b085      	sub	sp, #20
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
 8006a78:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	3301      	adds	r3, #1
 8006a82:	60fb      	str	r3, [r7, #12]
 8006a84:	4a12      	ldr	r2, [pc, #72]	; (8006ad0 <USB_FlushTxFifo+0x60>)
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d901      	bls.n	8006a8e <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006a8a:	2303      	movs	r3, #3
 8006a8c:	e01a      	b.n	8006ac4 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	691b      	ldr	r3, [r3, #16]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	daf3      	bge.n	8006a7e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006a96:	2300      	movs	r3, #0
 8006a98:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	019b      	lsls	r3, r3, #6
 8006a9e:	f043 0220 	orr.w	r2, r3, #32
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	3301      	adds	r3, #1
 8006aaa:	60fb      	str	r3, [r7, #12]
 8006aac:	4a08      	ldr	r2, [pc, #32]	; (8006ad0 <USB_FlushTxFifo+0x60>)
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d901      	bls.n	8006ab6 <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 8006ab2:	2303      	movs	r3, #3
 8006ab4:	e006      	b.n	8006ac4 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	691b      	ldr	r3, [r3, #16]
 8006aba:	f003 0320 	and.w	r3, r3, #32
 8006abe:	2b20      	cmp	r3, #32
 8006ac0:	d0f1      	beq.n	8006aa6 <USB_FlushTxFifo+0x36>

  return HAL_OK;
 8006ac2:	2300      	movs	r3, #0
}
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	3714      	adds	r7, #20
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ace:	4770      	bx	lr
 8006ad0:	00030d40 	.word	0x00030d40

08006ad4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006ad4:	b480      	push	{r7}
 8006ad6:	b085      	sub	sp, #20
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006adc:	2300      	movs	r3, #0
 8006ade:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	3301      	adds	r3, #1
 8006ae4:	60fb      	str	r3, [r7, #12]
 8006ae6:	4a11      	ldr	r2, [pc, #68]	; (8006b2c <USB_FlushRxFifo+0x58>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d901      	bls.n	8006af0 <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 8006aec:	2303      	movs	r3, #3
 8006aee:	e017      	b.n	8006b20 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	691b      	ldr	r3, [r3, #16]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	daf3      	bge.n	8006ae0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006af8:	2300      	movs	r3, #0
 8006afa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2210      	movs	r2, #16
 8006b00:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	3301      	adds	r3, #1
 8006b06:	60fb      	str	r3, [r7, #12]
 8006b08:	4a08      	ldr	r2, [pc, #32]	; (8006b2c <USB_FlushRxFifo+0x58>)
 8006b0a:	4293      	cmp	r3, r2
 8006b0c:	d901      	bls.n	8006b12 <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 8006b0e:	2303      	movs	r3, #3
 8006b10:	e006      	b.n	8006b20 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	691b      	ldr	r3, [r3, #16]
 8006b16:	f003 0310 	and.w	r3, r3, #16
 8006b1a:	2b10      	cmp	r3, #16
 8006b1c:	d0f1      	beq.n	8006b02 <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 8006b1e:	2300      	movs	r3, #0
}
 8006b20:	4618      	mov	r0, r3
 8006b22:	3714      	adds	r7, #20
 8006b24:	46bd      	mov	sp, r7
 8006b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2a:	4770      	bx	lr
 8006b2c:	00030d40 	.word	0x00030d40

08006b30 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006b30:	b480      	push	{r7}
 8006b32:	b085      	sub	sp, #20
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
 8006b38:	460b      	mov	r3, r1
 8006b3a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b46:	681a      	ldr	r2, [r3, #0]
 8006b48:	78fb      	ldrb	r3, [r7, #3]
 8006b4a:	68f9      	ldr	r1, [r7, #12]
 8006b4c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006b50:	4313      	orrs	r3, r2
 8006b52:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006b54:	2300      	movs	r3, #0
}
 8006b56:	4618      	mov	r0, r3
 8006b58:	3714      	adds	r7, #20
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b60:	4770      	bx	lr

08006b62 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006b62:	b480      	push	{r7}
 8006b64:	b085      	sub	sp, #20
 8006b66:	af00      	add	r7, sp, #0
 8006b68:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	68fa      	ldr	r2, [r7, #12]
 8006b78:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006b7c:	f023 0303 	bic.w	r3, r3, #3
 8006b80:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b88:	685b      	ldr	r3, [r3, #4]
 8006b8a:	68fa      	ldr	r2, [r7, #12]
 8006b8c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006b90:	f043 0302 	orr.w	r3, r3, #2
 8006b94:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006b96:	2300      	movs	r3, #0
}
 8006b98:	4618      	mov	r0, r3
 8006b9a:	3714      	adds	r7, #20
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba2:	4770      	bx	lr

08006ba4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006ba4:	b480      	push	{r7}
 8006ba6:	b083      	sub	sp, #12
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	695b      	ldr	r3, [r3, #20]
 8006bb0:	f003 0301 	and.w	r3, r3, #1
}
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	370c      	adds	r7, #12
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbe:	4770      	bx	lr

08006bc0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006bc0:	b480      	push	{r7}
 8006bc2:	b085      	sub	sp, #20
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006bc8:	2300      	movs	r3, #0
 8006bca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	3301      	adds	r3, #1
 8006bd0:	60fb      	str	r3, [r7, #12]
 8006bd2:	4a13      	ldr	r2, [pc, #76]	; (8006c20 <USB_CoreReset+0x60>)
 8006bd4:	4293      	cmp	r3, r2
 8006bd6:	d901      	bls.n	8006bdc <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8006bd8:	2303      	movs	r3, #3
 8006bda:	e01a      	b.n	8006c12 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	691b      	ldr	r3, [r3, #16]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	daf3      	bge.n	8006bcc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006be4:	2300      	movs	r3, #0
 8006be6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	691b      	ldr	r3, [r3, #16]
 8006bec:	f043 0201 	orr.w	r2, r3, #1
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	3301      	adds	r3, #1
 8006bf8:	60fb      	str	r3, [r7, #12]
 8006bfa:	4a09      	ldr	r2, [pc, #36]	; (8006c20 <USB_CoreReset+0x60>)
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	d901      	bls.n	8006c04 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8006c00:	2303      	movs	r3, #3
 8006c02:	e006      	b.n	8006c12 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	691b      	ldr	r3, [r3, #16]
 8006c08:	f003 0301 	and.w	r3, r3, #1
 8006c0c:	2b01      	cmp	r3, #1
 8006c0e:	d0f1      	beq.n	8006bf4 <USB_CoreReset+0x34>

  return HAL_OK;
 8006c10:	2300      	movs	r3, #0
}
 8006c12:	4618      	mov	r0, r3
 8006c14:	3714      	adds	r7, #20
 8006c16:	46bd      	mov	sp, r7
 8006c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1c:	4770      	bx	lr
 8006c1e:	bf00      	nop
 8006c20:	00030d40 	.word	0x00030d40

08006c24 <__libc_init_array>:
 8006c24:	b570      	push	{r4, r5, r6, lr}
 8006c26:	4d0d      	ldr	r5, [pc, #52]	; (8006c5c <__libc_init_array+0x38>)
 8006c28:	4c0d      	ldr	r4, [pc, #52]	; (8006c60 <__libc_init_array+0x3c>)
 8006c2a:	1b64      	subs	r4, r4, r5
 8006c2c:	10a4      	asrs	r4, r4, #2
 8006c2e:	2600      	movs	r6, #0
 8006c30:	42a6      	cmp	r6, r4
 8006c32:	d109      	bne.n	8006c48 <__libc_init_array+0x24>
 8006c34:	4d0b      	ldr	r5, [pc, #44]	; (8006c64 <__libc_init_array+0x40>)
 8006c36:	4c0c      	ldr	r4, [pc, #48]	; (8006c68 <__libc_init_array+0x44>)
 8006c38:	f000 f820 	bl	8006c7c <_init>
 8006c3c:	1b64      	subs	r4, r4, r5
 8006c3e:	10a4      	asrs	r4, r4, #2
 8006c40:	2600      	movs	r6, #0
 8006c42:	42a6      	cmp	r6, r4
 8006c44:	d105      	bne.n	8006c52 <__libc_init_array+0x2e>
 8006c46:	bd70      	pop	{r4, r5, r6, pc}
 8006c48:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c4c:	4798      	blx	r3
 8006c4e:	3601      	adds	r6, #1
 8006c50:	e7ee      	b.n	8006c30 <__libc_init_array+0xc>
 8006c52:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c56:	4798      	blx	r3
 8006c58:	3601      	adds	r6, #1
 8006c5a:	e7f2      	b.n	8006c42 <__libc_init_array+0x1e>
 8006c5c:	08006d58 	.word	0x08006d58
 8006c60:	08006d58 	.word	0x08006d58
 8006c64:	08006d58 	.word	0x08006d58
 8006c68:	08006d5c 	.word	0x08006d5c

08006c6c <memset>:
 8006c6c:	4402      	add	r2, r0
 8006c6e:	4603      	mov	r3, r0
 8006c70:	4293      	cmp	r3, r2
 8006c72:	d100      	bne.n	8006c76 <memset+0xa>
 8006c74:	4770      	bx	lr
 8006c76:	f803 1b01 	strb.w	r1, [r3], #1
 8006c7a:	e7f9      	b.n	8006c70 <memset+0x4>

08006c7c <_init>:
 8006c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c7e:	bf00      	nop
 8006c80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c82:	bc08      	pop	{r3}
 8006c84:	469e      	mov	lr, r3
 8006c86:	4770      	bx	lr

08006c88 <_fini>:
 8006c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c8a:	bf00      	nop
 8006c8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c8e:	bc08      	pop	{r3}
 8006c90:	469e      	mov	lr, r3
 8006c92:	4770      	bx	lr
