
stm32l475vgtx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000061cc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  0800635c  0800635c  0001635c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006414  08006414  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08006414  08006414  00016414  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800641c  0800641c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800641c  0800641c  0001641c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006420  08006420  00016420  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006424  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000016a0  20000074  08006498  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001714  08006498  00021714  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002b91b  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004faa  00000000  00000000  0004b9bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002050  00000000  00000000  00050970  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001e38  00000000  00000000  000529c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002bfa5  00000000  00000000  000547f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00026b48  00000000  00000000  0008079d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00106f04  00000000  00000000  000a72e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001ae1e9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008b84  00000000  00000000  001ae23c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006344 	.word	0x08006344

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08006344 	.word	0x08006344

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b96e 	b.w	80004c4 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468c      	mov	ip, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	f040 8083 	bne.w	8000316 <__udivmoddi4+0x116>
 8000210:	428a      	cmp	r2, r1
 8000212:	4617      	mov	r7, r2
 8000214:	d947      	bls.n	80002a6 <__udivmoddi4+0xa6>
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	b142      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021c:	f1c2 0020 	rsb	r0, r2, #32
 8000220:	fa24 f000 	lsr.w	r0, r4, r0
 8000224:	4091      	lsls	r1, r2
 8000226:	4097      	lsls	r7, r2
 8000228:	ea40 0c01 	orr.w	ip, r0, r1
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbbc f6f8 	udiv	r6, ip, r8
 8000238:	fa1f fe87 	uxth.w	lr, r7
 800023c:	fb08 c116 	mls	r1, r8, r6, ip
 8000240:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000244:	fb06 f10e 	mul.w	r1, r6, lr
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18fb      	adds	r3, r7, r3
 800024e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000252:	f080 8119 	bcs.w	8000488 <__udivmoddi4+0x288>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8116 	bls.w	8000488 <__udivmoddi4+0x288>
 800025c:	3e02      	subs	r6, #2
 800025e:	443b      	add	r3, r7
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0f8 	udiv	r0, r3, r8
 8000268:	fb08 3310 	mls	r3, r8, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fe0e 	mul.w	lr, r0, lr
 8000274:	45a6      	cmp	lr, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	193c      	adds	r4, r7, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295
 800027e:	f080 8105 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000282:	45a6      	cmp	lr, r4
 8000284:	f240 8102 	bls.w	800048c <__udivmoddi4+0x28c>
 8000288:	3802      	subs	r0, #2
 800028a:	443c      	add	r4, r7
 800028c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000290:	eba4 040e 	sub.w	r4, r4, lr
 8000294:	2600      	movs	r6, #0
 8000296:	b11d      	cbz	r5, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c5 4300 	strd	r4, r3, [r5]
 80002a0:	4631      	mov	r1, r6
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	b902      	cbnz	r2, 80002aa <__udivmoddi4+0xaa>
 80002a8:	deff      	udf	#255	; 0xff
 80002aa:	fab2 f282 	clz	r2, r2
 80002ae:	2a00      	cmp	r2, #0
 80002b0:	d150      	bne.n	8000354 <__udivmoddi4+0x154>
 80002b2:	1bcb      	subs	r3, r1, r7
 80002b4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b8:	fa1f f887 	uxth.w	r8, r7
 80002bc:	2601      	movs	r6, #1
 80002be:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c2:	0c21      	lsrs	r1, r4, #16
 80002c4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002cc:	fb08 f30c 	mul.w	r3, r8, ip
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d907      	bls.n	80002e4 <__udivmoddi4+0xe4>
 80002d4:	1879      	adds	r1, r7, r1
 80002d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002da:	d202      	bcs.n	80002e2 <__udivmoddi4+0xe2>
 80002dc:	428b      	cmp	r3, r1
 80002de:	f200 80e9 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 80002e2:	4684      	mov	ip, r0
 80002e4:	1ac9      	subs	r1, r1, r3
 80002e6:	b2a3      	uxth	r3, r4
 80002e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80002ec:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f4:	fb08 f800 	mul.w	r8, r8, r0
 80002f8:	45a0      	cmp	r8, r4
 80002fa:	d907      	bls.n	800030c <__udivmoddi4+0x10c>
 80002fc:	193c      	adds	r4, r7, r4
 80002fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000302:	d202      	bcs.n	800030a <__udivmoddi4+0x10a>
 8000304:	45a0      	cmp	r8, r4
 8000306:	f200 80d9 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 800030a:	4618      	mov	r0, r3
 800030c:	eba4 0408 	sub.w	r4, r4, r8
 8000310:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000314:	e7bf      	b.n	8000296 <__udivmoddi4+0x96>
 8000316:	428b      	cmp	r3, r1
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x12e>
 800031a:	2d00      	cmp	r5, #0
 800031c:	f000 80b1 	beq.w	8000482 <__udivmoddi4+0x282>
 8000320:	2600      	movs	r6, #0
 8000322:	e9c5 0100 	strd	r0, r1, [r5]
 8000326:	4630      	mov	r0, r6
 8000328:	4631      	mov	r1, r6
 800032a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032e:	fab3 f683 	clz	r6, r3
 8000332:	2e00      	cmp	r6, #0
 8000334:	d14a      	bne.n	80003cc <__udivmoddi4+0x1cc>
 8000336:	428b      	cmp	r3, r1
 8000338:	d302      	bcc.n	8000340 <__udivmoddi4+0x140>
 800033a:	4282      	cmp	r2, r0
 800033c:	f200 80b8 	bhi.w	80004b0 <__udivmoddi4+0x2b0>
 8000340:	1a84      	subs	r4, r0, r2
 8000342:	eb61 0103 	sbc.w	r1, r1, r3
 8000346:	2001      	movs	r0, #1
 8000348:	468c      	mov	ip, r1
 800034a:	2d00      	cmp	r5, #0
 800034c:	d0a8      	beq.n	80002a0 <__udivmoddi4+0xa0>
 800034e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000354:	f1c2 0320 	rsb	r3, r2, #32
 8000358:	fa20 f603 	lsr.w	r6, r0, r3
 800035c:	4097      	lsls	r7, r2
 800035e:	fa01 f002 	lsl.w	r0, r1, r2
 8000362:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000366:	40d9      	lsrs	r1, r3
 8000368:	4330      	orrs	r0, r6
 800036a:	0c03      	lsrs	r3, r0, #16
 800036c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000370:	fa1f f887 	uxth.w	r8, r7
 8000374:	fb0e 1116 	mls	r1, lr, r6, r1
 8000378:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037c:	fb06 f108 	mul.w	r1, r6, r8
 8000380:	4299      	cmp	r1, r3
 8000382:	fa04 f402 	lsl.w	r4, r4, r2
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x19c>
 8000388:	18fb      	adds	r3, r7, r3
 800038a:	f106 3cff 	add.w	ip, r6, #4294967295
 800038e:	f080 808d 	bcs.w	80004ac <__udivmoddi4+0x2ac>
 8000392:	4299      	cmp	r1, r3
 8000394:	f240 808a 	bls.w	80004ac <__udivmoddi4+0x2ac>
 8000398:	3e02      	subs	r6, #2
 800039a:	443b      	add	r3, r7
 800039c:	1a5b      	subs	r3, r3, r1
 800039e:	b281      	uxth	r1, r0
 80003a0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb00 f308 	mul.w	r3, r0, r8
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x1c4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f100 3cff 	add.w	ip, r0, #4294967295
 80003ba:	d273      	bcs.n	80004a4 <__udivmoddi4+0x2a4>
 80003bc:	428b      	cmp	r3, r1
 80003be:	d971      	bls.n	80004a4 <__udivmoddi4+0x2a4>
 80003c0:	3802      	subs	r0, #2
 80003c2:	4439      	add	r1, r7
 80003c4:	1acb      	subs	r3, r1, r3
 80003c6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ca:	e778      	b.n	80002be <__udivmoddi4+0xbe>
 80003cc:	f1c6 0c20 	rsb	ip, r6, #32
 80003d0:	fa03 f406 	lsl.w	r4, r3, r6
 80003d4:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d8:	431c      	orrs	r4, r3
 80003da:	fa20 f70c 	lsr.w	r7, r0, ip
 80003de:	fa01 f306 	lsl.w	r3, r1, r6
 80003e2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003e6:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ea:	431f      	orrs	r7, r3
 80003ec:	0c3b      	lsrs	r3, r7, #16
 80003ee:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f2:	fa1f f884 	uxth.w	r8, r4
 80003f6:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003fe:	fb09 fa08 	mul.w	sl, r9, r8
 8000402:	458a      	cmp	sl, r1
 8000404:	fa02 f206 	lsl.w	r2, r2, r6
 8000408:	fa00 f306 	lsl.w	r3, r0, r6
 800040c:	d908      	bls.n	8000420 <__udivmoddi4+0x220>
 800040e:	1861      	adds	r1, r4, r1
 8000410:	f109 30ff 	add.w	r0, r9, #4294967295
 8000414:	d248      	bcs.n	80004a8 <__udivmoddi4+0x2a8>
 8000416:	458a      	cmp	sl, r1
 8000418:	d946      	bls.n	80004a8 <__udivmoddi4+0x2a8>
 800041a:	f1a9 0902 	sub.w	r9, r9, #2
 800041e:	4421      	add	r1, r4
 8000420:	eba1 010a 	sub.w	r1, r1, sl
 8000424:	b2bf      	uxth	r7, r7
 8000426:	fbb1 f0fe 	udiv	r0, r1, lr
 800042a:	fb0e 1110 	mls	r1, lr, r0, r1
 800042e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000432:	fb00 f808 	mul.w	r8, r0, r8
 8000436:	45b8      	cmp	r8, r7
 8000438:	d907      	bls.n	800044a <__udivmoddi4+0x24a>
 800043a:	19e7      	adds	r7, r4, r7
 800043c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000440:	d22e      	bcs.n	80004a0 <__udivmoddi4+0x2a0>
 8000442:	45b8      	cmp	r8, r7
 8000444:	d92c      	bls.n	80004a0 <__udivmoddi4+0x2a0>
 8000446:	3802      	subs	r0, #2
 8000448:	4427      	add	r7, r4
 800044a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800044e:	eba7 0708 	sub.w	r7, r7, r8
 8000452:	fba0 8902 	umull	r8, r9, r0, r2
 8000456:	454f      	cmp	r7, r9
 8000458:	46c6      	mov	lr, r8
 800045a:	4649      	mov	r1, r9
 800045c:	d31a      	bcc.n	8000494 <__udivmoddi4+0x294>
 800045e:	d017      	beq.n	8000490 <__udivmoddi4+0x290>
 8000460:	b15d      	cbz	r5, 800047a <__udivmoddi4+0x27a>
 8000462:	ebb3 020e 	subs.w	r2, r3, lr
 8000466:	eb67 0701 	sbc.w	r7, r7, r1
 800046a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800046e:	40f2      	lsrs	r2, r6
 8000470:	ea4c 0202 	orr.w	r2, ip, r2
 8000474:	40f7      	lsrs	r7, r6
 8000476:	e9c5 2700 	strd	r2, r7, [r5]
 800047a:	2600      	movs	r6, #0
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	462e      	mov	r6, r5
 8000484:	4628      	mov	r0, r5
 8000486:	e70b      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000488:	4606      	mov	r6, r0
 800048a:	e6e9      	b.n	8000260 <__udivmoddi4+0x60>
 800048c:	4618      	mov	r0, r3
 800048e:	e6fd      	b.n	800028c <__udivmoddi4+0x8c>
 8000490:	4543      	cmp	r3, r8
 8000492:	d2e5      	bcs.n	8000460 <__udivmoddi4+0x260>
 8000494:	ebb8 0e02 	subs.w	lr, r8, r2
 8000498:	eb69 0104 	sbc.w	r1, r9, r4
 800049c:	3801      	subs	r0, #1
 800049e:	e7df      	b.n	8000460 <__udivmoddi4+0x260>
 80004a0:	4608      	mov	r0, r1
 80004a2:	e7d2      	b.n	800044a <__udivmoddi4+0x24a>
 80004a4:	4660      	mov	r0, ip
 80004a6:	e78d      	b.n	80003c4 <__udivmoddi4+0x1c4>
 80004a8:	4681      	mov	r9, r0
 80004aa:	e7b9      	b.n	8000420 <__udivmoddi4+0x220>
 80004ac:	4666      	mov	r6, ip
 80004ae:	e775      	b.n	800039c <__udivmoddi4+0x19c>
 80004b0:	4630      	mov	r0, r6
 80004b2:	e74a      	b.n	800034a <__udivmoddi4+0x14a>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	4439      	add	r1, r7
 80004ba:	e713      	b.n	80002e4 <__udivmoddi4+0xe4>
 80004bc:	3802      	subs	r0, #2
 80004be:	443c      	add	r4, r7
 80004c0:	e724      	b.n	800030c <__udivmoddi4+0x10c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <MX_DFSDM1_Init>:

DFSDM_Channel_HandleTypeDef hdfsdm1_channel1;

/* DFSDM1 init function */
void MX_DFSDM1_Init(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 80004cc:	4b18      	ldr	r3, [pc, #96]	; (8000530 <MX_DFSDM1_Init+0x68>)
 80004ce:	4a19      	ldr	r2, [pc, #100]	; (8000534 <MX_DFSDM1_Init+0x6c>)
 80004d0:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 80004d2:	4b17      	ldr	r3, [pc, #92]	; (8000530 <MX_DFSDM1_Init+0x68>)
 80004d4:	2201      	movs	r2, #1
 80004d6:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80004d8:	4b15      	ldr	r3, [pc, #84]	; (8000530 <MX_DFSDM1_Init+0x68>)
 80004da:	2200      	movs	r2, #0
 80004dc:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 80004de:	4b14      	ldr	r3, [pc, #80]	; (8000530 <MX_DFSDM1_Init+0x68>)
 80004e0:	2202      	movs	r2, #2
 80004e2:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80004e4:	4b12      	ldr	r3, [pc, #72]	; (8000530 <MX_DFSDM1_Init+0x68>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80004ea:	4b11      	ldr	r3, [pc, #68]	; (8000530 <MX_DFSDM1_Init+0x68>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 80004f0:	4b0f      	ldr	r3, [pc, #60]	; (8000530 <MX_DFSDM1_Init+0x68>)
 80004f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80004f6:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80004f8:	4b0d      	ldr	r3, [pc, #52]	; (8000530 <MX_DFSDM1_Init+0x68>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80004fe:	4b0c      	ldr	r3, [pc, #48]	; (8000530 <MX_DFSDM1_Init+0x68>)
 8000500:	2204      	movs	r2, #4
 8000502:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000504:	4b0a      	ldr	r3, [pc, #40]	; (8000530 <MX_DFSDM1_Init+0x68>)
 8000506:	2200      	movs	r2, #0
 8000508:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 800050a:	4b09      	ldr	r3, [pc, #36]	; (8000530 <MX_DFSDM1_Init+0x68>)
 800050c:	2201      	movs	r2, #1
 800050e:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8000510:	4b07      	ldr	r3, [pc, #28]	; (8000530 <MX_DFSDM1_Init+0x68>)
 8000512:	2200      	movs	r2, #0
 8000514:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8000516:	4b06      	ldr	r3, [pc, #24]	; (8000530 <MX_DFSDM1_Init+0x68>)
 8000518:	2200      	movs	r2, #0
 800051a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 800051c:	4804      	ldr	r0, [pc, #16]	; (8000530 <MX_DFSDM1_Init+0x68>)
 800051e:	f001 f89f 	bl	8001660 <HAL_DFSDM_ChannelInit>
 8000522:	4603      	mov	r3, r0
 8000524:	2b00      	cmp	r3, #0
 8000526:	d001      	beq.n	800052c <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 8000528:	f000 fb98 	bl	8000c5c <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 800052c:	bf00      	nop
 800052e:	bd80      	pop	{r7, pc}
 8000530:	2000107c 	.word	0x2000107c
 8000534:	40016020 	.word	0x40016020

08000538 <HAL_DFSDM_ChannelMspInit>:

static uint32_t DFSDM1_Init = 0;

void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* dfsdm_channelHandle)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b0ac      	sub	sp, #176	; 0xb0
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000540:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000544:	2200      	movs	r2, #0
 8000546:	601a      	str	r2, [r3, #0]
 8000548:	605a      	str	r2, [r3, #4]
 800054a:	609a      	str	r2, [r3, #8]
 800054c:	60da      	str	r2, [r3, #12]
 800054e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000550:	f107 0314 	add.w	r3, r7, #20
 8000554:	2288      	movs	r2, #136	; 0x88
 8000556:	2100      	movs	r1, #0
 8000558:	4618      	mov	r0, r3
 800055a:	f005 fe25 	bl	80061a8 <memset>
  if(DFSDM1_Init == 0)
 800055e:	4b25      	ldr	r3, [pc, #148]	; (80005f4 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	2b00      	cmp	r3, #0
 8000564:	d142      	bne.n	80005ec <HAL_DFSDM_ChannelMspInit+0xb4>
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8000566:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800056a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 800056c:	2300      	movs	r3, #0
 800056e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000572:	f107 0314 	add.w	r3, r7, #20
 8000576:	4618      	mov	r0, r3
 8000578:	f002 fd4a 	bl	8003010 <HAL_RCCEx_PeriphCLKConfig>
 800057c:	4603      	mov	r3, r0
 800057e:	2b00      	cmp	r3, #0
 8000580:	d001      	beq.n	8000586 <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8000582:	f000 fb6b 	bl	8000c5c <Error_Handler>
    }

    /* DFSDM1 clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000586:	4b1c      	ldr	r3, [pc, #112]	; (80005f8 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000588:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800058a:	4a1b      	ldr	r2, [pc, #108]	; (80005f8 <HAL_DFSDM_ChannelMspInit+0xc0>)
 800058c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000590:	6613      	str	r3, [r2, #96]	; 0x60
 8000592:	4b19      	ldr	r3, [pc, #100]	; (80005f8 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000594:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000596:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800059a:	613b      	str	r3, [r7, #16]
 800059c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800059e:	4b16      	ldr	r3, [pc, #88]	; (80005f8 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80005a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005a2:	4a15      	ldr	r2, [pc, #84]	; (80005f8 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80005a4:	f043 0310 	orr.w	r3, r3, #16
 80005a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005aa:	4b13      	ldr	r3, [pc, #76]	; (80005f8 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80005ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ae:	f003 0310 	and.w	r3, r3, #16
 80005b2:	60fb      	str	r3, [r7, #12]
 80005b4:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 80005b6:	f44f 7320 	mov.w	r3, #640	; 0x280
 80005ba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005be:	2302      	movs	r3, #2
 80005c0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c4:	2300      	movs	r3, #0
 80005c6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ca:	2300      	movs	r3, #0
 80005cc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80005d0:	2306      	movs	r3, #6
 80005d2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80005d6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80005da:	4619      	mov	r1, r3
 80005dc:	4807      	ldr	r0, [pc, #28]	; (80005fc <HAL_DFSDM_ChannelMspInit+0xc4>)
 80005de:	f001 f94b 	bl	8001878 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 80005e2:	4b04      	ldr	r3, [pc, #16]	; (80005f4 <HAL_DFSDM_ChannelMspInit+0xbc>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	3301      	adds	r3, #1
 80005e8:	4a02      	ldr	r2, [pc, #8]	; (80005f4 <HAL_DFSDM_ChannelMspInit+0xbc>)
 80005ea:	6013      	str	r3, [r2, #0]
  }
}
 80005ec:	bf00      	nop
 80005ee:	37b0      	adds	r7, #176	; 0xb0
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	20000090 	.word	0x20000090
 80005f8:	40021000 	.word	0x40021000
 80005fc:	48001000 	.word	0x48001000

08000600 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000600:	b480      	push	{r7}
 8000602:	b085      	sub	sp, #20
 8000604:	af00      	add	r7, sp, #0
 8000606:	60f8      	str	r0, [r7, #12]
 8000608:	60b9      	str	r1, [r7, #8]
 800060a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800060c:	68fb      	ldr	r3, [r7, #12]
 800060e:	4a07      	ldr	r2, [pc, #28]	; (800062c <vApplicationGetIdleTaskMemory+0x2c>)
 8000610:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000612:	68bb      	ldr	r3, [r7, #8]
 8000614:	4a06      	ldr	r2, [pc, #24]	; (8000630 <vApplicationGetIdleTaskMemory+0x30>)
 8000616:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	2280      	movs	r2, #128	; 0x80
 800061c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800061e:	bf00      	nop
 8000620:	3714      	adds	r7, #20
 8000622:	46bd      	mov	sp, r7
 8000624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000628:	4770      	bx	lr
 800062a:	bf00      	nop
 800062c:	20000094 	.word	0x20000094
 8000630:	20000148 	.word	0x20000148

08000634 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000634:	b580      	push	{r7, lr}
 8000636:	b082      	sub	sp, #8
 8000638:	af02      	add	r7, sp, #8


  /* Create the thread(s) */
  xTaskCreate(vTask1,		/* Pointer to the function that implements the task. */
 800063a:	2300      	movs	r3, #0
 800063c:	9301      	str	r3, [sp, #4]
 800063e:	2303      	movs	r3, #3
 8000640:	9300      	str	r3, [sp, #0]
 8000642:	2300      	movs	r3, #0
 8000644:	2280      	movs	r2, #128	; 0x80
 8000646:	4903      	ldr	r1, [pc, #12]	; (8000654 <MX_FREERTOS_Init+0x20>)
 8000648:	4803      	ldr	r0, [pc, #12]	; (8000658 <MX_FREERTOS_Init+0x24>)
 800064a:	f004 fd36 	bl	80050ba <xTaskCreate>
			  128,			/* stack depth */
			  NULL,			/* task parameter. */
			  3,			/* task priority */
			  NULL);		/* task handle. */

}
 800064e:	bf00      	nop
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}
 8000654:	0800635c 	.word	0x0800635c
 8000658:	0800065d 	.word	0x0800065d

0800065c <vTask1>:

void vTask1( void *pvParameters )
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b084      	sub	sp, #16
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
	int i = 0;
 8000664:	2300      	movs	r3, #0
 8000666:	60fb      	str	r3, [r7, #12]

	/* infinite loop */
	for( ;; )
	{
		if(5 == (i%7))
 8000668:	68fa      	ldr	r2, [r7, #12]
 800066a:	4b16      	ldr	r3, [pc, #88]	; (80006c4 <vTask1+0x68>)
 800066c:	fb83 1302 	smull	r1, r3, r3, r2
 8000670:	4413      	add	r3, r2
 8000672:	1099      	asrs	r1, r3, #2
 8000674:	17d3      	asrs	r3, r2, #31
 8000676:	1ac9      	subs	r1, r1, r3
 8000678:	460b      	mov	r3, r1
 800067a:	00db      	lsls	r3, r3, #3
 800067c:	1a5b      	subs	r3, r3, r1
 800067e:	1ad1      	subs	r1, r2, r3
 8000680:	2905      	cmp	r1, #5
 8000682:	d105      	bne.n	8000690 <vTask1+0x34>
		{
			HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8000684:	2120      	movs	r1, #32
 8000686:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800068a:	f001 fab7 	bl	8001bfc <HAL_GPIO_TogglePin>
 800068e:	e012      	b.n	80006b6 <vTask1+0x5a>
		}
		else if(0 == (i%7))
 8000690:	68fa      	ldr	r2, [r7, #12]
 8000692:	4b0c      	ldr	r3, [pc, #48]	; (80006c4 <vTask1+0x68>)
 8000694:	fb83 1302 	smull	r1, r3, r3, r2
 8000698:	4413      	add	r3, r2
 800069a:	1099      	asrs	r1, r3, #2
 800069c:	17d3      	asrs	r3, r2, #31
 800069e:	1ac9      	subs	r1, r1, r3
 80006a0:	460b      	mov	r3, r1
 80006a2:	00db      	lsls	r3, r3, #3
 80006a4:	1a5b      	subs	r3, r3, r1
 80006a6:	1ad1      	subs	r1, r2, r3
 80006a8:	2900      	cmp	r1, #0
 80006aa:	d104      	bne.n	80006b6 <vTask1+0x5a>
		{
			HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 80006ac:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006b0:	4805      	ldr	r0, [pc, #20]	; (80006c8 <vTask1+0x6c>)
 80006b2:	f001 faa3 	bl	8001bfc <HAL_GPIO_TogglePin>
		}
		HAL_Delay(100);
 80006b6:	2064      	movs	r0, #100	; 0x64
 80006b8:	f000 fecc 	bl	8001454 <HAL_Delay>
		i++;
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	3301      	adds	r3, #1
 80006c0:	60fb      	str	r3, [r7, #12]
		if(5 == (i%7))
 80006c2:	e7d1      	b.n	8000668 <vTask1+0xc>
 80006c4:	92492493 	.word	0x92492493
 80006c8:	48000400 	.word	0x48000400

080006cc <MX_GPIO_Init>:
     PD6   ------> USART2_RX
     PB8   ------> I2C1_SCL
     PB9   ------> I2C1_SDA
*/
void MX_GPIO_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b08a      	sub	sp, #40	; 0x28
 80006d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d2:	f107 0314 	add.w	r3, r7, #20
 80006d6:	2200      	movs	r2, #0
 80006d8:	601a      	str	r2, [r3, #0]
 80006da:	605a      	str	r2, [r3, #4]
 80006dc:	609a      	str	r2, [r3, #8]
 80006de:	60da      	str	r2, [r3, #12]
 80006e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006e2:	4bbd      	ldr	r3, [pc, #756]	; (80009d8 <MX_GPIO_Init+0x30c>)
 80006e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006e6:	4abc      	ldr	r2, [pc, #752]	; (80009d8 <MX_GPIO_Init+0x30c>)
 80006e8:	f043 0310 	orr.w	r3, r3, #16
 80006ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006ee:	4bba      	ldr	r3, [pc, #744]	; (80009d8 <MX_GPIO_Init+0x30c>)
 80006f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006f2:	f003 0310 	and.w	r3, r3, #16
 80006f6:	613b      	str	r3, [r7, #16]
 80006f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006fa:	4bb7      	ldr	r3, [pc, #732]	; (80009d8 <MX_GPIO_Init+0x30c>)
 80006fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006fe:	4ab6      	ldr	r2, [pc, #728]	; (80009d8 <MX_GPIO_Init+0x30c>)
 8000700:	f043 0304 	orr.w	r3, r3, #4
 8000704:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000706:	4bb4      	ldr	r3, [pc, #720]	; (80009d8 <MX_GPIO_Init+0x30c>)
 8000708:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800070a:	f003 0304 	and.w	r3, r3, #4
 800070e:	60fb      	str	r3, [r7, #12]
 8000710:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000712:	4bb1      	ldr	r3, [pc, #708]	; (80009d8 <MX_GPIO_Init+0x30c>)
 8000714:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000716:	4ab0      	ldr	r2, [pc, #704]	; (80009d8 <MX_GPIO_Init+0x30c>)
 8000718:	f043 0301 	orr.w	r3, r3, #1
 800071c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800071e:	4bae      	ldr	r3, [pc, #696]	; (80009d8 <MX_GPIO_Init+0x30c>)
 8000720:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000722:	f003 0301 	and.w	r3, r3, #1
 8000726:	60bb      	str	r3, [r7, #8]
 8000728:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800072a:	4bab      	ldr	r3, [pc, #684]	; (80009d8 <MX_GPIO_Init+0x30c>)
 800072c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800072e:	4aaa      	ldr	r2, [pc, #680]	; (80009d8 <MX_GPIO_Init+0x30c>)
 8000730:	f043 0302 	orr.w	r3, r3, #2
 8000734:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000736:	4ba8      	ldr	r3, [pc, #672]	; (80009d8 <MX_GPIO_Init+0x30c>)
 8000738:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800073a:	f003 0302 	and.w	r3, r3, #2
 800073e:	607b      	str	r3, [r7, #4]
 8000740:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000742:	4ba5      	ldr	r3, [pc, #660]	; (80009d8 <MX_GPIO_Init+0x30c>)
 8000744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000746:	4aa4      	ldr	r2, [pc, #656]	; (80009d8 <MX_GPIO_Init+0x30c>)
 8000748:	f043 0308 	orr.w	r3, r3, #8
 800074c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800074e:	4ba2      	ldr	r3, [pc, #648]	; (80009d8 <MX_GPIO_Init+0x30c>)
 8000750:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000752:	f003 0308 	and.w	r3, r3, #8
 8000756:	603b      	str	r3, [r7, #0]
 8000758:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 800075a:	2200      	movs	r2, #0
 800075c:	f44f 718a 	mov.w	r1, #276	; 0x114
 8000760:	489e      	ldr	r0, [pc, #632]	; (80009dc <MX_GPIO_Init+0x310>)
 8000762:	f001 fa33 	bl	8001bcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|LED1_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8000766:	2200      	movs	r2, #0
 8000768:	f248 1124 	movw	r1, #33060	; 0x8124
 800076c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000770:	f001 fa2c 	bl	8001bcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000774:	2200      	movs	r2, #0
 8000776:	f24f 0114 	movw	r1, #61460	; 0xf014
 800077a:	4899      	ldr	r0, [pc, #612]	; (80009e0 <MX_GPIO_Init+0x314>)
 800077c:	f001 fa26 	bl	8001bcc <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8000780:	2200      	movs	r2, #0
 8000782:	f241 0181 	movw	r1, #4225	; 0x1081
 8000786:	4897      	ldr	r0, [pc, #604]	; (80009e4 <MX_GPIO_Init+0x318>)
 8000788:	f001 fa20 	bl	8001bcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 800078c:	2200      	movs	r2, #0
 800078e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8000792:	4895      	ldr	r0, [pc, #596]	; (80009e8 <MX_GPIO_Init+0x31c>)
 8000794:	f001 fa1a 	bl	8001bcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000798:	2201      	movs	r2, #1
 800079a:	2120      	movs	r1, #32
 800079c:	4890      	ldr	r0, [pc, #576]	; (80009e0 <MX_GPIO_Init+0x314>)
 800079e:	f001 fa15 	bl	8001bcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 80007a2:	2201      	movs	r2, #1
 80007a4:	2101      	movs	r1, #1
 80007a6:	488d      	ldr	r0, [pc, #564]	; (80009dc <MX_GPIO_Init+0x310>)
 80007a8:	f001 fa10 	bl	8001bcc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 80007ac:	f240 1315 	movw	r3, #277	; 0x115
 80007b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007b2:	2301      	movs	r3, #1
 80007b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b6:	2300      	movs	r3, #0
 80007b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ba:	2300      	movs	r3, #0
 80007bc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007be:	f107 0314 	add.w	r3, r7, #20
 80007c2:	4619      	mov	r1, r3
 80007c4:	4885      	ldr	r0, [pc, #532]	; (80009dc <MX_GPIO_Init+0x310>)
 80007c6:	f001 f857 	bl	8001878 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 80007ca:	236a      	movs	r3, #106	; 0x6a
 80007cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007ce:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80007d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d4:	2300      	movs	r3, #0
 80007d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007d8:	f107 0314 	add.w	r3, r7, #20
 80007dc:	4619      	mov	r1, r3
 80007de:	487f      	ldr	r0, [pc, #508]	; (80009dc <MX_GPIO_Init+0x310>)
 80007e0:	f001 f84a 	bl	8001878 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = User_Button_Pin|VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 80007e4:	f44f 5306 	mov.w	r3, #8576	; 0x2180
 80007e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007ea:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80007ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f0:	2300      	movs	r3, #0
 80007f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007f4:	f107 0314 	add.w	r3, r7, #20
 80007f8:	4619      	mov	r1, r3
 80007fa:	487b      	ldr	r0, [pc, #492]	; (80009e8 <MX_GPIO_Init+0x31c>)
 80007fc:	f001 f83c 	bl	8001878 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8000800:	233f      	movs	r3, #63	; 0x3f
 8000802:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000804:	230b      	movs	r3, #11
 8000806:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000808:	2300      	movs	r3, #0
 800080a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800080c:	f107 0314 	add.w	r3, r7, #20
 8000810:	4619      	mov	r1, r3
 8000812:	4875      	ldr	r0, [pc, #468]	; (80009e8 <MX_GPIO_Init+0x31c>)
 8000814:	f001 f830 	bl	8001878 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8000818:	2303      	movs	r3, #3
 800081a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800081c:	2302      	movs	r3, #2
 800081e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000820:	2300      	movs	r3, #0
 8000822:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000824:	2303      	movs	r3, #3
 8000826:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000828:	2308      	movs	r3, #8
 800082a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800082c:	f107 0314 	add.w	r3, r7, #20
 8000830:	4619      	mov	r1, r3
 8000832:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000836:	f001 f81f 	bl	8001878 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|LED1_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 800083a:	f248 1324 	movw	r3, #33060	; 0x8124
 800083e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000840:	2301      	movs	r3, #1
 8000842:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000844:	2300      	movs	r3, #0
 8000846:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000848:	2300      	movs	r3, #0
 800084a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800084c:	f107 0314 	add.w	r3, r7, #20
 8000850:	4619      	mov	r1, r3
 8000852:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000856:	f001 f80f 	bl	8001878 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 800085a:	2308      	movs	r3, #8
 800085c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800085e:	2302      	movs	r3, #2
 8000860:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000862:	2300      	movs	r3, #0
 8000864:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000866:	2300      	movs	r3, #0
 8000868:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800086a:	2301      	movs	r3, #1
 800086c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 800086e:	f107 0314 	add.w	r3, r7, #20
 8000872:	4619      	mov	r1, r3
 8000874:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000878:	f000 fffe 	bl	8001878 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 800087c:	2310      	movs	r3, #16
 800087e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000880:	230b      	movs	r3, #11
 8000882:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000884:	2300      	movs	r3, #0
 8000886:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8000888:	f107 0314 	add.w	r3, r7, #20
 800088c:	4619      	mov	r1, r3
 800088e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000892:	f000 fff1 	bl	8001878 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = ARD_D12_Pin|ARD_D11_Pin;
 8000896:	23c0      	movs	r3, #192	; 0xc0
 8000898:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800089a:	2302      	movs	r3, #2
 800089c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089e:	2300      	movs	r3, #0
 80008a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008a2:	2303      	movs	r3, #3
 80008a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80008a6:	2305      	movs	r3, #5
 80008a8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008aa:	f107 0314 	add.w	r3, r7, #20
 80008ae:	4619      	mov	r1, r3
 80008b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008b4:	f000 ffe0 	bl	8001878 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 80008b8:	2301      	movs	r3, #1
 80008ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008bc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80008c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c2:	2300      	movs	r3, #0
 80008c4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 80008c6:	f107 0314 	add.w	r3, r7, #20
 80008ca:	4619      	mov	r1, r3
 80008cc:	4844      	ldr	r0, [pc, #272]	; (80009e0 <MX_GPIO_Init+0x314>)
 80008ce:	f000 ffd3 	bl	8001878 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 80008d2:	2302      	movs	r3, #2
 80008d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80008d6:	230b      	movs	r3, #11
 80008d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008da:	2300      	movs	r3, #0
 80008dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 80008de:	f107 0314 	add.w	r3, r7, #20
 80008e2:	4619      	mov	r1, r3
 80008e4:	483e      	ldr	r0, [pc, #248]	; (80009e0 <MX_GPIO_Init+0x314>)
 80008e6:	f000 ffc7 	bl	8001878 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 80008ea:	f24f 0334 	movw	r3, #61492	; 0xf034
 80008ee:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f0:	2301      	movs	r3, #1
 80008f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f4:	2300      	movs	r3, #0
 80008f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f8:	2300      	movs	r3, #0
 80008fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008fc:	f107 0314 	add.w	r3, r7, #20
 8000900:	4619      	mov	r1, r3
 8000902:	4837      	ldr	r0, [pc, #220]	; (80009e0 <MX_GPIO_Init+0x314>)
 8000904:	f000 ffb8 	bl	8001878 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8000908:	f64c 4304 	movw	r3, #52228	; 0xcc04
 800090c:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800090e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000912:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000914:	2300      	movs	r3, #0
 8000916:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000918:	f107 0314 	add.w	r3, r7, #20
 800091c:	4619      	mov	r1, r3
 800091e:	4831      	ldr	r0, [pc, #196]	; (80009e4 <MX_GPIO_Init+0x318>)
 8000920:	f000 ffaa 	bl	8001878 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8000924:	f241 0381 	movw	r3, #4225	; 0x1081
 8000928:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800092a:	2301      	movs	r3, #1
 800092c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092e:	2300      	movs	r3, #0
 8000930:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000932:	2300      	movs	r3, #0
 8000934:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000936:	f107 0314 	add.w	r3, r7, #20
 800093a:	4619      	mov	r1, r3
 800093c:	4829      	ldr	r0, [pc, #164]	; (80009e4 <MX_GPIO_Init+0x318>)
 800093e:	f000 ff9b 	bl	8001878 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8000942:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000946:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000948:	2301      	movs	r3, #1
 800094a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094c:	2300      	movs	r3, #0
 800094e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000950:	2300      	movs	r3, #0
 8000952:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000954:	f107 0314 	add.w	r3, r7, #20
 8000958:	4619      	mov	r1, r3
 800095a:	4823      	ldr	r0, [pc, #140]	; (80009e8 <MX_GPIO_Init+0x31c>)
 800095c:	f000 ff8c 	bl	8001878 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8000960:	2302      	movs	r3, #2
 8000962:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000964:	2302      	movs	r3, #2
 8000966:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000968:	2300      	movs	r3, #0
 800096a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800096c:	2303      	movs	r3, #3
 800096e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000970:	2305      	movs	r3, #5
 8000972:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8000974:	f107 0314 	add.w	r3, r7, #20
 8000978:	4619      	mov	r1, r3
 800097a:	481a      	ldr	r0, [pc, #104]	; (80009e4 <MX_GPIO_Init+0x318>)
 800097c:	f000 ff7c 	bl	8001878 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8000980:	2378      	movs	r3, #120	; 0x78
 8000982:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000984:	2302      	movs	r3, #2
 8000986:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000988:	2300      	movs	r3, #0
 800098a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800098c:	2303      	movs	r3, #3
 800098e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000990:	2307      	movs	r3, #7
 8000992:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000994:	f107 0314 	add.w	r3, r7, #20
 8000998:	4619      	mov	r1, r3
 800099a:	4812      	ldr	r0, [pc, #72]	; (80009e4 <MX_GPIO_Init+0x318>)
 800099c:	f000 ff6c 	bl	8001878 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 80009a0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80009a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009a6:	2312      	movs	r3, #18
 80009a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009aa:	2300      	movs	r3, #0
 80009ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009ae:	2303      	movs	r3, #3
 80009b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009b2:	2304      	movs	r3, #4
 80009b4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009b6:	f107 0314 	add.w	r3, r7, #20
 80009ba:	4619      	mov	r1, r3
 80009bc:	4808      	ldr	r0, [pc, #32]	; (80009e0 <MX_GPIO_Init+0x314>)
 80009be:	f000 ff5b 	bl	8001878 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 80009c2:	2200      	movs	r2, #0
 80009c4:	2105      	movs	r1, #5
 80009c6:	2017      	movs	r0, #23
 80009c8:	f000 fe20 	bl	800160c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80009cc:	2017      	movs	r0, #23
 80009ce:	f000 fe39 	bl	8001644 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80009d2:	2200      	movs	r2, #0
 80009d4:	2105      	movs	r1, #5
 80009d6:	e009      	b.n	80009ec <MX_GPIO_Init+0x320>
 80009d8:	40021000 	.word	0x40021000
 80009dc:	48001000 	.word	0x48001000
 80009e0:	48000400 	.word	0x48000400
 80009e4:	48000c00 	.word	0x48000c00
 80009e8:	48000800 	.word	0x48000800
 80009ec:	2028      	movs	r0, #40	; 0x28
 80009ee:	f000 fe0d 	bl	800160c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80009f2:	2028      	movs	r0, #40	; 0x28
 80009f4:	f000 fe26 	bl	8001644 <HAL_NVIC_EnableIRQ>

}
 80009f8:	bf00      	nop
 80009fa:	3728      	adds	r7, #40	; 0x28
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}

08000a00 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000a04:	4b1b      	ldr	r3, [pc, #108]	; (8000a74 <MX_I2C2_Init+0x74>)
 8000a06:	4a1c      	ldr	r2, [pc, #112]	; (8000a78 <MX_I2C2_Init+0x78>)
 8000a08:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 8000a0a:	4b1a      	ldr	r3, [pc, #104]	; (8000a74 <MX_I2C2_Init+0x74>)
 8000a0c:	4a1b      	ldr	r2, [pc, #108]	; (8000a7c <MX_I2C2_Init+0x7c>)
 8000a0e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000a10:	4b18      	ldr	r3, [pc, #96]	; (8000a74 <MX_I2C2_Init+0x74>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a16:	4b17      	ldr	r3, [pc, #92]	; (8000a74 <MX_I2C2_Init+0x74>)
 8000a18:	2201      	movs	r2, #1
 8000a1a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a1c:	4b15      	ldr	r3, [pc, #84]	; (8000a74 <MX_I2C2_Init+0x74>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000a22:	4b14      	ldr	r3, [pc, #80]	; (8000a74 <MX_I2C2_Init+0x74>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a28:	4b12      	ldr	r3, [pc, #72]	; (8000a74 <MX_I2C2_Init+0x74>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a2e:	4b11      	ldr	r3, [pc, #68]	; (8000a74 <MX_I2C2_Init+0x74>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a34:	4b0f      	ldr	r3, [pc, #60]	; (8000a74 <MX_I2C2_Init+0x74>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000a3a:	480e      	ldr	r0, [pc, #56]	; (8000a74 <MX_I2C2_Init+0x74>)
 8000a3c:	f001 f91b 	bl	8001c76 <HAL_I2C_Init>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000a46:	f000 f909 	bl	8000c5c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a4a:	2100      	movs	r1, #0
 8000a4c:	4809      	ldr	r0, [pc, #36]	; (8000a74 <MX_I2C2_Init+0x74>)
 8000a4e:	f001 f9a1 	bl	8001d94 <HAL_I2CEx_ConfigAnalogFilter>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000a58:	f000 f900 	bl	8000c5c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000a5c:	2100      	movs	r1, #0
 8000a5e:	4805      	ldr	r0, [pc, #20]	; (8000a74 <MX_I2C2_Init+0x74>)
 8000a60:	f001 f9e3 	bl	8001e2a <HAL_I2CEx_ConfigDigitalFilter>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000a6a:	f000 f8f7 	bl	8000c5c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000a6e:	bf00      	nop
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	200010b4 	.word	0x200010b4
 8000a78:	40005800 	.word	0x40005800
 8000a7c:	10909cec 	.word	0x10909cec

08000a80 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b0ac      	sub	sp, #176	; 0xb0
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a88:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	601a      	str	r2, [r3, #0]
 8000a90:	605a      	str	r2, [r3, #4]
 8000a92:	609a      	str	r2, [r3, #8]
 8000a94:	60da      	str	r2, [r3, #12]
 8000a96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a98:	f107 0314 	add.w	r3, r7, #20
 8000a9c:	2288      	movs	r2, #136	; 0x88
 8000a9e:	2100      	movs	r1, #0
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f005 fb81 	bl	80061a8 <memset>
  if(i2cHandle->Instance==I2C2)
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	4a21      	ldr	r2, [pc, #132]	; (8000b30 <HAL_I2C_MspInit+0xb0>)
 8000aac:	4293      	cmp	r3, r2
 8000aae:	d13b      	bne.n	8000b28 <HAL_I2C_MspInit+0xa8>
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000ab0:	2380      	movs	r3, #128	; 0x80
 8000ab2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ab8:	f107 0314 	add.w	r3, r7, #20
 8000abc:	4618      	mov	r0, r3
 8000abe:	f002 faa7 	bl	8003010 <HAL_RCCEx_PeriphCLKConfig>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000ac8:	f000 f8c8 	bl	8000c5c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000acc:	4b19      	ldr	r3, [pc, #100]	; (8000b34 <HAL_I2C_MspInit+0xb4>)
 8000ace:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ad0:	4a18      	ldr	r2, [pc, #96]	; (8000b34 <HAL_I2C_MspInit+0xb4>)
 8000ad2:	f043 0302 	orr.w	r3, r3, #2
 8000ad6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ad8:	4b16      	ldr	r3, [pc, #88]	; (8000b34 <HAL_I2C_MspInit+0xb4>)
 8000ada:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000adc:	f003 0302 	and.w	r3, r3, #2
 8000ae0:	613b      	str	r3, [r7, #16]
 8000ae2:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8000ae4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000ae8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000aec:	2312      	movs	r3, #18
 8000aee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000af2:	2301      	movs	r3, #1
 8000af4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000af8:	2303      	movs	r3, #3
 8000afa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000afe:	2304      	movs	r3, #4
 8000b00:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b04:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000b08:	4619      	mov	r1, r3
 8000b0a:	480b      	ldr	r0, [pc, #44]	; (8000b38 <HAL_I2C_MspInit+0xb8>)
 8000b0c:	f000 feb4 	bl	8001878 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000b10:	4b08      	ldr	r3, [pc, #32]	; (8000b34 <HAL_I2C_MspInit+0xb4>)
 8000b12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b14:	4a07      	ldr	r2, [pc, #28]	; (8000b34 <HAL_I2C_MspInit+0xb4>)
 8000b16:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000b1a:	6593      	str	r3, [r2, #88]	; 0x58
 8000b1c:	4b05      	ldr	r3, [pc, #20]	; (8000b34 <HAL_I2C_MspInit+0xb4>)
 8000b1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b20:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b24:	60fb      	str	r3, [r7, #12]
 8000b26:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000b28:	bf00      	nop
 8000b2a:	37b0      	adds	r7, #176	; 0xb0
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	40005800 	.word	0x40005800
 8000b34:	40021000 	.word	0x40021000
 8000b38:	48000400 	.word	0x48000400

08000b3c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b40:	f000 fc4f 	bl	80013e2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b44:	f000 f816 	bl	8000b74 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b48:	f7ff fdc0 	bl	80006cc <MX_GPIO_Init>
  MX_DFSDM1_Init();
 8000b4c:	f7ff fcbc 	bl	80004c8 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 8000b50:	f7ff ff56 	bl	8000a00 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 8000b54:	f000 f888 	bl	8000c68 <MX_QUADSPI_Init>
  MX_SPI3_Init();
 8000b58:	f000 f8f0 	bl	8000d3c <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8000b5c:	f000 fa4a 	bl	8000ff4 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000b60:	f000 fa78 	bl	8001054 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000b64:	f000 fb4a 	bl	80011fc <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8000b68:	f7ff fd64 	bl	8000634 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8000b6c:	f004 f9c6 	bl	8004efc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b70:	e7fe      	b.n	8000b70 <main+0x34>
	...

08000b74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b096      	sub	sp, #88	; 0x58
 8000b78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b7a:	f107 0314 	add.w	r3, r7, #20
 8000b7e:	2244      	movs	r2, #68	; 0x44
 8000b80:	2100      	movs	r1, #0
 8000b82:	4618      	mov	r0, r3
 8000b84:	f005 fb10 	bl	80061a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b88:	463b      	mov	r3, r7
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	601a      	str	r2, [r3, #0]
 8000b8e:	605a      	str	r2, [r3, #4]
 8000b90:	609a      	str	r2, [r3, #8]
 8000b92:	60da      	str	r2, [r3, #12]
 8000b94:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000b96:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000b9a:	f001 faf9 	bl	8002190 <HAL_PWREx_ControlVoltageScaling>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000ba4:	f000 f85a 	bl	8000c5c <Error_Handler>
  }
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000ba8:	f001 fad4 	bl	8002154 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000bac:	4b21      	ldr	r3, [pc, #132]	; (8000c34 <SystemClock_Config+0xc0>)
 8000bae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000bb2:	4a20      	ldr	r2, [pc, #128]	; (8000c34 <SystemClock_Config+0xc0>)
 8000bb4:	f023 0318 	bic.w	r3, r3, #24
 8000bb8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000bbc:	2314      	movs	r3, #20
 8000bbe:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000bcc:	2360      	movs	r3, #96	; 0x60
 8000bce:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bd0:	2302      	movs	r3, #2
 8000bd2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000bd8:	2301      	movs	r3, #1
 8000bda:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000bdc:	2328      	movs	r3, #40	; 0x28
 8000bde:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000be0:	2307      	movs	r3, #7
 8000be2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000be4:	2302      	movs	r3, #2
 8000be6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000be8:	2302      	movs	r3, #2
 8000bea:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bec:	f107 0314 	add.w	r3, r7, #20
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f001 fbef 	bl	80023d4 <HAL_RCC_OscConfig>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d001      	beq.n	8000c00 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000bfc:	f000 f82e 	bl	8000c5c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c00:	230f      	movs	r3, #15
 8000c02:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c04:	2303      	movs	r3, #3
 8000c06:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c10:	2300      	movs	r3, #0
 8000c12:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000c14:	463b      	mov	r3, r7
 8000c16:	2104      	movs	r1, #4
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f001 ffc1 	bl	8002ba0 <HAL_RCC_ClockConfig>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000c24:	f000 f81a 	bl	8000c5c <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000c28:	f002 fcdc 	bl	80035e4 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000c2c:	bf00      	nop
 8000c2e:	3758      	adds	r7, #88	; 0x58
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	40021000 	.word	0x40021000

08000c38 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4a04      	ldr	r2, [pc, #16]	; (8000c58 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c46:	4293      	cmp	r3, r2
 8000c48:	d101      	bne.n	8000c4e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c4a:	f000 fbe3 	bl	8001414 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c4e:	bf00      	nop
 8000c50:	3708      	adds	r7, #8
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	40001000 	.word	0x40001000

08000c5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c60:	b672      	cpsid	i
}
 8000c62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c64:	e7fe      	b.n	8000c64 <Error_Handler+0x8>
	...

08000c68 <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
 8000c6c:	4b0f      	ldr	r3, [pc, #60]	; (8000cac <MX_QUADSPI_Init+0x44>)
 8000c6e:	4a10      	ldr	r2, [pc, #64]	; (8000cb0 <MX_QUADSPI_Init+0x48>)
 8000c70:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 8000c72:	4b0e      	ldr	r3, [pc, #56]	; (8000cac <MX_QUADSPI_Init+0x44>)
 8000c74:	2202      	movs	r2, #2
 8000c76:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8000c78:	4b0c      	ldr	r3, [pc, #48]	; (8000cac <MX_QUADSPI_Init+0x44>)
 8000c7a:	2204      	movs	r2, #4
 8000c7c:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000c7e:	4b0b      	ldr	r3, [pc, #44]	; (8000cac <MX_QUADSPI_Init+0x44>)
 8000c80:	2210      	movs	r2, #16
 8000c82:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8000c84:	4b09      	ldr	r3, [pc, #36]	; (8000cac <MX_QUADSPI_Init+0x44>)
 8000c86:	2217      	movs	r2, #23
 8000c88:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000c8a:	4b08      	ldr	r3, [pc, #32]	; (8000cac <MX_QUADSPI_Init+0x44>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000c90:	4b06      	ldr	r3, [pc, #24]	; (8000cac <MX_QUADSPI_Init+0x44>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000c96:	4805      	ldr	r0, [pc, #20]	; (8000cac <MX_QUADSPI_Init+0x44>)
 8000c98:	f001 fae0 	bl	800225c <HAL_QSPI_Init>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d001      	beq.n	8000ca6 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8000ca2:	f7ff ffdb 	bl	8000c5c <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000ca6:	bf00      	nop
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	20001100 	.word	0x20001100
 8000cb0:	a0001000 	.word	0xa0001000

08000cb4 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b08a      	sub	sp, #40	; 0x28
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cbc:	f107 0314 	add.w	r3, r7, #20
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	601a      	str	r2, [r3, #0]
 8000cc4:	605a      	str	r2, [r3, #4]
 8000cc6:	609a      	str	r2, [r3, #8]
 8000cc8:	60da      	str	r2, [r3, #12]
 8000cca:	611a      	str	r2, [r3, #16]
  if(qspiHandle->Instance==QUADSPI)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a17      	ldr	r2, [pc, #92]	; (8000d30 <HAL_QSPI_MspInit+0x7c>)
 8000cd2:	4293      	cmp	r3, r2
 8000cd4:	d128      	bne.n	8000d28 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8000cd6:	4b17      	ldr	r3, [pc, #92]	; (8000d34 <HAL_QSPI_MspInit+0x80>)
 8000cd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000cda:	4a16      	ldr	r2, [pc, #88]	; (8000d34 <HAL_QSPI_MspInit+0x80>)
 8000cdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ce0:	6513      	str	r3, [r2, #80]	; 0x50
 8000ce2:	4b14      	ldr	r3, [pc, #80]	; (8000d34 <HAL_QSPI_MspInit+0x80>)
 8000ce4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000ce6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000cea:	613b      	str	r3, [r7, #16]
 8000cec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000cee:	4b11      	ldr	r3, [pc, #68]	; (8000d34 <HAL_QSPI_MspInit+0x80>)
 8000cf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cf2:	4a10      	ldr	r2, [pc, #64]	; (8000d34 <HAL_QSPI_MspInit+0x80>)
 8000cf4:	f043 0310 	orr.w	r3, r3, #16
 8000cf8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cfa:	4b0e      	ldr	r3, [pc, #56]	; (8000d34 <HAL_QSPI_MspInit+0x80>)
 8000cfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cfe:	f003 0310 	and.w	r3, r3, #16
 8000d02:	60fb      	str	r3, [r7, #12]
 8000d04:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8000d06:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8000d0a:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d0c:	2302      	movs	r3, #2
 8000d0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d10:	2300      	movs	r3, #0
 8000d12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d14:	2303      	movs	r3, #3
 8000d16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000d18:	230a      	movs	r3, #10
 8000d1a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d1c:	f107 0314 	add.w	r3, r7, #20
 8000d20:	4619      	mov	r1, r3
 8000d22:	4805      	ldr	r0, [pc, #20]	; (8000d38 <HAL_QSPI_MspInit+0x84>)
 8000d24:	f000 fda8 	bl	8001878 <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 8000d28:	bf00      	nop
 8000d2a:	3728      	adds	r7, #40	; 0x28
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	a0001000 	.word	0xa0001000
 8000d34:	40021000 	.word	0x40021000
 8000d38:	48001000 	.word	0x48001000

08000d3c <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8000d40:	4b1b      	ldr	r3, [pc, #108]	; (8000db0 <MX_SPI3_Init+0x74>)
 8000d42:	4a1c      	ldr	r2, [pc, #112]	; (8000db4 <MX_SPI3_Init+0x78>)
 8000d44:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000d46:	4b1a      	ldr	r3, [pc, #104]	; (8000db0 <MX_SPI3_Init+0x74>)
 8000d48:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d4c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000d4e:	4b18      	ldr	r3, [pc, #96]	; (8000db0 <MX_SPI3_Init+0x74>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000d54:	4b16      	ldr	r3, [pc, #88]	; (8000db0 <MX_SPI3_Init+0x74>)
 8000d56:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000d5a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d5c:	4b14      	ldr	r3, [pc, #80]	; (8000db0 <MX_SPI3_Init+0x74>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d62:	4b13      	ldr	r3, [pc, #76]	; (8000db0 <MX_SPI3_Init+0x74>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000d68:	4b11      	ldr	r3, [pc, #68]	; (8000db0 <MX_SPI3_Init+0x74>)
 8000d6a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d6e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000d70:	4b0f      	ldr	r3, [pc, #60]	; (8000db0 <MX_SPI3_Init+0x74>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d76:	4b0e      	ldr	r3, [pc, #56]	; (8000db0 <MX_SPI3_Init+0x74>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d7c:	4b0c      	ldr	r3, [pc, #48]	; (8000db0 <MX_SPI3_Init+0x74>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d82:	4b0b      	ldr	r3, [pc, #44]	; (8000db0 <MX_SPI3_Init+0x74>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000d88:	4b09      	ldr	r3, [pc, #36]	; (8000db0 <MX_SPI3_Init+0x74>)
 8000d8a:	2207      	movs	r2, #7
 8000d8c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000d8e:	4b08      	ldr	r3, [pc, #32]	; (8000db0 <MX_SPI3_Init+0x74>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000d94:	4b06      	ldr	r3, [pc, #24]	; (8000db0 <MX_SPI3_Init+0x74>)
 8000d96:	2208      	movs	r2, #8
 8000d98:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000d9a:	4805      	ldr	r0, [pc, #20]	; (8000db0 <MX_SPI3_Init+0x74>)
 8000d9c:	f002 fe04 	bl	80039a8 <HAL_SPI_Init>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000da6:	f7ff ff59 	bl	8000c5c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000daa:	bf00      	nop
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	20001144 	.word	0x20001144
 8000db4:	40003c00 	.word	0x40003c00

08000db8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b08a      	sub	sp, #40	; 0x28
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc0:	f107 0314 	add.w	r3, r7, #20
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	601a      	str	r2, [r3, #0]
 8000dc8:	605a      	str	r2, [r3, #4]
 8000dca:	609a      	str	r2, [r3, #8]
 8000dcc:	60da      	str	r2, [r3, #12]
 8000dce:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4a17      	ldr	r2, [pc, #92]	; (8000e34 <HAL_SPI_MspInit+0x7c>)
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d128      	bne.n	8000e2c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000dda:	4b17      	ldr	r3, [pc, #92]	; (8000e38 <HAL_SPI_MspInit+0x80>)
 8000ddc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dde:	4a16      	ldr	r2, [pc, #88]	; (8000e38 <HAL_SPI_MspInit+0x80>)
 8000de0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000de4:	6593      	str	r3, [r2, #88]	; 0x58
 8000de6:	4b14      	ldr	r3, [pc, #80]	; (8000e38 <HAL_SPI_MspInit+0x80>)
 8000de8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000dee:	613b      	str	r3, [r7, #16]
 8000df0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000df2:	4b11      	ldr	r3, [pc, #68]	; (8000e38 <HAL_SPI_MspInit+0x80>)
 8000df4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000df6:	4a10      	ldr	r2, [pc, #64]	; (8000e38 <HAL_SPI_MspInit+0x80>)
 8000df8:	f043 0304 	orr.w	r3, r3, #4
 8000dfc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dfe:	4b0e      	ldr	r3, [pc, #56]	; (8000e38 <HAL_SPI_MspInit+0x80>)
 8000e00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e02:	f003 0304 	and.w	r3, r3, #4
 8000e06:	60fb      	str	r3, [r7, #12]
 8000e08:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8000e0a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000e0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e10:	2302      	movs	r3, #2
 8000e12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e14:	2300      	movs	r3, #0
 8000e16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e18:	2303      	movs	r3, #3
 8000e1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000e1c:	2306      	movs	r3, #6
 8000e1e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e20:	f107 0314 	add.w	r3, r7, #20
 8000e24:	4619      	mov	r1, r3
 8000e26:	4805      	ldr	r0, [pc, #20]	; (8000e3c <HAL_SPI_MspInit+0x84>)
 8000e28:	f000 fd26 	bl	8001878 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000e2c:	bf00      	nop
 8000e2e:	3728      	adds	r7, #40	; 0x28
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	40003c00 	.word	0x40003c00
 8000e38:	40021000 	.word	0x40021000
 8000e3c:	48000800 	.word	0x48000800

08000e40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e46:	4b11      	ldr	r3, [pc, #68]	; (8000e8c <HAL_MspInit+0x4c>)
 8000e48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e4a:	4a10      	ldr	r2, [pc, #64]	; (8000e8c <HAL_MspInit+0x4c>)
 8000e4c:	f043 0301 	orr.w	r3, r3, #1
 8000e50:	6613      	str	r3, [r2, #96]	; 0x60
 8000e52:	4b0e      	ldr	r3, [pc, #56]	; (8000e8c <HAL_MspInit+0x4c>)
 8000e54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e56:	f003 0301 	and.w	r3, r3, #1
 8000e5a:	607b      	str	r3, [r7, #4]
 8000e5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e5e:	4b0b      	ldr	r3, [pc, #44]	; (8000e8c <HAL_MspInit+0x4c>)
 8000e60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e62:	4a0a      	ldr	r2, [pc, #40]	; (8000e8c <HAL_MspInit+0x4c>)
 8000e64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e68:	6593      	str	r3, [r2, #88]	; 0x58
 8000e6a:	4b08      	ldr	r3, [pc, #32]	; (8000e8c <HAL_MspInit+0x4c>)
 8000e6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e72:	603b      	str	r3, [r7, #0]
 8000e74:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000e76:	2200      	movs	r2, #0
 8000e78:	210f      	movs	r1, #15
 8000e7a:	f06f 0001 	mvn.w	r0, #1
 8000e7e:	f000 fbc5 	bl	800160c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e82:	bf00      	nop
 8000e84:	3708      	adds	r7, #8
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	40021000 	.word	0x40021000

08000e90 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b08c      	sub	sp, #48	; 0x30
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	6879      	ldr	r1, [r7, #4]
 8000ea4:	2036      	movs	r0, #54	; 0x36
 8000ea6:	f000 fbb1 	bl	800160c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000eaa:	2036      	movs	r0, #54	; 0x36
 8000eac:	f000 fbca 	bl	8001644 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000eb0:	4b1e      	ldr	r3, [pc, #120]	; (8000f2c <HAL_InitTick+0x9c>)
 8000eb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eb4:	4a1d      	ldr	r2, [pc, #116]	; (8000f2c <HAL_InitTick+0x9c>)
 8000eb6:	f043 0310 	orr.w	r3, r3, #16
 8000eba:	6593      	str	r3, [r2, #88]	; 0x58
 8000ebc:	4b1b      	ldr	r3, [pc, #108]	; (8000f2c <HAL_InitTick+0x9c>)
 8000ebe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ec0:	f003 0310 	and.w	r3, r3, #16
 8000ec4:	60fb      	str	r3, [r7, #12]
 8000ec6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ec8:	f107 0210 	add.w	r2, r7, #16
 8000ecc:	f107 0314 	add.w	r3, r7, #20
 8000ed0:	4611      	mov	r1, r2
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f002 f80a 	bl	8002eec <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000ed8:	f001 ffdc 	bl	8002e94 <HAL_RCC_GetPCLK1Freq>
 8000edc:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ee0:	4a13      	ldr	r2, [pc, #76]	; (8000f30 <HAL_InitTick+0xa0>)
 8000ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8000ee6:	0c9b      	lsrs	r3, r3, #18
 8000ee8:	3b01      	subs	r3, #1
 8000eea:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000eec:	4b11      	ldr	r3, [pc, #68]	; (8000f34 <HAL_InitTick+0xa4>)
 8000eee:	4a12      	ldr	r2, [pc, #72]	; (8000f38 <HAL_InitTick+0xa8>)
 8000ef0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000ef2:	4b10      	ldr	r3, [pc, #64]	; (8000f34 <HAL_InitTick+0xa4>)
 8000ef4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ef8:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000efa:	4a0e      	ldr	r2, [pc, #56]	; (8000f34 <HAL_InitTick+0xa4>)
 8000efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000efe:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000f00:	4b0c      	ldr	r3, [pc, #48]	; (8000f34 <HAL_InitTick+0xa4>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f06:	4b0b      	ldr	r3, [pc, #44]	; (8000f34 <HAL_InitTick+0xa4>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000f0c:	4809      	ldr	r0, [pc, #36]	; (8000f34 <HAL_InitTick+0xa4>)
 8000f0e:	f002 fdee 	bl	8003aee <HAL_TIM_Base_Init>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d104      	bne.n	8000f22 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000f18:	4806      	ldr	r0, [pc, #24]	; (8000f34 <HAL_InitTick+0xa4>)
 8000f1a:	f002 fe49 	bl	8003bb0 <HAL_TIM_Base_Start_IT>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	e000      	b.n	8000f24 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000f22:	2301      	movs	r3, #1
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	3730      	adds	r7, #48	; 0x30
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	40021000 	.word	0x40021000
 8000f30:	431bde83 	.word	0x431bde83
 8000f34:	200011a8 	.word	0x200011a8
 8000f38:	40001000 	.word	0x40001000

08000f3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f40:	e7fe      	b.n	8000f40 <NMI_Handler+0x4>

08000f42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f42:	b480      	push	{r7}
 8000f44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f46:	e7fe      	b.n	8000f46 <HardFault_Handler+0x4>

08000f48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f4c:	e7fe      	b.n	8000f4c <MemManage_Handler+0x4>

08000f4e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f4e:	b480      	push	{r7}
 8000f50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f52:	e7fe      	b.n	8000f52 <BusFault_Handler+0x4>

08000f54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f58:	e7fe      	b.n	8000f58 <UsageFault_Handler+0x4>

08000f5a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f5a:	b480      	push	{r7}
 8000f5c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f5e:	bf00      	nop
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr

08000f68 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8000f6c:	2020      	movs	r0, #32
 8000f6e:	f000 fe5f 	bl	8001c30 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8000f72:	2040      	movs	r0, #64	; 0x40
 8000f74:	f000 fe5c 	bl	8001c30 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8000f78:	2080      	movs	r0, #128	; 0x80
 8000f7a:	f000 fe59 	bl	8001c30 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8000f7e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000f82:	f000 fe55 	bl	8001c30 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000f86:	bf00      	nop
 8000f88:	bd80      	pop	{r7, pc}

08000f8a <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000f8a:	b580      	push	{r7, lr}
 8000f8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8000f8e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000f92:	f000 fe4d 	bl	8001c30 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8000f96:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000f9a:	f000 fe49 	bl	8001c30 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000f9e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000fa2:	f000 fe45 	bl	8001c30 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8000fa6:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000faa:	f000 fe41 	bl	8001c30 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8000fae:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000fb2:	f000 fe3d 	bl	8001c30 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000fb6:	bf00      	nop
 8000fb8:	bd80      	pop	{r7, pc}
	...

08000fbc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000fc0:	4802      	ldr	r0, [pc, #8]	; (8000fcc <TIM6_DAC_IRQHandler+0x10>)
 8000fc2:	f002 fe65 	bl	8003c90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000fc6:	bf00      	nop
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	200011a8 	.word	0x200011a8

08000fd0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000fd4:	4b06      	ldr	r3, [pc, #24]	; (8000ff0 <SystemInit+0x20>)
 8000fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fda:	4a05      	ldr	r2, [pc, #20]	; (8000ff0 <SystemInit+0x20>)
 8000fdc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fe0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000fe4:	bf00      	nop
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	e000ed00 	.word	0xe000ed00

08000ff4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ff8:	4b14      	ldr	r3, [pc, #80]	; (800104c <MX_USART1_UART_Init+0x58>)
 8000ffa:	4a15      	ldr	r2, [pc, #84]	; (8001050 <MX_USART1_UART_Init+0x5c>)
 8000ffc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000ffe:	4b13      	ldr	r3, [pc, #76]	; (800104c <MX_USART1_UART_Init+0x58>)
 8001000:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001004:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001006:	4b11      	ldr	r3, [pc, #68]	; (800104c <MX_USART1_UART_Init+0x58>)
 8001008:	2200      	movs	r2, #0
 800100a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800100c:	4b0f      	ldr	r3, [pc, #60]	; (800104c <MX_USART1_UART_Init+0x58>)
 800100e:	2200      	movs	r2, #0
 8001010:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001012:	4b0e      	ldr	r3, [pc, #56]	; (800104c <MX_USART1_UART_Init+0x58>)
 8001014:	2200      	movs	r2, #0
 8001016:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001018:	4b0c      	ldr	r3, [pc, #48]	; (800104c <MX_USART1_UART_Init+0x58>)
 800101a:	220c      	movs	r2, #12
 800101c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800101e:	4b0b      	ldr	r3, [pc, #44]	; (800104c <MX_USART1_UART_Init+0x58>)
 8001020:	2200      	movs	r2, #0
 8001022:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001024:	4b09      	ldr	r3, [pc, #36]	; (800104c <MX_USART1_UART_Init+0x58>)
 8001026:	2200      	movs	r2, #0
 8001028:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800102a:	4b08      	ldr	r3, [pc, #32]	; (800104c <MX_USART1_UART_Init+0x58>)
 800102c:	2200      	movs	r2, #0
 800102e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001030:	4b06      	ldr	r3, [pc, #24]	; (800104c <MX_USART1_UART_Init+0x58>)
 8001032:	2200      	movs	r2, #0
 8001034:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001036:	4805      	ldr	r0, [pc, #20]	; (800104c <MX_USART1_UART_Init+0x58>)
 8001038:	f003 f82a 	bl	8004090 <HAL_UART_Init>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001042:	f7ff fe0b 	bl	8000c5c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001046:	bf00      	nop
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	20001278 	.word	0x20001278
 8001050:	40013800 	.word	0x40013800

08001054 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001058:	4b14      	ldr	r3, [pc, #80]	; (80010ac <MX_USART3_UART_Init+0x58>)
 800105a:	4a15      	ldr	r2, [pc, #84]	; (80010b0 <MX_USART3_UART_Init+0x5c>)
 800105c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800105e:	4b13      	ldr	r3, [pc, #76]	; (80010ac <MX_USART3_UART_Init+0x58>)
 8001060:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001064:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001066:	4b11      	ldr	r3, [pc, #68]	; (80010ac <MX_USART3_UART_Init+0x58>)
 8001068:	2200      	movs	r2, #0
 800106a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800106c:	4b0f      	ldr	r3, [pc, #60]	; (80010ac <MX_USART3_UART_Init+0x58>)
 800106e:	2200      	movs	r2, #0
 8001070:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001072:	4b0e      	ldr	r3, [pc, #56]	; (80010ac <MX_USART3_UART_Init+0x58>)
 8001074:	2200      	movs	r2, #0
 8001076:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001078:	4b0c      	ldr	r3, [pc, #48]	; (80010ac <MX_USART3_UART_Init+0x58>)
 800107a:	220c      	movs	r2, #12
 800107c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800107e:	4b0b      	ldr	r3, [pc, #44]	; (80010ac <MX_USART3_UART_Init+0x58>)
 8001080:	2200      	movs	r2, #0
 8001082:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001084:	4b09      	ldr	r3, [pc, #36]	; (80010ac <MX_USART3_UART_Init+0x58>)
 8001086:	2200      	movs	r2, #0
 8001088:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800108a:	4b08      	ldr	r3, [pc, #32]	; (80010ac <MX_USART3_UART_Init+0x58>)
 800108c:	2200      	movs	r2, #0
 800108e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001090:	4b06      	ldr	r3, [pc, #24]	; (80010ac <MX_USART3_UART_Init+0x58>)
 8001092:	2200      	movs	r2, #0
 8001094:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001096:	4805      	ldr	r0, [pc, #20]	; (80010ac <MX_USART3_UART_Init+0x58>)
 8001098:	f002 fffa 	bl	8004090 <HAL_UART_Init>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80010a2:	f7ff fddb 	bl	8000c5c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80010a6:	bf00      	nop
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	200011f4 	.word	0x200011f4
 80010b0:	40004800 	.word	0x40004800

080010b4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b0ae      	sub	sp, #184	; 0xb8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010bc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80010c0:	2200      	movs	r2, #0
 80010c2:	601a      	str	r2, [r3, #0]
 80010c4:	605a      	str	r2, [r3, #4]
 80010c6:	609a      	str	r2, [r3, #8]
 80010c8:	60da      	str	r2, [r3, #12]
 80010ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010cc:	f107 031c 	add.w	r3, r7, #28
 80010d0:	2288      	movs	r2, #136	; 0x88
 80010d2:	2100      	movs	r1, #0
 80010d4:	4618      	mov	r0, r3
 80010d6:	f005 f867 	bl	80061a8 <memset>
  if(uartHandle->Instance==USART1)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4a42      	ldr	r2, [pc, #264]	; (80011e8 <HAL_UART_MspInit+0x134>)
 80010e0:	4293      	cmp	r3, r2
 80010e2:	d13b      	bne.n	800115c <HAL_UART_MspInit+0xa8>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80010e4:	2301      	movs	r3, #1
 80010e6:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80010e8:	2300      	movs	r3, #0
 80010ea:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010ec:	f107 031c 	add.w	r3, r7, #28
 80010f0:	4618      	mov	r0, r3
 80010f2:	f001 ff8d 	bl	8003010 <HAL_RCCEx_PeriphCLKConfig>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80010fc:	f7ff fdae 	bl	8000c5c <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001100:	4b3a      	ldr	r3, [pc, #232]	; (80011ec <HAL_UART_MspInit+0x138>)
 8001102:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001104:	4a39      	ldr	r2, [pc, #228]	; (80011ec <HAL_UART_MspInit+0x138>)
 8001106:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800110a:	6613      	str	r3, [r2, #96]	; 0x60
 800110c:	4b37      	ldr	r3, [pc, #220]	; (80011ec <HAL_UART_MspInit+0x138>)
 800110e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001110:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001114:	61bb      	str	r3, [r7, #24]
 8001116:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001118:	4b34      	ldr	r3, [pc, #208]	; (80011ec <HAL_UART_MspInit+0x138>)
 800111a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800111c:	4a33      	ldr	r2, [pc, #204]	; (80011ec <HAL_UART_MspInit+0x138>)
 800111e:	f043 0302 	orr.w	r3, r3, #2
 8001122:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001124:	4b31      	ldr	r3, [pc, #196]	; (80011ec <HAL_UART_MspInit+0x138>)
 8001126:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001128:	f003 0302 	and.w	r3, r3, #2
 800112c:	617b      	str	r3, [r7, #20]
 800112e:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8001130:	23c0      	movs	r3, #192	; 0xc0
 8001132:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001136:	2302      	movs	r3, #2
 8001138:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113c:	2300      	movs	r3, #0
 800113e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001142:	2303      	movs	r3, #3
 8001144:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001148:	2307      	movs	r3, #7
 800114a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800114e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001152:	4619      	mov	r1, r3
 8001154:	4826      	ldr	r0, [pc, #152]	; (80011f0 <HAL_UART_MspInit+0x13c>)
 8001156:	f000 fb8f 	bl	8001878 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800115a:	e040      	b.n	80011de <HAL_UART_MspInit+0x12a>
  else if(uartHandle->Instance==USART3)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a24      	ldr	r2, [pc, #144]	; (80011f4 <HAL_UART_MspInit+0x140>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d13b      	bne.n	80011de <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001166:	2304      	movs	r3, #4
 8001168:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800116a:	2300      	movs	r3, #0
 800116c:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800116e:	f107 031c 	add.w	r3, r7, #28
 8001172:	4618      	mov	r0, r3
 8001174:	f001 ff4c 	bl	8003010 <HAL_RCCEx_PeriphCLKConfig>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <HAL_UART_MspInit+0xce>
      Error_Handler();
 800117e:	f7ff fd6d 	bl	8000c5c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001182:	4b1a      	ldr	r3, [pc, #104]	; (80011ec <HAL_UART_MspInit+0x138>)
 8001184:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001186:	4a19      	ldr	r2, [pc, #100]	; (80011ec <HAL_UART_MspInit+0x138>)
 8001188:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800118c:	6593      	str	r3, [r2, #88]	; 0x58
 800118e:	4b17      	ldr	r3, [pc, #92]	; (80011ec <HAL_UART_MspInit+0x138>)
 8001190:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001192:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001196:	613b      	str	r3, [r7, #16]
 8001198:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800119a:	4b14      	ldr	r3, [pc, #80]	; (80011ec <HAL_UART_MspInit+0x138>)
 800119c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800119e:	4a13      	ldr	r2, [pc, #76]	; (80011ec <HAL_UART_MspInit+0x138>)
 80011a0:	f043 0308 	orr.w	r3, r3, #8
 80011a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011a6:	4b11      	ldr	r3, [pc, #68]	; (80011ec <HAL_UART_MspInit+0x138>)
 80011a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011aa:	f003 0308 	and.w	r3, r3, #8
 80011ae:	60fb      	str	r3, [r7, #12]
 80011b0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 80011b2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80011b6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ba:	2302      	movs	r3, #2
 80011bc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c0:	2300      	movs	r3, #0
 80011c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011c6:	2303      	movs	r3, #3
 80011c8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80011cc:	2307      	movs	r3, #7
 80011ce:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011d2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80011d6:	4619      	mov	r1, r3
 80011d8:	4807      	ldr	r0, [pc, #28]	; (80011f8 <HAL_UART_MspInit+0x144>)
 80011da:	f000 fb4d 	bl	8001878 <HAL_GPIO_Init>
}
 80011de:	bf00      	nop
 80011e0:	37b8      	adds	r7, #184	; 0xb8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	40013800 	.word	0x40013800
 80011ec:	40021000 	.word	0x40021000
 80011f0:	48000400 	.word	0x48000400
 80011f4:	40004800 	.word	0x40004800
 80011f8:	48000c00 	.word	0x48000c00

080011fc <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001200:	4b14      	ldr	r3, [pc, #80]	; (8001254 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001202:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001206:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001208:	4b12      	ldr	r3, [pc, #72]	; (8001254 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800120a:	2206      	movs	r2, #6
 800120c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800120e:	4b11      	ldr	r3, [pc, #68]	; (8001254 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001210:	2202      	movs	r2, #2
 8001212:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001214:	4b0f      	ldr	r3, [pc, #60]	; (8001254 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001216:	2202      	movs	r2, #2
 8001218:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800121a:	4b0e      	ldr	r3, [pc, #56]	; (8001254 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800121c:	2200      	movs	r2, #0
 800121e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001220:	4b0c      	ldr	r3, [pc, #48]	; (8001254 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001222:	2200      	movs	r2, #0
 8001224:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001226:	4b0b      	ldr	r3, [pc, #44]	; (8001254 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001228:	2200      	movs	r2, #0
 800122a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800122c:	4b09      	ldr	r3, [pc, #36]	; (8001254 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800122e:	2200      	movs	r2, #0
 8001230:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001232:	4b08      	ldr	r3, [pc, #32]	; (8001254 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001234:	2200      	movs	r2, #0
 8001236:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8001238:	4b06      	ldr	r3, [pc, #24]	; (8001254 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800123a:	2200      	movs	r2, #0
 800123c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800123e:	4805      	ldr	r0, [pc, #20]	; (8001254 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001240:	f000 fe3f 	bl	8001ec2 <HAL_PCD_Init>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800124a:	f7ff fd07 	bl	8000c5c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800124e:	bf00      	nop
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	200012fc 	.word	0x200012fc

08001258 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b0ac      	sub	sp, #176	; 0xb0
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001260:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001264:	2200      	movs	r2, #0
 8001266:	601a      	str	r2, [r3, #0]
 8001268:	605a      	str	r2, [r3, #4]
 800126a:	609a      	str	r2, [r3, #8]
 800126c:	60da      	str	r2, [r3, #12]
 800126e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001270:	f107 0314 	add.w	r3, r7, #20
 8001274:	2288      	movs	r2, #136	; 0x88
 8001276:	2100      	movs	r1, #0
 8001278:	4618      	mov	r0, r3
 800127a:	f004 ff95 	bl	80061a8 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001286:	d17c      	bne.n	8001382 <HAL_PCD_MspInit+0x12a>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001288:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800128c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800128e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001292:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001296:	2301      	movs	r3, #1
 8001298:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800129a:	2301      	movs	r3, #1
 800129c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800129e:	2318      	movs	r3, #24
 80012a0:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80012a2:	2307      	movs	r3, #7
 80012a4:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80012a6:	2302      	movs	r3, #2
 80012a8:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80012aa:	2302      	movs	r3, #2
 80012ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 80012ae:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80012b2:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012b4:	f107 0314 	add.w	r3, r7, #20
 80012b8:	4618      	mov	r0, r3
 80012ba:	f001 fea9 	bl	8003010 <HAL_RCCEx_PeriphCLKConfig>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 80012c4:	f7ff fcca 	bl	8000c5c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012c8:	4b30      	ldr	r3, [pc, #192]	; (800138c <HAL_PCD_MspInit+0x134>)
 80012ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012cc:	4a2f      	ldr	r2, [pc, #188]	; (800138c <HAL_PCD_MspInit+0x134>)
 80012ce:	f043 0301 	orr.w	r3, r3, #1
 80012d2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012d4:	4b2d      	ldr	r3, [pc, #180]	; (800138c <HAL_PCD_MspInit+0x134>)
 80012d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012d8:	f003 0301 	and.w	r3, r3, #1
 80012dc:	613b      	str	r3, [r7, #16]
 80012de:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 80012e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012e8:	2300      	movs	r3, #0
 80012ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ee:	2300      	movs	r3, #0
 80012f0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80012f4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80012f8:	4619      	mov	r1, r3
 80012fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012fe:	f000 fabb 	bl	8001878 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8001302:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001306:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800130a:	2302      	movs	r3, #2
 800130c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001310:	2300      	movs	r3, #0
 8001312:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001316:	2303      	movs	r3, #3
 8001318:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800131c:	230a      	movs	r3, #10
 800131e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001322:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001326:	4619      	mov	r1, r3
 8001328:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800132c:	f000 faa4 	bl	8001878 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001330:	4b16      	ldr	r3, [pc, #88]	; (800138c <HAL_PCD_MspInit+0x134>)
 8001332:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001334:	4a15      	ldr	r2, [pc, #84]	; (800138c <HAL_PCD_MspInit+0x134>)
 8001336:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800133a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800133c:	4b13      	ldr	r3, [pc, #76]	; (800138c <HAL_PCD_MspInit+0x134>)
 800133e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001340:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001344:	60fb      	str	r3, [r7, #12]
 8001346:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001348:	4b10      	ldr	r3, [pc, #64]	; (800138c <HAL_PCD_MspInit+0x134>)
 800134a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800134c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001350:	2b00      	cmp	r3, #0
 8001352:	d114      	bne.n	800137e <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001354:	4b0d      	ldr	r3, [pc, #52]	; (800138c <HAL_PCD_MspInit+0x134>)
 8001356:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001358:	4a0c      	ldr	r2, [pc, #48]	; (800138c <HAL_PCD_MspInit+0x134>)
 800135a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800135e:	6593      	str	r3, [r2, #88]	; 0x58
 8001360:	4b0a      	ldr	r3, [pc, #40]	; (800138c <HAL_PCD_MspInit+0x134>)
 8001362:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001364:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001368:	60bb      	str	r3, [r7, #8]
 800136a:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 800136c:	f000 ff66 	bl	800223c <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001370:	4b06      	ldr	r3, [pc, #24]	; (800138c <HAL_PCD_MspInit+0x134>)
 8001372:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001374:	4a05      	ldr	r2, [pc, #20]	; (800138c <HAL_PCD_MspInit+0x134>)
 8001376:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800137a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800137c:	e001      	b.n	8001382 <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 800137e:	f000 ff5d 	bl	800223c <HAL_PWREx_EnableVddUSB>
}
 8001382:	bf00      	nop
 8001384:	37b0      	adds	r7, #176	; 0xb0
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	40021000 	.word	0x40021000

08001390 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001390:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013c8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001394:	f7ff fe1c 	bl	8000fd0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001398:	480c      	ldr	r0, [pc, #48]	; (80013cc <LoopForever+0x6>)
  ldr r1, =_edata
 800139a:	490d      	ldr	r1, [pc, #52]	; (80013d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800139c:	4a0d      	ldr	r2, [pc, #52]	; (80013d4 <LoopForever+0xe>)
  movs r3, #0
 800139e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013a0:	e002      	b.n	80013a8 <LoopCopyDataInit>

080013a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013a6:	3304      	adds	r3, #4

080013a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013ac:	d3f9      	bcc.n	80013a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013ae:	4a0a      	ldr	r2, [pc, #40]	; (80013d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80013b0:	4c0a      	ldr	r4, [pc, #40]	; (80013dc <LoopForever+0x16>)
  movs r3, #0
 80013b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013b4:	e001      	b.n	80013ba <LoopFillZerobss>

080013b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013b8:	3204      	adds	r2, #4

080013ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013bc:	d3fb      	bcc.n	80013b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013be:	f004 fecd 	bl	800615c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80013c2:	f7ff fbbb 	bl	8000b3c <main>

080013c6 <LoopForever>:

LoopForever:
    b LoopForever
 80013c6:	e7fe      	b.n	80013c6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80013c8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80013cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013d0:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80013d4:	08006424 	.word	0x08006424
  ldr r2, =_sbss
 80013d8:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80013dc:	20001714 	.word	0x20001714

080013e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80013e0:	e7fe      	b.n	80013e0 <ADC1_2_IRQHandler>

080013e2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013e2:	b580      	push	{r7, lr}
 80013e4:	b082      	sub	sp, #8
 80013e6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80013e8:	2300      	movs	r3, #0
 80013ea:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013ec:	2003      	movs	r0, #3
 80013ee:	f000 f902 	bl	80015f6 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013f2:	200f      	movs	r0, #15
 80013f4:	f7ff fd4c 	bl	8000e90 <HAL_InitTick>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d002      	beq.n	8001404 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80013fe:	2301      	movs	r3, #1
 8001400:	71fb      	strb	r3, [r7, #7]
 8001402:	e001      	b.n	8001408 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001404:	f7ff fd1c 	bl	8000e40 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001408:	79fb      	ldrb	r3, [r7, #7]
}
 800140a:	4618      	mov	r0, r3
 800140c:	3708      	adds	r7, #8
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
	...

08001414 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001418:	4b06      	ldr	r3, [pc, #24]	; (8001434 <HAL_IncTick+0x20>)
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	461a      	mov	r2, r3
 800141e:	4b06      	ldr	r3, [pc, #24]	; (8001438 <HAL_IncTick+0x24>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4413      	add	r3, r2
 8001424:	4a04      	ldr	r2, [pc, #16]	; (8001438 <HAL_IncTick+0x24>)
 8001426:	6013      	str	r3, [r2, #0]
}
 8001428:	bf00      	nop
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr
 8001432:	bf00      	nop
 8001434:	20000008 	.word	0x20000008
 8001438:	20001704 	.word	0x20001704

0800143c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  return uwTick;
 8001440:	4b03      	ldr	r3, [pc, #12]	; (8001450 <HAL_GetTick+0x14>)
 8001442:	681b      	ldr	r3, [r3, #0]
}
 8001444:	4618      	mov	r0, r3
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr
 800144e:	bf00      	nop
 8001450:	20001704 	.word	0x20001704

08001454 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b084      	sub	sp, #16
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800145c:	f7ff ffee 	bl	800143c <HAL_GetTick>
 8001460:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	f1b3 3fff 	cmp.w	r3, #4294967295
 800146c:	d005      	beq.n	800147a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800146e:	4b0a      	ldr	r3, [pc, #40]	; (8001498 <HAL_Delay+0x44>)
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	461a      	mov	r2, r3
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	4413      	add	r3, r2
 8001478:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800147a:	bf00      	nop
 800147c:	f7ff ffde 	bl	800143c <HAL_GetTick>
 8001480:	4602      	mov	r2, r0
 8001482:	68bb      	ldr	r3, [r7, #8]
 8001484:	1ad3      	subs	r3, r2, r3
 8001486:	68fa      	ldr	r2, [r7, #12]
 8001488:	429a      	cmp	r2, r3
 800148a:	d8f7      	bhi.n	800147c <HAL_Delay+0x28>
  {
  }
}
 800148c:	bf00      	nop
 800148e:	bf00      	nop
 8001490:	3710      	adds	r7, #16
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	20000008 	.word	0x20000008

0800149c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800149c:	b480      	push	{r7}
 800149e:	b085      	sub	sp, #20
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	f003 0307 	and.w	r3, r3, #7
 80014aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014ac:	4b0c      	ldr	r3, [pc, #48]	; (80014e0 <__NVIC_SetPriorityGrouping+0x44>)
 80014ae:	68db      	ldr	r3, [r3, #12]
 80014b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014b2:	68ba      	ldr	r2, [r7, #8]
 80014b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014b8:	4013      	ands	r3, r2
 80014ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014c0:	68bb      	ldr	r3, [r7, #8]
 80014c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014ce:	4a04      	ldr	r2, [pc, #16]	; (80014e0 <__NVIC_SetPriorityGrouping+0x44>)
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	60d3      	str	r3, [r2, #12]
}
 80014d4:	bf00      	nop
 80014d6:	3714      	adds	r7, #20
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr
 80014e0:	e000ed00 	.word	0xe000ed00

080014e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014e8:	4b04      	ldr	r3, [pc, #16]	; (80014fc <__NVIC_GetPriorityGrouping+0x18>)
 80014ea:	68db      	ldr	r3, [r3, #12]
 80014ec:	0a1b      	lsrs	r3, r3, #8
 80014ee:	f003 0307 	and.w	r3, r3, #7
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr
 80014fc:	e000ed00 	.word	0xe000ed00

08001500 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001500:	b480      	push	{r7}
 8001502:	b083      	sub	sp, #12
 8001504:	af00      	add	r7, sp, #0
 8001506:	4603      	mov	r3, r0
 8001508:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800150a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800150e:	2b00      	cmp	r3, #0
 8001510:	db0b      	blt.n	800152a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001512:	79fb      	ldrb	r3, [r7, #7]
 8001514:	f003 021f 	and.w	r2, r3, #31
 8001518:	4907      	ldr	r1, [pc, #28]	; (8001538 <__NVIC_EnableIRQ+0x38>)
 800151a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800151e:	095b      	lsrs	r3, r3, #5
 8001520:	2001      	movs	r0, #1
 8001522:	fa00 f202 	lsl.w	r2, r0, r2
 8001526:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800152a:	bf00      	nop
 800152c:	370c      	adds	r7, #12
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop
 8001538:	e000e100 	.word	0xe000e100

0800153c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800153c:	b480      	push	{r7}
 800153e:	b083      	sub	sp, #12
 8001540:	af00      	add	r7, sp, #0
 8001542:	4603      	mov	r3, r0
 8001544:	6039      	str	r1, [r7, #0]
 8001546:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001548:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800154c:	2b00      	cmp	r3, #0
 800154e:	db0a      	blt.n	8001566 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	b2da      	uxtb	r2, r3
 8001554:	490c      	ldr	r1, [pc, #48]	; (8001588 <__NVIC_SetPriority+0x4c>)
 8001556:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800155a:	0112      	lsls	r2, r2, #4
 800155c:	b2d2      	uxtb	r2, r2
 800155e:	440b      	add	r3, r1
 8001560:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001564:	e00a      	b.n	800157c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	b2da      	uxtb	r2, r3
 800156a:	4908      	ldr	r1, [pc, #32]	; (800158c <__NVIC_SetPriority+0x50>)
 800156c:	79fb      	ldrb	r3, [r7, #7]
 800156e:	f003 030f 	and.w	r3, r3, #15
 8001572:	3b04      	subs	r3, #4
 8001574:	0112      	lsls	r2, r2, #4
 8001576:	b2d2      	uxtb	r2, r2
 8001578:	440b      	add	r3, r1
 800157a:	761a      	strb	r2, [r3, #24]
}
 800157c:	bf00      	nop
 800157e:	370c      	adds	r7, #12
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr
 8001588:	e000e100 	.word	0xe000e100
 800158c:	e000ed00 	.word	0xe000ed00

08001590 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001590:	b480      	push	{r7}
 8001592:	b089      	sub	sp, #36	; 0x24
 8001594:	af00      	add	r7, sp, #0
 8001596:	60f8      	str	r0, [r7, #12]
 8001598:	60b9      	str	r1, [r7, #8]
 800159a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	f003 0307 	and.w	r3, r3, #7
 80015a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015a4:	69fb      	ldr	r3, [r7, #28]
 80015a6:	f1c3 0307 	rsb	r3, r3, #7
 80015aa:	2b04      	cmp	r3, #4
 80015ac:	bf28      	it	cs
 80015ae:	2304      	movcs	r3, #4
 80015b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015b2:	69fb      	ldr	r3, [r7, #28]
 80015b4:	3304      	adds	r3, #4
 80015b6:	2b06      	cmp	r3, #6
 80015b8:	d902      	bls.n	80015c0 <NVIC_EncodePriority+0x30>
 80015ba:	69fb      	ldr	r3, [r7, #28]
 80015bc:	3b03      	subs	r3, #3
 80015be:	e000      	b.n	80015c2 <NVIC_EncodePriority+0x32>
 80015c0:	2300      	movs	r3, #0
 80015c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015c4:	f04f 32ff 	mov.w	r2, #4294967295
 80015c8:	69bb      	ldr	r3, [r7, #24]
 80015ca:	fa02 f303 	lsl.w	r3, r2, r3
 80015ce:	43da      	mvns	r2, r3
 80015d0:	68bb      	ldr	r3, [r7, #8]
 80015d2:	401a      	ands	r2, r3
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015d8:	f04f 31ff 	mov.w	r1, #4294967295
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	fa01 f303 	lsl.w	r3, r1, r3
 80015e2:	43d9      	mvns	r1, r3
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015e8:	4313      	orrs	r3, r2
         );
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	3724      	adds	r7, #36	; 0x24
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr

080015f6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015f6:	b580      	push	{r7, lr}
 80015f8:	b082      	sub	sp, #8
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015fe:	6878      	ldr	r0, [r7, #4]
 8001600:	f7ff ff4c 	bl	800149c <__NVIC_SetPriorityGrouping>
}
 8001604:	bf00      	nop
 8001606:	3708      	adds	r7, #8
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}

0800160c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b086      	sub	sp, #24
 8001610:	af00      	add	r7, sp, #0
 8001612:	4603      	mov	r3, r0
 8001614:	60b9      	str	r1, [r7, #8]
 8001616:	607a      	str	r2, [r7, #4]
 8001618:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800161a:	2300      	movs	r3, #0
 800161c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800161e:	f7ff ff61 	bl	80014e4 <__NVIC_GetPriorityGrouping>
 8001622:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001624:	687a      	ldr	r2, [r7, #4]
 8001626:	68b9      	ldr	r1, [r7, #8]
 8001628:	6978      	ldr	r0, [r7, #20]
 800162a:	f7ff ffb1 	bl	8001590 <NVIC_EncodePriority>
 800162e:	4602      	mov	r2, r0
 8001630:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001634:	4611      	mov	r1, r2
 8001636:	4618      	mov	r0, r3
 8001638:	f7ff ff80 	bl	800153c <__NVIC_SetPriority>
}
 800163c:	bf00      	nop
 800163e:	3718      	adds	r7, #24
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}

08001644 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0
 800164a:	4603      	mov	r3, r0
 800164c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800164e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001652:	4618      	mov	r0, r3
 8001654:	f7ff ff54 	bl	8001500 <__NVIC_EnableIRQ>
}
 8001658:	bf00      	nop
 800165a:	3708      	adds	r7, #8
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}

08001660 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d101      	bne.n	8001672 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 800166e:	2301      	movs	r3, #1
 8001670:	e0ac      	b.n	80017cc <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4618      	mov	r0, r3
 8001678:	f000 f8b2 	bl	80017e0 <DFSDM_GetChannelFromInstance>
 800167c:	4603      	mov	r3, r0
 800167e:	4a55      	ldr	r2, [pc, #340]	; (80017d4 <HAL_DFSDM_ChannelInit+0x174>)
 8001680:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d001      	beq.n	800168c <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8001688:	2301      	movs	r3, #1
 800168a:	e09f      	b.n	80017cc <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 800168c:	6878      	ldr	r0, [r7, #4]
 800168e:	f7fe ff53 	bl	8000538 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8001692:	4b51      	ldr	r3, [pc, #324]	; (80017d8 <HAL_DFSDM_ChannelInit+0x178>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	3301      	adds	r3, #1
 8001698:	4a4f      	ldr	r2, [pc, #316]	; (80017d8 <HAL_DFSDM_ChannelInit+0x178>)
 800169a:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 800169c:	4b4e      	ldr	r3, [pc, #312]	; (80017d8 <HAL_DFSDM_ChannelInit+0x178>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	2b01      	cmp	r3, #1
 80016a2:	d125      	bne.n	80016f0 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 80016a4:	4b4d      	ldr	r3, [pc, #308]	; (80017dc <HAL_DFSDM_ChannelInit+0x17c>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a4c      	ldr	r2, [pc, #304]	; (80017dc <HAL_DFSDM_ChannelInit+0x17c>)
 80016aa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80016ae:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 80016b0:	4b4a      	ldr	r3, [pc, #296]	; (80017dc <HAL_DFSDM_ChannelInit+0x17c>)
 80016b2:	681a      	ldr	r2, [r3, #0]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	689b      	ldr	r3, [r3, #8]
 80016b8:	4948      	ldr	r1, [pc, #288]	; (80017dc <HAL_DFSDM_ChannelInit+0x17c>)
 80016ba:	4313      	orrs	r3, r2
 80016bc:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 80016be:	4b47      	ldr	r3, [pc, #284]	; (80017dc <HAL_DFSDM_ChannelInit+0x17c>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a46      	ldr	r2, [pc, #280]	; (80017dc <HAL_DFSDM_ChannelInit+0x17c>)
 80016c4:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 80016c8:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	791b      	ldrb	r3, [r3, #4]
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	d108      	bne.n	80016e4 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 80016d2:	4b42      	ldr	r3, [pc, #264]	; (80017dc <HAL_DFSDM_ChannelInit+0x17c>)
 80016d4:	681a      	ldr	r2, [r3, #0]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	68db      	ldr	r3, [r3, #12]
 80016da:	3b01      	subs	r3, #1
 80016dc:	041b      	lsls	r3, r3, #16
 80016de:	493f      	ldr	r1, [pc, #252]	; (80017dc <HAL_DFSDM_ChannelInit+0x17c>)
 80016e0:	4313      	orrs	r3, r2
 80016e2:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 80016e4:	4b3d      	ldr	r3, [pc, #244]	; (80017dc <HAL_DFSDM_ChannelInit+0x17c>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a3c      	ldr	r2, [pc, #240]	; (80017dc <HAL_DFSDM_ChannelInit+0x17c>)
 80016ea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80016ee:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	681a      	ldr	r2, [r3, #0]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 80016fe:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	6819      	ldr	r1, [r3, #0]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800170e:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8001714:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	430a      	orrs	r2, r1
 800171c:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	681a      	ldr	r2, [r3, #0]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f022 020f 	bic.w	r2, r2, #15
 800172c:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	6819      	ldr	r1, [r3, #0]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 800173c:	431a      	orrs	r2, r3
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	430a      	orrs	r2, r1
 8001744:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	689a      	ldr	r2, [r3, #8]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8001754:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	6899      	ldr	r1, [r3, #8]
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001764:	3b01      	subs	r3, #1
 8001766:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001768:	431a      	orrs	r2, r3
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	430a      	orrs	r2, r1
 8001770:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	685a      	ldr	r2, [r3, #4]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f002 0207 	and.w	r2, r2, #7
 8001780:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	6859      	ldr	r1, [r3, #4]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800178c:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001792:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001794:	431a      	orrs	r2, r3
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	430a      	orrs	r2, r1
 800179c:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	681a      	ldr	r2, [r3, #0]
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80017ac:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2201      	movs	r2, #1
 80017b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4618      	mov	r0, r3
 80017bc:	f000 f810 	bl	80017e0 <DFSDM_GetChannelFromInstance>
 80017c0:	4602      	mov	r2, r0
 80017c2:	4904      	ldr	r1, [pc, #16]	; (80017d4 <HAL_DFSDM_ChannelInit+0x174>)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 80017ca:	2300      	movs	r3, #0
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	3708      	adds	r7, #8
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	2000034c 	.word	0x2000034c
 80017d8:	20000348 	.word	0x20000348
 80017dc:	40016000 	.word	0x40016000

080017e0 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b085      	sub	sp, #20
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	4a1c      	ldr	r2, [pc, #112]	; (800185c <DFSDM_GetChannelFromInstance+0x7c>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d102      	bne.n	80017f6 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 80017f0:	2300      	movs	r3, #0
 80017f2:	60fb      	str	r3, [r7, #12]
 80017f4:	e02b      	b.n	800184e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	4a19      	ldr	r2, [pc, #100]	; (8001860 <DFSDM_GetChannelFromInstance+0x80>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d102      	bne.n	8001804 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 80017fe:	2301      	movs	r3, #1
 8001800:	60fb      	str	r3, [r7, #12]
 8001802:	e024      	b.n	800184e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	4a17      	ldr	r2, [pc, #92]	; (8001864 <DFSDM_GetChannelFromInstance+0x84>)
 8001808:	4293      	cmp	r3, r2
 800180a:	d102      	bne.n	8001812 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 800180c:	2302      	movs	r3, #2
 800180e:	60fb      	str	r3, [r7, #12]
 8001810:	e01d      	b.n	800184e <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	4a14      	ldr	r2, [pc, #80]	; (8001868 <DFSDM_GetChannelFromInstance+0x88>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d102      	bne.n	8001820 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 800181a:	2304      	movs	r3, #4
 800181c:	60fb      	str	r3, [r7, #12]
 800181e:	e016      	b.n	800184e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	4a12      	ldr	r2, [pc, #72]	; (800186c <DFSDM_GetChannelFromInstance+0x8c>)
 8001824:	4293      	cmp	r3, r2
 8001826:	d102      	bne.n	800182e <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8001828:	2305      	movs	r3, #5
 800182a:	60fb      	str	r3, [r7, #12]
 800182c:	e00f      	b.n	800184e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	4a0f      	ldr	r2, [pc, #60]	; (8001870 <DFSDM_GetChannelFromInstance+0x90>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d102      	bne.n	800183c <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8001836:	2306      	movs	r3, #6
 8001838:	60fb      	str	r3, [r7, #12]
 800183a:	e008      	b.n	800184e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	4a0d      	ldr	r2, [pc, #52]	; (8001874 <DFSDM_GetChannelFromInstance+0x94>)
 8001840:	4293      	cmp	r3, r2
 8001842:	d102      	bne.n	800184a <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8001844:	2307      	movs	r3, #7
 8001846:	60fb      	str	r3, [r7, #12]
 8001848:	e001      	b.n	800184e <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 800184a:	2303      	movs	r3, #3
 800184c:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 800184e:	68fb      	ldr	r3, [r7, #12]
}
 8001850:	4618      	mov	r0, r3
 8001852:	3714      	adds	r7, #20
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr
 800185c:	40016000 	.word	0x40016000
 8001860:	40016020 	.word	0x40016020
 8001864:	40016040 	.word	0x40016040
 8001868:	40016080 	.word	0x40016080
 800186c:	400160a0 	.word	0x400160a0
 8001870:	400160c0 	.word	0x400160c0
 8001874:	400160e0 	.word	0x400160e0

08001878 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001878:	b480      	push	{r7}
 800187a:	b087      	sub	sp, #28
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
 8001880:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001882:	2300      	movs	r3, #0
 8001884:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001886:	e17f      	b.n	8001b88 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	2101      	movs	r1, #1
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	fa01 f303 	lsl.w	r3, r1, r3
 8001894:	4013      	ands	r3, r2
 8001896:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	2b00      	cmp	r3, #0
 800189c:	f000 8171 	beq.w	8001b82 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	f003 0303 	and.w	r3, r3, #3
 80018a8:	2b01      	cmp	r3, #1
 80018aa:	d005      	beq.n	80018b8 <HAL_GPIO_Init+0x40>
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	f003 0303 	and.w	r3, r3, #3
 80018b4:	2b02      	cmp	r3, #2
 80018b6:	d130      	bne.n	800191a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	005b      	lsls	r3, r3, #1
 80018c2:	2203      	movs	r2, #3
 80018c4:	fa02 f303 	lsl.w	r3, r2, r3
 80018c8:	43db      	mvns	r3, r3
 80018ca:	693a      	ldr	r2, [r7, #16]
 80018cc:	4013      	ands	r3, r2
 80018ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	68da      	ldr	r2, [r3, #12]
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	005b      	lsls	r3, r3, #1
 80018d8:	fa02 f303 	lsl.w	r3, r2, r3
 80018dc:	693a      	ldr	r2, [r7, #16]
 80018de:	4313      	orrs	r3, r2
 80018e0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	693a      	ldr	r2, [r7, #16]
 80018e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80018ee:	2201      	movs	r2, #1
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	fa02 f303 	lsl.w	r3, r2, r3
 80018f6:	43db      	mvns	r3, r3
 80018f8:	693a      	ldr	r2, [r7, #16]
 80018fa:	4013      	ands	r3, r2
 80018fc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	091b      	lsrs	r3, r3, #4
 8001904:	f003 0201 	and.w	r2, r3, #1
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	fa02 f303 	lsl.w	r3, r2, r3
 800190e:	693a      	ldr	r2, [r7, #16]
 8001910:	4313      	orrs	r3, r2
 8001912:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	693a      	ldr	r2, [r7, #16]
 8001918:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	f003 0303 	and.w	r3, r3, #3
 8001922:	2b03      	cmp	r3, #3
 8001924:	d118      	bne.n	8001958 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800192a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800192c:	2201      	movs	r2, #1
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	fa02 f303 	lsl.w	r3, r2, r3
 8001934:	43db      	mvns	r3, r3
 8001936:	693a      	ldr	r2, [r7, #16]
 8001938:	4013      	ands	r3, r2
 800193a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	08db      	lsrs	r3, r3, #3
 8001942:	f003 0201 	and.w	r2, r3, #1
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	fa02 f303 	lsl.w	r3, r2, r3
 800194c:	693a      	ldr	r2, [r7, #16]
 800194e:	4313      	orrs	r3, r2
 8001950:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	693a      	ldr	r2, [r7, #16]
 8001956:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	f003 0303 	and.w	r3, r3, #3
 8001960:	2b03      	cmp	r3, #3
 8001962:	d017      	beq.n	8001994 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	68db      	ldr	r3, [r3, #12]
 8001968:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	005b      	lsls	r3, r3, #1
 800196e:	2203      	movs	r2, #3
 8001970:	fa02 f303 	lsl.w	r3, r2, r3
 8001974:	43db      	mvns	r3, r3
 8001976:	693a      	ldr	r2, [r7, #16]
 8001978:	4013      	ands	r3, r2
 800197a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	689a      	ldr	r2, [r3, #8]
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	005b      	lsls	r3, r3, #1
 8001984:	fa02 f303 	lsl.w	r3, r2, r3
 8001988:	693a      	ldr	r2, [r7, #16]
 800198a:	4313      	orrs	r3, r2
 800198c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	693a      	ldr	r2, [r7, #16]
 8001992:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	f003 0303 	and.w	r3, r3, #3
 800199c:	2b02      	cmp	r3, #2
 800199e:	d123      	bne.n	80019e8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	08da      	lsrs	r2, r3, #3
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	3208      	adds	r2, #8
 80019a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019ac:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	f003 0307 	and.w	r3, r3, #7
 80019b4:	009b      	lsls	r3, r3, #2
 80019b6:	220f      	movs	r2, #15
 80019b8:	fa02 f303 	lsl.w	r3, r2, r3
 80019bc:	43db      	mvns	r3, r3
 80019be:	693a      	ldr	r2, [r7, #16]
 80019c0:	4013      	ands	r3, r2
 80019c2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	691a      	ldr	r2, [r3, #16]
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	f003 0307 	and.w	r3, r3, #7
 80019ce:	009b      	lsls	r3, r3, #2
 80019d0:	fa02 f303 	lsl.w	r3, r2, r3
 80019d4:	693a      	ldr	r2, [r7, #16]
 80019d6:	4313      	orrs	r3, r2
 80019d8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	08da      	lsrs	r2, r3, #3
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	3208      	adds	r2, #8
 80019e2:	6939      	ldr	r1, [r7, #16]
 80019e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	005b      	lsls	r3, r3, #1
 80019f2:	2203      	movs	r2, #3
 80019f4:	fa02 f303 	lsl.w	r3, r2, r3
 80019f8:	43db      	mvns	r3, r3
 80019fa:	693a      	ldr	r2, [r7, #16]
 80019fc:	4013      	ands	r3, r2
 80019fe:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f003 0203 	and.w	r2, r3, #3
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	005b      	lsls	r3, r3, #1
 8001a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a10:	693a      	ldr	r2, [r7, #16]
 8001a12:	4313      	orrs	r3, r2
 8001a14:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	693a      	ldr	r2, [r7, #16]
 8001a1a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	f000 80ac 	beq.w	8001b82 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a2a:	4b5f      	ldr	r3, [pc, #380]	; (8001ba8 <HAL_GPIO_Init+0x330>)
 8001a2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a2e:	4a5e      	ldr	r2, [pc, #376]	; (8001ba8 <HAL_GPIO_Init+0x330>)
 8001a30:	f043 0301 	orr.w	r3, r3, #1
 8001a34:	6613      	str	r3, [r2, #96]	; 0x60
 8001a36:	4b5c      	ldr	r3, [pc, #368]	; (8001ba8 <HAL_GPIO_Init+0x330>)
 8001a38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a3a:	f003 0301 	and.w	r3, r3, #1
 8001a3e:	60bb      	str	r3, [r7, #8]
 8001a40:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001a42:	4a5a      	ldr	r2, [pc, #360]	; (8001bac <HAL_GPIO_Init+0x334>)
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	089b      	lsrs	r3, r3, #2
 8001a48:	3302      	adds	r3, #2
 8001a4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a4e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	f003 0303 	and.w	r3, r3, #3
 8001a56:	009b      	lsls	r3, r3, #2
 8001a58:	220f      	movs	r2, #15
 8001a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5e:	43db      	mvns	r3, r3
 8001a60:	693a      	ldr	r2, [r7, #16]
 8001a62:	4013      	ands	r3, r2
 8001a64:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001a6c:	d025      	beq.n	8001aba <HAL_GPIO_Init+0x242>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	4a4f      	ldr	r2, [pc, #316]	; (8001bb0 <HAL_GPIO_Init+0x338>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d01f      	beq.n	8001ab6 <HAL_GPIO_Init+0x23e>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	4a4e      	ldr	r2, [pc, #312]	; (8001bb4 <HAL_GPIO_Init+0x33c>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d019      	beq.n	8001ab2 <HAL_GPIO_Init+0x23a>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	4a4d      	ldr	r2, [pc, #308]	; (8001bb8 <HAL_GPIO_Init+0x340>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d013      	beq.n	8001aae <HAL_GPIO_Init+0x236>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	4a4c      	ldr	r2, [pc, #304]	; (8001bbc <HAL_GPIO_Init+0x344>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d00d      	beq.n	8001aaa <HAL_GPIO_Init+0x232>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	4a4b      	ldr	r2, [pc, #300]	; (8001bc0 <HAL_GPIO_Init+0x348>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d007      	beq.n	8001aa6 <HAL_GPIO_Init+0x22e>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	4a4a      	ldr	r2, [pc, #296]	; (8001bc4 <HAL_GPIO_Init+0x34c>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d101      	bne.n	8001aa2 <HAL_GPIO_Init+0x22a>
 8001a9e:	2306      	movs	r3, #6
 8001aa0:	e00c      	b.n	8001abc <HAL_GPIO_Init+0x244>
 8001aa2:	2307      	movs	r3, #7
 8001aa4:	e00a      	b.n	8001abc <HAL_GPIO_Init+0x244>
 8001aa6:	2305      	movs	r3, #5
 8001aa8:	e008      	b.n	8001abc <HAL_GPIO_Init+0x244>
 8001aaa:	2304      	movs	r3, #4
 8001aac:	e006      	b.n	8001abc <HAL_GPIO_Init+0x244>
 8001aae:	2303      	movs	r3, #3
 8001ab0:	e004      	b.n	8001abc <HAL_GPIO_Init+0x244>
 8001ab2:	2302      	movs	r3, #2
 8001ab4:	e002      	b.n	8001abc <HAL_GPIO_Init+0x244>
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e000      	b.n	8001abc <HAL_GPIO_Init+0x244>
 8001aba:	2300      	movs	r3, #0
 8001abc:	697a      	ldr	r2, [r7, #20]
 8001abe:	f002 0203 	and.w	r2, r2, #3
 8001ac2:	0092      	lsls	r2, r2, #2
 8001ac4:	4093      	lsls	r3, r2
 8001ac6:	693a      	ldr	r2, [r7, #16]
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001acc:	4937      	ldr	r1, [pc, #220]	; (8001bac <HAL_GPIO_Init+0x334>)
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	089b      	lsrs	r3, r3, #2
 8001ad2:	3302      	adds	r3, #2
 8001ad4:	693a      	ldr	r2, [r7, #16]
 8001ad6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001ada:	4b3b      	ldr	r3, [pc, #236]	; (8001bc8 <HAL_GPIO_Init+0x350>)
 8001adc:	689b      	ldr	r3, [r3, #8]
 8001ade:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	43db      	mvns	r3, r3
 8001ae4:	693a      	ldr	r2, [r7, #16]
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d003      	beq.n	8001afe <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001af6:	693a      	ldr	r2, [r7, #16]
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	4313      	orrs	r3, r2
 8001afc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001afe:	4a32      	ldr	r2, [pc, #200]	; (8001bc8 <HAL_GPIO_Init+0x350>)
 8001b00:	693b      	ldr	r3, [r7, #16]
 8001b02:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001b04:	4b30      	ldr	r3, [pc, #192]	; (8001bc8 <HAL_GPIO_Init+0x350>)
 8001b06:	68db      	ldr	r3, [r3, #12]
 8001b08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	43db      	mvns	r3, r3
 8001b0e:	693a      	ldr	r2, [r7, #16]
 8001b10:	4013      	ands	r3, r2
 8001b12:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d003      	beq.n	8001b28 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001b20:	693a      	ldr	r2, [r7, #16]
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	4313      	orrs	r3, r2
 8001b26:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001b28:	4a27      	ldr	r2, [pc, #156]	; (8001bc8 <HAL_GPIO_Init+0x350>)
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001b2e:	4b26      	ldr	r3, [pc, #152]	; (8001bc8 <HAL_GPIO_Init+0x350>)
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	43db      	mvns	r3, r3
 8001b38:	693a      	ldr	r2, [r7, #16]
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d003      	beq.n	8001b52 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001b4a:	693a      	ldr	r2, [r7, #16]
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001b52:	4a1d      	ldr	r2, [pc, #116]	; (8001bc8 <HAL_GPIO_Init+0x350>)
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001b58:	4b1b      	ldr	r3, [pc, #108]	; (8001bc8 <HAL_GPIO_Init+0x350>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	43db      	mvns	r3, r3
 8001b62:	693a      	ldr	r2, [r7, #16]
 8001b64:	4013      	ands	r3, r2
 8001b66:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d003      	beq.n	8001b7c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001b74:	693a      	ldr	r2, [r7, #16]
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001b7c:	4a12      	ldr	r2, [pc, #72]	; (8001bc8 <HAL_GPIO_Init+0x350>)
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	3301      	adds	r3, #1
 8001b86:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	fa22 f303 	lsr.w	r3, r2, r3
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	f47f ae78 	bne.w	8001888 <HAL_GPIO_Init+0x10>
  }
}
 8001b98:	bf00      	nop
 8001b9a:	bf00      	nop
 8001b9c:	371c      	adds	r7, #28
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr
 8001ba6:	bf00      	nop
 8001ba8:	40021000 	.word	0x40021000
 8001bac:	40010000 	.word	0x40010000
 8001bb0:	48000400 	.word	0x48000400
 8001bb4:	48000800 	.word	0x48000800
 8001bb8:	48000c00 	.word	0x48000c00
 8001bbc:	48001000 	.word	0x48001000
 8001bc0:	48001400 	.word	0x48001400
 8001bc4:	48001800 	.word	0x48001800
 8001bc8:	40010400 	.word	0x40010400

08001bcc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b083      	sub	sp, #12
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
 8001bd4:	460b      	mov	r3, r1
 8001bd6:	807b      	strh	r3, [r7, #2]
 8001bd8:	4613      	mov	r3, r2
 8001bda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001bdc:	787b      	ldrb	r3, [r7, #1]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d003      	beq.n	8001bea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001be2:	887a      	ldrh	r2, [r7, #2]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001be8:	e002      	b.n	8001bf0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001bea:	887a      	ldrh	r2, [r7, #2]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001bf0:	bf00      	nop
 8001bf2:	370c      	adds	r7, #12
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr

08001bfc <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b085      	sub	sp, #20
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
 8001c04:	460b      	mov	r3, r1
 8001c06:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	695b      	ldr	r3, [r3, #20]
 8001c0c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001c0e:	887a      	ldrh	r2, [r7, #2]
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	4013      	ands	r3, r2
 8001c14:	041a      	lsls	r2, r3, #16
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	43d9      	mvns	r1, r3
 8001c1a:	887b      	ldrh	r3, [r7, #2]
 8001c1c:	400b      	ands	r3, r1
 8001c1e:	431a      	orrs	r2, r3
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	619a      	str	r2, [r3, #24]
}
 8001c24:	bf00      	nop
 8001c26:	3714      	adds	r7, #20
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr

08001c30 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b082      	sub	sp, #8
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	4603      	mov	r3, r0
 8001c38:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001c3a:	4b08      	ldr	r3, [pc, #32]	; (8001c5c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c3c:	695a      	ldr	r2, [r3, #20]
 8001c3e:	88fb      	ldrh	r3, [r7, #6]
 8001c40:	4013      	ands	r3, r2
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d006      	beq.n	8001c54 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001c46:	4a05      	ldr	r2, [pc, #20]	; (8001c5c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c48:	88fb      	ldrh	r3, [r7, #6]
 8001c4a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001c4c:	88fb      	ldrh	r3, [r7, #6]
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f000 f806 	bl	8001c60 <HAL_GPIO_EXTI_Callback>
  }
}
 8001c54:	bf00      	nop
 8001c56:	3708      	adds	r7, #8
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	40010400 	.word	0x40010400

08001c60 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b083      	sub	sp, #12
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	4603      	mov	r3, r0
 8001c68:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001c6a:	bf00      	nop
 8001c6c:	370c      	adds	r7, #12
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr

08001c76 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001c76:	b580      	push	{r7, lr}
 8001c78:	b082      	sub	sp, #8
 8001c7a:	af00      	add	r7, sp, #0
 8001c7c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d101      	bne.n	8001c88 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001c84:	2301      	movs	r3, #1
 8001c86:	e081      	b.n	8001d8c <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c8e:	b2db      	uxtb	r3, r3
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d106      	bne.n	8001ca2 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2200      	movs	r2, #0
 8001c98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001c9c:	6878      	ldr	r0, [r7, #4]
 8001c9e:	f7fe feef 	bl	8000a80 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2224      	movs	r2, #36	; 0x24
 8001ca6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	681a      	ldr	r2, [r3, #0]
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f022 0201 	bic.w	r2, r2, #1
 8001cb8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	685a      	ldr	r2, [r3, #4]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001cc6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	689a      	ldr	r2, [r3, #8]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001cd6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	68db      	ldr	r3, [r3, #12]
 8001cdc:	2b01      	cmp	r3, #1
 8001cde:	d107      	bne.n	8001cf0 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	689a      	ldr	r2, [r3, #8]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001cec:	609a      	str	r2, [r3, #8]
 8001cee:	e006      	b.n	8001cfe <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	689a      	ldr	r2, [r3, #8]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001cfc:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	68db      	ldr	r3, [r3, #12]
 8001d02:	2b02      	cmp	r3, #2
 8001d04:	d104      	bne.n	8001d10 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001d0e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	687a      	ldr	r2, [r7, #4]
 8001d18:	6812      	ldr	r2, [r2, #0]
 8001d1a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d22:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	68da      	ldr	r2, [r3, #12]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001d32:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	691a      	ldr	r2, [r3, #16]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	695b      	ldr	r3, [r3, #20]
 8001d3c:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	699b      	ldr	r3, [r3, #24]
 8001d44:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	430a      	orrs	r2, r1
 8001d4c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	69d9      	ldr	r1, [r3, #28]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6a1a      	ldr	r2, [r3, #32]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	430a      	orrs	r2, r1
 8001d5c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f042 0201 	orr.w	r2, r2, #1
 8001d6c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2200      	movs	r2, #0
 8001d72:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2220      	movs	r2, #32
 8001d78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2200      	movs	r2, #0
 8001d86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001d8a:	2300      	movs	r3, #0
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	3708      	adds	r7, #8
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}

08001d94 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b083      	sub	sp, #12
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
 8001d9c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001da4:	b2db      	uxtb	r3, r3
 8001da6:	2b20      	cmp	r3, #32
 8001da8:	d138      	bne.n	8001e1c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001db0:	2b01      	cmp	r3, #1
 8001db2:	d101      	bne.n	8001db8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001db4:	2302      	movs	r3, #2
 8001db6:	e032      	b.n	8001e1e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2201      	movs	r2, #1
 8001dbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2224      	movs	r2, #36	; 0x24
 8001dc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f022 0201 	bic.w	r2, r2, #1
 8001dd6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001de6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	6819      	ldr	r1, [r3, #0]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	683a      	ldr	r2, [r7, #0]
 8001df4:	430a      	orrs	r2, r1
 8001df6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f042 0201 	orr.w	r2, r2, #1
 8001e06:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2220      	movs	r2, #32
 8001e0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2200      	movs	r2, #0
 8001e14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	e000      	b.n	8001e1e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001e1c:	2302      	movs	r3, #2
  }
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	370c      	adds	r7, #12
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr

08001e2a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001e2a:	b480      	push	{r7}
 8001e2c:	b085      	sub	sp, #20
 8001e2e:	af00      	add	r7, sp, #0
 8001e30:	6078      	str	r0, [r7, #4]
 8001e32:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e3a:	b2db      	uxtb	r3, r3
 8001e3c:	2b20      	cmp	r3, #32
 8001e3e:	d139      	bne.n	8001eb4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001e46:	2b01      	cmp	r3, #1
 8001e48:	d101      	bne.n	8001e4e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001e4a:	2302      	movs	r3, #2
 8001e4c:	e033      	b.n	8001eb6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2201      	movs	r2, #1
 8001e52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2224      	movs	r2, #36	; 0x24
 8001e5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f022 0201 	bic.w	r2, r2, #1
 8001e6c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001e7c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	021b      	lsls	r3, r3, #8
 8001e82:	68fa      	ldr	r2, [r7, #12]
 8001e84:	4313      	orrs	r3, r2
 8001e86:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	68fa      	ldr	r2, [r7, #12]
 8001e8e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f042 0201 	orr.w	r2, r2, #1
 8001e9e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2220      	movs	r2, #32
 8001ea4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2200      	movs	r2, #0
 8001eac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	e000      	b.n	8001eb6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001eb4:	2302      	movs	r3, #2
  }
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3714      	adds	r7, #20
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr

08001ec2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001ec2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ec4:	b08f      	sub	sp, #60	; 0x3c
 8001ec6:	af0a      	add	r7, sp, #40	; 0x28
 8001ec8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d101      	bne.n	8001ed4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	e116      	b.n	8002102 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001ee0:	b2db      	uxtb	r3, r3
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d106      	bne.n	8001ef4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	f7ff f9b2 	bl	8001258 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2203      	movs	r2, #3
 8001ef8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d102      	bne.n	8001f0e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4618      	mov	r0, r3
 8001f14:	f002 fd6f 	bl	80049f6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	603b      	str	r3, [r7, #0]
 8001f1e:	687e      	ldr	r6, [r7, #4]
 8001f20:	466d      	mov	r5, sp
 8001f22:	f106 0410 	add.w	r4, r6, #16
 8001f26:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f28:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f2c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f2e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001f32:	e885 0003 	stmia.w	r5, {r0, r1}
 8001f36:	1d33      	adds	r3, r6, #4
 8001f38:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f3a:	6838      	ldr	r0, [r7, #0]
 8001f3c:	f002 fd2f 	bl	800499e <USB_CoreInit>
 8001f40:	4603      	mov	r3, r0
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d005      	beq.n	8001f52 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2202      	movs	r2, #2
 8001f4a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e0d7      	b.n	8002102 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	2100      	movs	r1, #0
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f002 fd5d 	bl	8004a18 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f5e:	2300      	movs	r3, #0
 8001f60:	73fb      	strb	r3, [r7, #15]
 8001f62:	e04a      	b.n	8001ffa <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001f64:	7bfa      	ldrb	r2, [r7, #15]
 8001f66:	6879      	ldr	r1, [r7, #4]
 8001f68:	4613      	mov	r3, r2
 8001f6a:	00db      	lsls	r3, r3, #3
 8001f6c:	1a9b      	subs	r3, r3, r2
 8001f6e:	009b      	lsls	r3, r3, #2
 8001f70:	440b      	add	r3, r1
 8001f72:	333d      	adds	r3, #61	; 0x3d
 8001f74:	2201      	movs	r2, #1
 8001f76:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001f78:	7bfa      	ldrb	r2, [r7, #15]
 8001f7a:	6879      	ldr	r1, [r7, #4]
 8001f7c:	4613      	mov	r3, r2
 8001f7e:	00db      	lsls	r3, r3, #3
 8001f80:	1a9b      	subs	r3, r3, r2
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	440b      	add	r3, r1
 8001f86:	333c      	adds	r3, #60	; 0x3c
 8001f88:	7bfa      	ldrb	r2, [r7, #15]
 8001f8a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001f8c:	7bfa      	ldrb	r2, [r7, #15]
 8001f8e:	7bfb      	ldrb	r3, [r7, #15]
 8001f90:	b298      	uxth	r0, r3
 8001f92:	6879      	ldr	r1, [r7, #4]
 8001f94:	4613      	mov	r3, r2
 8001f96:	00db      	lsls	r3, r3, #3
 8001f98:	1a9b      	subs	r3, r3, r2
 8001f9a:	009b      	lsls	r3, r3, #2
 8001f9c:	440b      	add	r3, r1
 8001f9e:	3342      	adds	r3, #66	; 0x42
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001fa4:	7bfa      	ldrb	r2, [r7, #15]
 8001fa6:	6879      	ldr	r1, [r7, #4]
 8001fa8:	4613      	mov	r3, r2
 8001faa:	00db      	lsls	r3, r3, #3
 8001fac:	1a9b      	subs	r3, r3, r2
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	440b      	add	r3, r1
 8001fb2:	333f      	adds	r3, #63	; 0x3f
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001fb8:	7bfa      	ldrb	r2, [r7, #15]
 8001fba:	6879      	ldr	r1, [r7, #4]
 8001fbc:	4613      	mov	r3, r2
 8001fbe:	00db      	lsls	r3, r3, #3
 8001fc0:	1a9b      	subs	r3, r3, r2
 8001fc2:	009b      	lsls	r3, r3, #2
 8001fc4:	440b      	add	r3, r1
 8001fc6:	3344      	adds	r3, #68	; 0x44
 8001fc8:	2200      	movs	r2, #0
 8001fca:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001fcc:	7bfa      	ldrb	r2, [r7, #15]
 8001fce:	6879      	ldr	r1, [r7, #4]
 8001fd0:	4613      	mov	r3, r2
 8001fd2:	00db      	lsls	r3, r3, #3
 8001fd4:	1a9b      	subs	r3, r3, r2
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	440b      	add	r3, r1
 8001fda:	3348      	adds	r3, #72	; 0x48
 8001fdc:	2200      	movs	r2, #0
 8001fde:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001fe0:	7bfa      	ldrb	r2, [r7, #15]
 8001fe2:	6879      	ldr	r1, [r7, #4]
 8001fe4:	4613      	mov	r3, r2
 8001fe6:	00db      	lsls	r3, r3, #3
 8001fe8:	1a9b      	subs	r3, r3, r2
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	440b      	add	r3, r1
 8001fee:	3350      	adds	r3, #80	; 0x50
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ff4:	7bfb      	ldrb	r3, [r7, #15]
 8001ff6:	3301      	adds	r3, #1
 8001ff8:	73fb      	strb	r3, [r7, #15]
 8001ffa:	7bfa      	ldrb	r2, [r7, #15]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	429a      	cmp	r2, r3
 8002002:	d3af      	bcc.n	8001f64 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002004:	2300      	movs	r3, #0
 8002006:	73fb      	strb	r3, [r7, #15]
 8002008:	e044      	b.n	8002094 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800200a:	7bfa      	ldrb	r2, [r7, #15]
 800200c:	6879      	ldr	r1, [r7, #4]
 800200e:	4613      	mov	r3, r2
 8002010:	00db      	lsls	r3, r3, #3
 8002012:	1a9b      	subs	r3, r3, r2
 8002014:	009b      	lsls	r3, r3, #2
 8002016:	440b      	add	r3, r1
 8002018:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800201c:	2200      	movs	r2, #0
 800201e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002020:	7bfa      	ldrb	r2, [r7, #15]
 8002022:	6879      	ldr	r1, [r7, #4]
 8002024:	4613      	mov	r3, r2
 8002026:	00db      	lsls	r3, r3, #3
 8002028:	1a9b      	subs	r3, r3, r2
 800202a:	009b      	lsls	r3, r3, #2
 800202c:	440b      	add	r3, r1
 800202e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002032:	7bfa      	ldrb	r2, [r7, #15]
 8002034:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002036:	7bfa      	ldrb	r2, [r7, #15]
 8002038:	6879      	ldr	r1, [r7, #4]
 800203a:	4613      	mov	r3, r2
 800203c:	00db      	lsls	r3, r3, #3
 800203e:	1a9b      	subs	r3, r3, r2
 8002040:	009b      	lsls	r3, r3, #2
 8002042:	440b      	add	r3, r1
 8002044:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002048:	2200      	movs	r2, #0
 800204a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800204c:	7bfa      	ldrb	r2, [r7, #15]
 800204e:	6879      	ldr	r1, [r7, #4]
 8002050:	4613      	mov	r3, r2
 8002052:	00db      	lsls	r3, r3, #3
 8002054:	1a9b      	subs	r3, r3, r2
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	440b      	add	r3, r1
 800205a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800205e:	2200      	movs	r2, #0
 8002060:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002062:	7bfa      	ldrb	r2, [r7, #15]
 8002064:	6879      	ldr	r1, [r7, #4]
 8002066:	4613      	mov	r3, r2
 8002068:	00db      	lsls	r3, r3, #3
 800206a:	1a9b      	subs	r3, r3, r2
 800206c:	009b      	lsls	r3, r3, #2
 800206e:	440b      	add	r3, r1
 8002070:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002074:	2200      	movs	r2, #0
 8002076:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002078:	7bfa      	ldrb	r2, [r7, #15]
 800207a:	6879      	ldr	r1, [r7, #4]
 800207c:	4613      	mov	r3, r2
 800207e:	00db      	lsls	r3, r3, #3
 8002080:	1a9b      	subs	r3, r3, r2
 8002082:	009b      	lsls	r3, r3, #2
 8002084:	440b      	add	r3, r1
 8002086:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800208a:	2200      	movs	r2, #0
 800208c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800208e:	7bfb      	ldrb	r3, [r7, #15]
 8002090:	3301      	adds	r3, #1
 8002092:	73fb      	strb	r3, [r7, #15]
 8002094:	7bfa      	ldrb	r2, [r7, #15]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	429a      	cmp	r2, r3
 800209c:	d3b5      	bcc.n	800200a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	603b      	str	r3, [r7, #0]
 80020a4:	687e      	ldr	r6, [r7, #4]
 80020a6:	466d      	mov	r5, sp
 80020a8:	f106 0410 	add.w	r4, r6, #16
 80020ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020b4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80020b8:	e885 0003 	stmia.w	r5, {r0, r1}
 80020bc:	1d33      	adds	r3, r6, #4
 80020be:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020c0:	6838      	ldr	r0, [r7, #0]
 80020c2:	f002 fcf5 	bl	8004ab0 <USB_DevInit>
 80020c6:	4603      	mov	r3, r0
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d005      	beq.n	80020d8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2202      	movs	r2, #2
 80020d0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80020d4:	2301      	movs	r3, #1
 80020d6:	e014      	b.n	8002102 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2200      	movs	r2, #0
 80020dc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2201      	movs	r2, #1
 80020e4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d102      	bne.n	80020f6 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80020f0:	6878      	ldr	r0, [r7, #4]
 80020f2:	f000 f80a 	bl	800210a <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4618      	mov	r0, r3
 80020fc:	f002 fe9d 	bl	8004e3a <USB_DevDisconnect>

  return HAL_OK;
 8002100:	2300      	movs	r3, #0
}
 8002102:	4618      	mov	r0, r3
 8002104:	3714      	adds	r7, #20
 8002106:	46bd      	mov	sp, r7
 8002108:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800210a <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800210a:	b480      	push	{r7}
 800210c:	b085      	sub	sp, #20
 800210e:	af00      	add	r7, sp, #0
 8002110:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2201      	movs	r2, #1
 800211c:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2200      	movs	r2, #0
 8002124:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	699b      	ldr	r3, [r3, #24]
 800212c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002138:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800213c:	f043 0303 	orr.w	r3, r3, #3
 8002140:	68fa      	ldr	r2, [r7, #12]
 8002142:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002144:	2300      	movs	r3, #0
}
 8002146:	4618      	mov	r0, r3
 8002148:	3714      	adds	r7, #20
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr
	...

08002154 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002154:	b480      	push	{r7}
 8002156:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002158:	4b05      	ldr	r3, [pc, #20]	; (8002170 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a04      	ldr	r2, [pc, #16]	; (8002170 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800215e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002162:	6013      	str	r3, [r2, #0]
}
 8002164:	bf00      	nop
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr
 800216e:	bf00      	nop
 8002170:	40007000 	.word	0x40007000

08002174 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002174:	b480      	push	{r7}
 8002176:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002178:	4b04      	ldr	r3, [pc, #16]	; (800218c <HAL_PWREx_GetVoltageRange+0x18>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002180:	4618      	mov	r0, r3
 8002182:	46bd      	mov	sp, r7
 8002184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002188:	4770      	bx	lr
 800218a:	bf00      	nop
 800218c:	40007000 	.word	0x40007000

08002190 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002190:	b480      	push	{r7}
 8002192:	b085      	sub	sp, #20
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800219e:	d130      	bne.n	8002202 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80021a0:	4b23      	ldr	r3, [pc, #140]	; (8002230 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80021a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021ac:	d038      	beq.n	8002220 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80021ae:	4b20      	ldr	r3, [pc, #128]	; (8002230 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80021b6:	4a1e      	ldr	r2, [pc, #120]	; (8002230 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021b8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021bc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80021be:	4b1d      	ldr	r3, [pc, #116]	; (8002234 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	2232      	movs	r2, #50	; 0x32
 80021c4:	fb02 f303 	mul.w	r3, r2, r3
 80021c8:	4a1b      	ldr	r2, [pc, #108]	; (8002238 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80021ca:	fba2 2303 	umull	r2, r3, r2, r3
 80021ce:	0c9b      	lsrs	r3, r3, #18
 80021d0:	3301      	adds	r3, #1
 80021d2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80021d4:	e002      	b.n	80021dc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	3b01      	subs	r3, #1
 80021da:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80021dc:	4b14      	ldr	r3, [pc, #80]	; (8002230 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021de:	695b      	ldr	r3, [r3, #20]
 80021e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021e8:	d102      	bne.n	80021f0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d1f2      	bne.n	80021d6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80021f0:	4b0f      	ldr	r3, [pc, #60]	; (8002230 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021f2:	695b      	ldr	r3, [r3, #20]
 80021f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021fc:	d110      	bne.n	8002220 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80021fe:	2303      	movs	r3, #3
 8002200:	e00f      	b.n	8002222 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002202:	4b0b      	ldr	r3, [pc, #44]	; (8002230 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800220a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800220e:	d007      	beq.n	8002220 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002210:	4b07      	ldr	r3, [pc, #28]	; (8002230 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002218:	4a05      	ldr	r2, [pc, #20]	; (8002230 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800221a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800221e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002220:	2300      	movs	r3, #0
}
 8002222:	4618      	mov	r0, r3
 8002224:	3714      	adds	r7, #20
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr
 800222e:	bf00      	nop
 8002230:	40007000 	.word	0x40007000
 8002234:	20000000 	.word	0x20000000
 8002238:	431bde83 	.word	0x431bde83

0800223c <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800223c:	b480      	push	{r7}
 800223e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002240:	4b05      	ldr	r3, [pc, #20]	; (8002258 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	4a04      	ldr	r2, [pc, #16]	; (8002258 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002246:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800224a:	6053      	str	r3, [r2, #4]
}
 800224c:	bf00      	nop
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr
 8002256:	bf00      	nop
 8002258:	40007000 	.word	0x40007000

0800225c <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b086      	sub	sp, #24
 8002260:	af02      	add	r7, sp, #8
 8002262:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8002264:	f7ff f8ea 	bl	800143c <HAL_GetTick>
 8002268:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d101      	bne.n	8002274 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8002270:	2301      	movs	r3, #1
 8002272:	e063      	b.n	800233c <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800227a:	b2db      	uxtb	r3, r3
 800227c:	2b00      	cmp	r3, #0
 800227e:	d10b      	bne.n	8002298 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2200      	movs	r2, #0
 8002284:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8002288:	6878      	ldr	r0, [r7, #4]
 800228a:	f7fe fd13 	bl	8000cb4 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800228e:	f241 3188 	movw	r1, #5000	; 0x1388
 8002292:	6878      	ldr	r0, [r7, #4]
 8002294:	f000 f858 	bl	8002348 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	3b01      	subs	r3, #1
 80022a8:	021a      	lsls	r2, r3, #8
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	430a      	orrs	r2, r1
 80022b0:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b6:	9300      	str	r3, [sp, #0]
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	2200      	movs	r2, #0
 80022bc:	2120      	movs	r1, #32
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	f000 f850 	bl	8002364 <QSPI_WaitFlagStateUntilTimeout>
 80022c4:	4603      	mov	r3, r0
 80022c6:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 80022c8:	7afb      	ldrb	r3, [r7, #11]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d131      	bne.n	8002332 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80022d8:	f023 0310 	bic.w	r3, r3, #16
 80022dc:	687a      	ldr	r2, [r7, #4]
 80022de:	6852      	ldr	r2, [r2, #4]
 80022e0:	0611      	lsls	r1, r2, #24
 80022e2:	687a      	ldr	r2, [r7, #4]
 80022e4:	68d2      	ldr	r2, [r2, #12]
 80022e6:	4311      	orrs	r1, r2
 80022e8:	687a      	ldr	r2, [r7, #4]
 80022ea:	6812      	ldr	r2, [r2, #0]
 80022ec:	430b      	orrs	r3, r1
 80022ee:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	685a      	ldr	r2, [r3, #4]
 80022f6:	4b13      	ldr	r3, [pc, #76]	; (8002344 <HAL_QSPI_Init+0xe8>)
 80022f8:	4013      	ands	r3, r2
 80022fa:	687a      	ldr	r2, [r7, #4]
 80022fc:	6912      	ldr	r2, [r2, #16]
 80022fe:	0411      	lsls	r1, r2, #16
 8002300:	687a      	ldr	r2, [r7, #4]
 8002302:	6952      	ldr	r2, [r2, #20]
 8002304:	4311      	orrs	r1, r2
 8002306:	687a      	ldr	r2, [r7, #4]
 8002308:	6992      	ldr	r2, [r2, #24]
 800230a:	4311      	orrs	r1, r2
 800230c:	687a      	ldr	r2, [r7, #4]
 800230e:	6812      	ldr	r2, [r2, #0]
 8002310:	430b      	orrs	r3, r1
 8002312:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f042 0201 	orr.w	r2, r2, #1
 8002322:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2200      	movs	r2, #0
 8002328:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2201      	movs	r2, #1
 800232e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2200      	movs	r2, #0
 8002336:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 800233a:	7afb      	ldrb	r3, [r7, #11]
}
 800233c:	4618      	mov	r0, r3
 800233e:	3710      	adds	r7, #16
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}
 8002344:	ffe0f8fe 	.word	0xffe0f8fe

08002348 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8002348:	b480      	push	{r7}
 800234a:	b083      	sub	sp, #12
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
 8002350:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	683a      	ldr	r2, [r7, #0]
 8002356:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002358:	bf00      	nop
 800235a:	370c      	adds	r7, #12
 800235c:	46bd      	mov	sp, r7
 800235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002362:	4770      	bx	lr

08002364 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b084      	sub	sp, #16
 8002368:	af00      	add	r7, sp, #0
 800236a:	60f8      	str	r0, [r7, #12]
 800236c:	60b9      	str	r1, [r7, #8]
 800236e:	603b      	str	r3, [r7, #0]
 8002370:	4613      	mov	r3, r2
 8002372:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002374:	e01a      	b.n	80023ac <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002376:	69bb      	ldr	r3, [r7, #24]
 8002378:	f1b3 3fff 	cmp.w	r3, #4294967295
 800237c:	d016      	beq.n	80023ac <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800237e:	f7ff f85d 	bl	800143c <HAL_GetTick>
 8002382:	4602      	mov	r2, r0
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	1ad3      	subs	r3, r2, r3
 8002388:	69ba      	ldr	r2, [r7, #24]
 800238a:	429a      	cmp	r2, r3
 800238c:	d302      	bcc.n	8002394 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800238e:	69bb      	ldr	r3, [r7, #24]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d10b      	bne.n	80023ac <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	2204      	movs	r2, #4
 8002398:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023a0:	f043 0201 	orr.w	r2, r3, #1
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80023a8:	2301      	movs	r3, #1
 80023aa:	e00e      	b.n	80023ca <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	689a      	ldr	r2, [r3, #8]
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	4013      	ands	r3, r2
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	bf14      	ite	ne
 80023ba:	2301      	movne	r3, #1
 80023bc:	2300      	moveq	r3, #0
 80023be:	b2db      	uxtb	r3, r3
 80023c0:	461a      	mov	r2, r3
 80023c2:	79fb      	ldrb	r3, [r7, #7]
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d1d6      	bne.n	8002376 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80023c8:	2300      	movs	r3, #0
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	3710      	adds	r7, #16
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
	...

080023d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b088      	sub	sp, #32
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d101      	bne.n	80023e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e3d4      	b.n	8002b90 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023e6:	4ba1      	ldr	r3, [pc, #644]	; (800266c <HAL_RCC_OscConfig+0x298>)
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	f003 030c 	and.w	r3, r3, #12
 80023ee:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80023f0:	4b9e      	ldr	r3, [pc, #632]	; (800266c <HAL_RCC_OscConfig+0x298>)
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	f003 0303 	and.w	r3, r3, #3
 80023f8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 0310 	and.w	r3, r3, #16
 8002402:	2b00      	cmp	r3, #0
 8002404:	f000 80e4 	beq.w	80025d0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002408:	69bb      	ldr	r3, [r7, #24]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d007      	beq.n	800241e <HAL_RCC_OscConfig+0x4a>
 800240e:	69bb      	ldr	r3, [r7, #24]
 8002410:	2b0c      	cmp	r3, #12
 8002412:	f040 808b 	bne.w	800252c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	2b01      	cmp	r3, #1
 800241a:	f040 8087 	bne.w	800252c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800241e:	4b93      	ldr	r3, [pc, #588]	; (800266c <HAL_RCC_OscConfig+0x298>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 0302 	and.w	r3, r3, #2
 8002426:	2b00      	cmp	r3, #0
 8002428:	d005      	beq.n	8002436 <HAL_RCC_OscConfig+0x62>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	699b      	ldr	r3, [r3, #24]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d101      	bne.n	8002436 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e3ac      	b.n	8002b90 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6a1a      	ldr	r2, [r3, #32]
 800243a:	4b8c      	ldr	r3, [pc, #560]	; (800266c <HAL_RCC_OscConfig+0x298>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 0308 	and.w	r3, r3, #8
 8002442:	2b00      	cmp	r3, #0
 8002444:	d004      	beq.n	8002450 <HAL_RCC_OscConfig+0x7c>
 8002446:	4b89      	ldr	r3, [pc, #548]	; (800266c <HAL_RCC_OscConfig+0x298>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800244e:	e005      	b.n	800245c <HAL_RCC_OscConfig+0x88>
 8002450:	4b86      	ldr	r3, [pc, #536]	; (800266c <HAL_RCC_OscConfig+0x298>)
 8002452:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002456:	091b      	lsrs	r3, r3, #4
 8002458:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800245c:	4293      	cmp	r3, r2
 800245e:	d223      	bcs.n	80024a8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6a1b      	ldr	r3, [r3, #32]
 8002464:	4618      	mov	r0, r3
 8002466:	f000 fd73 	bl	8002f50 <RCC_SetFlashLatencyFromMSIRange>
 800246a:	4603      	mov	r3, r0
 800246c:	2b00      	cmp	r3, #0
 800246e:	d001      	beq.n	8002474 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002470:	2301      	movs	r3, #1
 8002472:	e38d      	b.n	8002b90 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002474:	4b7d      	ldr	r3, [pc, #500]	; (800266c <HAL_RCC_OscConfig+0x298>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a7c      	ldr	r2, [pc, #496]	; (800266c <HAL_RCC_OscConfig+0x298>)
 800247a:	f043 0308 	orr.w	r3, r3, #8
 800247e:	6013      	str	r3, [r2, #0]
 8002480:	4b7a      	ldr	r3, [pc, #488]	; (800266c <HAL_RCC_OscConfig+0x298>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6a1b      	ldr	r3, [r3, #32]
 800248c:	4977      	ldr	r1, [pc, #476]	; (800266c <HAL_RCC_OscConfig+0x298>)
 800248e:	4313      	orrs	r3, r2
 8002490:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002492:	4b76      	ldr	r3, [pc, #472]	; (800266c <HAL_RCC_OscConfig+0x298>)
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	69db      	ldr	r3, [r3, #28]
 800249e:	021b      	lsls	r3, r3, #8
 80024a0:	4972      	ldr	r1, [pc, #456]	; (800266c <HAL_RCC_OscConfig+0x298>)
 80024a2:	4313      	orrs	r3, r2
 80024a4:	604b      	str	r3, [r1, #4]
 80024a6:	e025      	b.n	80024f4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80024a8:	4b70      	ldr	r3, [pc, #448]	; (800266c <HAL_RCC_OscConfig+0x298>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a6f      	ldr	r2, [pc, #444]	; (800266c <HAL_RCC_OscConfig+0x298>)
 80024ae:	f043 0308 	orr.w	r3, r3, #8
 80024b2:	6013      	str	r3, [r2, #0]
 80024b4:	4b6d      	ldr	r3, [pc, #436]	; (800266c <HAL_RCC_OscConfig+0x298>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6a1b      	ldr	r3, [r3, #32]
 80024c0:	496a      	ldr	r1, [pc, #424]	; (800266c <HAL_RCC_OscConfig+0x298>)
 80024c2:	4313      	orrs	r3, r2
 80024c4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80024c6:	4b69      	ldr	r3, [pc, #420]	; (800266c <HAL_RCC_OscConfig+0x298>)
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	69db      	ldr	r3, [r3, #28]
 80024d2:	021b      	lsls	r3, r3, #8
 80024d4:	4965      	ldr	r1, [pc, #404]	; (800266c <HAL_RCC_OscConfig+0x298>)
 80024d6:	4313      	orrs	r3, r2
 80024d8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80024da:	69bb      	ldr	r3, [r7, #24]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d109      	bne.n	80024f4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6a1b      	ldr	r3, [r3, #32]
 80024e4:	4618      	mov	r0, r3
 80024e6:	f000 fd33 	bl	8002f50 <RCC_SetFlashLatencyFromMSIRange>
 80024ea:	4603      	mov	r3, r0
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d001      	beq.n	80024f4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	e34d      	b.n	8002b90 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80024f4:	f000 fc36 	bl	8002d64 <HAL_RCC_GetSysClockFreq>
 80024f8:	4602      	mov	r2, r0
 80024fa:	4b5c      	ldr	r3, [pc, #368]	; (800266c <HAL_RCC_OscConfig+0x298>)
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	091b      	lsrs	r3, r3, #4
 8002500:	f003 030f 	and.w	r3, r3, #15
 8002504:	495a      	ldr	r1, [pc, #360]	; (8002670 <HAL_RCC_OscConfig+0x29c>)
 8002506:	5ccb      	ldrb	r3, [r1, r3]
 8002508:	f003 031f 	and.w	r3, r3, #31
 800250c:	fa22 f303 	lsr.w	r3, r2, r3
 8002510:	4a58      	ldr	r2, [pc, #352]	; (8002674 <HAL_RCC_OscConfig+0x2a0>)
 8002512:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002514:	4b58      	ldr	r3, [pc, #352]	; (8002678 <HAL_RCC_OscConfig+0x2a4>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4618      	mov	r0, r3
 800251a:	f7fe fcb9 	bl	8000e90 <HAL_InitTick>
 800251e:	4603      	mov	r3, r0
 8002520:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002522:	7bfb      	ldrb	r3, [r7, #15]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d052      	beq.n	80025ce <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002528:	7bfb      	ldrb	r3, [r7, #15]
 800252a:	e331      	b.n	8002b90 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	699b      	ldr	r3, [r3, #24]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d032      	beq.n	800259a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002534:	4b4d      	ldr	r3, [pc, #308]	; (800266c <HAL_RCC_OscConfig+0x298>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a4c      	ldr	r2, [pc, #304]	; (800266c <HAL_RCC_OscConfig+0x298>)
 800253a:	f043 0301 	orr.w	r3, r3, #1
 800253e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002540:	f7fe ff7c 	bl	800143c <HAL_GetTick>
 8002544:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002546:	e008      	b.n	800255a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002548:	f7fe ff78 	bl	800143c <HAL_GetTick>
 800254c:	4602      	mov	r2, r0
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	1ad3      	subs	r3, r2, r3
 8002552:	2b02      	cmp	r3, #2
 8002554:	d901      	bls.n	800255a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002556:	2303      	movs	r3, #3
 8002558:	e31a      	b.n	8002b90 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800255a:	4b44      	ldr	r3, [pc, #272]	; (800266c <HAL_RCC_OscConfig+0x298>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 0302 	and.w	r3, r3, #2
 8002562:	2b00      	cmp	r3, #0
 8002564:	d0f0      	beq.n	8002548 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002566:	4b41      	ldr	r3, [pc, #260]	; (800266c <HAL_RCC_OscConfig+0x298>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a40      	ldr	r2, [pc, #256]	; (800266c <HAL_RCC_OscConfig+0x298>)
 800256c:	f043 0308 	orr.w	r3, r3, #8
 8002570:	6013      	str	r3, [r2, #0]
 8002572:	4b3e      	ldr	r3, [pc, #248]	; (800266c <HAL_RCC_OscConfig+0x298>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6a1b      	ldr	r3, [r3, #32]
 800257e:	493b      	ldr	r1, [pc, #236]	; (800266c <HAL_RCC_OscConfig+0x298>)
 8002580:	4313      	orrs	r3, r2
 8002582:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002584:	4b39      	ldr	r3, [pc, #228]	; (800266c <HAL_RCC_OscConfig+0x298>)
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	69db      	ldr	r3, [r3, #28]
 8002590:	021b      	lsls	r3, r3, #8
 8002592:	4936      	ldr	r1, [pc, #216]	; (800266c <HAL_RCC_OscConfig+0x298>)
 8002594:	4313      	orrs	r3, r2
 8002596:	604b      	str	r3, [r1, #4]
 8002598:	e01a      	b.n	80025d0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800259a:	4b34      	ldr	r3, [pc, #208]	; (800266c <HAL_RCC_OscConfig+0x298>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a33      	ldr	r2, [pc, #204]	; (800266c <HAL_RCC_OscConfig+0x298>)
 80025a0:	f023 0301 	bic.w	r3, r3, #1
 80025a4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80025a6:	f7fe ff49 	bl	800143c <HAL_GetTick>
 80025aa:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80025ac:	e008      	b.n	80025c0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80025ae:	f7fe ff45 	bl	800143c <HAL_GetTick>
 80025b2:	4602      	mov	r2, r0
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	1ad3      	subs	r3, r2, r3
 80025b8:	2b02      	cmp	r3, #2
 80025ba:	d901      	bls.n	80025c0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80025bc:	2303      	movs	r3, #3
 80025be:	e2e7      	b.n	8002b90 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80025c0:	4b2a      	ldr	r3, [pc, #168]	; (800266c <HAL_RCC_OscConfig+0x298>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f003 0302 	and.w	r3, r3, #2
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d1f0      	bne.n	80025ae <HAL_RCC_OscConfig+0x1da>
 80025cc:	e000      	b.n	80025d0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80025ce:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f003 0301 	and.w	r3, r3, #1
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d074      	beq.n	80026c6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80025dc:	69bb      	ldr	r3, [r7, #24]
 80025de:	2b08      	cmp	r3, #8
 80025e0:	d005      	beq.n	80025ee <HAL_RCC_OscConfig+0x21a>
 80025e2:	69bb      	ldr	r3, [r7, #24]
 80025e4:	2b0c      	cmp	r3, #12
 80025e6:	d10e      	bne.n	8002606 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	2b03      	cmp	r3, #3
 80025ec:	d10b      	bne.n	8002606 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025ee:	4b1f      	ldr	r3, [pc, #124]	; (800266c <HAL_RCC_OscConfig+0x298>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d064      	beq.n	80026c4 <HAL_RCC_OscConfig+0x2f0>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d160      	bne.n	80026c4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e2c4      	b.n	8002b90 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800260e:	d106      	bne.n	800261e <HAL_RCC_OscConfig+0x24a>
 8002610:	4b16      	ldr	r3, [pc, #88]	; (800266c <HAL_RCC_OscConfig+0x298>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a15      	ldr	r2, [pc, #84]	; (800266c <HAL_RCC_OscConfig+0x298>)
 8002616:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800261a:	6013      	str	r3, [r2, #0]
 800261c:	e01d      	b.n	800265a <HAL_RCC_OscConfig+0x286>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002626:	d10c      	bne.n	8002642 <HAL_RCC_OscConfig+0x26e>
 8002628:	4b10      	ldr	r3, [pc, #64]	; (800266c <HAL_RCC_OscConfig+0x298>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a0f      	ldr	r2, [pc, #60]	; (800266c <HAL_RCC_OscConfig+0x298>)
 800262e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002632:	6013      	str	r3, [r2, #0]
 8002634:	4b0d      	ldr	r3, [pc, #52]	; (800266c <HAL_RCC_OscConfig+0x298>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a0c      	ldr	r2, [pc, #48]	; (800266c <HAL_RCC_OscConfig+0x298>)
 800263a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800263e:	6013      	str	r3, [r2, #0]
 8002640:	e00b      	b.n	800265a <HAL_RCC_OscConfig+0x286>
 8002642:	4b0a      	ldr	r3, [pc, #40]	; (800266c <HAL_RCC_OscConfig+0x298>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a09      	ldr	r2, [pc, #36]	; (800266c <HAL_RCC_OscConfig+0x298>)
 8002648:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800264c:	6013      	str	r3, [r2, #0]
 800264e:	4b07      	ldr	r3, [pc, #28]	; (800266c <HAL_RCC_OscConfig+0x298>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a06      	ldr	r2, [pc, #24]	; (800266c <HAL_RCC_OscConfig+0x298>)
 8002654:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002658:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d01c      	beq.n	800269c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002662:	f7fe feeb 	bl	800143c <HAL_GetTick>
 8002666:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002668:	e011      	b.n	800268e <HAL_RCC_OscConfig+0x2ba>
 800266a:	bf00      	nop
 800266c:	40021000 	.word	0x40021000
 8002670:	0800636c 	.word	0x0800636c
 8002674:	20000000 	.word	0x20000000
 8002678:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800267c:	f7fe fede 	bl	800143c <HAL_GetTick>
 8002680:	4602      	mov	r2, r0
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	1ad3      	subs	r3, r2, r3
 8002686:	2b64      	cmp	r3, #100	; 0x64
 8002688:	d901      	bls.n	800268e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800268a:	2303      	movs	r3, #3
 800268c:	e280      	b.n	8002b90 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800268e:	4baf      	ldr	r3, [pc, #700]	; (800294c <HAL_RCC_OscConfig+0x578>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002696:	2b00      	cmp	r3, #0
 8002698:	d0f0      	beq.n	800267c <HAL_RCC_OscConfig+0x2a8>
 800269a:	e014      	b.n	80026c6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800269c:	f7fe fece 	bl	800143c <HAL_GetTick>
 80026a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80026a2:	e008      	b.n	80026b6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026a4:	f7fe feca 	bl	800143c <HAL_GetTick>
 80026a8:	4602      	mov	r2, r0
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	1ad3      	subs	r3, r2, r3
 80026ae:	2b64      	cmp	r3, #100	; 0x64
 80026b0:	d901      	bls.n	80026b6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80026b2:	2303      	movs	r3, #3
 80026b4:	e26c      	b.n	8002b90 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80026b6:	4ba5      	ldr	r3, [pc, #660]	; (800294c <HAL_RCC_OscConfig+0x578>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d1f0      	bne.n	80026a4 <HAL_RCC_OscConfig+0x2d0>
 80026c2:	e000      	b.n	80026c6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 0302 	and.w	r3, r3, #2
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d060      	beq.n	8002794 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80026d2:	69bb      	ldr	r3, [r7, #24]
 80026d4:	2b04      	cmp	r3, #4
 80026d6:	d005      	beq.n	80026e4 <HAL_RCC_OscConfig+0x310>
 80026d8:	69bb      	ldr	r3, [r7, #24]
 80026da:	2b0c      	cmp	r3, #12
 80026dc:	d119      	bne.n	8002712 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	2b02      	cmp	r3, #2
 80026e2:	d116      	bne.n	8002712 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026e4:	4b99      	ldr	r3, [pc, #612]	; (800294c <HAL_RCC_OscConfig+0x578>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d005      	beq.n	80026fc <HAL_RCC_OscConfig+0x328>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	68db      	ldr	r3, [r3, #12]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d101      	bne.n	80026fc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80026f8:	2301      	movs	r3, #1
 80026fa:	e249      	b.n	8002b90 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026fc:	4b93      	ldr	r3, [pc, #588]	; (800294c <HAL_RCC_OscConfig+0x578>)
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	691b      	ldr	r3, [r3, #16]
 8002708:	061b      	lsls	r3, r3, #24
 800270a:	4990      	ldr	r1, [pc, #576]	; (800294c <HAL_RCC_OscConfig+0x578>)
 800270c:	4313      	orrs	r3, r2
 800270e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002710:	e040      	b.n	8002794 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	68db      	ldr	r3, [r3, #12]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d023      	beq.n	8002762 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800271a:	4b8c      	ldr	r3, [pc, #560]	; (800294c <HAL_RCC_OscConfig+0x578>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a8b      	ldr	r2, [pc, #556]	; (800294c <HAL_RCC_OscConfig+0x578>)
 8002720:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002724:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002726:	f7fe fe89 	bl	800143c <HAL_GetTick>
 800272a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800272c:	e008      	b.n	8002740 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800272e:	f7fe fe85 	bl	800143c <HAL_GetTick>
 8002732:	4602      	mov	r2, r0
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	1ad3      	subs	r3, r2, r3
 8002738:	2b02      	cmp	r3, #2
 800273a:	d901      	bls.n	8002740 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800273c:	2303      	movs	r3, #3
 800273e:	e227      	b.n	8002b90 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002740:	4b82      	ldr	r3, [pc, #520]	; (800294c <HAL_RCC_OscConfig+0x578>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002748:	2b00      	cmp	r3, #0
 800274a:	d0f0      	beq.n	800272e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800274c:	4b7f      	ldr	r3, [pc, #508]	; (800294c <HAL_RCC_OscConfig+0x578>)
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	691b      	ldr	r3, [r3, #16]
 8002758:	061b      	lsls	r3, r3, #24
 800275a:	497c      	ldr	r1, [pc, #496]	; (800294c <HAL_RCC_OscConfig+0x578>)
 800275c:	4313      	orrs	r3, r2
 800275e:	604b      	str	r3, [r1, #4]
 8002760:	e018      	b.n	8002794 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002762:	4b7a      	ldr	r3, [pc, #488]	; (800294c <HAL_RCC_OscConfig+0x578>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a79      	ldr	r2, [pc, #484]	; (800294c <HAL_RCC_OscConfig+0x578>)
 8002768:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800276c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800276e:	f7fe fe65 	bl	800143c <HAL_GetTick>
 8002772:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002774:	e008      	b.n	8002788 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002776:	f7fe fe61 	bl	800143c <HAL_GetTick>
 800277a:	4602      	mov	r2, r0
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	1ad3      	subs	r3, r2, r3
 8002780:	2b02      	cmp	r3, #2
 8002782:	d901      	bls.n	8002788 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002784:	2303      	movs	r3, #3
 8002786:	e203      	b.n	8002b90 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002788:	4b70      	ldr	r3, [pc, #448]	; (800294c <HAL_RCC_OscConfig+0x578>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002790:	2b00      	cmp	r3, #0
 8002792:	d1f0      	bne.n	8002776 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 0308 	and.w	r3, r3, #8
 800279c:	2b00      	cmp	r3, #0
 800279e:	d03c      	beq.n	800281a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	695b      	ldr	r3, [r3, #20]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d01c      	beq.n	80027e2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027a8:	4b68      	ldr	r3, [pc, #416]	; (800294c <HAL_RCC_OscConfig+0x578>)
 80027aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027ae:	4a67      	ldr	r2, [pc, #412]	; (800294c <HAL_RCC_OscConfig+0x578>)
 80027b0:	f043 0301 	orr.w	r3, r3, #1
 80027b4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027b8:	f7fe fe40 	bl	800143c <HAL_GetTick>
 80027bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80027be:	e008      	b.n	80027d2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027c0:	f7fe fe3c 	bl	800143c <HAL_GetTick>
 80027c4:	4602      	mov	r2, r0
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	1ad3      	subs	r3, r2, r3
 80027ca:	2b02      	cmp	r3, #2
 80027cc:	d901      	bls.n	80027d2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80027ce:	2303      	movs	r3, #3
 80027d0:	e1de      	b.n	8002b90 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80027d2:	4b5e      	ldr	r3, [pc, #376]	; (800294c <HAL_RCC_OscConfig+0x578>)
 80027d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027d8:	f003 0302 	and.w	r3, r3, #2
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d0ef      	beq.n	80027c0 <HAL_RCC_OscConfig+0x3ec>
 80027e0:	e01b      	b.n	800281a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027e2:	4b5a      	ldr	r3, [pc, #360]	; (800294c <HAL_RCC_OscConfig+0x578>)
 80027e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027e8:	4a58      	ldr	r2, [pc, #352]	; (800294c <HAL_RCC_OscConfig+0x578>)
 80027ea:	f023 0301 	bic.w	r3, r3, #1
 80027ee:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027f2:	f7fe fe23 	bl	800143c <HAL_GetTick>
 80027f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80027f8:	e008      	b.n	800280c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027fa:	f7fe fe1f 	bl	800143c <HAL_GetTick>
 80027fe:	4602      	mov	r2, r0
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	1ad3      	subs	r3, r2, r3
 8002804:	2b02      	cmp	r3, #2
 8002806:	d901      	bls.n	800280c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002808:	2303      	movs	r3, #3
 800280a:	e1c1      	b.n	8002b90 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800280c:	4b4f      	ldr	r3, [pc, #316]	; (800294c <HAL_RCC_OscConfig+0x578>)
 800280e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002812:	f003 0302 	and.w	r3, r3, #2
 8002816:	2b00      	cmp	r3, #0
 8002818:	d1ef      	bne.n	80027fa <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 0304 	and.w	r3, r3, #4
 8002822:	2b00      	cmp	r3, #0
 8002824:	f000 80a6 	beq.w	8002974 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002828:	2300      	movs	r3, #0
 800282a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800282c:	4b47      	ldr	r3, [pc, #284]	; (800294c <HAL_RCC_OscConfig+0x578>)
 800282e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002830:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002834:	2b00      	cmp	r3, #0
 8002836:	d10d      	bne.n	8002854 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002838:	4b44      	ldr	r3, [pc, #272]	; (800294c <HAL_RCC_OscConfig+0x578>)
 800283a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800283c:	4a43      	ldr	r2, [pc, #268]	; (800294c <HAL_RCC_OscConfig+0x578>)
 800283e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002842:	6593      	str	r3, [r2, #88]	; 0x58
 8002844:	4b41      	ldr	r3, [pc, #260]	; (800294c <HAL_RCC_OscConfig+0x578>)
 8002846:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002848:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800284c:	60bb      	str	r3, [r7, #8]
 800284e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002850:	2301      	movs	r3, #1
 8002852:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002854:	4b3e      	ldr	r3, [pc, #248]	; (8002950 <HAL_RCC_OscConfig+0x57c>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800285c:	2b00      	cmp	r3, #0
 800285e:	d118      	bne.n	8002892 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002860:	4b3b      	ldr	r3, [pc, #236]	; (8002950 <HAL_RCC_OscConfig+0x57c>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a3a      	ldr	r2, [pc, #232]	; (8002950 <HAL_RCC_OscConfig+0x57c>)
 8002866:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800286a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800286c:	f7fe fde6 	bl	800143c <HAL_GetTick>
 8002870:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002872:	e008      	b.n	8002886 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002874:	f7fe fde2 	bl	800143c <HAL_GetTick>
 8002878:	4602      	mov	r2, r0
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	1ad3      	subs	r3, r2, r3
 800287e:	2b02      	cmp	r3, #2
 8002880:	d901      	bls.n	8002886 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002882:	2303      	movs	r3, #3
 8002884:	e184      	b.n	8002b90 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002886:	4b32      	ldr	r3, [pc, #200]	; (8002950 <HAL_RCC_OscConfig+0x57c>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800288e:	2b00      	cmp	r3, #0
 8002890:	d0f0      	beq.n	8002874 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	2b01      	cmp	r3, #1
 8002898:	d108      	bne.n	80028ac <HAL_RCC_OscConfig+0x4d8>
 800289a:	4b2c      	ldr	r3, [pc, #176]	; (800294c <HAL_RCC_OscConfig+0x578>)
 800289c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028a0:	4a2a      	ldr	r2, [pc, #168]	; (800294c <HAL_RCC_OscConfig+0x578>)
 80028a2:	f043 0301 	orr.w	r3, r3, #1
 80028a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80028aa:	e024      	b.n	80028f6 <HAL_RCC_OscConfig+0x522>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	2b05      	cmp	r3, #5
 80028b2:	d110      	bne.n	80028d6 <HAL_RCC_OscConfig+0x502>
 80028b4:	4b25      	ldr	r3, [pc, #148]	; (800294c <HAL_RCC_OscConfig+0x578>)
 80028b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028ba:	4a24      	ldr	r2, [pc, #144]	; (800294c <HAL_RCC_OscConfig+0x578>)
 80028bc:	f043 0304 	orr.w	r3, r3, #4
 80028c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80028c4:	4b21      	ldr	r3, [pc, #132]	; (800294c <HAL_RCC_OscConfig+0x578>)
 80028c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028ca:	4a20      	ldr	r2, [pc, #128]	; (800294c <HAL_RCC_OscConfig+0x578>)
 80028cc:	f043 0301 	orr.w	r3, r3, #1
 80028d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80028d4:	e00f      	b.n	80028f6 <HAL_RCC_OscConfig+0x522>
 80028d6:	4b1d      	ldr	r3, [pc, #116]	; (800294c <HAL_RCC_OscConfig+0x578>)
 80028d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028dc:	4a1b      	ldr	r2, [pc, #108]	; (800294c <HAL_RCC_OscConfig+0x578>)
 80028de:	f023 0301 	bic.w	r3, r3, #1
 80028e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80028e6:	4b19      	ldr	r3, [pc, #100]	; (800294c <HAL_RCC_OscConfig+0x578>)
 80028e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028ec:	4a17      	ldr	r2, [pc, #92]	; (800294c <HAL_RCC_OscConfig+0x578>)
 80028ee:	f023 0304 	bic.w	r3, r3, #4
 80028f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d016      	beq.n	800292c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028fe:	f7fe fd9d 	bl	800143c <HAL_GetTick>
 8002902:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002904:	e00a      	b.n	800291c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002906:	f7fe fd99 	bl	800143c <HAL_GetTick>
 800290a:	4602      	mov	r2, r0
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	1ad3      	subs	r3, r2, r3
 8002910:	f241 3288 	movw	r2, #5000	; 0x1388
 8002914:	4293      	cmp	r3, r2
 8002916:	d901      	bls.n	800291c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002918:	2303      	movs	r3, #3
 800291a:	e139      	b.n	8002b90 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800291c:	4b0b      	ldr	r3, [pc, #44]	; (800294c <HAL_RCC_OscConfig+0x578>)
 800291e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002922:	f003 0302 	and.w	r3, r3, #2
 8002926:	2b00      	cmp	r3, #0
 8002928:	d0ed      	beq.n	8002906 <HAL_RCC_OscConfig+0x532>
 800292a:	e01a      	b.n	8002962 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800292c:	f7fe fd86 	bl	800143c <HAL_GetTick>
 8002930:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002932:	e00f      	b.n	8002954 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002934:	f7fe fd82 	bl	800143c <HAL_GetTick>
 8002938:	4602      	mov	r2, r0
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002942:	4293      	cmp	r3, r2
 8002944:	d906      	bls.n	8002954 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002946:	2303      	movs	r3, #3
 8002948:	e122      	b.n	8002b90 <HAL_RCC_OscConfig+0x7bc>
 800294a:	bf00      	nop
 800294c:	40021000 	.word	0x40021000
 8002950:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002954:	4b90      	ldr	r3, [pc, #576]	; (8002b98 <HAL_RCC_OscConfig+0x7c4>)
 8002956:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800295a:	f003 0302 	and.w	r3, r3, #2
 800295e:	2b00      	cmp	r3, #0
 8002960:	d1e8      	bne.n	8002934 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002962:	7ffb      	ldrb	r3, [r7, #31]
 8002964:	2b01      	cmp	r3, #1
 8002966:	d105      	bne.n	8002974 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002968:	4b8b      	ldr	r3, [pc, #556]	; (8002b98 <HAL_RCC_OscConfig+0x7c4>)
 800296a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800296c:	4a8a      	ldr	r2, [pc, #552]	; (8002b98 <HAL_RCC_OscConfig+0x7c4>)
 800296e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002972:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002978:	2b00      	cmp	r3, #0
 800297a:	f000 8108 	beq.w	8002b8e <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002982:	2b02      	cmp	r3, #2
 8002984:	f040 80d0 	bne.w	8002b28 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002988:	4b83      	ldr	r3, [pc, #524]	; (8002b98 <HAL_RCC_OscConfig+0x7c4>)
 800298a:	68db      	ldr	r3, [r3, #12]
 800298c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	f003 0203 	and.w	r2, r3, #3
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002998:	429a      	cmp	r2, r3
 800299a:	d130      	bne.n	80029fe <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a6:	3b01      	subs	r3, #1
 80029a8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80029aa:	429a      	cmp	r2, r3
 80029ac:	d127      	bne.n	80029fe <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029b8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80029ba:	429a      	cmp	r2, r3
 80029bc:	d11f      	bne.n	80029fe <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029c4:	687a      	ldr	r2, [r7, #4]
 80029c6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80029c8:	2a07      	cmp	r2, #7
 80029ca:	bf14      	ite	ne
 80029cc:	2201      	movne	r2, #1
 80029ce:	2200      	moveq	r2, #0
 80029d0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d113      	bne.n	80029fe <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029e0:	085b      	lsrs	r3, r3, #1
 80029e2:	3b01      	subs	r3, #1
 80029e4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80029e6:	429a      	cmp	r2, r3
 80029e8:	d109      	bne.n	80029fe <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f4:	085b      	lsrs	r3, r3, #1
 80029f6:	3b01      	subs	r3, #1
 80029f8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029fa:	429a      	cmp	r2, r3
 80029fc:	d06e      	beq.n	8002adc <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80029fe:	69bb      	ldr	r3, [r7, #24]
 8002a00:	2b0c      	cmp	r3, #12
 8002a02:	d069      	beq.n	8002ad8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002a04:	4b64      	ldr	r3, [pc, #400]	; (8002b98 <HAL_RCC_OscConfig+0x7c4>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d105      	bne.n	8002a1c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002a10:	4b61      	ldr	r3, [pc, #388]	; (8002b98 <HAL_RCC_OscConfig+0x7c4>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d001      	beq.n	8002a20 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	e0b7      	b.n	8002b90 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002a20:	4b5d      	ldr	r3, [pc, #372]	; (8002b98 <HAL_RCC_OscConfig+0x7c4>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a5c      	ldr	r2, [pc, #368]	; (8002b98 <HAL_RCC_OscConfig+0x7c4>)
 8002a26:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a2a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002a2c:	f7fe fd06 	bl	800143c <HAL_GetTick>
 8002a30:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a32:	e008      	b.n	8002a46 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a34:	f7fe fd02 	bl	800143c <HAL_GetTick>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	1ad3      	subs	r3, r2, r3
 8002a3e:	2b02      	cmp	r3, #2
 8002a40:	d901      	bls.n	8002a46 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002a42:	2303      	movs	r3, #3
 8002a44:	e0a4      	b.n	8002b90 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a46:	4b54      	ldr	r3, [pc, #336]	; (8002b98 <HAL_RCC_OscConfig+0x7c4>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d1f0      	bne.n	8002a34 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a52:	4b51      	ldr	r3, [pc, #324]	; (8002b98 <HAL_RCC_OscConfig+0x7c4>)
 8002a54:	68da      	ldr	r2, [r3, #12]
 8002a56:	4b51      	ldr	r3, [pc, #324]	; (8002b9c <HAL_RCC_OscConfig+0x7c8>)
 8002a58:	4013      	ands	r3, r2
 8002a5a:	687a      	ldr	r2, [r7, #4]
 8002a5c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002a5e:	687a      	ldr	r2, [r7, #4]
 8002a60:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002a62:	3a01      	subs	r2, #1
 8002a64:	0112      	lsls	r2, r2, #4
 8002a66:	4311      	orrs	r1, r2
 8002a68:	687a      	ldr	r2, [r7, #4]
 8002a6a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002a6c:	0212      	lsls	r2, r2, #8
 8002a6e:	4311      	orrs	r1, r2
 8002a70:	687a      	ldr	r2, [r7, #4]
 8002a72:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002a74:	0852      	lsrs	r2, r2, #1
 8002a76:	3a01      	subs	r2, #1
 8002a78:	0552      	lsls	r2, r2, #21
 8002a7a:	4311      	orrs	r1, r2
 8002a7c:	687a      	ldr	r2, [r7, #4]
 8002a7e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002a80:	0852      	lsrs	r2, r2, #1
 8002a82:	3a01      	subs	r2, #1
 8002a84:	0652      	lsls	r2, r2, #25
 8002a86:	4311      	orrs	r1, r2
 8002a88:	687a      	ldr	r2, [r7, #4]
 8002a8a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002a8c:	0912      	lsrs	r2, r2, #4
 8002a8e:	0452      	lsls	r2, r2, #17
 8002a90:	430a      	orrs	r2, r1
 8002a92:	4941      	ldr	r1, [pc, #260]	; (8002b98 <HAL_RCC_OscConfig+0x7c4>)
 8002a94:	4313      	orrs	r3, r2
 8002a96:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002a98:	4b3f      	ldr	r3, [pc, #252]	; (8002b98 <HAL_RCC_OscConfig+0x7c4>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a3e      	ldr	r2, [pc, #248]	; (8002b98 <HAL_RCC_OscConfig+0x7c4>)
 8002a9e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002aa2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002aa4:	4b3c      	ldr	r3, [pc, #240]	; (8002b98 <HAL_RCC_OscConfig+0x7c4>)
 8002aa6:	68db      	ldr	r3, [r3, #12]
 8002aa8:	4a3b      	ldr	r2, [pc, #236]	; (8002b98 <HAL_RCC_OscConfig+0x7c4>)
 8002aaa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002aae:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002ab0:	f7fe fcc4 	bl	800143c <HAL_GetTick>
 8002ab4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ab6:	e008      	b.n	8002aca <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ab8:	f7fe fcc0 	bl	800143c <HAL_GetTick>
 8002abc:	4602      	mov	r2, r0
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	1ad3      	subs	r3, r2, r3
 8002ac2:	2b02      	cmp	r3, #2
 8002ac4:	d901      	bls.n	8002aca <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002ac6:	2303      	movs	r3, #3
 8002ac8:	e062      	b.n	8002b90 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002aca:	4b33      	ldr	r3, [pc, #204]	; (8002b98 <HAL_RCC_OscConfig+0x7c4>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d0f0      	beq.n	8002ab8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ad6:	e05a      	b.n	8002b8e <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	e059      	b.n	8002b90 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002adc:	4b2e      	ldr	r3, [pc, #184]	; (8002b98 <HAL_RCC_OscConfig+0x7c4>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d152      	bne.n	8002b8e <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002ae8:	4b2b      	ldr	r3, [pc, #172]	; (8002b98 <HAL_RCC_OscConfig+0x7c4>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a2a      	ldr	r2, [pc, #168]	; (8002b98 <HAL_RCC_OscConfig+0x7c4>)
 8002aee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002af2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002af4:	4b28      	ldr	r3, [pc, #160]	; (8002b98 <HAL_RCC_OscConfig+0x7c4>)
 8002af6:	68db      	ldr	r3, [r3, #12]
 8002af8:	4a27      	ldr	r2, [pc, #156]	; (8002b98 <HAL_RCC_OscConfig+0x7c4>)
 8002afa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002afe:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002b00:	f7fe fc9c 	bl	800143c <HAL_GetTick>
 8002b04:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b06:	e008      	b.n	8002b1a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b08:	f7fe fc98 	bl	800143c <HAL_GetTick>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	1ad3      	subs	r3, r2, r3
 8002b12:	2b02      	cmp	r3, #2
 8002b14:	d901      	bls.n	8002b1a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002b16:	2303      	movs	r3, #3
 8002b18:	e03a      	b.n	8002b90 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b1a:	4b1f      	ldr	r3, [pc, #124]	; (8002b98 <HAL_RCC_OscConfig+0x7c4>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d0f0      	beq.n	8002b08 <HAL_RCC_OscConfig+0x734>
 8002b26:	e032      	b.n	8002b8e <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b28:	69bb      	ldr	r3, [r7, #24]
 8002b2a:	2b0c      	cmp	r3, #12
 8002b2c:	d02d      	beq.n	8002b8a <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b2e:	4b1a      	ldr	r3, [pc, #104]	; (8002b98 <HAL_RCC_OscConfig+0x7c4>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a19      	ldr	r2, [pc, #100]	; (8002b98 <HAL_RCC_OscConfig+0x7c4>)
 8002b34:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b38:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002b3a:	4b17      	ldr	r3, [pc, #92]	; (8002b98 <HAL_RCC_OscConfig+0x7c4>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d105      	bne.n	8002b52 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002b46:	4b14      	ldr	r3, [pc, #80]	; (8002b98 <HAL_RCC_OscConfig+0x7c4>)
 8002b48:	68db      	ldr	r3, [r3, #12]
 8002b4a:	4a13      	ldr	r2, [pc, #76]	; (8002b98 <HAL_RCC_OscConfig+0x7c4>)
 8002b4c:	f023 0303 	bic.w	r3, r3, #3
 8002b50:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002b52:	4b11      	ldr	r3, [pc, #68]	; (8002b98 <HAL_RCC_OscConfig+0x7c4>)
 8002b54:	68db      	ldr	r3, [r3, #12]
 8002b56:	4a10      	ldr	r2, [pc, #64]	; (8002b98 <HAL_RCC_OscConfig+0x7c4>)
 8002b58:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002b5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b60:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b62:	f7fe fc6b 	bl	800143c <HAL_GetTick>
 8002b66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b68:	e008      	b.n	8002b7c <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b6a:	f7fe fc67 	bl	800143c <HAL_GetTick>
 8002b6e:	4602      	mov	r2, r0
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	1ad3      	subs	r3, r2, r3
 8002b74:	2b02      	cmp	r3, #2
 8002b76:	d901      	bls.n	8002b7c <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8002b78:	2303      	movs	r3, #3
 8002b7a:	e009      	b.n	8002b90 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b7c:	4b06      	ldr	r3, [pc, #24]	; (8002b98 <HAL_RCC_OscConfig+0x7c4>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d1f0      	bne.n	8002b6a <HAL_RCC_OscConfig+0x796>
 8002b88:	e001      	b.n	8002b8e <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e000      	b.n	8002b90 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8002b8e:	2300      	movs	r3, #0
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	3720      	adds	r7, #32
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}
 8002b98:	40021000 	.word	0x40021000
 8002b9c:	f99d808c 	.word	0xf99d808c

08002ba0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b084      	sub	sp, #16
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
 8002ba8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d101      	bne.n	8002bb4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	e0c8      	b.n	8002d46 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002bb4:	4b66      	ldr	r3, [pc, #408]	; (8002d50 <HAL_RCC_ClockConfig+0x1b0>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f003 0307 	and.w	r3, r3, #7
 8002bbc:	683a      	ldr	r2, [r7, #0]
 8002bbe:	429a      	cmp	r2, r3
 8002bc0:	d910      	bls.n	8002be4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bc2:	4b63      	ldr	r3, [pc, #396]	; (8002d50 <HAL_RCC_ClockConfig+0x1b0>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f023 0207 	bic.w	r2, r3, #7
 8002bca:	4961      	ldr	r1, [pc, #388]	; (8002d50 <HAL_RCC_ClockConfig+0x1b0>)
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bd2:	4b5f      	ldr	r3, [pc, #380]	; (8002d50 <HAL_RCC_ClockConfig+0x1b0>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 0307 	and.w	r3, r3, #7
 8002bda:	683a      	ldr	r2, [r7, #0]
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d001      	beq.n	8002be4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	e0b0      	b.n	8002d46 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f003 0301 	and.w	r3, r3, #1
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d04c      	beq.n	8002c8a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	2b03      	cmp	r3, #3
 8002bf6:	d107      	bne.n	8002c08 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bf8:	4b56      	ldr	r3, [pc, #344]	; (8002d54 <HAL_RCC_ClockConfig+0x1b4>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d121      	bne.n	8002c48 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002c04:	2301      	movs	r3, #1
 8002c06:	e09e      	b.n	8002d46 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	2b02      	cmp	r3, #2
 8002c0e:	d107      	bne.n	8002c20 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c10:	4b50      	ldr	r3, [pc, #320]	; (8002d54 <HAL_RCC_ClockConfig+0x1b4>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d115      	bne.n	8002c48 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	e092      	b.n	8002d46 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d107      	bne.n	8002c38 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c28:	4b4a      	ldr	r3, [pc, #296]	; (8002d54 <HAL_RCC_ClockConfig+0x1b4>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 0302 	and.w	r3, r3, #2
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d109      	bne.n	8002c48 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	e086      	b.n	8002d46 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c38:	4b46      	ldr	r3, [pc, #280]	; (8002d54 <HAL_RCC_ClockConfig+0x1b4>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d101      	bne.n	8002c48 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	e07e      	b.n	8002d46 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002c48:	4b42      	ldr	r3, [pc, #264]	; (8002d54 <HAL_RCC_ClockConfig+0x1b4>)
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	f023 0203 	bic.w	r2, r3, #3
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	493f      	ldr	r1, [pc, #252]	; (8002d54 <HAL_RCC_ClockConfig+0x1b4>)
 8002c56:	4313      	orrs	r3, r2
 8002c58:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c5a:	f7fe fbef 	bl	800143c <HAL_GetTick>
 8002c5e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c60:	e00a      	b.n	8002c78 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c62:	f7fe fbeb 	bl	800143c <HAL_GetTick>
 8002c66:	4602      	mov	r2, r0
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	1ad3      	subs	r3, r2, r3
 8002c6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d901      	bls.n	8002c78 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002c74:	2303      	movs	r3, #3
 8002c76:	e066      	b.n	8002d46 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c78:	4b36      	ldr	r3, [pc, #216]	; (8002d54 <HAL_RCC_ClockConfig+0x1b4>)
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	f003 020c 	and.w	r2, r3, #12
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	009b      	lsls	r3, r3, #2
 8002c86:	429a      	cmp	r2, r3
 8002c88:	d1eb      	bne.n	8002c62 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 0302 	and.w	r3, r3, #2
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d008      	beq.n	8002ca8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c96:	4b2f      	ldr	r3, [pc, #188]	; (8002d54 <HAL_RCC_ClockConfig+0x1b4>)
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	492c      	ldr	r1, [pc, #176]	; (8002d54 <HAL_RCC_ClockConfig+0x1b4>)
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ca8:	4b29      	ldr	r3, [pc, #164]	; (8002d50 <HAL_RCC_ClockConfig+0x1b0>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f003 0307 	and.w	r3, r3, #7
 8002cb0:	683a      	ldr	r2, [r7, #0]
 8002cb2:	429a      	cmp	r2, r3
 8002cb4:	d210      	bcs.n	8002cd8 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cb6:	4b26      	ldr	r3, [pc, #152]	; (8002d50 <HAL_RCC_ClockConfig+0x1b0>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f023 0207 	bic.w	r2, r3, #7
 8002cbe:	4924      	ldr	r1, [pc, #144]	; (8002d50 <HAL_RCC_ClockConfig+0x1b0>)
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cc6:	4b22      	ldr	r3, [pc, #136]	; (8002d50 <HAL_RCC_ClockConfig+0x1b0>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 0307 	and.w	r3, r3, #7
 8002cce:	683a      	ldr	r2, [r7, #0]
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	d001      	beq.n	8002cd8 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	e036      	b.n	8002d46 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f003 0304 	and.w	r3, r3, #4
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d008      	beq.n	8002cf6 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ce4:	4b1b      	ldr	r3, [pc, #108]	; (8002d54 <HAL_RCC_ClockConfig+0x1b4>)
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	68db      	ldr	r3, [r3, #12]
 8002cf0:	4918      	ldr	r1, [pc, #96]	; (8002d54 <HAL_RCC_ClockConfig+0x1b4>)
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f003 0308 	and.w	r3, r3, #8
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d009      	beq.n	8002d16 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d02:	4b14      	ldr	r3, [pc, #80]	; (8002d54 <HAL_RCC_ClockConfig+0x1b4>)
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	691b      	ldr	r3, [r3, #16]
 8002d0e:	00db      	lsls	r3, r3, #3
 8002d10:	4910      	ldr	r1, [pc, #64]	; (8002d54 <HAL_RCC_ClockConfig+0x1b4>)
 8002d12:	4313      	orrs	r3, r2
 8002d14:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002d16:	f000 f825 	bl	8002d64 <HAL_RCC_GetSysClockFreq>
 8002d1a:	4602      	mov	r2, r0
 8002d1c:	4b0d      	ldr	r3, [pc, #52]	; (8002d54 <HAL_RCC_ClockConfig+0x1b4>)
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	091b      	lsrs	r3, r3, #4
 8002d22:	f003 030f 	and.w	r3, r3, #15
 8002d26:	490c      	ldr	r1, [pc, #48]	; (8002d58 <HAL_RCC_ClockConfig+0x1b8>)
 8002d28:	5ccb      	ldrb	r3, [r1, r3]
 8002d2a:	f003 031f 	and.w	r3, r3, #31
 8002d2e:	fa22 f303 	lsr.w	r3, r2, r3
 8002d32:	4a0a      	ldr	r2, [pc, #40]	; (8002d5c <HAL_RCC_ClockConfig+0x1bc>)
 8002d34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002d36:	4b0a      	ldr	r3, [pc, #40]	; (8002d60 <HAL_RCC_ClockConfig+0x1c0>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f7fe f8a8 	bl	8000e90 <HAL_InitTick>
 8002d40:	4603      	mov	r3, r0
 8002d42:	72fb      	strb	r3, [r7, #11]

  return status;
 8002d44:	7afb      	ldrb	r3, [r7, #11]
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	3710      	adds	r7, #16
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}
 8002d4e:	bf00      	nop
 8002d50:	40022000 	.word	0x40022000
 8002d54:	40021000 	.word	0x40021000
 8002d58:	0800636c 	.word	0x0800636c
 8002d5c:	20000000 	.word	0x20000000
 8002d60:	20000004 	.word	0x20000004

08002d64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b089      	sub	sp, #36	; 0x24
 8002d68:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	61fb      	str	r3, [r7, #28]
 8002d6e:	2300      	movs	r3, #0
 8002d70:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d72:	4b3e      	ldr	r3, [pc, #248]	; (8002e6c <HAL_RCC_GetSysClockFreq+0x108>)
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	f003 030c 	and.w	r3, r3, #12
 8002d7a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d7c:	4b3b      	ldr	r3, [pc, #236]	; (8002e6c <HAL_RCC_GetSysClockFreq+0x108>)
 8002d7e:	68db      	ldr	r3, [r3, #12]
 8002d80:	f003 0303 	and.w	r3, r3, #3
 8002d84:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d005      	beq.n	8002d98 <HAL_RCC_GetSysClockFreq+0x34>
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	2b0c      	cmp	r3, #12
 8002d90:	d121      	bne.n	8002dd6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d11e      	bne.n	8002dd6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002d98:	4b34      	ldr	r3, [pc, #208]	; (8002e6c <HAL_RCC_GetSysClockFreq+0x108>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f003 0308 	and.w	r3, r3, #8
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d107      	bne.n	8002db4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002da4:	4b31      	ldr	r3, [pc, #196]	; (8002e6c <HAL_RCC_GetSysClockFreq+0x108>)
 8002da6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002daa:	0a1b      	lsrs	r3, r3, #8
 8002dac:	f003 030f 	and.w	r3, r3, #15
 8002db0:	61fb      	str	r3, [r7, #28]
 8002db2:	e005      	b.n	8002dc0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002db4:	4b2d      	ldr	r3, [pc, #180]	; (8002e6c <HAL_RCC_GetSysClockFreq+0x108>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	091b      	lsrs	r3, r3, #4
 8002dba:	f003 030f 	and.w	r3, r3, #15
 8002dbe:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002dc0:	4a2b      	ldr	r2, [pc, #172]	; (8002e70 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002dc2:	69fb      	ldr	r3, [r7, #28]
 8002dc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dc8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d10d      	bne.n	8002dec <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002dd0:	69fb      	ldr	r3, [r7, #28]
 8002dd2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002dd4:	e00a      	b.n	8002dec <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	2b04      	cmp	r3, #4
 8002dda:	d102      	bne.n	8002de2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002ddc:	4b25      	ldr	r3, [pc, #148]	; (8002e74 <HAL_RCC_GetSysClockFreq+0x110>)
 8002dde:	61bb      	str	r3, [r7, #24]
 8002de0:	e004      	b.n	8002dec <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	2b08      	cmp	r3, #8
 8002de6:	d101      	bne.n	8002dec <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002de8:	4b23      	ldr	r3, [pc, #140]	; (8002e78 <HAL_RCC_GetSysClockFreq+0x114>)
 8002dea:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	2b0c      	cmp	r3, #12
 8002df0:	d134      	bne.n	8002e5c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002df2:	4b1e      	ldr	r3, [pc, #120]	; (8002e6c <HAL_RCC_GetSysClockFreq+0x108>)
 8002df4:	68db      	ldr	r3, [r3, #12]
 8002df6:	f003 0303 	and.w	r3, r3, #3
 8002dfa:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	2b02      	cmp	r3, #2
 8002e00:	d003      	beq.n	8002e0a <HAL_RCC_GetSysClockFreq+0xa6>
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	2b03      	cmp	r3, #3
 8002e06:	d003      	beq.n	8002e10 <HAL_RCC_GetSysClockFreq+0xac>
 8002e08:	e005      	b.n	8002e16 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002e0a:	4b1a      	ldr	r3, [pc, #104]	; (8002e74 <HAL_RCC_GetSysClockFreq+0x110>)
 8002e0c:	617b      	str	r3, [r7, #20]
      break;
 8002e0e:	e005      	b.n	8002e1c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002e10:	4b19      	ldr	r3, [pc, #100]	; (8002e78 <HAL_RCC_GetSysClockFreq+0x114>)
 8002e12:	617b      	str	r3, [r7, #20]
      break;
 8002e14:	e002      	b.n	8002e1c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002e16:	69fb      	ldr	r3, [r7, #28]
 8002e18:	617b      	str	r3, [r7, #20]
      break;
 8002e1a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002e1c:	4b13      	ldr	r3, [pc, #76]	; (8002e6c <HAL_RCC_GetSysClockFreq+0x108>)
 8002e1e:	68db      	ldr	r3, [r3, #12]
 8002e20:	091b      	lsrs	r3, r3, #4
 8002e22:	f003 0307 	and.w	r3, r3, #7
 8002e26:	3301      	adds	r3, #1
 8002e28:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002e2a:	4b10      	ldr	r3, [pc, #64]	; (8002e6c <HAL_RCC_GetSysClockFreq+0x108>)
 8002e2c:	68db      	ldr	r3, [r3, #12]
 8002e2e:	0a1b      	lsrs	r3, r3, #8
 8002e30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002e34:	697a      	ldr	r2, [r7, #20]
 8002e36:	fb02 f203 	mul.w	r2, r2, r3
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e40:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002e42:	4b0a      	ldr	r3, [pc, #40]	; (8002e6c <HAL_RCC_GetSysClockFreq+0x108>)
 8002e44:	68db      	ldr	r3, [r3, #12]
 8002e46:	0e5b      	lsrs	r3, r3, #25
 8002e48:	f003 0303 	and.w	r3, r3, #3
 8002e4c:	3301      	adds	r3, #1
 8002e4e:	005b      	lsls	r3, r3, #1
 8002e50:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002e52:	697a      	ldr	r2, [r7, #20]
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e5a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002e5c:	69bb      	ldr	r3, [r7, #24]
}
 8002e5e:	4618      	mov	r0, r3
 8002e60:	3724      	adds	r7, #36	; 0x24
 8002e62:	46bd      	mov	sp, r7
 8002e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e68:	4770      	bx	lr
 8002e6a:	bf00      	nop
 8002e6c:	40021000 	.word	0x40021000
 8002e70:	08006384 	.word	0x08006384
 8002e74:	00f42400 	.word	0x00f42400
 8002e78:	007a1200 	.word	0x007a1200

08002e7c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e80:	4b03      	ldr	r3, [pc, #12]	; (8002e90 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e82:	681b      	ldr	r3, [r3, #0]
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr
 8002e8e:	bf00      	nop
 8002e90:	20000000 	.word	0x20000000

08002e94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002e98:	f7ff fff0 	bl	8002e7c <HAL_RCC_GetHCLKFreq>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	4b06      	ldr	r3, [pc, #24]	; (8002eb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	0a1b      	lsrs	r3, r3, #8
 8002ea4:	f003 0307 	and.w	r3, r3, #7
 8002ea8:	4904      	ldr	r1, [pc, #16]	; (8002ebc <HAL_RCC_GetPCLK1Freq+0x28>)
 8002eaa:	5ccb      	ldrb	r3, [r1, r3]
 8002eac:	f003 031f 	and.w	r3, r3, #31
 8002eb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	bd80      	pop	{r7, pc}
 8002eb8:	40021000 	.word	0x40021000
 8002ebc:	0800637c 	.word	0x0800637c

08002ec0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002ec4:	f7ff ffda 	bl	8002e7c <HAL_RCC_GetHCLKFreq>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	4b06      	ldr	r3, [pc, #24]	; (8002ee4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	0adb      	lsrs	r3, r3, #11
 8002ed0:	f003 0307 	and.w	r3, r3, #7
 8002ed4:	4904      	ldr	r1, [pc, #16]	; (8002ee8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002ed6:	5ccb      	ldrb	r3, [r1, r3]
 8002ed8:	f003 031f 	and.w	r3, r3, #31
 8002edc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	bd80      	pop	{r7, pc}
 8002ee4:	40021000 	.word	0x40021000
 8002ee8:	0800637c 	.word	0x0800637c

08002eec <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b083      	sub	sp, #12
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
 8002ef4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	220f      	movs	r2, #15
 8002efa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002efc:	4b12      	ldr	r3, [pc, #72]	; (8002f48 <HAL_RCC_GetClockConfig+0x5c>)
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	f003 0203 	and.w	r2, r3, #3
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002f08:	4b0f      	ldr	r3, [pc, #60]	; (8002f48 <HAL_RCC_GetClockConfig+0x5c>)
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002f14:	4b0c      	ldr	r3, [pc, #48]	; (8002f48 <HAL_RCC_GetClockConfig+0x5c>)
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002f20:	4b09      	ldr	r3, [pc, #36]	; (8002f48 <HAL_RCC_GetClockConfig+0x5c>)
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	08db      	lsrs	r3, r3, #3
 8002f26:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002f2e:	4b07      	ldr	r3, [pc, #28]	; (8002f4c <HAL_RCC_GetClockConfig+0x60>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 0207 	and.w	r2, r3, #7
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	601a      	str	r2, [r3, #0]
}
 8002f3a:	bf00      	nop
 8002f3c:	370c      	adds	r7, #12
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f44:	4770      	bx	lr
 8002f46:	bf00      	nop
 8002f48:	40021000 	.word	0x40021000
 8002f4c:	40022000 	.word	0x40022000

08002f50 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b086      	sub	sp, #24
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002f58:	2300      	movs	r3, #0
 8002f5a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002f5c:	4b2a      	ldr	r3, [pc, #168]	; (8003008 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d003      	beq.n	8002f70 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002f68:	f7ff f904 	bl	8002174 <HAL_PWREx_GetVoltageRange>
 8002f6c:	6178      	str	r0, [r7, #20]
 8002f6e:	e014      	b.n	8002f9a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002f70:	4b25      	ldr	r3, [pc, #148]	; (8003008 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f74:	4a24      	ldr	r2, [pc, #144]	; (8003008 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f7a:	6593      	str	r3, [r2, #88]	; 0x58
 8002f7c:	4b22      	ldr	r3, [pc, #136]	; (8003008 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f84:	60fb      	str	r3, [r7, #12]
 8002f86:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002f88:	f7ff f8f4 	bl	8002174 <HAL_PWREx_GetVoltageRange>
 8002f8c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002f8e:	4b1e      	ldr	r3, [pc, #120]	; (8003008 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f92:	4a1d      	ldr	r2, [pc, #116]	; (8003008 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f98:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fa0:	d10b      	bne.n	8002fba <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2b80      	cmp	r3, #128	; 0x80
 8002fa6:	d919      	bls.n	8002fdc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2ba0      	cmp	r3, #160	; 0xa0
 8002fac:	d902      	bls.n	8002fb4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002fae:	2302      	movs	r3, #2
 8002fb0:	613b      	str	r3, [r7, #16]
 8002fb2:	e013      	b.n	8002fdc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	613b      	str	r3, [r7, #16]
 8002fb8:	e010      	b.n	8002fdc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2b80      	cmp	r3, #128	; 0x80
 8002fbe:	d902      	bls.n	8002fc6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002fc0:	2303      	movs	r3, #3
 8002fc2:	613b      	str	r3, [r7, #16]
 8002fc4:	e00a      	b.n	8002fdc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2b80      	cmp	r3, #128	; 0x80
 8002fca:	d102      	bne.n	8002fd2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002fcc:	2302      	movs	r3, #2
 8002fce:	613b      	str	r3, [r7, #16]
 8002fd0:	e004      	b.n	8002fdc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2b70      	cmp	r3, #112	; 0x70
 8002fd6:	d101      	bne.n	8002fdc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002fd8:	2301      	movs	r3, #1
 8002fda:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002fdc:	4b0b      	ldr	r3, [pc, #44]	; (800300c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f023 0207 	bic.w	r2, r3, #7
 8002fe4:	4909      	ldr	r1, [pc, #36]	; (800300c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002fec:	4b07      	ldr	r3, [pc, #28]	; (800300c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f003 0307 	and.w	r3, r3, #7
 8002ff4:	693a      	ldr	r2, [r7, #16]
 8002ff6:	429a      	cmp	r2, r3
 8002ff8:	d001      	beq.n	8002ffe <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e000      	b.n	8003000 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002ffe:	2300      	movs	r3, #0
}
 8003000:	4618      	mov	r0, r3
 8003002:	3718      	adds	r7, #24
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}
 8003008:	40021000 	.word	0x40021000
 800300c:	40022000 	.word	0x40022000

08003010 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b086      	sub	sp, #24
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003018:	2300      	movs	r3, #0
 800301a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800301c:	2300      	movs	r3, #0
 800301e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003028:	2b00      	cmp	r3, #0
 800302a:	d041      	beq.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003030:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003034:	d02a      	beq.n	800308c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003036:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800303a:	d824      	bhi.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800303c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003040:	d008      	beq.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003042:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003046:	d81e      	bhi.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003048:	2b00      	cmp	r3, #0
 800304a:	d00a      	beq.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800304c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003050:	d010      	beq.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003052:	e018      	b.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003054:	4b86      	ldr	r3, [pc, #536]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003056:	68db      	ldr	r3, [r3, #12]
 8003058:	4a85      	ldr	r2, [pc, #532]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800305a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800305e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003060:	e015      	b.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	3304      	adds	r3, #4
 8003066:	2100      	movs	r1, #0
 8003068:	4618      	mov	r0, r3
 800306a:	f000 facb 	bl	8003604 <RCCEx_PLLSAI1_Config>
 800306e:	4603      	mov	r3, r0
 8003070:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003072:	e00c      	b.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	3320      	adds	r3, #32
 8003078:	2100      	movs	r1, #0
 800307a:	4618      	mov	r0, r3
 800307c:	f000 fbb6 	bl	80037ec <RCCEx_PLLSAI2_Config>
 8003080:	4603      	mov	r3, r0
 8003082:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003084:	e003      	b.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	74fb      	strb	r3, [r7, #19]
      break;
 800308a:	e000      	b.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800308c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800308e:	7cfb      	ldrb	r3, [r7, #19]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d10b      	bne.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003094:	4b76      	ldr	r3, [pc, #472]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003096:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800309a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80030a2:	4973      	ldr	r1, [pc, #460]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030a4:	4313      	orrs	r3, r2
 80030a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80030aa:	e001      	b.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030ac:	7cfb      	ldrb	r3, [r7, #19]
 80030ae:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d041      	beq.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80030c0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80030c4:	d02a      	beq.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80030c6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80030ca:	d824      	bhi.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80030cc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80030d0:	d008      	beq.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80030d2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80030d6:	d81e      	bhi.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d00a      	beq.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80030dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80030e0:	d010      	beq.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80030e2:	e018      	b.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80030e4:	4b62      	ldr	r3, [pc, #392]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030e6:	68db      	ldr	r3, [r3, #12]
 80030e8:	4a61      	ldr	r2, [pc, #388]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030ee:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80030f0:	e015      	b.n	800311e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	3304      	adds	r3, #4
 80030f6:	2100      	movs	r1, #0
 80030f8:	4618      	mov	r0, r3
 80030fa:	f000 fa83 	bl	8003604 <RCCEx_PLLSAI1_Config>
 80030fe:	4603      	mov	r3, r0
 8003100:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003102:	e00c      	b.n	800311e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	3320      	adds	r3, #32
 8003108:	2100      	movs	r1, #0
 800310a:	4618      	mov	r0, r3
 800310c:	f000 fb6e 	bl	80037ec <RCCEx_PLLSAI2_Config>
 8003110:	4603      	mov	r3, r0
 8003112:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003114:	e003      	b.n	800311e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	74fb      	strb	r3, [r7, #19]
      break;
 800311a:	e000      	b.n	800311e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800311c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800311e:	7cfb      	ldrb	r3, [r7, #19]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d10b      	bne.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003124:	4b52      	ldr	r3, [pc, #328]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003126:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800312a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003132:	494f      	ldr	r1, [pc, #316]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003134:	4313      	orrs	r3, r2
 8003136:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800313a:	e001      	b.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800313c:	7cfb      	ldrb	r3, [r7, #19]
 800313e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003148:	2b00      	cmp	r3, #0
 800314a:	f000 80a0 	beq.w	800328e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800314e:	2300      	movs	r3, #0
 8003150:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003152:	4b47      	ldr	r3, [pc, #284]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003154:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003156:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800315a:	2b00      	cmp	r3, #0
 800315c:	d101      	bne.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800315e:	2301      	movs	r3, #1
 8003160:	e000      	b.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003162:	2300      	movs	r3, #0
 8003164:	2b00      	cmp	r3, #0
 8003166:	d00d      	beq.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003168:	4b41      	ldr	r3, [pc, #260]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800316a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800316c:	4a40      	ldr	r2, [pc, #256]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800316e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003172:	6593      	str	r3, [r2, #88]	; 0x58
 8003174:	4b3e      	ldr	r3, [pc, #248]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003176:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003178:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800317c:	60bb      	str	r3, [r7, #8]
 800317e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003180:	2301      	movs	r3, #1
 8003182:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003184:	4b3b      	ldr	r3, [pc, #236]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a3a      	ldr	r2, [pc, #232]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800318a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800318e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003190:	f7fe f954 	bl	800143c <HAL_GetTick>
 8003194:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003196:	e009      	b.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003198:	f7fe f950 	bl	800143c <HAL_GetTick>
 800319c:	4602      	mov	r2, r0
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	1ad3      	subs	r3, r2, r3
 80031a2:	2b02      	cmp	r3, #2
 80031a4:	d902      	bls.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80031a6:	2303      	movs	r3, #3
 80031a8:	74fb      	strb	r3, [r7, #19]
        break;
 80031aa:	e005      	b.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80031ac:	4b31      	ldr	r3, [pc, #196]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d0ef      	beq.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80031b8:	7cfb      	ldrb	r3, [r7, #19]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d15c      	bne.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80031be:	4b2c      	ldr	r3, [pc, #176]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031c8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d01f      	beq.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031d6:	697a      	ldr	r2, [r7, #20]
 80031d8:	429a      	cmp	r2, r3
 80031da:	d019      	beq.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80031dc:	4b24      	ldr	r3, [pc, #144]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031e6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80031e8:	4b21      	ldr	r3, [pc, #132]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031ee:	4a20      	ldr	r2, [pc, #128]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80031f8:	4b1d      	ldr	r3, [pc, #116]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031fe:	4a1c      	ldr	r2, [pc, #112]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003200:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003204:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003208:	4a19      	ldr	r2, [pc, #100]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	f003 0301 	and.w	r3, r3, #1
 8003216:	2b00      	cmp	r3, #0
 8003218:	d016      	beq.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800321a:	f7fe f90f 	bl	800143c <HAL_GetTick>
 800321e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003220:	e00b      	b.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003222:	f7fe f90b 	bl	800143c <HAL_GetTick>
 8003226:	4602      	mov	r2, r0
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	1ad3      	subs	r3, r2, r3
 800322c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003230:	4293      	cmp	r3, r2
 8003232:	d902      	bls.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003234:	2303      	movs	r3, #3
 8003236:	74fb      	strb	r3, [r7, #19]
            break;
 8003238:	e006      	b.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800323a:	4b0d      	ldr	r3, [pc, #52]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800323c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003240:	f003 0302 	and.w	r3, r3, #2
 8003244:	2b00      	cmp	r3, #0
 8003246:	d0ec      	beq.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003248:	7cfb      	ldrb	r3, [r7, #19]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d10c      	bne.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800324e:	4b08      	ldr	r3, [pc, #32]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003250:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003254:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800325e:	4904      	ldr	r1, [pc, #16]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003260:	4313      	orrs	r3, r2
 8003262:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003266:	e009      	b.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003268:	7cfb      	ldrb	r3, [r7, #19]
 800326a:	74bb      	strb	r3, [r7, #18]
 800326c:	e006      	b.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800326e:	bf00      	nop
 8003270:	40021000 	.word	0x40021000
 8003274:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003278:	7cfb      	ldrb	r3, [r7, #19]
 800327a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800327c:	7c7b      	ldrb	r3, [r7, #17]
 800327e:	2b01      	cmp	r3, #1
 8003280:	d105      	bne.n	800328e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003282:	4b9e      	ldr	r3, [pc, #632]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003284:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003286:	4a9d      	ldr	r2, [pc, #628]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003288:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800328c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 0301 	and.w	r3, r3, #1
 8003296:	2b00      	cmp	r3, #0
 8003298:	d00a      	beq.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800329a:	4b98      	ldr	r3, [pc, #608]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800329c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032a0:	f023 0203 	bic.w	r2, r3, #3
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032a8:	4994      	ldr	r1, [pc, #592]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032aa:	4313      	orrs	r3, r2
 80032ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f003 0302 	and.w	r3, r3, #2
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d00a      	beq.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80032bc:	4b8f      	ldr	r3, [pc, #572]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032c2:	f023 020c 	bic.w	r2, r3, #12
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032ca:	498c      	ldr	r1, [pc, #560]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032cc:	4313      	orrs	r3, r2
 80032ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f003 0304 	and.w	r3, r3, #4
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d00a      	beq.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80032de:	4b87      	ldr	r3, [pc, #540]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032e4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ec:	4983      	ldr	r1, [pc, #524]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032ee:	4313      	orrs	r3, r2
 80032f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f003 0308 	and.w	r3, r3, #8
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d00a      	beq.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003300:	4b7e      	ldr	r3, [pc, #504]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003302:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003306:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800330e:	497b      	ldr	r1, [pc, #492]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003310:	4313      	orrs	r3, r2
 8003312:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 0310 	and.w	r3, r3, #16
 800331e:	2b00      	cmp	r3, #0
 8003320:	d00a      	beq.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003322:	4b76      	ldr	r3, [pc, #472]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003324:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003328:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003330:	4972      	ldr	r1, [pc, #456]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003332:	4313      	orrs	r3, r2
 8003334:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f003 0320 	and.w	r3, r3, #32
 8003340:	2b00      	cmp	r3, #0
 8003342:	d00a      	beq.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003344:	4b6d      	ldr	r3, [pc, #436]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003346:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800334a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003352:	496a      	ldr	r1, [pc, #424]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003354:	4313      	orrs	r3, r2
 8003356:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003362:	2b00      	cmp	r3, #0
 8003364:	d00a      	beq.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003366:	4b65      	ldr	r3, [pc, #404]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003368:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800336c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003374:	4961      	ldr	r1, [pc, #388]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003376:	4313      	orrs	r3, r2
 8003378:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003384:	2b00      	cmp	r3, #0
 8003386:	d00a      	beq.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003388:	4b5c      	ldr	r3, [pc, #368]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800338a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800338e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003396:	4959      	ldr	r1, [pc, #356]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003398:	4313      	orrs	r3, r2
 800339a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d00a      	beq.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80033aa:	4b54      	ldr	r3, [pc, #336]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033b0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033b8:	4950      	ldr	r1, [pc, #320]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033ba:	4313      	orrs	r3, r2
 80033bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d00a      	beq.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80033cc:	4b4b      	ldr	r3, [pc, #300]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033d2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033da:	4948      	ldr	r1, [pc, #288]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033dc:	4313      	orrs	r3, r2
 80033de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d00a      	beq.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80033ee:	4b43      	ldr	r3, [pc, #268]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033f4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033fc:	493f      	ldr	r1, [pc, #252]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033fe:	4313      	orrs	r3, r2
 8003400:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800340c:	2b00      	cmp	r3, #0
 800340e:	d028      	beq.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003410:	4b3a      	ldr	r3, [pc, #232]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003412:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003416:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800341e:	4937      	ldr	r1, [pc, #220]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003420:	4313      	orrs	r3, r2
 8003422:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800342a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800342e:	d106      	bne.n	800343e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003430:	4b32      	ldr	r3, [pc, #200]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003432:	68db      	ldr	r3, [r3, #12]
 8003434:	4a31      	ldr	r2, [pc, #196]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003436:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800343a:	60d3      	str	r3, [r2, #12]
 800343c:	e011      	b.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003442:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003446:	d10c      	bne.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	3304      	adds	r3, #4
 800344c:	2101      	movs	r1, #1
 800344e:	4618      	mov	r0, r3
 8003450:	f000 f8d8 	bl	8003604 <RCCEx_PLLSAI1_Config>
 8003454:	4603      	mov	r3, r0
 8003456:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003458:	7cfb      	ldrb	r3, [r7, #19]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d001      	beq.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800345e:	7cfb      	ldrb	r3, [r7, #19]
 8003460:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800346a:	2b00      	cmp	r3, #0
 800346c:	d028      	beq.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800346e:	4b23      	ldr	r3, [pc, #140]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003470:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003474:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800347c:	491f      	ldr	r1, [pc, #124]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800347e:	4313      	orrs	r3, r2
 8003480:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003488:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800348c:	d106      	bne.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800348e:	4b1b      	ldr	r3, [pc, #108]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003490:	68db      	ldr	r3, [r3, #12]
 8003492:	4a1a      	ldr	r2, [pc, #104]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003494:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003498:	60d3      	str	r3, [r2, #12]
 800349a:	e011      	b.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034a0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80034a4:	d10c      	bne.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	3304      	adds	r3, #4
 80034aa:	2101      	movs	r1, #1
 80034ac:	4618      	mov	r0, r3
 80034ae:	f000 f8a9 	bl	8003604 <RCCEx_PLLSAI1_Config>
 80034b2:	4603      	mov	r3, r0
 80034b4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80034b6:	7cfb      	ldrb	r3, [r7, #19]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d001      	beq.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80034bc:	7cfb      	ldrb	r3, [r7, #19]
 80034be:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d02b      	beq.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80034cc:	4b0b      	ldr	r3, [pc, #44]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034d2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034da:	4908      	ldr	r1, [pc, #32]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034dc:	4313      	orrs	r3, r2
 80034de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80034ea:	d109      	bne.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80034ec:	4b03      	ldr	r3, [pc, #12]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034ee:	68db      	ldr	r3, [r3, #12]
 80034f0:	4a02      	ldr	r2, [pc, #8]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80034f6:	60d3      	str	r3, [r2, #12]
 80034f8:	e014      	b.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80034fa:	bf00      	nop
 80034fc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003504:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003508:	d10c      	bne.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	3304      	adds	r3, #4
 800350e:	2101      	movs	r1, #1
 8003510:	4618      	mov	r0, r3
 8003512:	f000 f877 	bl	8003604 <RCCEx_PLLSAI1_Config>
 8003516:	4603      	mov	r3, r0
 8003518:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800351a:	7cfb      	ldrb	r3, [r7, #19]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d001      	beq.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003520:	7cfb      	ldrb	r3, [r7, #19]
 8003522:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800352c:	2b00      	cmp	r3, #0
 800352e:	d02f      	beq.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003530:	4b2b      	ldr	r3, [pc, #172]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003532:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003536:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800353e:	4928      	ldr	r1, [pc, #160]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003540:	4313      	orrs	r3, r2
 8003542:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800354a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800354e:	d10d      	bne.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	3304      	adds	r3, #4
 8003554:	2102      	movs	r1, #2
 8003556:	4618      	mov	r0, r3
 8003558:	f000 f854 	bl	8003604 <RCCEx_PLLSAI1_Config>
 800355c:	4603      	mov	r3, r0
 800355e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003560:	7cfb      	ldrb	r3, [r7, #19]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d014      	beq.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003566:	7cfb      	ldrb	r3, [r7, #19]
 8003568:	74bb      	strb	r3, [r7, #18]
 800356a:	e011      	b.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003570:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003574:	d10c      	bne.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	3320      	adds	r3, #32
 800357a:	2102      	movs	r1, #2
 800357c:	4618      	mov	r0, r3
 800357e:	f000 f935 	bl	80037ec <RCCEx_PLLSAI2_Config>
 8003582:	4603      	mov	r3, r0
 8003584:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003586:	7cfb      	ldrb	r3, [r7, #19]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d001      	beq.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800358c:	7cfb      	ldrb	r3, [r7, #19]
 800358e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003598:	2b00      	cmp	r3, #0
 800359a:	d00a      	beq.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800359c:	4b10      	ldr	r3, [pc, #64]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800359e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035a2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80035aa:	490d      	ldr	r1, [pc, #52]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80035ac:	4313      	orrs	r3, r2
 80035ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d00b      	beq.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80035be:	4b08      	ldr	r3, [pc, #32]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80035c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035c4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80035ce:	4904      	ldr	r1, [pc, #16]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80035d0:	4313      	orrs	r3, r2
 80035d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80035d6:	7cbb      	ldrb	r3, [r7, #18]
}
 80035d8:	4618      	mov	r0, r3
 80035da:	3718      	adds	r7, #24
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}
 80035e0:	40021000 	.word	0x40021000

080035e4 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80035e4:	b480      	push	{r7}
 80035e6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80035e8:	4b05      	ldr	r3, [pc, #20]	; (8003600 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a04      	ldr	r2, [pc, #16]	; (8003600 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80035ee:	f043 0304 	orr.w	r3, r3, #4
 80035f2:	6013      	str	r3, [r2, #0]
}
 80035f4:	bf00      	nop
 80035f6:	46bd      	mov	sp, r7
 80035f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fc:	4770      	bx	lr
 80035fe:	bf00      	nop
 8003600:	40021000 	.word	0x40021000

08003604 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b084      	sub	sp, #16
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
 800360c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800360e:	2300      	movs	r3, #0
 8003610:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003612:	4b75      	ldr	r3, [pc, #468]	; (80037e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003614:	68db      	ldr	r3, [r3, #12]
 8003616:	f003 0303 	and.w	r3, r3, #3
 800361a:	2b00      	cmp	r3, #0
 800361c:	d018      	beq.n	8003650 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800361e:	4b72      	ldr	r3, [pc, #456]	; (80037e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003620:	68db      	ldr	r3, [r3, #12]
 8003622:	f003 0203 	and.w	r2, r3, #3
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	429a      	cmp	r2, r3
 800362c:	d10d      	bne.n	800364a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
       ||
 8003632:	2b00      	cmp	r3, #0
 8003634:	d009      	beq.n	800364a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003636:	4b6c      	ldr	r3, [pc, #432]	; (80037e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003638:	68db      	ldr	r3, [r3, #12]
 800363a:	091b      	lsrs	r3, r3, #4
 800363c:	f003 0307 	and.w	r3, r3, #7
 8003640:	1c5a      	adds	r2, r3, #1
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	685b      	ldr	r3, [r3, #4]
       ||
 8003646:	429a      	cmp	r2, r3
 8003648:	d047      	beq.n	80036da <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	73fb      	strb	r3, [r7, #15]
 800364e:	e044      	b.n	80036da <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	2b03      	cmp	r3, #3
 8003656:	d018      	beq.n	800368a <RCCEx_PLLSAI1_Config+0x86>
 8003658:	2b03      	cmp	r3, #3
 800365a:	d825      	bhi.n	80036a8 <RCCEx_PLLSAI1_Config+0xa4>
 800365c:	2b01      	cmp	r3, #1
 800365e:	d002      	beq.n	8003666 <RCCEx_PLLSAI1_Config+0x62>
 8003660:	2b02      	cmp	r3, #2
 8003662:	d009      	beq.n	8003678 <RCCEx_PLLSAI1_Config+0x74>
 8003664:	e020      	b.n	80036a8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003666:	4b60      	ldr	r3, [pc, #384]	; (80037e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f003 0302 	and.w	r3, r3, #2
 800366e:	2b00      	cmp	r3, #0
 8003670:	d11d      	bne.n	80036ae <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003676:	e01a      	b.n	80036ae <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003678:	4b5b      	ldr	r3, [pc, #364]	; (80037e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003680:	2b00      	cmp	r3, #0
 8003682:	d116      	bne.n	80036b2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003688:	e013      	b.n	80036b2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800368a:	4b57      	ldr	r3, [pc, #348]	; (80037e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003692:	2b00      	cmp	r3, #0
 8003694:	d10f      	bne.n	80036b6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003696:	4b54      	ldr	r3, [pc, #336]	; (80037e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d109      	bne.n	80036b6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80036a6:	e006      	b.n	80036b6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80036a8:	2301      	movs	r3, #1
 80036aa:	73fb      	strb	r3, [r7, #15]
      break;
 80036ac:	e004      	b.n	80036b8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80036ae:	bf00      	nop
 80036b0:	e002      	b.n	80036b8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80036b2:	bf00      	nop
 80036b4:	e000      	b.n	80036b8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80036b6:	bf00      	nop
    }

    if(status == HAL_OK)
 80036b8:	7bfb      	ldrb	r3, [r7, #15]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d10d      	bne.n	80036da <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80036be:	4b4a      	ldr	r3, [pc, #296]	; (80037e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036c0:	68db      	ldr	r3, [r3, #12]
 80036c2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6819      	ldr	r1, [r3, #0]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	3b01      	subs	r3, #1
 80036d0:	011b      	lsls	r3, r3, #4
 80036d2:	430b      	orrs	r3, r1
 80036d4:	4944      	ldr	r1, [pc, #272]	; (80037e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036d6:	4313      	orrs	r3, r2
 80036d8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80036da:	7bfb      	ldrb	r3, [r7, #15]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d17d      	bne.n	80037dc <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80036e0:	4b41      	ldr	r3, [pc, #260]	; (80037e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a40      	ldr	r2, [pc, #256]	; (80037e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036e6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80036ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036ec:	f7fd fea6 	bl	800143c <HAL_GetTick>
 80036f0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80036f2:	e009      	b.n	8003708 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80036f4:	f7fd fea2 	bl	800143c <HAL_GetTick>
 80036f8:	4602      	mov	r2, r0
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	1ad3      	subs	r3, r2, r3
 80036fe:	2b02      	cmp	r3, #2
 8003700:	d902      	bls.n	8003708 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003702:	2303      	movs	r3, #3
 8003704:	73fb      	strb	r3, [r7, #15]
        break;
 8003706:	e005      	b.n	8003714 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003708:	4b37      	ldr	r3, [pc, #220]	; (80037e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003710:	2b00      	cmp	r3, #0
 8003712:	d1ef      	bne.n	80036f4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003714:	7bfb      	ldrb	r3, [r7, #15]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d160      	bne.n	80037dc <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d111      	bne.n	8003744 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003720:	4b31      	ldr	r3, [pc, #196]	; (80037e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003722:	691b      	ldr	r3, [r3, #16]
 8003724:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003728:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800372c:	687a      	ldr	r2, [r7, #4]
 800372e:	6892      	ldr	r2, [r2, #8]
 8003730:	0211      	lsls	r1, r2, #8
 8003732:	687a      	ldr	r2, [r7, #4]
 8003734:	68d2      	ldr	r2, [r2, #12]
 8003736:	0912      	lsrs	r2, r2, #4
 8003738:	0452      	lsls	r2, r2, #17
 800373a:	430a      	orrs	r2, r1
 800373c:	492a      	ldr	r1, [pc, #168]	; (80037e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800373e:	4313      	orrs	r3, r2
 8003740:	610b      	str	r3, [r1, #16]
 8003742:	e027      	b.n	8003794 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	2b01      	cmp	r3, #1
 8003748:	d112      	bne.n	8003770 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800374a:	4b27      	ldr	r3, [pc, #156]	; (80037e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800374c:	691b      	ldr	r3, [r3, #16]
 800374e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003752:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003756:	687a      	ldr	r2, [r7, #4]
 8003758:	6892      	ldr	r2, [r2, #8]
 800375a:	0211      	lsls	r1, r2, #8
 800375c:	687a      	ldr	r2, [r7, #4]
 800375e:	6912      	ldr	r2, [r2, #16]
 8003760:	0852      	lsrs	r2, r2, #1
 8003762:	3a01      	subs	r2, #1
 8003764:	0552      	lsls	r2, r2, #21
 8003766:	430a      	orrs	r2, r1
 8003768:	491f      	ldr	r1, [pc, #124]	; (80037e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800376a:	4313      	orrs	r3, r2
 800376c:	610b      	str	r3, [r1, #16]
 800376e:	e011      	b.n	8003794 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003770:	4b1d      	ldr	r3, [pc, #116]	; (80037e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003772:	691b      	ldr	r3, [r3, #16]
 8003774:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003778:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800377c:	687a      	ldr	r2, [r7, #4]
 800377e:	6892      	ldr	r2, [r2, #8]
 8003780:	0211      	lsls	r1, r2, #8
 8003782:	687a      	ldr	r2, [r7, #4]
 8003784:	6952      	ldr	r2, [r2, #20]
 8003786:	0852      	lsrs	r2, r2, #1
 8003788:	3a01      	subs	r2, #1
 800378a:	0652      	lsls	r2, r2, #25
 800378c:	430a      	orrs	r2, r1
 800378e:	4916      	ldr	r1, [pc, #88]	; (80037e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003790:	4313      	orrs	r3, r2
 8003792:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003794:	4b14      	ldr	r3, [pc, #80]	; (80037e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a13      	ldr	r2, [pc, #76]	; (80037e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800379a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800379e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037a0:	f7fd fe4c 	bl	800143c <HAL_GetTick>
 80037a4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80037a6:	e009      	b.n	80037bc <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80037a8:	f7fd fe48 	bl	800143c <HAL_GetTick>
 80037ac:	4602      	mov	r2, r0
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	1ad3      	subs	r3, r2, r3
 80037b2:	2b02      	cmp	r3, #2
 80037b4:	d902      	bls.n	80037bc <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80037b6:	2303      	movs	r3, #3
 80037b8:	73fb      	strb	r3, [r7, #15]
          break;
 80037ba:	e005      	b.n	80037c8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80037bc:	4b0a      	ldr	r3, [pc, #40]	; (80037e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d0ef      	beq.n	80037a8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80037c8:	7bfb      	ldrb	r3, [r7, #15]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d106      	bne.n	80037dc <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80037ce:	4b06      	ldr	r3, [pc, #24]	; (80037e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037d0:	691a      	ldr	r2, [r3, #16]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	699b      	ldr	r3, [r3, #24]
 80037d6:	4904      	ldr	r1, [pc, #16]	; (80037e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037d8:	4313      	orrs	r3, r2
 80037da:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80037dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80037de:	4618      	mov	r0, r3
 80037e0:	3710      	adds	r7, #16
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}
 80037e6:	bf00      	nop
 80037e8:	40021000 	.word	0x40021000

080037ec <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b084      	sub	sp, #16
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
 80037f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80037f6:	2300      	movs	r3, #0
 80037f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80037fa:	4b6a      	ldr	r3, [pc, #424]	; (80039a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037fc:	68db      	ldr	r3, [r3, #12]
 80037fe:	f003 0303 	and.w	r3, r3, #3
 8003802:	2b00      	cmp	r3, #0
 8003804:	d018      	beq.n	8003838 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003806:	4b67      	ldr	r3, [pc, #412]	; (80039a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003808:	68db      	ldr	r3, [r3, #12]
 800380a:	f003 0203 	and.w	r2, r3, #3
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	429a      	cmp	r2, r3
 8003814:	d10d      	bne.n	8003832 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
       ||
 800381a:	2b00      	cmp	r3, #0
 800381c:	d009      	beq.n	8003832 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800381e:	4b61      	ldr	r3, [pc, #388]	; (80039a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003820:	68db      	ldr	r3, [r3, #12]
 8003822:	091b      	lsrs	r3, r3, #4
 8003824:	f003 0307 	and.w	r3, r3, #7
 8003828:	1c5a      	adds	r2, r3, #1
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	685b      	ldr	r3, [r3, #4]
       ||
 800382e:	429a      	cmp	r2, r3
 8003830:	d047      	beq.n	80038c2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	73fb      	strb	r3, [r7, #15]
 8003836:	e044      	b.n	80038c2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	2b03      	cmp	r3, #3
 800383e:	d018      	beq.n	8003872 <RCCEx_PLLSAI2_Config+0x86>
 8003840:	2b03      	cmp	r3, #3
 8003842:	d825      	bhi.n	8003890 <RCCEx_PLLSAI2_Config+0xa4>
 8003844:	2b01      	cmp	r3, #1
 8003846:	d002      	beq.n	800384e <RCCEx_PLLSAI2_Config+0x62>
 8003848:	2b02      	cmp	r3, #2
 800384a:	d009      	beq.n	8003860 <RCCEx_PLLSAI2_Config+0x74>
 800384c:	e020      	b.n	8003890 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800384e:	4b55      	ldr	r3, [pc, #340]	; (80039a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f003 0302 	and.w	r3, r3, #2
 8003856:	2b00      	cmp	r3, #0
 8003858:	d11d      	bne.n	8003896 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800385e:	e01a      	b.n	8003896 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003860:	4b50      	ldr	r3, [pc, #320]	; (80039a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003868:	2b00      	cmp	r3, #0
 800386a:	d116      	bne.n	800389a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800386c:	2301      	movs	r3, #1
 800386e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003870:	e013      	b.n	800389a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003872:	4b4c      	ldr	r3, [pc, #304]	; (80039a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800387a:	2b00      	cmp	r3, #0
 800387c:	d10f      	bne.n	800389e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800387e:	4b49      	ldr	r3, [pc, #292]	; (80039a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003886:	2b00      	cmp	r3, #0
 8003888:	d109      	bne.n	800389e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800388e:	e006      	b.n	800389e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003890:	2301      	movs	r3, #1
 8003892:	73fb      	strb	r3, [r7, #15]
      break;
 8003894:	e004      	b.n	80038a0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003896:	bf00      	nop
 8003898:	e002      	b.n	80038a0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800389a:	bf00      	nop
 800389c:	e000      	b.n	80038a0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800389e:	bf00      	nop
    }

    if(status == HAL_OK)
 80038a0:	7bfb      	ldrb	r3, [r7, #15]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d10d      	bne.n	80038c2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80038a6:	4b3f      	ldr	r3, [pc, #252]	; (80039a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038a8:	68db      	ldr	r3, [r3, #12]
 80038aa:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6819      	ldr	r1, [r3, #0]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	3b01      	subs	r3, #1
 80038b8:	011b      	lsls	r3, r3, #4
 80038ba:	430b      	orrs	r3, r1
 80038bc:	4939      	ldr	r1, [pc, #228]	; (80039a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038be:	4313      	orrs	r3, r2
 80038c0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80038c2:	7bfb      	ldrb	r3, [r7, #15]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d167      	bne.n	8003998 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80038c8:	4b36      	ldr	r3, [pc, #216]	; (80039a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a35      	ldr	r2, [pc, #212]	; (80039a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038d2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038d4:	f7fd fdb2 	bl	800143c <HAL_GetTick>
 80038d8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80038da:	e009      	b.n	80038f0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80038dc:	f7fd fdae 	bl	800143c <HAL_GetTick>
 80038e0:	4602      	mov	r2, r0
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	1ad3      	subs	r3, r2, r3
 80038e6:	2b02      	cmp	r3, #2
 80038e8:	d902      	bls.n	80038f0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80038ea:	2303      	movs	r3, #3
 80038ec:	73fb      	strb	r3, [r7, #15]
        break;
 80038ee:	e005      	b.n	80038fc <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80038f0:	4b2c      	ldr	r3, [pc, #176]	; (80039a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d1ef      	bne.n	80038dc <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80038fc:	7bfb      	ldrb	r3, [r7, #15]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d14a      	bne.n	8003998 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d111      	bne.n	800392c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003908:	4b26      	ldr	r3, [pc, #152]	; (80039a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800390a:	695b      	ldr	r3, [r3, #20]
 800390c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003910:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003914:	687a      	ldr	r2, [r7, #4]
 8003916:	6892      	ldr	r2, [r2, #8]
 8003918:	0211      	lsls	r1, r2, #8
 800391a:	687a      	ldr	r2, [r7, #4]
 800391c:	68d2      	ldr	r2, [r2, #12]
 800391e:	0912      	lsrs	r2, r2, #4
 8003920:	0452      	lsls	r2, r2, #17
 8003922:	430a      	orrs	r2, r1
 8003924:	491f      	ldr	r1, [pc, #124]	; (80039a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003926:	4313      	orrs	r3, r2
 8003928:	614b      	str	r3, [r1, #20]
 800392a:	e011      	b.n	8003950 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800392c:	4b1d      	ldr	r3, [pc, #116]	; (80039a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800392e:	695b      	ldr	r3, [r3, #20]
 8003930:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003934:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003938:	687a      	ldr	r2, [r7, #4]
 800393a:	6892      	ldr	r2, [r2, #8]
 800393c:	0211      	lsls	r1, r2, #8
 800393e:	687a      	ldr	r2, [r7, #4]
 8003940:	6912      	ldr	r2, [r2, #16]
 8003942:	0852      	lsrs	r2, r2, #1
 8003944:	3a01      	subs	r2, #1
 8003946:	0652      	lsls	r2, r2, #25
 8003948:	430a      	orrs	r2, r1
 800394a:	4916      	ldr	r1, [pc, #88]	; (80039a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800394c:	4313      	orrs	r3, r2
 800394e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003950:	4b14      	ldr	r3, [pc, #80]	; (80039a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a13      	ldr	r2, [pc, #76]	; (80039a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003956:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800395a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800395c:	f7fd fd6e 	bl	800143c <HAL_GetTick>
 8003960:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003962:	e009      	b.n	8003978 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003964:	f7fd fd6a 	bl	800143c <HAL_GetTick>
 8003968:	4602      	mov	r2, r0
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	1ad3      	subs	r3, r2, r3
 800396e:	2b02      	cmp	r3, #2
 8003970:	d902      	bls.n	8003978 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003972:	2303      	movs	r3, #3
 8003974:	73fb      	strb	r3, [r7, #15]
          break;
 8003976:	e005      	b.n	8003984 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003978:	4b0a      	ldr	r3, [pc, #40]	; (80039a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003980:	2b00      	cmp	r3, #0
 8003982:	d0ef      	beq.n	8003964 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003984:	7bfb      	ldrb	r3, [r7, #15]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d106      	bne.n	8003998 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800398a:	4b06      	ldr	r3, [pc, #24]	; (80039a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800398c:	695a      	ldr	r2, [r3, #20]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	695b      	ldr	r3, [r3, #20]
 8003992:	4904      	ldr	r1, [pc, #16]	; (80039a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003994:	4313      	orrs	r3, r2
 8003996:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003998:	7bfb      	ldrb	r3, [r7, #15]
}
 800399a:	4618      	mov	r0, r3
 800399c:	3710      	adds	r7, #16
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}
 80039a2:	bf00      	nop
 80039a4:	40021000 	.word	0x40021000

080039a8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b084      	sub	sp, #16
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d101      	bne.n	80039ba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	e095      	b.n	8003ae6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d108      	bne.n	80039d4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80039ca:	d009      	beq.n	80039e0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2200      	movs	r2, #0
 80039d0:	61da      	str	r2, [r3, #28]
 80039d2:	e005      	b.n	80039e0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2200      	movs	r2, #0
 80039d8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2200      	movs	r2, #0
 80039de:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2200      	movs	r2, #0
 80039e4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80039ec:	b2db      	uxtb	r3, r3
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d106      	bne.n	8003a00 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2200      	movs	r2, #0
 80039f6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80039fa:	6878      	ldr	r0, [r7, #4]
 80039fc:	f7fd f9dc 	bl	8000db8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2202      	movs	r2, #2
 8003a04:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	681a      	ldr	r2, [r3, #0]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a16:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	68db      	ldr	r3, [r3, #12]
 8003a1c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003a20:	d902      	bls.n	8003a28 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003a22:	2300      	movs	r3, #0
 8003a24:	60fb      	str	r3, [r7, #12]
 8003a26:	e002      	b.n	8003a2e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003a28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a2c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	68db      	ldr	r3, [r3, #12]
 8003a32:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003a36:	d007      	beq.n	8003a48 <HAL_SPI_Init+0xa0>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	68db      	ldr	r3, [r3, #12]
 8003a3c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003a40:	d002      	beq.n	8003a48 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2200      	movs	r2, #0
 8003a46:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003a58:	431a      	orrs	r2, r3
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	691b      	ldr	r3, [r3, #16]
 8003a5e:	f003 0302 	and.w	r3, r3, #2
 8003a62:	431a      	orrs	r2, r3
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	695b      	ldr	r3, [r3, #20]
 8003a68:	f003 0301 	and.w	r3, r3, #1
 8003a6c:	431a      	orrs	r2, r3
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	699b      	ldr	r3, [r3, #24]
 8003a72:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a76:	431a      	orrs	r2, r3
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	69db      	ldr	r3, [r3, #28]
 8003a7c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003a80:	431a      	orrs	r2, r3
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6a1b      	ldr	r3, [r3, #32]
 8003a86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a8a:	ea42 0103 	orr.w	r1, r2, r3
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a92:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	430a      	orrs	r2, r1
 8003a9c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	699b      	ldr	r3, [r3, #24]
 8003aa2:	0c1b      	lsrs	r3, r3, #16
 8003aa4:	f003 0204 	and.w	r2, r3, #4
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aac:	f003 0310 	and.w	r3, r3, #16
 8003ab0:	431a      	orrs	r2, r3
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ab6:	f003 0308 	and.w	r3, r3, #8
 8003aba:	431a      	orrs	r2, r3
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	68db      	ldr	r3, [r3, #12]
 8003ac0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003ac4:	ea42 0103 	orr.w	r1, r2, r3
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	430a      	orrs	r2, r1
 8003ad4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2201      	movs	r2, #1
 8003ae0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003ae4:	2300      	movs	r3, #0
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3710      	adds	r7, #16
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}

08003aee <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003aee:	b580      	push	{r7, lr}
 8003af0:	b082      	sub	sp, #8
 8003af2:	af00      	add	r7, sp, #0
 8003af4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d101      	bne.n	8003b00 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003afc:	2301      	movs	r3, #1
 8003afe:	e049      	b.n	8003b94 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b06:	b2db      	uxtb	r3, r3
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d106      	bne.n	8003b1a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b14:	6878      	ldr	r0, [r7, #4]
 8003b16:	f000 f841 	bl	8003b9c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2202      	movs	r2, #2
 8003b1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681a      	ldr	r2, [r3, #0]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	3304      	adds	r3, #4
 8003b2a:	4619      	mov	r1, r3
 8003b2c:	4610      	mov	r0, r2
 8003b2e:	f000 f9f7 	bl	8003f20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2201      	movs	r2, #1
 8003b36:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2201      	movs	r2, #1
 8003b3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2201      	movs	r2, #1
 8003b46:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2201      	movs	r2, #1
 8003b56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2201      	movs	r2, #1
 8003b5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2201      	movs	r2, #1
 8003b66:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2201      	movs	r2, #1
 8003b6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2201      	movs	r2, #1
 8003b76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2201      	movs	r2, #1
 8003b7e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2201      	movs	r2, #1
 8003b86:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2201      	movs	r2, #1
 8003b8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b92:	2300      	movs	r3, #0
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	3708      	adds	r7, #8
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd80      	pop	{r7, pc}

08003b9c <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b083      	sub	sp, #12
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003ba4:	bf00      	nop
 8003ba6:	370c      	adds	r7, #12
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bae:	4770      	bx	lr

08003bb0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b085      	sub	sp, #20
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bbe:	b2db      	uxtb	r3, r3
 8003bc0:	2b01      	cmp	r3, #1
 8003bc2:	d001      	beq.n	8003bc8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	e04f      	b.n	8003c68 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2202      	movs	r2, #2
 8003bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	68da      	ldr	r2, [r3, #12]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f042 0201 	orr.w	r2, r2, #1
 8003bde:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a23      	ldr	r2, [pc, #140]	; (8003c74 <HAL_TIM_Base_Start_IT+0xc4>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d01d      	beq.n	8003c26 <HAL_TIM_Base_Start_IT+0x76>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bf2:	d018      	beq.n	8003c26 <HAL_TIM_Base_Start_IT+0x76>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a1f      	ldr	r2, [pc, #124]	; (8003c78 <HAL_TIM_Base_Start_IT+0xc8>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d013      	beq.n	8003c26 <HAL_TIM_Base_Start_IT+0x76>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a1e      	ldr	r2, [pc, #120]	; (8003c7c <HAL_TIM_Base_Start_IT+0xcc>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d00e      	beq.n	8003c26 <HAL_TIM_Base_Start_IT+0x76>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a1c      	ldr	r2, [pc, #112]	; (8003c80 <HAL_TIM_Base_Start_IT+0xd0>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d009      	beq.n	8003c26 <HAL_TIM_Base_Start_IT+0x76>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a1b      	ldr	r2, [pc, #108]	; (8003c84 <HAL_TIM_Base_Start_IT+0xd4>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d004      	beq.n	8003c26 <HAL_TIM_Base_Start_IT+0x76>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a19      	ldr	r2, [pc, #100]	; (8003c88 <HAL_TIM_Base_Start_IT+0xd8>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d115      	bne.n	8003c52 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	689a      	ldr	r2, [r3, #8]
 8003c2c:	4b17      	ldr	r3, [pc, #92]	; (8003c8c <HAL_TIM_Base_Start_IT+0xdc>)
 8003c2e:	4013      	ands	r3, r2
 8003c30:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	2b06      	cmp	r3, #6
 8003c36:	d015      	beq.n	8003c64 <HAL_TIM_Base_Start_IT+0xb4>
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c3e:	d011      	beq.n	8003c64 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	681a      	ldr	r2, [r3, #0]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f042 0201 	orr.w	r2, r2, #1
 8003c4e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c50:	e008      	b.n	8003c64 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f042 0201 	orr.w	r2, r2, #1
 8003c60:	601a      	str	r2, [r3, #0]
 8003c62:	e000      	b.n	8003c66 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c64:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003c66:	2300      	movs	r3, #0
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	3714      	adds	r7, #20
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c72:	4770      	bx	lr
 8003c74:	40012c00 	.word	0x40012c00
 8003c78:	40000400 	.word	0x40000400
 8003c7c:	40000800 	.word	0x40000800
 8003c80:	40000c00 	.word	0x40000c00
 8003c84:	40013400 	.word	0x40013400
 8003c88:	40014000 	.word	0x40014000
 8003c8c:	00010007 	.word	0x00010007

08003c90 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b082      	sub	sp, #8
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	691b      	ldr	r3, [r3, #16]
 8003c9e:	f003 0302 	and.w	r3, r3, #2
 8003ca2:	2b02      	cmp	r3, #2
 8003ca4:	d122      	bne.n	8003cec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	68db      	ldr	r3, [r3, #12]
 8003cac:	f003 0302 	and.w	r3, r3, #2
 8003cb0:	2b02      	cmp	r3, #2
 8003cb2:	d11b      	bne.n	8003cec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f06f 0202 	mvn.w	r2, #2
 8003cbc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2201      	movs	r2, #1
 8003cc2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	699b      	ldr	r3, [r3, #24]
 8003cca:	f003 0303 	and.w	r3, r3, #3
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d003      	beq.n	8003cda <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	f000 f905 	bl	8003ee2 <HAL_TIM_IC_CaptureCallback>
 8003cd8:	e005      	b.n	8003ce6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	f000 f8f7 	bl	8003ece <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ce0:	6878      	ldr	r0, [r7, #4]
 8003ce2:	f000 f908 	bl	8003ef6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	691b      	ldr	r3, [r3, #16]
 8003cf2:	f003 0304 	and.w	r3, r3, #4
 8003cf6:	2b04      	cmp	r3, #4
 8003cf8:	d122      	bne.n	8003d40 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	68db      	ldr	r3, [r3, #12]
 8003d00:	f003 0304 	and.w	r3, r3, #4
 8003d04:	2b04      	cmp	r3, #4
 8003d06:	d11b      	bne.n	8003d40 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f06f 0204 	mvn.w	r2, #4
 8003d10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2202      	movs	r2, #2
 8003d16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	699b      	ldr	r3, [r3, #24]
 8003d1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d003      	beq.n	8003d2e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	f000 f8db 	bl	8003ee2 <HAL_TIM_IC_CaptureCallback>
 8003d2c:	e005      	b.n	8003d3a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d2e:	6878      	ldr	r0, [r7, #4]
 8003d30:	f000 f8cd 	bl	8003ece <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d34:	6878      	ldr	r0, [r7, #4]
 8003d36:	f000 f8de 	bl	8003ef6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	691b      	ldr	r3, [r3, #16]
 8003d46:	f003 0308 	and.w	r3, r3, #8
 8003d4a:	2b08      	cmp	r3, #8
 8003d4c:	d122      	bne.n	8003d94 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	68db      	ldr	r3, [r3, #12]
 8003d54:	f003 0308 	and.w	r3, r3, #8
 8003d58:	2b08      	cmp	r3, #8
 8003d5a:	d11b      	bne.n	8003d94 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f06f 0208 	mvn.w	r2, #8
 8003d64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2204      	movs	r2, #4
 8003d6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	69db      	ldr	r3, [r3, #28]
 8003d72:	f003 0303 	and.w	r3, r3, #3
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d003      	beq.n	8003d82 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d7a:	6878      	ldr	r0, [r7, #4]
 8003d7c:	f000 f8b1 	bl	8003ee2 <HAL_TIM_IC_CaptureCallback>
 8003d80:	e005      	b.n	8003d8e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	f000 f8a3 	bl	8003ece <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d88:	6878      	ldr	r0, [r7, #4]
 8003d8a:	f000 f8b4 	bl	8003ef6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2200      	movs	r2, #0
 8003d92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	691b      	ldr	r3, [r3, #16]
 8003d9a:	f003 0310 	and.w	r3, r3, #16
 8003d9e:	2b10      	cmp	r3, #16
 8003da0:	d122      	bne.n	8003de8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	68db      	ldr	r3, [r3, #12]
 8003da8:	f003 0310 	and.w	r3, r3, #16
 8003dac:	2b10      	cmp	r3, #16
 8003dae:	d11b      	bne.n	8003de8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f06f 0210 	mvn.w	r2, #16
 8003db8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2208      	movs	r2, #8
 8003dbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	69db      	ldr	r3, [r3, #28]
 8003dc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d003      	beq.n	8003dd6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003dce:	6878      	ldr	r0, [r7, #4]
 8003dd0:	f000 f887 	bl	8003ee2 <HAL_TIM_IC_CaptureCallback>
 8003dd4:	e005      	b.n	8003de2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f000 f879 	bl	8003ece <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ddc:	6878      	ldr	r0, [r7, #4]
 8003dde:	f000 f88a 	bl	8003ef6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2200      	movs	r2, #0
 8003de6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	691b      	ldr	r3, [r3, #16]
 8003dee:	f003 0301 	and.w	r3, r3, #1
 8003df2:	2b01      	cmp	r3, #1
 8003df4:	d10e      	bne.n	8003e14 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	68db      	ldr	r3, [r3, #12]
 8003dfc:	f003 0301 	and.w	r3, r3, #1
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	d107      	bne.n	8003e14 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f06f 0201 	mvn.w	r2, #1
 8003e0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f7fc ff12 	bl	8000c38 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	691b      	ldr	r3, [r3, #16]
 8003e1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e1e:	2b80      	cmp	r3, #128	; 0x80
 8003e20:	d10e      	bne.n	8003e40 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	68db      	ldr	r3, [r3, #12]
 8003e28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e2c:	2b80      	cmp	r3, #128	; 0x80
 8003e2e:	d107      	bne.n	8003e40 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003e38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f000 f914 	bl	8004068 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	691b      	ldr	r3, [r3, #16]
 8003e46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e4e:	d10e      	bne.n	8003e6e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	68db      	ldr	r3, [r3, #12]
 8003e56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e5a:	2b80      	cmp	r3, #128	; 0x80
 8003e5c:	d107      	bne.n	8003e6e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003e66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003e68:	6878      	ldr	r0, [r7, #4]
 8003e6a:	f000 f907 	bl	800407c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	691b      	ldr	r3, [r3, #16]
 8003e74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e78:	2b40      	cmp	r3, #64	; 0x40
 8003e7a:	d10e      	bne.n	8003e9a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	68db      	ldr	r3, [r3, #12]
 8003e82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e86:	2b40      	cmp	r3, #64	; 0x40
 8003e88:	d107      	bne.n	8003e9a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003e92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003e94:	6878      	ldr	r0, [r7, #4]
 8003e96:	f000 f838 	bl	8003f0a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	691b      	ldr	r3, [r3, #16]
 8003ea0:	f003 0320 	and.w	r3, r3, #32
 8003ea4:	2b20      	cmp	r3, #32
 8003ea6:	d10e      	bne.n	8003ec6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	68db      	ldr	r3, [r3, #12]
 8003eae:	f003 0320 	and.w	r3, r3, #32
 8003eb2:	2b20      	cmp	r3, #32
 8003eb4:	d107      	bne.n	8003ec6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f06f 0220 	mvn.w	r2, #32
 8003ebe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003ec0:	6878      	ldr	r0, [r7, #4]
 8003ec2:	f000 f8c7 	bl	8004054 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003ec6:	bf00      	nop
 8003ec8:	3708      	adds	r7, #8
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}

08003ece <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ece:	b480      	push	{r7}
 8003ed0:	b083      	sub	sp, #12
 8003ed2:	af00      	add	r7, sp, #0
 8003ed4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003ed6:	bf00      	nop
 8003ed8:	370c      	adds	r7, #12
 8003eda:	46bd      	mov	sp, r7
 8003edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee0:	4770      	bx	lr

08003ee2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003ee2:	b480      	push	{r7}
 8003ee4:	b083      	sub	sp, #12
 8003ee6:	af00      	add	r7, sp, #0
 8003ee8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003eea:	bf00      	nop
 8003eec:	370c      	adds	r7, #12
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef4:	4770      	bx	lr

08003ef6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003ef6:	b480      	push	{r7}
 8003ef8:	b083      	sub	sp, #12
 8003efa:	af00      	add	r7, sp, #0
 8003efc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003efe:	bf00      	nop
 8003f00:	370c      	adds	r7, #12
 8003f02:	46bd      	mov	sp, r7
 8003f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f08:	4770      	bx	lr

08003f0a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003f0a:	b480      	push	{r7}
 8003f0c:	b083      	sub	sp, #12
 8003f0e:	af00      	add	r7, sp, #0
 8003f10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003f12:	bf00      	nop
 8003f14:	370c      	adds	r7, #12
 8003f16:	46bd      	mov	sp, r7
 8003f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1c:	4770      	bx	lr
	...

08003f20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b085      	sub	sp, #20
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
 8003f28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	4a40      	ldr	r2, [pc, #256]	; (8004034 <TIM_Base_SetConfig+0x114>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d013      	beq.n	8003f60 <TIM_Base_SetConfig+0x40>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f3e:	d00f      	beq.n	8003f60 <TIM_Base_SetConfig+0x40>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	4a3d      	ldr	r2, [pc, #244]	; (8004038 <TIM_Base_SetConfig+0x118>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d00b      	beq.n	8003f60 <TIM_Base_SetConfig+0x40>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	4a3c      	ldr	r2, [pc, #240]	; (800403c <TIM_Base_SetConfig+0x11c>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d007      	beq.n	8003f60 <TIM_Base_SetConfig+0x40>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	4a3b      	ldr	r2, [pc, #236]	; (8004040 <TIM_Base_SetConfig+0x120>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d003      	beq.n	8003f60 <TIM_Base_SetConfig+0x40>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	4a3a      	ldr	r2, [pc, #232]	; (8004044 <TIM_Base_SetConfig+0x124>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d108      	bne.n	8003f72 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	68fa      	ldr	r2, [r7, #12]
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	4a2f      	ldr	r2, [pc, #188]	; (8004034 <TIM_Base_SetConfig+0x114>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d01f      	beq.n	8003fba <TIM_Base_SetConfig+0x9a>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f80:	d01b      	beq.n	8003fba <TIM_Base_SetConfig+0x9a>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	4a2c      	ldr	r2, [pc, #176]	; (8004038 <TIM_Base_SetConfig+0x118>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d017      	beq.n	8003fba <TIM_Base_SetConfig+0x9a>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	4a2b      	ldr	r2, [pc, #172]	; (800403c <TIM_Base_SetConfig+0x11c>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d013      	beq.n	8003fba <TIM_Base_SetConfig+0x9a>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	4a2a      	ldr	r2, [pc, #168]	; (8004040 <TIM_Base_SetConfig+0x120>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d00f      	beq.n	8003fba <TIM_Base_SetConfig+0x9a>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	4a29      	ldr	r2, [pc, #164]	; (8004044 <TIM_Base_SetConfig+0x124>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d00b      	beq.n	8003fba <TIM_Base_SetConfig+0x9a>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	4a28      	ldr	r2, [pc, #160]	; (8004048 <TIM_Base_SetConfig+0x128>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d007      	beq.n	8003fba <TIM_Base_SetConfig+0x9a>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	4a27      	ldr	r2, [pc, #156]	; (800404c <TIM_Base_SetConfig+0x12c>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d003      	beq.n	8003fba <TIM_Base_SetConfig+0x9a>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	4a26      	ldr	r2, [pc, #152]	; (8004050 <TIM_Base_SetConfig+0x130>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d108      	bne.n	8003fcc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fc0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	68db      	ldr	r3, [r3, #12]
 8003fc6:	68fa      	ldr	r2, [r7, #12]
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	695b      	ldr	r3, [r3, #20]
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	68fa      	ldr	r2, [r7, #12]
 8003fde:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	689a      	ldr	r2, [r3, #8]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	681a      	ldr	r2, [r3, #0]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	4a10      	ldr	r2, [pc, #64]	; (8004034 <TIM_Base_SetConfig+0x114>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d00f      	beq.n	8004018 <TIM_Base_SetConfig+0xf8>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	4a12      	ldr	r2, [pc, #72]	; (8004044 <TIM_Base_SetConfig+0x124>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d00b      	beq.n	8004018 <TIM_Base_SetConfig+0xf8>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	4a11      	ldr	r2, [pc, #68]	; (8004048 <TIM_Base_SetConfig+0x128>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d007      	beq.n	8004018 <TIM_Base_SetConfig+0xf8>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	4a10      	ldr	r2, [pc, #64]	; (800404c <TIM_Base_SetConfig+0x12c>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d003      	beq.n	8004018 <TIM_Base_SetConfig+0xf8>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	4a0f      	ldr	r2, [pc, #60]	; (8004050 <TIM_Base_SetConfig+0x130>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d103      	bne.n	8004020 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	691a      	ldr	r2, [r3, #16]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2201      	movs	r2, #1
 8004024:	615a      	str	r2, [r3, #20]
}
 8004026:	bf00      	nop
 8004028:	3714      	adds	r7, #20
 800402a:	46bd      	mov	sp, r7
 800402c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004030:	4770      	bx	lr
 8004032:	bf00      	nop
 8004034:	40012c00 	.word	0x40012c00
 8004038:	40000400 	.word	0x40000400
 800403c:	40000800 	.word	0x40000800
 8004040:	40000c00 	.word	0x40000c00
 8004044:	40013400 	.word	0x40013400
 8004048:	40014000 	.word	0x40014000
 800404c:	40014400 	.word	0x40014400
 8004050:	40014800 	.word	0x40014800

08004054 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004054:	b480      	push	{r7}
 8004056:	b083      	sub	sp, #12
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800405c:	bf00      	nop
 800405e:	370c      	adds	r7, #12
 8004060:	46bd      	mov	sp, r7
 8004062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004066:	4770      	bx	lr

08004068 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004068:	b480      	push	{r7}
 800406a:	b083      	sub	sp, #12
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004070:	bf00      	nop
 8004072:	370c      	adds	r7, #12
 8004074:	46bd      	mov	sp, r7
 8004076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407a:	4770      	bx	lr

0800407c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800407c:	b480      	push	{r7}
 800407e:	b083      	sub	sp, #12
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004084:	bf00      	nop
 8004086:	370c      	adds	r7, #12
 8004088:	46bd      	mov	sp, r7
 800408a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408e:	4770      	bx	lr

08004090 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b082      	sub	sp, #8
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d101      	bne.n	80040a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	e040      	b.n	8004124 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d106      	bne.n	80040b8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2200      	movs	r2, #0
 80040ae:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80040b2:	6878      	ldr	r0, [r7, #4]
 80040b4:	f7fc fffe 	bl	80010b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2224      	movs	r2, #36	; 0x24
 80040bc:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	681a      	ldr	r2, [r3, #0]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f022 0201 	bic.w	r2, r2, #1
 80040cc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80040ce:	6878      	ldr	r0, [r7, #4]
 80040d0:	f000 f82c 	bl	800412c <UART_SetConfig>
 80040d4:	4603      	mov	r3, r0
 80040d6:	2b01      	cmp	r3, #1
 80040d8:	d101      	bne.n	80040de <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	e022      	b.n	8004124 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d002      	beq.n	80040ec <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	f000 faaa 	bl	8004640 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	685a      	ldr	r2, [r3, #4]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80040fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	689a      	ldr	r2, [r3, #8]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800410a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	681a      	ldr	r2, [r3, #0]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f042 0201 	orr.w	r2, r2, #1
 800411a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800411c:	6878      	ldr	r0, [r7, #4]
 800411e:	f000 fb31 	bl	8004784 <UART_CheckIdleState>
 8004122:	4603      	mov	r3, r0
}
 8004124:	4618      	mov	r0, r3
 8004126:	3708      	adds	r7, #8
 8004128:	46bd      	mov	sp, r7
 800412a:	bd80      	pop	{r7, pc}

0800412c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800412c:	b5b0      	push	{r4, r5, r7, lr}
 800412e:	b088      	sub	sp, #32
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004134:	2300      	movs	r3, #0
 8004136:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	689a      	ldr	r2, [r3, #8]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	691b      	ldr	r3, [r3, #16]
 8004140:	431a      	orrs	r2, r3
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	695b      	ldr	r3, [r3, #20]
 8004146:	431a      	orrs	r2, r3
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	69db      	ldr	r3, [r3, #28]
 800414c:	4313      	orrs	r3, r2
 800414e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	681a      	ldr	r2, [r3, #0]
 8004156:	4bad      	ldr	r3, [pc, #692]	; (800440c <UART_SetConfig+0x2e0>)
 8004158:	4013      	ands	r3, r2
 800415a:	687a      	ldr	r2, [r7, #4]
 800415c:	6812      	ldr	r2, [r2, #0]
 800415e:	69f9      	ldr	r1, [r7, #28]
 8004160:	430b      	orrs	r3, r1
 8004162:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	68da      	ldr	r2, [r3, #12]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	430a      	orrs	r2, r1
 8004178:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	699b      	ldr	r3, [r3, #24]
 800417e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4aa2      	ldr	r2, [pc, #648]	; (8004410 <UART_SetConfig+0x2e4>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d004      	beq.n	8004194 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6a1b      	ldr	r3, [r3, #32]
 800418e:	69fa      	ldr	r2, [r7, #28]
 8004190:	4313      	orrs	r3, r2
 8004192:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	69fa      	ldr	r2, [r7, #28]
 80041a4:	430a      	orrs	r2, r1
 80041a6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a99      	ldr	r2, [pc, #612]	; (8004414 <UART_SetConfig+0x2e8>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d121      	bne.n	80041f6 <UART_SetConfig+0xca>
 80041b2:	4b99      	ldr	r3, [pc, #612]	; (8004418 <UART_SetConfig+0x2ec>)
 80041b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041b8:	f003 0303 	and.w	r3, r3, #3
 80041bc:	2b03      	cmp	r3, #3
 80041be:	d817      	bhi.n	80041f0 <UART_SetConfig+0xc4>
 80041c0:	a201      	add	r2, pc, #4	; (adr r2, 80041c8 <UART_SetConfig+0x9c>)
 80041c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041c6:	bf00      	nop
 80041c8:	080041d9 	.word	0x080041d9
 80041cc:	080041e5 	.word	0x080041e5
 80041d0:	080041df 	.word	0x080041df
 80041d4:	080041eb 	.word	0x080041eb
 80041d8:	2301      	movs	r3, #1
 80041da:	76fb      	strb	r3, [r7, #27]
 80041dc:	e0e7      	b.n	80043ae <UART_SetConfig+0x282>
 80041de:	2302      	movs	r3, #2
 80041e0:	76fb      	strb	r3, [r7, #27]
 80041e2:	e0e4      	b.n	80043ae <UART_SetConfig+0x282>
 80041e4:	2304      	movs	r3, #4
 80041e6:	76fb      	strb	r3, [r7, #27]
 80041e8:	e0e1      	b.n	80043ae <UART_SetConfig+0x282>
 80041ea:	2308      	movs	r3, #8
 80041ec:	76fb      	strb	r3, [r7, #27]
 80041ee:	e0de      	b.n	80043ae <UART_SetConfig+0x282>
 80041f0:	2310      	movs	r3, #16
 80041f2:	76fb      	strb	r3, [r7, #27]
 80041f4:	e0db      	b.n	80043ae <UART_SetConfig+0x282>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a88      	ldr	r2, [pc, #544]	; (800441c <UART_SetConfig+0x2f0>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d132      	bne.n	8004266 <UART_SetConfig+0x13a>
 8004200:	4b85      	ldr	r3, [pc, #532]	; (8004418 <UART_SetConfig+0x2ec>)
 8004202:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004206:	f003 030c 	and.w	r3, r3, #12
 800420a:	2b0c      	cmp	r3, #12
 800420c:	d828      	bhi.n	8004260 <UART_SetConfig+0x134>
 800420e:	a201      	add	r2, pc, #4	; (adr r2, 8004214 <UART_SetConfig+0xe8>)
 8004210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004214:	08004249 	.word	0x08004249
 8004218:	08004261 	.word	0x08004261
 800421c:	08004261 	.word	0x08004261
 8004220:	08004261 	.word	0x08004261
 8004224:	08004255 	.word	0x08004255
 8004228:	08004261 	.word	0x08004261
 800422c:	08004261 	.word	0x08004261
 8004230:	08004261 	.word	0x08004261
 8004234:	0800424f 	.word	0x0800424f
 8004238:	08004261 	.word	0x08004261
 800423c:	08004261 	.word	0x08004261
 8004240:	08004261 	.word	0x08004261
 8004244:	0800425b 	.word	0x0800425b
 8004248:	2300      	movs	r3, #0
 800424a:	76fb      	strb	r3, [r7, #27]
 800424c:	e0af      	b.n	80043ae <UART_SetConfig+0x282>
 800424e:	2302      	movs	r3, #2
 8004250:	76fb      	strb	r3, [r7, #27]
 8004252:	e0ac      	b.n	80043ae <UART_SetConfig+0x282>
 8004254:	2304      	movs	r3, #4
 8004256:	76fb      	strb	r3, [r7, #27]
 8004258:	e0a9      	b.n	80043ae <UART_SetConfig+0x282>
 800425a:	2308      	movs	r3, #8
 800425c:	76fb      	strb	r3, [r7, #27]
 800425e:	e0a6      	b.n	80043ae <UART_SetConfig+0x282>
 8004260:	2310      	movs	r3, #16
 8004262:	76fb      	strb	r3, [r7, #27]
 8004264:	e0a3      	b.n	80043ae <UART_SetConfig+0x282>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a6d      	ldr	r2, [pc, #436]	; (8004420 <UART_SetConfig+0x2f4>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d120      	bne.n	80042b2 <UART_SetConfig+0x186>
 8004270:	4b69      	ldr	r3, [pc, #420]	; (8004418 <UART_SetConfig+0x2ec>)
 8004272:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004276:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800427a:	2b30      	cmp	r3, #48	; 0x30
 800427c:	d013      	beq.n	80042a6 <UART_SetConfig+0x17a>
 800427e:	2b30      	cmp	r3, #48	; 0x30
 8004280:	d814      	bhi.n	80042ac <UART_SetConfig+0x180>
 8004282:	2b20      	cmp	r3, #32
 8004284:	d009      	beq.n	800429a <UART_SetConfig+0x16e>
 8004286:	2b20      	cmp	r3, #32
 8004288:	d810      	bhi.n	80042ac <UART_SetConfig+0x180>
 800428a:	2b00      	cmp	r3, #0
 800428c:	d002      	beq.n	8004294 <UART_SetConfig+0x168>
 800428e:	2b10      	cmp	r3, #16
 8004290:	d006      	beq.n	80042a0 <UART_SetConfig+0x174>
 8004292:	e00b      	b.n	80042ac <UART_SetConfig+0x180>
 8004294:	2300      	movs	r3, #0
 8004296:	76fb      	strb	r3, [r7, #27]
 8004298:	e089      	b.n	80043ae <UART_SetConfig+0x282>
 800429a:	2302      	movs	r3, #2
 800429c:	76fb      	strb	r3, [r7, #27]
 800429e:	e086      	b.n	80043ae <UART_SetConfig+0x282>
 80042a0:	2304      	movs	r3, #4
 80042a2:	76fb      	strb	r3, [r7, #27]
 80042a4:	e083      	b.n	80043ae <UART_SetConfig+0x282>
 80042a6:	2308      	movs	r3, #8
 80042a8:	76fb      	strb	r3, [r7, #27]
 80042aa:	e080      	b.n	80043ae <UART_SetConfig+0x282>
 80042ac:	2310      	movs	r3, #16
 80042ae:	76fb      	strb	r3, [r7, #27]
 80042b0:	e07d      	b.n	80043ae <UART_SetConfig+0x282>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a5b      	ldr	r2, [pc, #364]	; (8004424 <UART_SetConfig+0x2f8>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d120      	bne.n	80042fe <UART_SetConfig+0x1d2>
 80042bc:	4b56      	ldr	r3, [pc, #344]	; (8004418 <UART_SetConfig+0x2ec>)
 80042be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042c2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80042c6:	2bc0      	cmp	r3, #192	; 0xc0
 80042c8:	d013      	beq.n	80042f2 <UART_SetConfig+0x1c6>
 80042ca:	2bc0      	cmp	r3, #192	; 0xc0
 80042cc:	d814      	bhi.n	80042f8 <UART_SetConfig+0x1cc>
 80042ce:	2b80      	cmp	r3, #128	; 0x80
 80042d0:	d009      	beq.n	80042e6 <UART_SetConfig+0x1ba>
 80042d2:	2b80      	cmp	r3, #128	; 0x80
 80042d4:	d810      	bhi.n	80042f8 <UART_SetConfig+0x1cc>
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d002      	beq.n	80042e0 <UART_SetConfig+0x1b4>
 80042da:	2b40      	cmp	r3, #64	; 0x40
 80042dc:	d006      	beq.n	80042ec <UART_SetConfig+0x1c0>
 80042de:	e00b      	b.n	80042f8 <UART_SetConfig+0x1cc>
 80042e0:	2300      	movs	r3, #0
 80042e2:	76fb      	strb	r3, [r7, #27]
 80042e4:	e063      	b.n	80043ae <UART_SetConfig+0x282>
 80042e6:	2302      	movs	r3, #2
 80042e8:	76fb      	strb	r3, [r7, #27]
 80042ea:	e060      	b.n	80043ae <UART_SetConfig+0x282>
 80042ec:	2304      	movs	r3, #4
 80042ee:	76fb      	strb	r3, [r7, #27]
 80042f0:	e05d      	b.n	80043ae <UART_SetConfig+0x282>
 80042f2:	2308      	movs	r3, #8
 80042f4:	76fb      	strb	r3, [r7, #27]
 80042f6:	e05a      	b.n	80043ae <UART_SetConfig+0x282>
 80042f8:	2310      	movs	r3, #16
 80042fa:	76fb      	strb	r3, [r7, #27]
 80042fc:	e057      	b.n	80043ae <UART_SetConfig+0x282>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a49      	ldr	r2, [pc, #292]	; (8004428 <UART_SetConfig+0x2fc>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d125      	bne.n	8004354 <UART_SetConfig+0x228>
 8004308:	4b43      	ldr	r3, [pc, #268]	; (8004418 <UART_SetConfig+0x2ec>)
 800430a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800430e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004312:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004316:	d017      	beq.n	8004348 <UART_SetConfig+0x21c>
 8004318:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800431c:	d817      	bhi.n	800434e <UART_SetConfig+0x222>
 800431e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004322:	d00b      	beq.n	800433c <UART_SetConfig+0x210>
 8004324:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004328:	d811      	bhi.n	800434e <UART_SetConfig+0x222>
 800432a:	2b00      	cmp	r3, #0
 800432c:	d003      	beq.n	8004336 <UART_SetConfig+0x20a>
 800432e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004332:	d006      	beq.n	8004342 <UART_SetConfig+0x216>
 8004334:	e00b      	b.n	800434e <UART_SetConfig+0x222>
 8004336:	2300      	movs	r3, #0
 8004338:	76fb      	strb	r3, [r7, #27]
 800433a:	e038      	b.n	80043ae <UART_SetConfig+0x282>
 800433c:	2302      	movs	r3, #2
 800433e:	76fb      	strb	r3, [r7, #27]
 8004340:	e035      	b.n	80043ae <UART_SetConfig+0x282>
 8004342:	2304      	movs	r3, #4
 8004344:	76fb      	strb	r3, [r7, #27]
 8004346:	e032      	b.n	80043ae <UART_SetConfig+0x282>
 8004348:	2308      	movs	r3, #8
 800434a:	76fb      	strb	r3, [r7, #27]
 800434c:	e02f      	b.n	80043ae <UART_SetConfig+0x282>
 800434e:	2310      	movs	r3, #16
 8004350:	76fb      	strb	r3, [r7, #27]
 8004352:	e02c      	b.n	80043ae <UART_SetConfig+0x282>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a2d      	ldr	r2, [pc, #180]	; (8004410 <UART_SetConfig+0x2e4>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d125      	bne.n	80043aa <UART_SetConfig+0x27e>
 800435e:	4b2e      	ldr	r3, [pc, #184]	; (8004418 <UART_SetConfig+0x2ec>)
 8004360:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004364:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004368:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800436c:	d017      	beq.n	800439e <UART_SetConfig+0x272>
 800436e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004372:	d817      	bhi.n	80043a4 <UART_SetConfig+0x278>
 8004374:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004378:	d00b      	beq.n	8004392 <UART_SetConfig+0x266>
 800437a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800437e:	d811      	bhi.n	80043a4 <UART_SetConfig+0x278>
 8004380:	2b00      	cmp	r3, #0
 8004382:	d003      	beq.n	800438c <UART_SetConfig+0x260>
 8004384:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004388:	d006      	beq.n	8004398 <UART_SetConfig+0x26c>
 800438a:	e00b      	b.n	80043a4 <UART_SetConfig+0x278>
 800438c:	2300      	movs	r3, #0
 800438e:	76fb      	strb	r3, [r7, #27]
 8004390:	e00d      	b.n	80043ae <UART_SetConfig+0x282>
 8004392:	2302      	movs	r3, #2
 8004394:	76fb      	strb	r3, [r7, #27]
 8004396:	e00a      	b.n	80043ae <UART_SetConfig+0x282>
 8004398:	2304      	movs	r3, #4
 800439a:	76fb      	strb	r3, [r7, #27]
 800439c:	e007      	b.n	80043ae <UART_SetConfig+0x282>
 800439e:	2308      	movs	r3, #8
 80043a0:	76fb      	strb	r3, [r7, #27]
 80043a2:	e004      	b.n	80043ae <UART_SetConfig+0x282>
 80043a4:	2310      	movs	r3, #16
 80043a6:	76fb      	strb	r3, [r7, #27]
 80043a8:	e001      	b.n	80043ae <UART_SetConfig+0x282>
 80043aa:	2310      	movs	r3, #16
 80043ac:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a17      	ldr	r2, [pc, #92]	; (8004410 <UART_SetConfig+0x2e4>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	f040 8087 	bne.w	80044c8 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80043ba:	7efb      	ldrb	r3, [r7, #27]
 80043bc:	2b08      	cmp	r3, #8
 80043be:	d837      	bhi.n	8004430 <UART_SetConfig+0x304>
 80043c0:	a201      	add	r2, pc, #4	; (adr r2, 80043c8 <UART_SetConfig+0x29c>)
 80043c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043c6:	bf00      	nop
 80043c8:	080043ed 	.word	0x080043ed
 80043cc:	08004431 	.word	0x08004431
 80043d0:	080043f5 	.word	0x080043f5
 80043d4:	08004431 	.word	0x08004431
 80043d8:	080043fb 	.word	0x080043fb
 80043dc:	08004431 	.word	0x08004431
 80043e0:	08004431 	.word	0x08004431
 80043e4:	08004431 	.word	0x08004431
 80043e8:	08004403 	.word	0x08004403
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80043ec:	f7fe fd52 	bl	8002e94 <HAL_RCC_GetPCLK1Freq>
 80043f0:	6178      	str	r0, [r7, #20]
        break;
 80043f2:	e022      	b.n	800443a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80043f4:	4b0d      	ldr	r3, [pc, #52]	; (800442c <UART_SetConfig+0x300>)
 80043f6:	617b      	str	r3, [r7, #20]
        break;
 80043f8:	e01f      	b.n	800443a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80043fa:	f7fe fcb3 	bl	8002d64 <HAL_RCC_GetSysClockFreq>
 80043fe:	6178      	str	r0, [r7, #20]
        break;
 8004400:	e01b      	b.n	800443a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004402:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004406:	617b      	str	r3, [r7, #20]
        break;
 8004408:	e017      	b.n	800443a <UART_SetConfig+0x30e>
 800440a:	bf00      	nop
 800440c:	efff69f3 	.word	0xefff69f3
 8004410:	40008000 	.word	0x40008000
 8004414:	40013800 	.word	0x40013800
 8004418:	40021000 	.word	0x40021000
 800441c:	40004400 	.word	0x40004400
 8004420:	40004800 	.word	0x40004800
 8004424:	40004c00 	.word	0x40004c00
 8004428:	40005000 	.word	0x40005000
 800442c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004430:	2300      	movs	r3, #0
 8004432:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004434:	2301      	movs	r3, #1
 8004436:	76bb      	strb	r3, [r7, #26]
        break;
 8004438:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	2b00      	cmp	r3, #0
 800443e:	f000 80f1 	beq.w	8004624 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	685a      	ldr	r2, [r3, #4]
 8004446:	4613      	mov	r3, r2
 8004448:	005b      	lsls	r3, r3, #1
 800444a:	4413      	add	r3, r2
 800444c:	697a      	ldr	r2, [r7, #20]
 800444e:	429a      	cmp	r2, r3
 8004450:	d305      	bcc.n	800445e <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004458:	697a      	ldr	r2, [r7, #20]
 800445a:	429a      	cmp	r2, r3
 800445c:	d902      	bls.n	8004464 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 800445e:	2301      	movs	r3, #1
 8004460:	76bb      	strb	r3, [r7, #26]
 8004462:	e0df      	b.n	8004624 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004464:	697b      	ldr	r3, [r7, #20]
 8004466:	4618      	mov	r0, r3
 8004468:	f04f 0100 	mov.w	r1, #0
 800446c:	f04f 0200 	mov.w	r2, #0
 8004470:	f04f 0300 	mov.w	r3, #0
 8004474:	020b      	lsls	r3, r1, #8
 8004476:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800447a:	0202      	lsls	r2, r0, #8
 800447c:	6879      	ldr	r1, [r7, #4]
 800447e:	6849      	ldr	r1, [r1, #4]
 8004480:	0849      	lsrs	r1, r1, #1
 8004482:	4608      	mov	r0, r1
 8004484:	f04f 0100 	mov.w	r1, #0
 8004488:	1814      	adds	r4, r2, r0
 800448a:	eb43 0501 	adc.w	r5, r3, r1
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	461a      	mov	r2, r3
 8004494:	f04f 0300 	mov.w	r3, #0
 8004498:	4620      	mov	r0, r4
 800449a:	4629      	mov	r1, r5
 800449c:	f7fb fe98 	bl	80001d0 <__aeabi_uldivmod>
 80044a0:	4602      	mov	r2, r0
 80044a2:	460b      	mov	r3, r1
 80044a4:	4613      	mov	r3, r2
 80044a6:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80044ae:	d308      	bcc.n	80044c2 <UART_SetConfig+0x396>
 80044b0:	693b      	ldr	r3, [r7, #16]
 80044b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80044b6:	d204      	bcs.n	80044c2 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	693a      	ldr	r2, [r7, #16]
 80044be:	60da      	str	r2, [r3, #12]
 80044c0:	e0b0      	b.n	8004624 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 80044c2:	2301      	movs	r3, #1
 80044c4:	76bb      	strb	r3, [r7, #26]
 80044c6:	e0ad      	b.n	8004624 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	69db      	ldr	r3, [r3, #28]
 80044cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044d0:	d15b      	bne.n	800458a <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 80044d2:	7efb      	ldrb	r3, [r7, #27]
 80044d4:	2b08      	cmp	r3, #8
 80044d6:	d828      	bhi.n	800452a <UART_SetConfig+0x3fe>
 80044d8:	a201      	add	r2, pc, #4	; (adr r2, 80044e0 <UART_SetConfig+0x3b4>)
 80044da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044de:	bf00      	nop
 80044e0:	08004505 	.word	0x08004505
 80044e4:	0800450d 	.word	0x0800450d
 80044e8:	08004515 	.word	0x08004515
 80044ec:	0800452b 	.word	0x0800452b
 80044f0:	0800451b 	.word	0x0800451b
 80044f4:	0800452b 	.word	0x0800452b
 80044f8:	0800452b 	.word	0x0800452b
 80044fc:	0800452b 	.word	0x0800452b
 8004500:	08004523 	.word	0x08004523
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004504:	f7fe fcc6 	bl	8002e94 <HAL_RCC_GetPCLK1Freq>
 8004508:	6178      	str	r0, [r7, #20]
        break;
 800450a:	e013      	b.n	8004534 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800450c:	f7fe fcd8 	bl	8002ec0 <HAL_RCC_GetPCLK2Freq>
 8004510:	6178      	str	r0, [r7, #20]
        break;
 8004512:	e00f      	b.n	8004534 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004514:	4b49      	ldr	r3, [pc, #292]	; (800463c <UART_SetConfig+0x510>)
 8004516:	617b      	str	r3, [r7, #20]
        break;
 8004518:	e00c      	b.n	8004534 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800451a:	f7fe fc23 	bl	8002d64 <HAL_RCC_GetSysClockFreq>
 800451e:	6178      	str	r0, [r7, #20]
        break;
 8004520:	e008      	b.n	8004534 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004522:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004526:	617b      	str	r3, [r7, #20]
        break;
 8004528:	e004      	b.n	8004534 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800452a:	2300      	movs	r3, #0
 800452c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800452e:	2301      	movs	r3, #1
 8004530:	76bb      	strb	r3, [r7, #26]
        break;
 8004532:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004534:	697b      	ldr	r3, [r7, #20]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d074      	beq.n	8004624 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	005a      	lsls	r2, r3, #1
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	085b      	lsrs	r3, r3, #1
 8004544:	441a      	add	r2, r3
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	fbb2 f3f3 	udiv	r3, r2, r3
 800454e:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	2b0f      	cmp	r3, #15
 8004554:	d916      	bls.n	8004584 <UART_SetConfig+0x458>
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800455c:	d212      	bcs.n	8004584 <UART_SetConfig+0x458>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	b29b      	uxth	r3, r3
 8004562:	f023 030f 	bic.w	r3, r3, #15
 8004566:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	085b      	lsrs	r3, r3, #1
 800456c:	b29b      	uxth	r3, r3
 800456e:	f003 0307 	and.w	r3, r3, #7
 8004572:	b29a      	uxth	r2, r3
 8004574:	89fb      	ldrh	r3, [r7, #14]
 8004576:	4313      	orrs	r3, r2
 8004578:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	89fa      	ldrh	r2, [r7, #14]
 8004580:	60da      	str	r2, [r3, #12]
 8004582:	e04f      	b.n	8004624 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004584:	2301      	movs	r3, #1
 8004586:	76bb      	strb	r3, [r7, #26]
 8004588:	e04c      	b.n	8004624 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800458a:	7efb      	ldrb	r3, [r7, #27]
 800458c:	2b08      	cmp	r3, #8
 800458e:	d828      	bhi.n	80045e2 <UART_SetConfig+0x4b6>
 8004590:	a201      	add	r2, pc, #4	; (adr r2, 8004598 <UART_SetConfig+0x46c>)
 8004592:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004596:	bf00      	nop
 8004598:	080045bd 	.word	0x080045bd
 800459c:	080045c5 	.word	0x080045c5
 80045a0:	080045cd 	.word	0x080045cd
 80045a4:	080045e3 	.word	0x080045e3
 80045a8:	080045d3 	.word	0x080045d3
 80045ac:	080045e3 	.word	0x080045e3
 80045b0:	080045e3 	.word	0x080045e3
 80045b4:	080045e3 	.word	0x080045e3
 80045b8:	080045db 	.word	0x080045db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80045bc:	f7fe fc6a 	bl	8002e94 <HAL_RCC_GetPCLK1Freq>
 80045c0:	6178      	str	r0, [r7, #20]
        break;
 80045c2:	e013      	b.n	80045ec <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80045c4:	f7fe fc7c 	bl	8002ec0 <HAL_RCC_GetPCLK2Freq>
 80045c8:	6178      	str	r0, [r7, #20]
        break;
 80045ca:	e00f      	b.n	80045ec <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80045cc:	4b1b      	ldr	r3, [pc, #108]	; (800463c <UART_SetConfig+0x510>)
 80045ce:	617b      	str	r3, [r7, #20]
        break;
 80045d0:	e00c      	b.n	80045ec <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80045d2:	f7fe fbc7 	bl	8002d64 <HAL_RCC_GetSysClockFreq>
 80045d6:	6178      	str	r0, [r7, #20]
        break;
 80045d8:	e008      	b.n	80045ec <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80045da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045de:	617b      	str	r3, [r7, #20]
        break;
 80045e0:	e004      	b.n	80045ec <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 80045e2:	2300      	movs	r3, #0
 80045e4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80045e6:	2301      	movs	r3, #1
 80045e8:	76bb      	strb	r3, [r7, #26]
        break;
 80045ea:	bf00      	nop
    }

    if (pclk != 0U)
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d018      	beq.n	8004624 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	085a      	lsrs	r2, r3, #1
 80045f8:	697b      	ldr	r3, [r7, #20]
 80045fa:	441a      	add	r2, r3
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	fbb2 f3f3 	udiv	r3, r2, r3
 8004604:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	2b0f      	cmp	r3, #15
 800460a:	d909      	bls.n	8004620 <UART_SetConfig+0x4f4>
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004612:	d205      	bcs.n	8004620 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004614:	693b      	ldr	r3, [r7, #16]
 8004616:	b29a      	uxth	r2, r3
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	60da      	str	r2, [r3, #12]
 800461e:	e001      	b.n	8004624 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004620:	2301      	movs	r3, #1
 8004622:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2200      	movs	r2, #0
 8004628:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2200      	movs	r2, #0
 800462e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004630:	7ebb      	ldrb	r3, [r7, #26]
}
 8004632:	4618      	mov	r0, r3
 8004634:	3720      	adds	r7, #32
 8004636:	46bd      	mov	sp, r7
 8004638:	bdb0      	pop	{r4, r5, r7, pc}
 800463a:	bf00      	nop
 800463c:	00f42400 	.word	0x00f42400

08004640 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004640:	b480      	push	{r7}
 8004642:	b083      	sub	sp, #12
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800464c:	f003 0301 	and.w	r3, r3, #1
 8004650:	2b00      	cmp	r3, #0
 8004652:	d00a      	beq.n	800466a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	430a      	orrs	r2, r1
 8004668:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800466e:	f003 0302 	and.w	r3, r3, #2
 8004672:	2b00      	cmp	r3, #0
 8004674:	d00a      	beq.n	800468c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	430a      	orrs	r2, r1
 800468a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004690:	f003 0304 	and.w	r3, r3, #4
 8004694:	2b00      	cmp	r3, #0
 8004696:	d00a      	beq.n	80046ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	430a      	orrs	r2, r1
 80046ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b2:	f003 0308 	and.w	r3, r3, #8
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d00a      	beq.n	80046d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	430a      	orrs	r2, r1
 80046ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d4:	f003 0310 	and.w	r3, r3, #16
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d00a      	beq.n	80046f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	689b      	ldr	r3, [r3, #8]
 80046e2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	430a      	orrs	r2, r1
 80046f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f6:	f003 0320 	and.w	r3, r3, #32
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d00a      	beq.n	8004714 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	430a      	orrs	r2, r1
 8004712:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004718:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800471c:	2b00      	cmp	r3, #0
 800471e:	d01a      	beq.n	8004756 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	430a      	orrs	r2, r1
 8004734:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800473a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800473e:	d10a      	bne.n	8004756 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	430a      	orrs	r2, r1
 8004754:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800475a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800475e:	2b00      	cmp	r3, #0
 8004760:	d00a      	beq.n	8004778 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	430a      	orrs	r2, r1
 8004776:	605a      	str	r2, [r3, #4]
  }
}
 8004778:	bf00      	nop
 800477a:	370c      	adds	r7, #12
 800477c:	46bd      	mov	sp, r7
 800477e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004782:	4770      	bx	lr

08004784 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b086      	sub	sp, #24
 8004788:	af02      	add	r7, sp, #8
 800478a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2200      	movs	r2, #0
 8004790:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004794:	f7fc fe52 	bl	800143c <HAL_GetTick>
 8004798:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f003 0308 	and.w	r3, r3, #8
 80047a4:	2b08      	cmp	r3, #8
 80047a6:	d10e      	bne.n	80047c6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80047a8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80047ac:	9300      	str	r3, [sp, #0]
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	2200      	movs	r2, #0
 80047b2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80047b6:	6878      	ldr	r0, [r7, #4]
 80047b8:	f000 f82d 	bl	8004816 <UART_WaitOnFlagUntilTimeout>
 80047bc:	4603      	mov	r3, r0
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d001      	beq.n	80047c6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80047c2:	2303      	movs	r3, #3
 80047c4:	e023      	b.n	800480e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f003 0304 	and.w	r3, r3, #4
 80047d0:	2b04      	cmp	r3, #4
 80047d2:	d10e      	bne.n	80047f2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80047d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80047d8:	9300      	str	r3, [sp, #0]
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	2200      	movs	r2, #0
 80047de:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	f000 f817 	bl	8004816 <UART_WaitOnFlagUntilTimeout>
 80047e8:	4603      	mov	r3, r0
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d001      	beq.n	80047f2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80047ee:	2303      	movs	r3, #3
 80047f0:	e00d      	b.n	800480e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2220      	movs	r2, #32
 80047f6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2220      	movs	r2, #32
 80047fc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2200      	movs	r2, #0
 8004802:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2200      	movs	r2, #0
 8004808:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800480c:	2300      	movs	r3, #0
}
 800480e:	4618      	mov	r0, r3
 8004810:	3710      	adds	r7, #16
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}

08004816 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004816:	b580      	push	{r7, lr}
 8004818:	b09c      	sub	sp, #112	; 0x70
 800481a:	af00      	add	r7, sp, #0
 800481c:	60f8      	str	r0, [r7, #12]
 800481e:	60b9      	str	r1, [r7, #8]
 8004820:	603b      	str	r3, [r7, #0]
 8004822:	4613      	mov	r3, r2
 8004824:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004826:	e0a5      	b.n	8004974 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004828:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800482a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800482e:	f000 80a1 	beq.w	8004974 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004832:	f7fc fe03 	bl	800143c <HAL_GetTick>
 8004836:	4602      	mov	r2, r0
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	1ad3      	subs	r3, r2, r3
 800483c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800483e:	429a      	cmp	r2, r3
 8004840:	d302      	bcc.n	8004848 <UART_WaitOnFlagUntilTimeout+0x32>
 8004842:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004844:	2b00      	cmp	r3, #0
 8004846:	d13e      	bne.n	80048c6 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800484e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004850:	e853 3f00 	ldrex	r3, [r3]
 8004854:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004856:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004858:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800485c:	667b      	str	r3, [r7, #100]	; 0x64
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	461a      	mov	r2, r3
 8004864:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004866:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004868:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800486a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800486c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800486e:	e841 2300 	strex	r3, r2, [r1]
 8004872:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004874:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004876:	2b00      	cmp	r3, #0
 8004878:	d1e6      	bne.n	8004848 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	3308      	adds	r3, #8
 8004880:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004882:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004884:	e853 3f00 	ldrex	r3, [r3]
 8004888:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800488a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800488c:	f023 0301 	bic.w	r3, r3, #1
 8004890:	663b      	str	r3, [r7, #96]	; 0x60
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	3308      	adds	r3, #8
 8004898:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800489a:	64ba      	str	r2, [r7, #72]	; 0x48
 800489c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800489e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80048a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80048a2:	e841 2300 	strex	r3, r2, [r1]
 80048a6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80048a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d1e5      	bne.n	800487a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	2220      	movs	r2, #32
 80048b2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	2220      	movs	r2, #32
 80048b8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2200      	movs	r2, #0
 80048be:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80048c2:	2303      	movs	r3, #3
 80048c4:	e067      	b.n	8004996 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f003 0304 	and.w	r3, r3, #4
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d04f      	beq.n	8004974 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	69db      	ldr	r3, [r3, #28]
 80048da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048e2:	d147      	bne.n	8004974 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80048ec:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048f6:	e853 3f00 	ldrex	r3, [r3]
 80048fa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80048fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048fe:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004902:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	461a      	mov	r2, r3
 800490a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800490c:	637b      	str	r3, [r7, #52]	; 0x34
 800490e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004910:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004912:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004914:	e841 2300 	strex	r3, r2, [r1]
 8004918:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800491a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800491c:	2b00      	cmp	r3, #0
 800491e:	d1e6      	bne.n	80048ee <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	3308      	adds	r3, #8
 8004926:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	e853 3f00 	ldrex	r3, [r3]
 800492e:	613b      	str	r3, [r7, #16]
   return(result);
 8004930:	693b      	ldr	r3, [r7, #16]
 8004932:	f023 0301 	bic.w	r3, r3, #1
 8004936:	66bb      	str	r3, [r7, #104]	; 0x68
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	3308      	adds	r3, #8
 800493e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004940:	623a      	str	r2, [r7, #32]
 8004942:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004944:	69f9      	ldr	r1, [r7, #28]
 8004946:	6a3a      	ldr	r2, [r7, #32]
 8004948:	e841 2300 	strex	r3, r2, [r1]
 800494c:	61bb      	str	r3, [r7, #24]
   return(result);
 800494e:	69bb      	ldr	r3, [r7, #24]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d1e5      	bne.n	8004920 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	2220      	movs	r2, #32
 8004958:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	2220      	movs	r2, #32
 800495e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	2220      	movs	r2, #32
 8004964:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	2200      	movs	r2, #0
 800496c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004970:	2303      	movs	r3, #3
 8004972:	e010      	b.n	8004996 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	69da      	ldr	r2, [r3, #28]
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	4013      	ands	r3, r2
 800497e:	68ba      	ldr	r2, [r7, #8]
 8004980:	429a      	cmp	r2, r3
 8004982:	bf0c      	ite	eq
 8004984:	2301      	moveq	r3, #1
 8004986:	2300      	movne	r3, #0
 8004988:	b2db      	uxtb	r3, r3
 800498a:	461a      	mov	r2, r3
 800498c:	79fb      	ldrb	r3, [r7, #7]
 800498e:	429a      	cmp	r2, r3
 8004990:	f43f af4a 	beq.w	8004828 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004994:	2300      	movs	r3, #0
}
 8004996:	4618      	mov	r0, r3
 8004998:	3770      	adds	r7, #112	; 0x70
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}

0800499e <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800499e:	b084      	sub	sp, #16
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b084      	sub	sp, #16
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
 80049a8:	f107 001c 	add.w	r0, r7, #28
 80049ac:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	68db      	ldr	r3, [r3, #12]
 80049b4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 80049bc:	6878      	ldr	r0, [r7, #4]
 80049be:	f000 fa6b 	bl	8004e98 <USB_CoreReset>
 80049c2:	4603      	mov	r3, r0
 80049c4:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 80049c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d106      	bne.n	80049da <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049d0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	639a      	str	r2, [r3, #56]	; 0x38
 80049d8:	e005      	b.n	80049e6 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049de:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 80049e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	3710      	adds	r7, #16
 80049ec:	46bd      	mov	sp, r7
 80049ee:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80049f2:	b004      	add	sp, #16
 80049f4:	4770      	bx	lr

080049f6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80049f6:	b480      	push	{r7}
 80049f8:	b083      	sub	sp, #12
 80049fa:	af00      	add	r7, sp, #0
 80049fc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	689b      	ldr	r3, [r3, #8]
 8004a02:	f023 0201 	bic.w	r2, r3, #1
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004a0a:	2300      	movs	r3, #0
}
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	370c      	adds	r7, #12
 8004a10:	46bd      	mov	sp, r7
 8004a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a16:	4770      	bx	lr

08004a18 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b084      	sub	sp, #16
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
 8004a20:	460b      	mov	r3, r1
 8004a22:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004a24:	2300      	movs	r3, #0
 8004a26:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	68db      	ldr	r3, [r3, #12]
 8004a2c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004a34:	78fb      	ldrb	r3, [r7, #3]
 8004a36:	2b01      	cmp	r3, #1
 8004a38:	d115      	bne.n	8004a66 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	68db      	ldr	r3, [r3, #12]
 8004a3e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004a46:	2001      	movs	r0, #1
 8004a48:	f7fc fd04 	bl	8001454 <HAL_Delay>
      ms++;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	3301      	adds	r3, #1
 8004a50:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	f000 fa12 	bl	8004e7c <USB_GetMode>
 8004a58:	4603      	mov	r3, r0
 8004a5a:	2b01      	cmp	r3, #1
 8004a5c:	d01e      	beq.n	8004a9c <USB_SetCurrentMode+0x84>
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	2b31      	cmp	r3, #49	; 0x31
 8004a62:	d9f0      	bls.n	8004a46 <USB_SetCurrentMode+0x2e>
 8004a64:	e01a      	b.n	8004a9c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004a66:	78fb      	ldrb	r3, [r7, #3]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d115      	bne.n	8004a98 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	68db      	ldr	r3, [r3, #12]
 8004a70:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004a78:	2001      	movs	r0, #1
 8004a7a:	f7fc fceb 	bl	8001454 <HAL_Delay>
      ms++;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	3301      	adds	r3, #1
 8004a82:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004a84:	6878      	ldr	r0, [r7, #4]
 8004a86:	f000 f9f9 	bl	8004e7c <USB_GetMode>
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d005      	beq.n	8004a9c <USB_SetCurrentMode+0x84>
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	2b31      	cmp	r3, #49	; 0x31
 8004a94:	d9f0      	bls.n	8004a78 <USB_SetCurrentMode+0x60>
 8004a96:	e001      	b.n	8004a9c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	e005      	b.n	8004aa8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	2b32      	cmp	r3, #50	; 0x32
 8004aa0:	d101      	bne.n	8004aa6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	e000      	b.n	8004aa8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004aa6:	2300      	movs	r3, #0
}
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	3710      	adds	r7, #16
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bd80      	pop	{r7, pc}

08004ab0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004ab0:	b084      	sub	sp, #16
 8004ab2:	b580      	push	{r7, lr}
 8004ab4:	b086      	sub	sp, #24
 8004ab6:	af00      	add	r7, sp, #0
 8004ab8:	6078      	str	r0, [r7, #4]
 8004aba:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004abe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004aca:	2300      	movs	r3, #0
 8004acc:	613b      	str	r3, [r7, #16]
 8004ace:	e009      	b.n	8004ae4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004ad0:	687a      	ldr	r2, [r7, #4]
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	3340      	adds	r3, #64	; 0x40
 8004ad6:	009b      	lsls	r3, r3, #2
 8004ad8:	4413      	add	r3, r2
 8004ada:	2200      	movs	r2, #0
 8004adc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	3301      	adds	r3, #1
 8004ae2:	613b      	str	r3, [r7, #16]
 8004ae4:	693b      	ldr	r3, [r7, #16]
 8004ae6:	2b0e      	cmp	r3, #14
 8004ae8:	d9f2      	bls.n	8004ad0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004aea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d11c      	bne.n	8004b2a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	68fa      	ldr	r2, [r7, #12]
 8004afa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004afe:	f043 0302 	orr.w	r3, r3, #2
 8004b02:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b08:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	601a      	str	r2, [r3, #0]
 8004b28:	e005      	b.n	8004b36 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b2e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004b3c:	461a      	mov	r2, r3
 8004b3e:	2300      	movs	r3, #0
 8004b40:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b48:	4619      	mov	r1, r3
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b50:	461a      	mov	r2, r3
 8004b52:	680b      	ldr	r3, [r1, #0]
 8004b54:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004b56:	2103      	movs	r1, #3
 8004b58:	6878      	ldr	r0, [r7, #4]
 8004b5a:	f000 f955 	bl	8004e08 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004b5e:	2110      	movs	r1, #16
 8004b60:	6878      	ldr	r0, [r7, #4]
 8004b62:	f000 f8f1 	bl	8004d48 <USB_FlushTxFifo>
 8004b66:	4603      	mov	r3, r0
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d001      	beq.n	8004b70 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004b70:	6878      	ldr	r0, [r7, #4]
 8004b72:	f000 f91b 	bl	8004dac <USB_FlushRxFifo>
 8004b76:	4603      	mov	r3, r0
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d001      	beq.n	8004b80 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b86:	461a      	mov	r2, r3
 8004b88:	2300      	movs	r3, #0
 8004b8a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b92:	461a      	mov	r2, r3
 8004b94:	2300      	movs	r3, #0
 8004b96:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b9e:	461a      	mov	r2, r3
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	613b      	str	r3, [r7, #16]
 8004ba8:	e043      	b.n	8004c32 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	015a      	lsls	r2, r3, #5
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	4413      	add	r3, r2
 8004bb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004bbc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004bc0:	d118      	bne.n	8004bf4 <USB_DevInit+0x144>
    {
      if (i == 0U)
 8004bc2:	693b      	ldr	r3, [r7, #16]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d10a      	bne.n	8004bde <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004bc8:	693b      	ldr	r3, [r7, #16]
 8004bca:	015a      	lsls	r2, r3, #5
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	4413      	add	r3, r2
 8004bd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bd4:	461a      	mov	r2, r3
 8004bd6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004bda:	6013      	str	r3, [r2, #0]
 8004bdc:	e013      	b.n	8004c06 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	015a      	lsls	r2, r3, #5
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	4413      	add	r3, r2
 8004be6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bea:	461a      	mov	r2, r3
 8004bec:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004bf0:	6013      	str	r3, [r2, #0]
 8004bf2:	e008      	b.n	8004c06 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004bf4:	693b      	ldr	r3, [r7, #16]
 8004bf6:	015a      	lsls	r2, r3, #5
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	4413      	add	r3, r2
 8004bfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c00:	461a      	mov	r2, r3
 8004c02:	2300      	movs	r3, #0
 8004c04:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	015a      	lsls	r2, r3, #5
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	4413      	add	r3, r2
 8004c0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c12:	461a      	mov	r2, r3
 8004c14:	2300      	movs	r3, #0
 8004c16:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004c18:	693b      	ldr	r3, [r7, #16]
 8004c1a:	015a      	lsls	r2, r3, #5
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	4413      	add	r3, r2
 8004c20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c24:	461a      	mov	r2, r3
 8004c26:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004c2a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004c2c:	693b      	ldr	r3, [r7, #16]
 8004c2e:	3301      	adds	r3, #1
 8004c30:	613b      	str	r3, [r7, #16]
 8004c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c34:	693a      	ldr	r2, [r7, #16]
 8004c36:	429a      	cmp	r2, r3
 8004c38:	d3b7      	bcc.n	8004baa <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	613b      	str	r3, [r7, #16]
 8004c3e:	e043      	b.n	8004cc8 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	015a      	lsls	r2, r3, #5
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	4413      	add	r3, r2
 8004c48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004c52:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004c56:	d118      	bne.n	8004c8a <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8004c58:	693b      	ldr	r3, [r7, #16]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d10a      	bne.n	8004c74 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	015a      	lsls	r2, r3, #5
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	4413      	add	r3, r2
 8004c66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c6a:	461a      	mov	r2, r3
 8004c6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004c70:	6013      	str	r3, [r2, #0]
 8004c72:	e013      	b.n	8004c9c <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	015a      	lsls	r2, r3, #5
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	4413      	add	r3, r2
 8004c7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c80:	461a      	mov	r2, r3
 8004c82:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004c86:	6013      	str	r3, [r2, #0]
 8004c88:	e008      	b.n	8004c9c <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004c8a:	693b      	ldr	r3, [r7, #16]
 8004c8c:	015a      	lsls	r2, r3, #5
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	4413      	add	r3, r2
 8004c92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c96:	461a      	mov	r2, r3
 8004c98:	2300      	movs	r3, #0
 8004c9a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004c9c:	693b      	ldr	r3, [r7, #16]
 8004c9e:	015a      	lsls	r2, r3, #5
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	4413      	add	r3, r2
 8004ca4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ca8:	461a      	mov	r2, r3
 8004caa:	2300      	movs	r3, #0
 8004cac:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004cae:	693b      	ldr	r3, [r7, #16]
 8004cb0:	015a      	lsls	r2, r3, #5
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	4413      	add	r3, r2
 8004cb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cba:	461a      	mov	r2, r3
 8004cbc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004cc0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004cc2:	693b      	ldr	r3, [r7, #16]
 8004cc4:	3301      	adds	r3, #1
 8004cc6:	613b      	str	r3, [r7, #16]
 8004cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cca:	693a      	ldr	r2, [r7, #16]
 8004ccc:	429a      	cmp	r2, r3
 8004cce:	d3b7      	bcc.n	8004c40 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cd6:	691b      	ldr	r3, [r3, #16]
 8004cd8:	68fa      	ldr	r2, [r7, #12]
 8004cda:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004cde:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ce2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004cf0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	699b      	ldr	r3, [r3, #24]
 8004cf6:	f043 0210 	orr.w	r2, r3, #16
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	699a      	ldr	r2, [r3, #24]
 8004d02:	4b10      	ldr	r3, [pc, #64]	; (8004d44 <USB_DevInit+0x294>)
 8004d04:	4313      	orrs	r3, r2
 8004d06:	687a      	ldr	r2, [r7, #4]
 8004d08:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004d0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d005      	beq.n	8004d1c <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	699b      	ldr	r3, [r3, #24]
 8004d14:	f043 0208 	orr.w	r2, r3, #8
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004d1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d1e:	2b01      	cmp	r3, #1
 8004d20:	d107      	bne.n	8004d32 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	699b      	ldr	r3, [r3, #24]
 8004d26:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004d2a:	f043 0304 	orr.w	r3, r3, #4
 8004d2e:	687a      	ldr	r2, [r7, #4]
 8004d30:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004d32:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d34:	4618      	mov	r0, r3
 8004d36:	3718      	adds	r7, #24
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004d3e:	b004      	add	sp, #16
 8004d40:	4770      	bx	lr
 8004d42:	bf00      	nop
 8004d44:	803c3800 	.word	0x803c3800

08004d48 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b085      	sub	sp, #20
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
 8004d50:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004d52:	2300      	movs	r3, #0
 8004d54:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	3301      	adds	r3, #1
 8004d5a:	60fb      	str	r3, [r7, #12]
 8004d5c:	4a12      	ldr	r2, [pc, #72]	; (8004da8 <USB_FlushTxFifo+0x60>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d901      	bls.n	8004d66 <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004d62:	2303      	movs	r3, #3
 8004d64:	e01a      	b.n	8004d9c <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	691b      	ldr	r3, [r3, #16]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	daf3      	bge.n	8004d56 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004d6e:	2300      	movs	r3, #0
 8004d70:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	019b      	lsls	r3, r3, #6
 8004d76:	f043 0220 	orr.w	r2, r3, #32
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	3301      	adds	r3, #1
 8004d82:	60fb      	str	r3, [r7, #12]
 8004d84:	4a08      	ldr	r2, [pc, #32]	; (8004da8 <USB_FlushTxFifo+0x60>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d901      	bls.n	8004d8e <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 8004d8a:	2303      	movs	r3, #3
 8004d8c:	e006      	b.n	8004d9c <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	691b      	ldr	r3, [r3, #16]
 8004d92:	f003 0320 	and.w	r3, r3, #32
 8004d96:	2b20      	cmp	r3, #32
 8004d98:	d0f1      	beq.n	8004d7e <USB_FlushTxFifo+0x36>

  return HAL_OK;
 8004d9a:	2300      	movs	r3, #0
}
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	3714      	adds	r7, #20
 8004da0:	46bd      	mov	sp, r7
 8004da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da6:	4770      	bx	lr
 8004da8:	00030d40 	.word	0x00030d40

08004dac <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004dac:	b480      	push	{r7}
 8004dae:	b085      	sub	sp, #20
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004db4:	2300      	movs	r3, #0
 8004db6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	3301      	adds	r3, #1
 8004dbc:	60fb      	str	r3, [r7, #12]
 8004dbe:	4a11      	ldr	r2, [pc, #68]	; (8004e04 <USB_FlushRxFifo+0x58>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d901      	bls.n	8004dc8 <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 8004dc4:	2303      	movs	r3, #3
 8004dc6:	e017      	b.n	8004df8 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	691b      	ldr	r3, [r3, #16]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	daf3      	bge.n	8004db8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2210      	movs	r2, #16
 8004dd8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	3301      	adds	r3, #1
 8004dde:	60fb      	str	r3, [r7, #12]
 8004de0:	4a08      	ldr	r2, [pc, #32]	; (8004e04 <USB_FlushRxFifo+0x58>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d901      	bls.n	8004dea <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 8004de6:	2303      	movs	r3, #3
 8004de8:	e006      	b.n	8004df8 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	691b      	ldr	r3, [r3, #16]
 8004dee:	f003 0310 	and.w	r3, r3, #16
 8004df2:	2b10      	cmp	r3, #16
 8004df4:	d0f1      	beq.n	8004dda <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 8004df6:	2300      	movs	r3, #0
}
 8004df8:	4618      	mov	r0, r3
 8004dfa:	3714      	adds	r7, #20
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e02:	4770      	bx	lr
 8004e04:	00030d40 	.word	0x00030d40

08004e08 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b085      	sub	sp, #20
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
 8004e10:	460b      	mov	r3, r1
 8004e12:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e1e:	681a      	ldr	r2, [r3, #0]
 8004e20:	78fb      	ldrb	r3, [r7, #3]
 8004e22:	68f9      	ldr	r1, [r7, #12]
 8004e24:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004e2c:	2300      	movs	r3, #0
}
 8004e2e:	4618      	mov	r0, r3
 8004e30:	3714      	adds	r7, #20
 8004e32:	46bd      	mov	sp, r7
 8004e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e38:	4770      	bx	lr

08004e3a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004e3a:	b480      	push	{r7}
 8004e3c:	b085      	sub	sp, #20
 8004e3e:	af00      	add	r7, sp, #0
 8004e40:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	68fa      	ldr	r2, [r7, #12]
 8004e50:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004e54:	f023 0303 	bic.w	r3, r3, #3
 8004e58:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	68fa      	ldr	r2, [r7, #12]
 8004e64:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e68:	f043 0302 	orr.w	r3, r3, #2
 8004e6c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004e6e:	2300      	movs	r3, #0
}
 8004e70:	4618      	mov	r0, r3
 8004e72:	3714      	adds	r7, #20
 8004e74:	46bd      	mov	sp, r7
 8004e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7a:	4770      	bx	lr

08004e7c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b083      	sub	sp, #12
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	695b      	ldr	r3, [r3, #20]
 8004e88:	f003 0301 	and.w	r3, r3, #1
}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	370c      	adds	r7, #12
 8004e90:	46bd      	mov	sp, r7
 8004e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e96:	4770      	bx	lr

08004e98 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004e98:	b480      	push	{r7}
 8004e9a:	b085      	sub	sp, #20
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	3301      	adds	r3, #1
 8004ea8:	60fb      	str	r3, [r7, #12]
 8004eaa:	4a13      	ldr	r2, [pc, #76]	; (8004ef8 <USB_CoreReset+0x60>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d901      	bls.n	8004eb4 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8004eb0:	2303      	movs	r3, #3
 8004eb2:	e01a      	b.n	8004eea <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	691b      	ldr	r3, [r3, #16]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	daf3      	bge.n	8004ea4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	691b      	ldr	r3, [r3, #16]
 8004ec4:	f043 0201 	orr.w	r2, r3, #1
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	3301      	adds	r3, #1
 8004ed0:	60fb      	str	r3, [r7, #12]
 8004ed2:	4a09      	ldr	r2, [pc, #36]	; (8004ef8 <USB_CoreReset+0x60>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d901      	bls.n	8004edc <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8004ed8:	2303      	movs	r3, #3
 8004eda:	e006      	b.n	8004eea <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	691b      	ldr	r3, [r3, #16]
 8004ee0:	f003 0301 	and.w	r3, r3, #1
 8004ee4:	2b01      	cmp	r3, #1
 8004ee6:	d0f1      	beq.n	8004ecc <USB_CoreReset+0x34>

  return HAL_OK;
 8004ee8:	2300      	movs	r3, #0
}
 8004eea:	4618      	mov	r0, r3
 8004eec:	3714      	adds	r7, #20
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef4:	4770      	bx	lr
 8004ef6:	bf00      	nop
 8004ef8:	00030d40 	.word	0x00030d40

08004efc <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004f00:	f000 fa28 	bl	8005354 <vTaskStartScheduler>
  
  return osOK;
 8004f04:	2300      	movs	r3, #0
}
 8004f06:	4618      	mov	r0, r3
 8004f08:	bd80      	pop	{r7, pc}

08004f0a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004f0a:	b480      	push	{r7}
 8004f0c:	b083      	sub	sp, #12
 8004f0e:	af00      	add	r7, sp, #0
 8004f10:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	f103 0208 	add.w	r2, r3, #8
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	f04f 32ff 	mov.w	r2, #4294967295
 8004f22:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	f103 0208 	add.w	r2, r3, #8
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	f103 0208 	add.w	r2, r3, #8
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004f3e:	bf00      	nop
 8004f40:	370c      	adds	r7, #12
 8004f42:	46bd      	mov	sp, r7
 8004f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f48:	4770      	bx	lr

08004f4a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004f4a:	b480      	push	{r7}
 8004f4c:	b083      	sub	sp, #12
 8004f4e:	af00      	add	r7, sp, #0
 8004f50:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2200      	movs	r2, #0
 8004f56:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004f58:	bf00      	nop
 8004f5a:	370c      	adds	r7, #12
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f62:	4770      	bx	lr

08004f64 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004f64:	b480      	push	{r7}
 8004f66:	b085      	sub	sp, #20
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
 8004f6c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	68fa      	ldr	r2, [r7, #12]
 8004f78:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	689a      	ldr	r2, [r3, #8]
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	689b      	ldr	r3, [r3, #8]
 8004f86:	683a      	ldr	r2, [r7, #0]
 8004f88:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	683a      	ldr	r2, [r7, #0]
 8004f8e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	687a      	ldr	r2, [r7, #4]
 8004f94:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	1c5a      	adds	r2, r3, #1
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	601a      	str	r2, [r3, #0]
}
 8004fa0:	bf00      	nop
 8004fa2:	3714      	adds	r7, #20
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004faa:	4770      	bx	lr

08004fac <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004fac:	b480      	push	{r7}
 8004fae:	b085      	sub	sp, #20
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	691b      	ldr	r3, [r3, #16]
 8004fb8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	687a      	ldr	r2, [r7, #4]
 8004fc0:	6892      	ldr	r2, [r2, #8]
 8004fc2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	689b      	ldr	r3, [r3, #8]
 8004fc8:	687a      	ldr	r2, [r7, #4]
 8004fca:	6852      	ldr	r2, [r2, #4]
 8004fcc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	687a      	ldr	r2, [r7, #4]
 8004fd4:	429a      	cmp	r2, r3
 8004fd6:	d103      	bne.n	8004fe0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	689a      	ldr	r2, [r3, #8]
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	1e5a      	subs	r2, r3, #1
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
}
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	3714      	adds	r7, #20
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffe:	4770      	bx	lr

08005000 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005000:	b580      	push	{r7, lr}
 8005002:	b08e      	sub	sp, #56	; 0x38
 8005004:	af04      	add	r7, sp, #16
 8005006:	60f8      	str	r0, [r7, #12]
 8005008:	60b9      	str	r1, [r7, #8]
 800500a:	607a      	str	r2, [r7, #4]
 800500c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800500e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005010:	2b00      	cmp	r3, #0
 8005012:	d10a      	bne.n	800502a <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005014:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005018:	f383 8811 	msr	BASEPRI, r3
 800501c:	f3bf 8f6f 	isb	sy
 8005020:	f3bf 8f4f 	dsb	sy
 8005024:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005026:	bf00      	nop
 8005028:	e7fe      	b.n	8005028 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800502a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800502c:	2b00      	cmp	r3, #0
 800502e:	d10a      	bne.n	8005046 <xTaskCreateStatic+0x46>
	__asm volatile
 8005030:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005034:	f383 8811 	msr	BASEPRI, r3
 8005038:	f3bf 8f6f 	isb	sy
 800503c:	f3bf 8f4f 	dsb	sy
 8005040:	61fb      	str	r3, [r7, #28]
}
 8005042:	bf00      	nop
 8005044:	e7fe      	b.n	8005044 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005046:	23b4      	movs	r3, #180	; 0xb4
 8005048:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800504a:	693b      	ldr	r3, [r7, #16]
 800504c:	2bb4      	cmp	r3, #180	; 0xb4
 800504e:	d00a      	beq.n	8005066 <xTaskCreateStatic+0x66>
	__asm volatile
 8005050:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005054:	f383 8811 	msr	BASEPRI, r3
 8005058:	f3bf 8f6f 	isb	sy
 800505c:	f3bf 8f4f 	dsb	sy
 8005060:	61bb      	str	r3, [r7, #24]
}
 8005062:	bf00      	nop
 8005064:	e7fe      	b.n	8005064 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005066:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800506a:	2b00      	cmp	r3, #0
 800506c:	d01e      	beq.n	80050ac <xTaskCreateStatic+0xac>
 800506e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005070:	2b00      	cmp	r3, #0
 8005072:	d01b      	beq.n	80050ac <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005076:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800507a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800507c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800507e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005080:	2202      	movs	r2, #2
 8005082:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005086:	2300      	movs	r3, #0
 8005088:	9303      	str	r3, [sp, #12]
 800508a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800508c:	9302      	str	r3, [sp, #8]
 800508e:	f107 0314 	add.w	r3, r7, #20
 8005092:	9301      	str	r3, [sp, #4]
 8005094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005096:	9300      	str	r3, [sp, #0]
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	687a      	ldr	r2, [r7, #4]
 800509c:	68b9      	ldr	r1, [r7, #8]
 800509e:	68f8      	ldr	r0, [r7, #12]
 80050a0:	f000 f850 	bl	8005144 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80050a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80050a6:	f000 f8eb 	bl	8005280 <prvAddNewTaskToReadyList>
 80050aa:	e001      	b.n	80050b0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80050ac:	2300      	movs	r3, #0
 80050ae:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80050b0:	697b      	ldr	r3, [r7, #20]
	}
 80050b2:	4618      	mov	r0, r3
 80050b4:	3728      	adds	r7, #40	; 0x28
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd80      	pop	{r7, pc}

080050ba <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80050ba:	b580      	push	{r7, lr}
 80050bc:	b08c      	sub	sp, #48	; 0x30
 80050be:	af04      	add	r7, sp, #16
 80050c0:	60f8      	str	r0, [r7, #12]
 80050c2:	60b9      	str	r1, [r7, #8]
 80050c4:	603b      	str	r3, [r7, #0]
 80050c6:	4613      	mov	r3, r2
 80050c8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80050ca:	88fb      	ldrh	r3, [r7, #6]
 80050cc:	009b      	lsls	r3, r3, #2
 80050ce:	4618      	mov	r0, r3
 80050d0:	f000 fe5a 	bl	8005d88 <pvPortMalloc>
 80050d4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d00e      	beq.n	80050fa <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80050dc:	20b4      	movs	r0, #180	; 0xb4
 80050de:	f000 fe53 	bl	8005d88 <pvPortMalloc>
 80050e2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80050e4:	69fb      	ldr	r3, [r7, #28]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d003      	beq.n	80050f2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80050ea:	69fb      	ldr	r3, [r7, #28]
 80050ec:	697a      	ldr	r2, [r7, #20]
 80050ee:	631a      	str	r2, [r3, #48]	; 0x30
 80050f0:	e005      	b.n	80050fe <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80050f2:	6978      	ldr	r0, [r7, #20]
 80050f4:	f000 ff14 	bl	8005f20 <vPortFree>
 80050f8:	e001      	b.n	80050fe <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80050fa:	2300      	movs	r3, #0
 80050fc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80050fe:	69fb      	ldr	r3, [r7, #28]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d017      	beq.n	8005134 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005104:	69fb      	ldr	r3, [r7, #28]
 8005106:	2200      	movs	r2, #0
 8005108:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800510c:	88fa      	ldrh	r2, [r7, #6]
 800510e:	2300      	movs	r3, #0
 8005110:	9303      	str	r3, [sp, #12]
 8005112:	69fb      	ldr	r3, [r7, #28]
 8005114:	9302      	str	r3, [sp, #8]
 8005116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005118:	9301      	str	r3, [sp, #4]
 800511a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800511c:	9300      	str	r3, [sp, #0]
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	68b9      	ldr	r1, [r7, #8]
 8005122:	68f8      	ldr	r0, [r7, #12]
 8005124:	f000 f80e 	bl	8005144 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005128:	69f8      	ldr	r0, [r7, #28]
 800512a:	f000 f8a9 	bl	8005280 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800512e:	2301      	movs	r3, #1
 8005130:	61bb      	str	r3, [r7, #24]
 8005132:	e002      	b.n	800513a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005134:	f04f 33ff 	mov.w	r3, #4294967295
 8005138:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800513a:	69bb      	ldr	r3, [r7, #24]
	}
 800513c:	4618      	mov	r0, r3
 800513e:	3720      	adds	r7, #32
 8005140:	46bd      	mov	sp, r7
 8005142:	bd80      	pop	{r7, pc}

08005144 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b088      	sub	sp, #32
 8005148:	af00      	add	r7, sp, #0
 800514a:	60f8      	str	r0, [r7, #12]
 800514c:	60b9      	str	r1, [r7, #8]
 800514e:	607a      	str	r2, [r7, #4]
 8005150:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005154:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800515c:	3b01      	subs	r3, #1
 800515e:	009b      	lsls	r3, r3, #2
 8005160:	4413      	add	r3, r2
 8005162:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005164:	69bb      	ldr	r3, [r7, #24]
 8005166:	f023 0307 	bic.w	r3, r3, #7
 800516a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800516c:	69bb      	ldr	r3, [r7, #24]
 800516e:	f003 0307 	and.w	r3, r3, #7
 8005172:	2b00      	cmp	r3, #0
 8005174:	d00a      	beq.n	800518c <prvInitialiseNewTask+0x48>
	__asm volatile
 8005176:	f04f 0350 	mov.w	r3, #80	; 0x50
 800517a:	f383 8811 	msr	BASEPRI, r3
 800517e:	f3bf 8f6f 	isb	sy
 8005182:	f3bf 8f4f 	dsb	sy
 8005186:	617b      	str	r3, [r7, #20]
}
 8005188:	bf00      	nop
 800518a:	e7fe      	b.n	800518a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800518c:	68bb      	ldr	r3, [r7, #8]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d01f      	beq.n	80051d2 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005192:	2300      	movs	r3, #0
 8005194:	61fb      	str	r3, [r7, #28]
 8005196:	e012      	b.n	80051be <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005198:	68ba      	ldr	r2, [r7, #8]
 800519a:	69fb      	ldr	r3, [r7, #28]
 800519c:	4413      	add	r3, r2
 800519e:	7819      	ldrb	r1, [r3, #0]
 80051a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051a2:	69fb      	ldr	r3, [r7, #28]
 80051a4:	4413      	add	r3, r2
 80051a6:	3334      	adds	r3, #52	; 0x34
 80051a8:	460a      	mov	r2, r1
 80051aa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80051ac:	68ba      	ldr	r2, [r7, #8]
 80051ae:	69fb      	ldr	r3, [r7, #28]
 80051b0:	4413      	add	r3, r2
 80051b2:	781b      	ldrb	r3, [r3, #0]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d006      	beq.n	80051c6 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80051b8:	69fb      	ldr	r3, [r7, #28]
 80051ba:	3301      	adds	r3, #1
 80051bc:	61fb      	str	r3, [r7, #28]
 80051be:	69fb      	ldr	r3, [r7, #28]
 80051c0:	2b0f      	cmp	r3, #15
 80051c2:	d9e9      	bls.n	8005198 <prvInitialiseNewTask+0x54>
 80051c4:	e000      	b.n	80051c8 <prvInitialiseNewTask+0x84>
			{
				break;
 80051c6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80051c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ca:	2200      	movs	r2, #0
 80051cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80051d0:	e003      	b.n	80051da <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80051d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051d4:	2200      	movs	r2, #0
 80051d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80051da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051dc:	2b06      	cmp	r3, #6
 80051de:	d901      	bls.n	80051e4 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80051e0:	2306      	movs	r3, #6
 80051e2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80051e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80051e8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80051ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80051ee:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80051f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051f2:	2200      	movs	r2, #0
 80051f4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80051f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051f8:	3304      	adds	r3, #4
 80051fa:	4618      	mov	r0, r3
 80051fc:	f7ff fea5 	bl	8004f4a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005202:	3318      	adds	r3, #24
 8005204:	4618      	mov	r0, r3
 8005206:	f7ff fea0 	bl	8004f4a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800520a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800520c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800520e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005212:	f1c3 0207 	rsb	r2, r3, #7
 8005216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005218:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800521a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800521c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800521e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005222:	2200      	movs	r2, #0
 8005224:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800522a:	2200      	movs	r2, #0
 800522c:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005232:	334c      	adds	r3, #76	; 0x4c
 8005234:	2260      	movs	r2, #96	; 0x60
 8005236:	2100      	movs	r1, #0
 8005238:	4618      	mov	r0, r3
 800523a:	f000 ffb5 	bl	80061a8 <memset>
 800523e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005240:	4a0c      	ldr	r2, [pc, #48]	; (8005274 <prvInitialiseNewTask+0x130>)
 8005242:	651a      	str	r2, [r3, #80]	; 0x50
 8005244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005246:	4a0c      	ldr	r2, [pc, #48]	; (8005278 <prvInitialiseNewTask+0x134>)
 8005248:	655a      	str	r2, [r3, #84]	; 0x54
 800524a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800524c:	4a0b      	ldr	r2, [pc, #44]	; (800527c <prvInitialiseNewTask+0x138>)
 800524e:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005250:	683a      	ldr	r2, [r7, #0]
 8005252:	68f9      	ldr	r1, [r7, #12]
 8005254:	69b8      	ldr	r0, [r7, #24]
 8005256:	f000 fb85 	bl	8005964 <pxPortInitialiseStack>
 800525a:	4602      	mov	r2, r0
 800525c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800525e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005262:	2b00      	cmp	r3, #0
 8005264:	d002      	beq.n	800526c <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005268:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800526a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800526c:	bf00      	nop
 800526e:	3720      	adds	r7, #32
 8005270:	46bd      	mov	sp, r7
 8005272:	bd80      	pop	{r7, pc}
 8005274:	080063d4 	.word	0x080063d4
 8005278:	080063f4 	.word	0x080063f4
 800527c:	080063b4 	.word	0x080063b4

08005280 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b082      	sub	sp, #8
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005288:	f000 fc9c 	bl	8005bc4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800528c:	4b2a      	ldr	r3, [pc, #168]	; (8005338 <prvAddNewTaskToReadyList+0xb8>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	3301      	adds	r3, #1
 8005292:	4a29      	ldr	r2, [pc, #164]	; (8005338 <prvAddNewTaskToReadyList+0xb8>)
 8005294:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005296:	4b29      	ldr	r3, [pc, #164]	; (800533c <prvAddNewTaskToReadyList+0xbc>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d109      	bne.n	80052b2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800529e:	4a27      	ldr	r2, [pc, #156]	; (800533c <prvAddNewTaskToReadyList+0xbc>)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80052a4:	4b24      	ldr	r3, [pc, #144]	; (8005338 <prvAddNewTaskToReadyList+0xb8>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	2b01      	cmp	r3, #1
 80052aa:	d110      	bne.n	80052ce <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80052ac:	f000 fa98 	bl	80057e0 <prvInitialiseTaskLists>
 80052b0:	e00d      	b.n	80052ce <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80052b2:	4b23      	ldr	r3, [pc, #140]	; (8005340 <prvAddNewTaskToReadyList+0xc0>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d109      	bne.n	80052ce <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80052ba:	4b20      	ldr	r3, [pc, #128]	; (800533c <prvAddNewTaskToReadyList+0xbc>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052c4:	429a      	cmp	r2, r3
 80052c6:	d802      	bhi.n	80052ce <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80052c8:	4a1c      	ldr	r2, [pc, #112]	; (800533c <prvAddNewTaskToReadyList+0xbc>)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80052ce:	4b1d      	ldr	r3, [pc, #116]	; (8005344 <prvAddNewTaskToReadyList+0xc4>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	3301      	adds	r3, #1
 80052d4:	4a1b      	ldr	r2, [pc, #108]	; (8005344 <prvAddNewTaskToReadyList+0xc4>)
 80052d6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052dc:	2201      	movs	r2, #1
 80052de:	409a      	lsls	r2, r3
 80052e0:	4b19      	ldr	r3, [pc, #100]	; (8005348 <prvAddNewTaskToReadyList+0xc8>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4313      	orrs	r3, r2
 80052e6:	4a18      	ldr	r2, [pc, #96]	; (8005348 <prvAddNewTaskToReadyList+0xc8>)
 80052e8:	6013      	str	r3, [r2, #0]
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052ee:	4613      	mov	r3, r2
 80052f0:	009b      	lsls	r3, r3, #2
 80052f2:	4413      	add	r3, r2
 80052f4:	009b      	lsls	r3, r3, #2
 80052f6:	4a15      	ldr	r2, [pc, #84]	; (800534c <prvAddNewTaskToReadyList+0xcc>)
 80052f8:	441a      	add	r2, r3
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	3304      	adds	r3, #4
 80052fe:	4619      	mov	r1, r3
 8005300:	4610      	mov	r0, r2
 8005302:	f7ff fe2f 	bl	8004f64 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005306:	f000 fc8d 	bl	8005c24 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800530a:	4b0d      	ldr	r3, [pc, #52]	; (8005340 <prvAddNewTaskToReadyList+0xc0>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d00e      	beq.n	8005330 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005312:	4b0a      	ldr	r3, [pc, #40]	; (800533c <prvAddNewTaskToReadyList+0xbc>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800531c:	429a      	cmp	r2, r3
 800531e:	d207      	bcs.n	8005330 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005320:	4b0b      	ldr	r3, [pc, #44]	; (8005350 <prvAddNewTaskToReadyList+0xd0>)
 8005322:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005326:	601a      	str	r2, [r3, #0]
 8005328:	f3bf 8f4f 	dsb	sy
 800532c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005330:	bf00      	nop
 8005332:	3708      	adds	r7, #8
 8005334:	46bd      	mov	sp, r7
 8005336:	bd80      	pop	{r7, pc}
 8005338:	2000046c 	.word	0x2000046c
 800533c:	2000036c 	.word	0x2000036c
 8005340:	20000478 	.word	0x20000478
 8005344:	20000488 	.word	0x20000488
 8005348:	20000474 	.word	0x20000474
 800534c:	20000370 	.word	0x20000370
 8005350:	e000ed04 	.word	0xe000ed04

08005354 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b08a      	sub	sp, #40	; 0x28
 8005358:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800535a:	2300      	movs	r3, #0
 800535c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800535e:	2300      	movs	r3, #0
 8005360:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005362:	463a      	mov	r2, r7
 8005364:	1d39      	adds	r1, r7, #4
 8005366:	f107 0308 	add.w	r3, r7, #8
 800536a:	4618      	mov	r0, r3
 800536c:	f7fb f948 	bl	8000600 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005370:	6839      	ldr	r1, [r7, #0]
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	68ba      	ldr	r2, [r7, #8]
 8005376:	9202      	str	r2, [sp, #8]
 8005378:	9301      	str	r3, [sp, #4]
 800537a:	2300      	movs	r3, #0
 800537c:	9300      	str	r3, [sp, #0]
 800537e:	2300      	movs	r3, #0
 8005380:	460a      	mov	r2, r1
 8005382:	4921      	ldr	r1, [pc, #132]	; (8005408 <vTaskStartScheduler+0xb4>)
 8005384:	4821      	ldr	r0, [pc, #132]	; (800540c <vTaskStartScheduler+0xb8>)
 8005386:	f7ff fe3b 	bl	8005000 <xTaskCreateStatic>
 800538a:	4603      	mov	r3, r0
 800538c:	4a20      	ldr	r2, [pc, #128]	; (8005410 <vTaskStartScheduler+0xbc>)
 800538e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005390:	4b1f      	ldr	r3, [pc, #124]	; (8005410 <vTaskStartScheduler+0xbc>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d002      	beq.n	800539e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005398:	2301      	movs	r3, #1
 800539a:	617b      	str	r3, [r7, #20]
 800539c:	e001      	b.n	80053a2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800539e:	2300      	movs	r3, #0
 80053a0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	2b01      	cmp	r3, #1
 80053a6:	d11b      	bne.n	80053e0 <vTaskStartScheduler+0x8c>
	__asm volatile
 80053a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053ac:	f383 8811 	msr	BASEPRI, r3
 80053b0:	f3bf 8f6f 	isb	sy
 80053b4:	f3bf 8f4f 	dsb	sy
 80053b8:	613b      	str	r3, [r7, #16]
}
 80053ba:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80053bc:	4b15      	ldr	r3, [pc, #84]	; (8005414 <vTaskStartScheduler+0xc0>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	334c      	adds	r3, #76	; 0x4c
 80053c2:	4a15      	ldr	r2, [pc, #84]	; (8005418 <vTaskStartScheduler+0xc4>)
 80053c4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80053c6:	4b15      	ldr	r3, [pc, #84]	; (800541c <vTaskStartScheduler+0xc8>)
 80053c8:	f04f 32ff 	mov.w	r2, #4294967295
 80053cc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80053ce:	4b14      	ldr	r3, [pc, #80]	; (8005420 <vTaskStartScheduler+0xcc>)
 80053d0:	2201      	movs	r2, #1
 80053d2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80053d4:	4b13      	ldr	r3, [pc, #76]	; (8005424 <vTaskStartScheduler+0xd0>)
 80053d6:	2200      	movs	r2, #0
 80053d8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80053da:	f000 fb51 	bl	8005a80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80053de:	e00e      	b.n	80053fe <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80053e0:	697b      	ldr	r3, [r7, #20]
 80053e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053e6:	d10a      	bne.n	80053fe <vTaskStartScheduler+0xaa>
	__asm volatile
 80053e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053ec:	f383 8811 	msr	BASEPRI, r3
 80053f0:	f3bf 8f6f 	isb	sy
 80053f4:	f3bf 8f4f 	dsb	sy
 80053f8:	60fb      	str	r3, [r7, #12]
}
 80053fa:	bf00      	nop
 80053fc:	e7fe      	b.n	80053fc <vTaskStartScheduler+0xa8>
}
 80053fe:	bf00      	nop
 8005400:	3718      	adds	r7, #24
 8005402:	46bd      	mov	sp, r7
 8005404:	bd80      	pop	{r7, pc}
 8005406:	bf00      	nop
 8005408:	08006364 	.word	0x08006364
 800540c:	080057b1 	.word	0x080057b1
 8005410:	20000490 	.word	0x20000490
 8005414:	2000036c 	.word	0x2000036c
 8005418:	20000010 	.word	0x20000010
 800541c:	2000048c 	.word	0x2000048c
 8005420:	20000478 	.word	0x20000478
 8005424:	20000470 	.word	0x20000470

08005428 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005428:	b480      	push	{r7}
 800542a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800542c:	4b04      	ldr	r3, [pc, #16]	; (8005440 <vTaskSuspendAll+0x18>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	3301      	adds	r3, #1
 8005432:	4a03      	ldr	r2, [pc, #12]	; (8005440 <vTaskSuspendAll+0x18>)
 8005434:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005436:	bf00      	nop
 8005438:	46bd      	mov	sp, r7
 800543a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543e:	4770      	bx	lr
 8005440:	20000494 	.word	0x20000494

08005444 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b084      	sub	sp, #16
 8005448:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800544a:	2300      	movs	r3, #0
 800544c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800544e:	2300      	movs	r3, #0
 8005450:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005452:	4b41      	ldr	r3, [pc, #260]	; (8005558 <xTaskResumeAll+0x114>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d10a      	bne.n	8005470 <xTaskResumeAll+0x2c>
	__asm volatile
 800545a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800545e:	f383 8811 	msr	BASEPRI, r3
 8005462:	f3bf 8f6f 	isb	sy
 8005466:	f3bf 8f4f 	dsb	sy
 800546a:	603b      	str	r3, [r7, #0]
}
 800546c:	bf00      	nop
 800546e:	e7fe      	b.n	800546e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005470:	f000 fba8 	bl	8005bc4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005474:	4b38      	ldr	r3, [pc, #224]	; (8005558 <xTaskResumeAll+0x114>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	3b01      	subs	r3, #1
 800547a:	4a37      	ldr	r2, [pc, #220]	; (8005558 <xTaskResumeAll+0x114>)
 800547c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800547e:	4b36      	ldr	r3, [pc, #216]	; (8005558 <xTaskResumeAll+0x114>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d161      	bne.n	800554a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005486:	4b35      	ldr	r3, [pc, #212]	; (800555c <xTaskResumeAll+0x118>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d05d      	beq.n	800554a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800548e:	e02e      	b.n	80054ee <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005490:	4b33      	ldr	r3, [pc, #204]	; (8005560 <xTaskResumeAll+0x11c>)
 8005492:	68db      	ldr	r3, [r3, #12]
 8005494:	68db      	ldr	r3, [r3, #12]
 8005496:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	3318      	adds	r3, #24
 800549c:	4618      	mov	r0, r3
 800549e:	f7ff fd85 	bl	8004fac <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	3304      	adds	r3, #4
 80054a6:	4618      	mov	r0, r3
 80054a8:	f7ff fd80 	bl	8004fac <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054b0:	2201      	movs	r2, #1
 80054b2:	409a      	lsls	r2, r3
 80054b4:	4b2b      	ldr	r3, [pc, #172]	; (8005564 <xTaskResumeAll+0x120>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4313      	orrs	r3, r2
 80054ba:	4a2a      	ldr	r2, [pc, #168]	; (8005564 <xTaskResumeAll+0x120>)
 80054bc:	6013      	str	r3, [r2, #0]
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054c2:	4613      	mov	r3, r2
 80054c4:	009b      	lsls	r3, r3, #2
 80054c6:	4413      	add	r3, r2
 80054c8:	009b      	lsls	r3, r3, #2
 80054ca:	4a27      	ldr	r2, [pc, #156]	; (8005568 <xTaskResumeAll+0x124>)
 80054cc:	441a      	add	r2, r3
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	3304      	adds	r3, #4
 80054d2:	4619      	mov	r1, r3
 80054d4:	4610      	mov	r0, r2
 80054d6:	f7ff fd45 	bl	8004f64 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054de:	4b23      	ldr	r3, [pc, #140]	; (800556c <xTaskResumeAll+0x128>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054e4:	429a      	cmp	r2, r3
 80054e6:	d302      	bcc.n	80054ee <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80054e8:	4b21      	ldr	r3, [pc, #132]	; (8005570 <xTaskResumeAll+0x12c>)
 80054ea:	2201      	movs	r2, #1
 80054ec:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80054ee:	4b1c      	ldr	r3, [pc, #112]	; (8005560 <xTaskResumeAll+0x11c>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d1cc      	bne.n	8005490 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d001      	beq.n	8005500 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80054fc:	f000 fa12 	bl	8005924 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005500:	4b1c      	ldr	r3, [pc, #112]	; (8005574 <xTaskResumeAll+0x130>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d010      	beq.n	800552e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800550c:	f000 f836 	bl	800557c <xTaskIncrementTick>
 8005510:	4603      	mov	r3, r0
 8005512:	2b00      	cmp	r3, #0
 8005514:	d002      	beq.n	800551c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8005516:	4b16      	ldr	r3, [pc, #88]	; (8005570 <xTaskResumeAll+0x12c>)
 8005518:	2201      	movs	r2, #1
 800551a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	3b01      	subs	r3, #1
 8005520:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d1f1      	bne.n	800550c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8005528:	4b12      	ldr	r3, [pc, #72]	; (8005574 <xTaskResumeAll+0x130>)
 800552a:	2200      	movs	r2, #0
 800552c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800552e:	4b10      	ldr	r3, [pc, #64]	; (8005570 <xTaskResumeAll+0x12c>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d009      	beq.n	800554a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005536:	2301      	movs	r3, #1
 8005538:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800553a:	4b0f      	ldr	r3, [pc, #60]	; (8005578 <xTaskResumeAll+0x134>)
 800553c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005540:	601a      	str	r2, [r3, #0]
 8005542:	f3bf 8f4f 	dsb	sy
 8005546:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800554a:	f000 fb6b 	bl	8005c24 <vPortExitCritical>

	return xAlreadyYielded;
 800554e:	68bb      	ldr	r3, [r7, #8]
}
 8005550:	4618      	mov	r0, r3
 8005552:	3710      	adds	r7, #16
 8005554:	46bd      	mov	sp, r7
 8005556:	bd80      	pop	{r7, pc}
 8005558:	20000494 	.word	0x20000494
 800555c:	2000046c 	.word	0x2000046c
 8005560:	2000042c 	.word	0x2000042c
 8005564:	20000474 	.word	0x20000474
 8005568:	20000370 	.word	0x20000370
 800556c:	2000036c 	.word	0x2000036c
 8005570:	20000480 	.word	0x20000480
 8005574:	2000047c 	.word	0x2000047c
 8005578:	e000ed04 	.word	0xe000ed04

0800557c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b086      	sub	sp, #24
 8005580:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005582:	2300      	movs	r3, #0
 8005584:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005586:	4b4e      	ldr	r3, [pc, #312]	; (80056c0 <xTaskIncrementTick+0x144>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	2b00      	cmp	r3, #0
 800558c:	f040 808e 	bne.w	80056ac <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005590:	4b4c      	ldr	r3, [pc, #304]	; (80056c4 <xTaskIncrementTick+0x148>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	3301      	adds	r3, #1
 8005596:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005598:	4a4a      	ldr	r2, [pc, #296]	; (80056c4 <xTaskIncrementTick+0x148>)
 800559a:	693b      	ldr	r3, [r7, #16]
 800559c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800559e:	693b      	ldr	r3, [r7, #16]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d120      	bne.n	80055e6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80055a4:	4b48      	ldr	r3, [pc, #288]	; (80056c8 <xTaskIncrementTick+0x14c>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d00a      	beq.n	80055c4 <xTaskIncrementTick+0x48>
	__asm volatile
 80055ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055b2:	f383 8811 	msr	BASEPRI, r3
 80055b6:	f3bf 8f6f 	isb	sy
 80055ba:	f3bf 8f4f 	dsb	sy
 80055be:	603b      	str	r3, [r7, #0]
}
 80055c0:	bf00      	nop
 80055c2:	e7fe      	b.n	80055c2 <xTaskIncrementTick+0x46>
 80055c4:	4b40      	ldr	r3, [pc, #256]	; (80056c8 <xTaskIncrementTick+0x14c>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	60fb      	str	r3, [r7, #12]
 80055ca:	4b40      	ldr	r3, [pc, #256]	; (80056cc <xTaskIncrementTick+0x150>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4a3e      	ldr	r2, [pc, #248]	; (80056c8 <xTaskIncrementTick+0x14c>)
 80055d0:	6013      	str	r3, [r2, #0]
 80055d2:	4a3e      	ldr	r2, [pc, #248]	; (80056cc <xTaskIncrementTick+0x150>)
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	6013      	str	r3, [r2, #0]
 80055d8:	4b3d      	ldr	r3, [pc, #244]	; (80056d0 <xTaskIncrementTick+0x154>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	3301      	adds	r3, #1
 80055de:	4a3c      	ldr	r2, [pc, #240]	; (80056d0 <xTaskIncrementTick+0x154>)
 80055e0:	6013      	str	r3, [r2, #0]
 80055e2:	f000 f99f 	bl	8005924 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80055e6:	4b3b      	ldr	r3, [pc, #236]	; (80056d4 <xTaskIncrementTick+0x158>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	693a      	ldr	r2, [r7, #16]
 80055ec:	429a      	cmp	r2, r3
 80055ee:	d348      	bcc.n	8005682 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80055f0:	4b35      	ldr	r3, [pc, #212]	; (80056c8 <xTaskIncrementTick+0x14c>)
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d104      	bne.n	8005604 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80055fa:	4b36      	ldr	r3, [pc, #216]	; (80056d4 <xTaskIncrementTick+0x158>)
 80055fc:	f04f 32ff 	mov.w	r2, #4294967295
 8005600:	601a      	str	r2, [r3, #0]
					break;
 8005602:	e03e      	b.n	8005682 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005604:	4b30      	ldr	r3, [pc, #192]	; (80056c8 <xTaskIncrementTick+0x14c>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	68db      	ldr	r3, [r3, #12]
 800560a:	68db      	ldr	r3, [r3, #12]
 800560c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	685b      	ldr	r3, [r3, #4]
 8005612:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005614:	693a      	ldr	r2, [r7, #16]
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	429a      	cmp	r2, r3
 800561a:	d203      	bcs.n	8005624 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800561c:	4a2d      	ldr	r2, [pc, #180]	; (80056d4 <xTaskIncrementTick+0x158>)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005622:	e02e      	b.n	8005682 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	3304      	adds	r3, #4
 8005628:	4618      	mov	r0, r3
 800562a:	f7ff fcbf 	bl	8004fac <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005632:	2b00      	cmp	r3, #0
 8005634:	d004      	beq.n	8005640 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	3318      	adds	r3, #24
 800563a:	4618      	mov	r0, r3
 800563c:	f7ff fcb6 	bl	8004fac <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005644:	2201      	movs	r2, #1
 8005646:	409a      	lsls	r2, r3
 8005648:	4b23      	ldr	r3, [pc, #140]	; (80056d8 <xTaskIncrementTick+0x15c>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4313      	orrs	r3, r2
 800564e:	4a22      	ldr	r2, [pc, #136]	; (80056d8 <xTaskIncrementTick+0x15c>)
 8005650:	6013      	str	r3, [r2, #0]
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005656:	4613      	mov	r3, r2
 8005658:	009b      	lsls	r3, r3, #2
 800565a:	4413      	add	r3, r2
 800565c:	009b      	lsls	r3, r3, #2
 800565e:	4a1f      	ldr	r2, [pc, #124]	; (80056dc <xTaskIncrementTick+0x160>)
 8005660:	441a      	add	r2, r3
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	3304      	adds	r3, #4
 8005666:	4619      	mov	r1, r3
 8005668:	4610      	mov	r0, r2
 800566a:	f7ff fc7b 	bl	8004f64 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005672:	4b1b      	ldr	r3, [pc, #108]	; (80056e0 <xTaskIncrementTick+0x164>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005678:	429a      	cmp	r2, r3
 800567a:	d3b9      	bcc.n	80055f0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800567c:	2301      	movs	r3, #1
 800567e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005680:	e7b6      	b.n	80055f0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005682:	4b17      	ldr	r3, [pc, #92]	; (80056e0 <xTaskIncrementTick+0x164>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005688:	4914      	ldr	r1, [pc, #80]	; (80056dc <xTaskIncrementTick+0x160>)
 800568a:	4613      	mov	r3, r2
 800568c:	009b      	lsls	r3, r3, #2
 800568e:	4413      	add	r3, r2
 8005690:	009b      	lsls	r3, r3, #2
 8005692:	440b      	add	r3, r1
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	2b01      	cmp	r3, #1
 8005698:	d901      	bls.n	800569e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800569a:	2301      	movs	r3, #1
 800569c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800569e:	4b11      	ldr	r3, [pc, #68]	; (80056e4 <xTaskIncrementTick+0x168>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d007      	beq.n	80056b6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80056a6:	2301      	movs	r3, #1
 80056a8:	617b      	str	r3, [r7, #20]
 80056aa:	e004      	b.n	80056b6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80056ac:	4b0e      	ldr	r3, [pc, #56]	; (80056e8 <xTaskIncrementTick+0x16c>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	3301      	adds	r3, #1
 80056b2:	4a0d      	ldr	r2, [pc, #52]	; (80056e8 <xTaskIncrementTick+0x16c>)
 80056b4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80056b6:	697b      	ldr	r3, [r7, #20]
}
 80056b8:	4618      	mov	r0, r3
 80056ba:	3718      	adds	r7, #24
 80056bc:	46bd      	mov	sp, r7
 80056be:	bd80      	pop	{r7, pc}
 80056c0:	20000494 	.word	0x20000494
 80056c4:	20000470 	.word	0x20000470
 80056c8:	20000424 	.word	0x20000424
 80056cc:	20000428 	.word	0x20000428
 80056d0:	20000484 	.word	0x20000484
 80056d4:	2000048c 	.word	0x2000048c
 80056d8:	20000474 	.word	0x20000474
 80056dc:	20000370 	.word	0x20000370
 80056e0:	2000036c 	.word	0x2000036c
 80056e4:	20000480 	.word	0x20000480
 80056e8:	2000047c 	.word	0x2000047c

080056ec <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80056ec:	b480      	push	{r7}
 80056ee:	b087      	sub	sp, #28
 80056f0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80056f2:	4b29      	ldr	r3, [pc, #164]	; (8005798 <vTaskSwitchContext+0xac>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d003      	beq.n	8005702 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80056fa:	4b28      	ldr	r3, [pc, #160]	; (800579c <vTaskSwitchContext+0xb0>)
 80056fc:	2201      	movs	r2, #1
 80056fe:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005700:	e044      	b.n	800578c <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8005702:	4b26      	ldr	r3, [pc, #152]	; (800579c <vTaskSwitchContext+0xb0>)
 8005704:	2200      	movs	r2, #0
 8005706:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005708:	4b25      	ldr	r3, [pc, #148]	; (80057a0 <vTaskSwitchContext+0xb4>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	fab3 f383 	clz	r3, r3
 8005714:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005716:	7afb      	ldrb	r3, [r7, #11]
 8005718:	f1c3 031f 	rsb	r3, r3, #31
 800571c:	617b      	str	r3, [r7, #20]
 800571e:	4921      	ldr	r1, [pc, #132]	; (80057a4 <vTaskSwitchContext+0xb8>)
 8005720:	697a      	ldr	r2, [r7, #20]
 8005722:	4613      	mov	r3, r2
 8005724:	009b      	lsls	r3, r3, #2
 8005726:	4413      	add	r3, r2
 8005728:	009b      	lsls	r3, r3, #2
 800572a:	440b      	add	r3, r1
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d10a      	bne.n	8005748 <vTaskSwitchContext+0x5c>
	__asm volatile
 8005732:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005736:	f383 8811 	msr	BASEPRI, r3
 800573a:	f3bf 8f6f 	isb	sy
 800573e:	f3bf 8f4f 	dsb	sy
 8005742:	607b      	str	r3, [r7, #4]
}
 8005744:	bf00      	nop
 8005746:	e7fe      	b.n	8005746 <vTaskSwitchContext+0x5a>
 8005748:	697a      	ldr	r2, [r7, #20]
 800574a:	4613      	mov	r3, r2
 800574c:	009b      	lsls	r3, r3, #2
 800574e:	4413      	add	r3, r2
 8005750:	009b      	lsls	r3, r3, #2
 8005752:	4a14      	ldr	r2, [pc, #80]	; (80057a4 <vTaskSwitchContext+0xb8>)
 8005754:	4413      	add	r3, r2
 8005756:	613b      	str	r3, [r7, #16]
 8005758:	693b      	ldr	r3, [r7, #16]
 800575a:	685b      	ldr	r3, [r3, #4]
 800575c:	685a      	ldr	r2, [r3, #4]
 800575e:	693b      	ldr	r3, [r7, #16]
 8005760:	605a      	str	r2, [r3, #4]
 8005762:	693b      	ldr	r3, [r7, #16]
 8005764:	685a      	ldr	r2, [r3, #4]
 8005766:	693b      	ldr	r3, [r7, #16]
 8005768:	3308      	adds	r3, #8
 800576a:	429a      	cmp	r2, r3
 800576c:	d104      	bne.n	8005778 <vTaskSwitchContext+0x8c>
 800576e:	693b      	ldr	r3, [r7, #16]
 8005770:	685b      	ldr	r3, [r3, #4]
 8005772:	685a      	ldr	r2, [r3, #4]
 8005774:	693b      	ldr	r3, [r7, #16]
 8005776:	605a      	str	r2, [r3, #4]
 8005778:	693b      	ldr	r3, [r7, #16]
 800577a:	685b      	ldr	r3, [r3, #4]
 800577c:	68db      	ldr	r3, [r3, #12]
 800577e:	4a0a      	ldr	r2, [pc, #40]	; (80057a8 <vTaskSwitchContext+0xbc>)
 8005780:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005782:	4b09      	ldr	r3, [pc, #36]	; (80057a8 <vTaskSwitchContext+0xbc>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	334c      	adds	r3, #76	; 0x4c
 8005788:	4a08      	ldr	r2, [pc, #32]	; (80057ac <vTaskSwitchContext+0xc0>)
 800578a:	6013      	str	r3, [r2, #0]
}
 800578c:	bf00      	nop
 800578e:	371c      	adds	r7, #28
 8005790:	46bd      	mov	sp, r7
 8005792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005796:	4770      	bx	lr
 8005798:	20000494 	.word	0x20000494
 800579c:	20000480 	.word	0x20000480
 80057a0:	20000474 	.word	0x20000474
 80057a4:	20000370 	.word	0x20000370
 80057a8:	2000036c 	.word	0x2000036c
 80057ac:	20000010 	.word	0x20000010

080057b0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b082      	sub	sp, #8
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80057b8:	f000 f852 	bl	8005860 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80057bc:	4b06      	ldr	r3, [pc, #24]	; (80057d8 <prvIdleTask+0x28>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	2b01      	cmp	r3, #1
 80057c2:	d9f9      	bls.n	80057b8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80057c4:	4b05      	ldr	r3, [pc, #20]	; (80057dc <prvIdleTask+0x2c>)
 80057c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057ca:	601a      	str	r2, [r3, #0]
 80057cc:	f3bf 8f4f 	dsb	sy
 80057d0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80057d4:	e7f0      	b.n	80057b8 <prvIdleTask+0x8>
 80057d6:	bf00      	nop
 80057d8:	20000370 	.word	0x20000370
 80057dc:	e000ed04 	.word	0xe000ed04

080057e0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b082      	sub	sp, #8
 80057e4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80057e6:	2300      	movs	r3, #0
 80057e8:	607b      	str	r3, [r7, #4]
 80057ea:	e00c      	b.n	8005806 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80057ec:	687a      	ldr	r2, [r7, #4]
 80057ee:	4613      	mov	r3, r2
 80057f0:	009b      	lsls	r3, r3, #2
 80057f2:	4413      	add	r3, r2
 80057f4:	009b      	lsls	r3, r3, #2
 80057f6:	4a12      	ldr	r2, [pc, #72]	; (8005840 <prvInitialiseTaskLists+0x60>)
 80057f8:	4413      	add	r3, r2
 80057fa:	4618      	mov	r0, r3
 80057fc:	f7ff fb85 	bl	8004f0a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	3301      	adds	r3, #1
 8005804:	607b      	str	r3, [r7, #4]
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2b06      	cmp	r3, #6
 800580a:	d9ef      	bls.n	80057ec <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800580c:	480d      	ldr	r0, [pc, #52]	; (8005844 <prvInitialiseTaskLists+0x64>)
 800580e:	f7ff fb7c 	bl	8004f0a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005812:	480d      	ldr	r0, [pc, #52]	; (8005848 <prvInitialiseTaskLists+0x68>)
 8005814:	f7ff fb79 	bl	8004f0a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005818:	480c      	ldr	r0, [pc, #48]	; (800584c <prvInitialiseTaskLists+0x6c>)
 800581a:	f7ff fb76 	bl	8004f0a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800581e:	480c      	ldr	r0, [pc, #48]	; (8005850 <prvInitialiseTaskLists+0x70>)
 8005820:	f7ff fb73 	bl	8004f0a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005824:	480b      	ldr	r0, [pc, #44]	; (8005854 <prvInitialiseTaskLists+0x74>)
 8005826:	f7ff fb70 	bl	8004f0a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800582a:	4b0b      	ldr	r3, [pc, #44]	; (8005858 <prvInitialiseTaskLists+0x78>)
 800582c:	4a05      	ldr	r2, [pc, #20]	; (8005844 <prvInitialiseTaskLists+0x64>)
 800582e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005830:	4b0a      	ldr	r3, [pc, #40]	; (800585c <prvInitialiseTaskLists+0x7c>)
 8005832:	4a05      	ldr	r2, [pc, #20]	; (8005848 <prvInitialiseTaskLists+0x68>)
 8005834:	601a      	str	r2, [r3, #0]
}
 8005836:	bf00      	nop
 8005838:	3708      	adds	r7, #8
 800583a:	46bd      	mov	sp, r7
 800583c:	bd80      	pop	{r7, pc}
 800583e:	bf00      	nop
 8005840:	20000370 	.word	0x20000370
 8005844:	200003fc 	.word	0x200003fc
 8005848:	20000410 	.word	0x20000410
 800584c:	2000042c 	.word	0x2000042c
 8005850:	20000440 	.word	0x20000440
 8005854:	20000458 	.word	0x20000458
 8005858:	20000424 	.word	0x20000424
 800585c:	20000428 	.word	0x20000428

08005860 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b082      	sub	sp, #8
 8005864:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005866:	e019      	b.n	800589c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005868:	f000 f9ac 	bl	8005bc4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800586c:	4b10      	ldr	r3, [pc, #64]	; (80058b0 <prvCheckTasksWaitingTermination+0x50>)
 800586e:	68db      	ldr	r3, [r3, #12]
 8005870:	68db      	ldr	r3, [r3, #12]
 8005872:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	3304      	adds	r3, #4
 8005878:	4618      	mov	r0, r3
 800587a:	f7ff fb97 	bl	8004fac <uxListRemove>
				--uxCurrentNumberOfTasks;
 800587e:	4b0d      	ldr	r3, [pc, #52]	; (80058b4 <prvCheckTasksWaitingTermination+0x54>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	3b01      	subs	r3, #1
 8005884:	4a0b      	ldr	r2, [pc, #44]	; (80058b4 <prvCheckTasksWaitingTermination+0x54>)
 8005886:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005888:	4b0b      	ldr	r3, [pc, #44]	; (80058b8 <prvCheckTasksWaitingTermination+0x58>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	3b01      	subs	r3, #1
 800588e:	4a0a      	ldr	r2, [pc, #40]	; (80058b8 <prvCheckTasksWaitingTermination+0x58>)
 8005890:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005892:	f000 f9c7 	bl	8005c24 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	f000 f810 	bl	80058bc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800589c:	4b06      	ldr	r3, [pc, #24]	; (80058b8 <prvCheckTasksWaitingTermination+0x58>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d1e1      	bne.n	8005868 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80058a4:	bf00      	nop
 80058a6:	bf00      	nop
 80058a8:	3708      	adds	r7, #8
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bd80      	pop	{r7, pc}
 80058ae:	bf00      	nop
 80058b0:	20000440 	.word	0x20000440
 80058b4:	2000046c 	.word	0x2000046c
 80058b8:	20000454 	.word	0x20000454

080058bc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b084      	sub	sp, #16
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	334c      	adds	r3, #76	; 0x4c
 80058c8:	4618      	mov	r0, r3
 80058ca:	f000 fc83 	bl	80061d4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d108      	bne.n	80058ea <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058dc:	4618      	mov	r0, r3
 80058de:	f000 fb1f 	bl	8005f20 <vPortFree>
				vPortFree( pxTCB );
 80058e2:	6878      	ldr	r0, [r7, #4]
 80058e4:	f000 fb1c 	bl	8005f20 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80058e8:	e018      	b.n	800591c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80058f0:	2b01      	cmp	r3, #1
 80058f2:	d103      	bne.n	80058fc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80058f4:	6878      	ldr	r0, [r7, #4]
 80058f6:	f000 fb13 	bl	8005f20 <vPortFree>
	}
 80058fa:	e00f      	b.n	800591c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8005902:	2b02      	cmp	r3, #2
 8005904:	d00a      	beq.n	800591c <prvDeleteTCB+0x60>
	__asm volatile
 8005906:	f04f 0350 	mov.w	r3, #80	; 0x50
 800590a:	f383 8811 	msr	BASEPRI, r3
 800590e:	f3bf 8f6f 	isb	sy
 8005912:	f3bf 8f4f 	dsb	sy
 8005916:	60fb      	str	r3, [r7, #12]
}
 8005918:	bf00      	nop
 800591a:	e7fe      	b.n	800591a <prvDeleteTCB+0x5e>
	}
 800591c:	bf00      	nop
 800591e:	3710      	adds	r7, #16
 8005920:	46bd      	mov	sp, r7
 8005922:	bd80      	pop	{r7, pc}

08005924 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005924:	b480      	push	{r7}
 8005926:	b083      	sub	sp, #12
 8005928:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800592a:	4b0c      	ldr	r3, [pc, #48]	; (800595c <prvResetNextTaskUnblockTime+0x38>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d104      	bne.n	800593e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005934:	4b0a      	ldr	r3, [pc, #40]	; (8005960 <prvResetNextTaskUnblockTime+0x3c>)
 8005936:	f04f 32ff 	mov.w	r2, #4294967295
 800593a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800593c:	e008      	b.n	8005950 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800593e:	4b07      	ldr	r3, [pc, #28]	; (800595c <prvResetNextTaskUnblockTime+0x38>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	68db      	ldr	r3, [r3, #12]
 8005944:	68db      	ldr	r3, [r3, #12]
 8005946:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	685b      	ldr	r3, [r3, #4]
 800594c:	4a04      	ldr	r2, [pc, #16]	; (8005960 <prvResetNextTaskUnblockTime+0x3c>)
 800594e:	6013      	str	r3, [r2, #0]
}
 8005950:	bf00      	nop
 8005952:	370c      	adds	r7, #12
 8005954:	46bd      	mov	sp, r7
 8005956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595a:	4770      	bx	lr
 800595c:	20000424 	.word	0x20000424
 8005960:	2000048c 	.word	0x2000048c

08005964 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005964:	b480      	push	{r7}
 8005966:	b085      	sub	sp, #20
 8005968:	af00      	add	r7, sp, #0
 800596a:	60f8      	str	r0, [r7, #12]
 800596c:	60b9      	str	r1, [r7, #8]
 800596e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	3b04      	subs	r3, #4
 8005974:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800597c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	3b04      	subs	r3, #4
 8005982:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	f023 0201 	bic.w	r2, r3, #1
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	3b04      	subs	r3, #4
 8005992:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005994:	4a0c      	ldr	r2, [pc, #48]	; (80059c8 <pxPortInitialiseStack+0x64>)
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	3b14      	subs	r3, #20
 800599e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80059a0:	687a      	ldr	r2, [r7, #4]
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	3b04      	subs	r3, #4
 80059aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	f06f 0202 	mvn.w	r2, #2
 80059b2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	3b20      	subs	r3, #32
 80059b8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80059ba:	68fb      	ldr	r3, [r7, #12]
}
 80059bc:	4618      	mov	r0, r3
 80059be:	3714      	adds	r7, #20
 80059c0:	46bd      	mov	sp, r7
 80059c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c6:	4770      	bx	lr
 80059c8:	080059cd 	.word	0x080059cd

080059cc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80059cc:	b480      	push	{r7}
 80059ce:	b085      	sub	sp, #20
 80059d0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80059d2:	2300      	movs	r3, #0
 80059d4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80059d6:	4b12      	ldr	r3, [pc, #72]	; (8005a20 <prvTaskExitError+0x54>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059de:	d00a      	beq.n	80059f6 <prvTaskExitError+0x2a>
	__asm volatile
 80059e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059e4:	f383 8811 	msr	BASEPRI, r3
 80059e8:	f3bf 8f6f 	isb	sy
 80059ec:	f3bf 8f4f 	dsb	sy
 80059f0:	60fb      	str	r3, [r7, #12]
}
 80059f2:	bf00      	nop
 80059f4:	e7fe      	b.n	80059f4 <prvTaskExitError+0x28>
	__asm volatile
 80059f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059fa:	f383 8811 	msr	BASEPRI, r3
 80059fe:	f3bf 8f6f 	isb	sy
 8005a02:	f3bf 8f4f 	dsb	sy
 8005a06:	60bb      	str	r3, [r7, #8]
}
 8005a08:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005a0a:	bf00      	nop
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d0fc      	beq.n	8005a0c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005a12:	bf00      	nop
 8005a14:	bf00      	nop
 8005a16:	3714      	adds	r7, #20
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1e:	4770      	bx	lr
 8005a20:	2000000c 	.word	0x2000000c
	...

08005a30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005a30:	4b07      	ldr	r3, [pc, #28]	; (8005a50 <pxCurrentTCBConst2>)
 8005a32:	6819      	ldr	r1, [r3, #0]
 8005a34:	6808      	ldr	r0, [r1, #0]
 8005a36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a3a:	f380 8809 	msr	PSP, r0
 8005a3e:	f3bf 8f6f 	isb	sy
 8005a42:	f04f 0000 	mov.w	r0, #0
 8005a46:	f380 8811 	msr	BASEPRI, r0
 8005a4a:	4770      	bx	lr
 8005a4c:	f3af 8000 	nop.w

08005a50 <pxCurrentTCBConst2>:
 8005a50:	2000036c 	.word	0x2000036c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005a54:	bf00      	nop
 8005a56:	bf00      	nop

08005a58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005a58:	4808      	ldr	r0, [pc, #32]	; (8005a7c <prvPortStartFirstTask+0x24>)
 8005a5a:	6800      	ldr	r0, [r0, #0]
 8005a5c:	6800      	ldr	r0, [r0, #0]
 8005a5e:	f380 8808 	msr	MSP, r0
 8005a62:	f04f 0000 	mov.w	r0, #0
 8005a66:	f380 8814 	msr	CONTROL, r0
 8005a6a:	b662      	cpsie	i
 8005a6c:	b661      	cpsie	f
 8005a6e:	f3bf 8f4f 	dsb	sy
 8005a72:	f3bf 8f6f 	isb	sy
 8005a76:	df00      	svc	0
 8005a78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005a7a:	bf00      	nop
 8005a7c:	e000ed08 	.word	0xe000ed08

08005a80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b086      	sub	sp, #24
 8005a84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005a86:	4b46      	ldr	r3, [pc, #280]	; (8005ba0 <xPortStartScheduler+0x120>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4a46      	ldr	r2, [pc, #280]	; (8005ba4 <xPortStartScheduler+0x124>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d10a      	bne.n	8005aa6 <xPortStartScheduler+0x26>
	__asm volatile
 8005a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a94:	f383 8811 	msr	BASEPRI, r3
 8005a98:	f3bf 8f6f 	isb	sy
 8005a9c:	f3bf 8f4f 	dsb	sy
 8005aa0:	613b      	str	r3, [r7, #16]
}
 8005aa2:	bf00      	nop
 8005aa4:	e7fe      	b.n	8005aa4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005aa6:	4b3e      	ldr	r3, [pc, #248]	; (8005ba0 <xPortStartScheduler+0x120>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	4a3f      	ldr	r2, [pc, #252]	; (8005ba8 <xPortStartScheduler+0x128>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d10a      	bne.n	8005ac6 <xPortStartScheduler+0x46>
	__asm volatile
 8005ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ab4:	f383 8811 	msr	BASEPRI, r3
 8005ab8:	f3bf 8f6f 	isb	sy
 8005abc:	f3bf 8f4f 	dsb	sy
 8005ac0:	60fb      	str	r3, [r7, #12]
}
 8005ac2:	bf00      	nop
 8005ac4:	e7fe      	b.n	8005ac4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005ac6:	4b39      	ldr	r3, [pc, #228]	; (8005bac <xPortStartScheduler+0x12c>)
 8005ac8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	781b      	ldrb	r3, [r3, #0]
 8005ace:	b2db      	uxtb	r3, r3
 8005ad0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005ad2:	697b      	ldr	r3, [r7, #20]
 8005ad4:	22ff      	movs	r2, #255	; 0xff
 8005ad6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005ad8:	697b      	ldr	r3, [r7, #20]
 8005ada:	781b      	ldrb	r3, [r3, #0]
 8005adc:	b2db      	uxtb	r3, r3
 8005ade:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005ae0:	78fb      	ldrb	r3, [r7, #3]
 8005ae2:	b2db      	uxtb	r3, r3
 8005ae4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005ae8:	b2da      	uxtb	r2, r3
 8005aea:	4b31      	ldr	r3, [pc, #196]	; (8005bb0 <xPortStartScheduler+0x130>)
 8005aec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005aee:	4b31      	ldr	r3, [pc, #196]	; (8005bb4 <xPortStartScheduler+0x134>)
 8005af0:	2207      	movs	r2, #7
 8005af2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005af4:	e009      	b.n	8005b0a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005af6:	4b2f      	ldr	r3, [pc, #188]	; (8005bb4 <xPortStartScheduler+0x134>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	3b01      	subs	r3, #1
 8005afc:	4a2d      	ldr	r2, [pc, #180]	; (8005bb4 <xPortStartScheduler+0x134>)
 8005afe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005b00:	78fb      	ldrb	r3, [r7, #3]
 8005b02:	b2db      	uxtb	r3, r3
 8005b04:	005b      	lsls	r3, r3, #1
 8005b06:	b2db      	uxtb	r3, r3
 8005b08:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005b0a:	78fb      	ldrb	r3, [r7, #3]
 8005b0c:	b2db      	uxtb	r3, r3
 8005b0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b12:	2b80      	cmp	r3, #128	; 0x80
 8005b14:	d0ef      	beq.n	8005af6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005b16:	4b27      	ldr	r3, [pc, #156]	; (8005bb4 <xPortStartScheduler+0x134>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f1c3 0307 	rsb	r3, r3, #7
 8005b1e:	2b04      	cmp	r3, #4
 8005b20:	d00a      	beq.n	8005b38 <xPortStartScheduler+0xb8>
	__asm volatile
 8005b22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b26:	f383 8811 	msr	BASEPRI, r3
 8005b2a:	f3bf 8f6f 	isb	sy
 8005b2e:	f3bf 8f4f 	dsb	sy
 8005b32:	60bb      	str	r3, [r7, #8]
}
 8005b34:	bf00      	nop
 8005b36:	e7fe      	b.n	8005b36 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005b38:	4b1e      	ldr	r3, [pc, #120]	; (8005bb4 <xPortStartScheduler+0x134>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	021b      	lsls	r3, r3, #8
 8005b3e:	4a1d      	ldr	r2, [pc, #116]	; (8005bb4 <xPortStartScheduler+0x134>)
 8005b40:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005b42:	4b1c      	ldr	r3, [pc, #112]	; (8005bb4 <xPortStartScheduler+0x134>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005b4a:	4a1a      	ldr	r2, [pc, #104]	; (8005bb4 <xPortStartScheduler+0x134>)
 8005b4c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	b2da      	uxtb	r2, r3
 8005b52:	697b      	ldr	r3, [r7, #20]
 8005b54:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005b56:	4b18      	ldr	r3, [pc, #96]	; (8005bb8 <xPortStartScheduler+0x138>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4a17      	ldr	r2, [pc, #92]	; (8005bb8 <xPortStartScheduler+0x138>)
 8005b5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005b60:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005b62:	4b15      	ldr	r3, [pc, #84]	; (8005bb8 <xPortStartScheduler+0x138>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4a14      	ldr	r2, [pc, #80]	; (8005bb8 <xPortStartScheduler+0x138>)
 8005b68:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005b6c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005b6e:	f000 f8dd 	bl	8005d2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005b72:	4b12      	ldr	r3, [pc, #72]	; (8005bbc <xPortStartScheduler+0x13c>)
 8005b74:	2200      	movs	r2, #0
 8005b76:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005b78:	f000 f8fc 	bl	8005d74 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005b7c:	4b10      	ldr	r3, [pc, #64]	; (8005bc0 <xPortStartScheduler+0x140>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4a0f      	ldr	r2, [pc, #60]	; (8005bc0 <xPortStartScheduler+0x140>)
 8005b82:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005b86:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005b88:	f7ff ff66 	bl	8005a58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005b8c:	f7ff fdae 	bl	80056ec <vTaskSwitchContext>
	prvTaskExitError();
 8005b90:	f7ff ff1c 	bl	80059cc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005b94:	2300      	movs	r3, #0
}
 8005b96:	4618      	mov	r0, r3
 8005b98:	3718      	adds	r7, #24
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bd80      	pop	{r7, pc}
 8005b9e:	bf00      	nop
 8005ba0:	e000ed00 	.word	0xe000ed00
 8005ba4:	410fc271 	.word	0x410fc271
 8005ba8:	410fc270 	.word	0x410fc270
 8005bac:	e000e400 	.word	0xe000e400
 8005bb0:	20000498 	.word	0x20000498
 8005bb4:	2000049c 	.word	0x2000049c
 8005bb8:	e000ed20 	.word	0xe000ed20
 8005bbc:	2000000c 	.word	0x2000000c
 8005bc0:	e000ef34 	.word	0xe000ef34

08005bc4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	b083      	sub	sp, #12
 8005bc8:	af00      	add	r7, sp, #0
	__asm volatile
 8005bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bce:	f383 8811 	msr	BASEPRI, r3
 8005bd2:	f3bf 8f6f 	isb	sy
 8005bd6:	f3bf 8f4f 	dsb	sy
 8005bda:	607b      	str	r3, [r7, #4]
}
 8005bdc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005bde:	4b0f      	ldr	r3, [pc, #60]	; (8005c1c <vPortEnterCritical+0x58>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	3301      	adds	r3, #1
 8005be4:	4a0d      	ldr	r2, [pc, #52]	; (8005c1c <vPortEnterCritical+0x58>)
 8005be6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005be8:	4b0c      	ldr	r3, [pc, #48]	; (8005c1c <vPortEnterCritical+0x58>)
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	2b01      	cmp	r3, #1
 8005bee:	d10f      	bne.n	8005c10 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005bf0:	4b0b      	ldr	r3, [pc, #44]	; (8005c20 <vPortEnterCritical+0x5c>)
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	b2db      	uxtb	r3, r3
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d00a      	beq.n	8005c10 <vPortEnterCritical+0x4c>
	__asm volatile
 8005bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bfe:	f383 8811 	msr	BASEPRI, r3
 8005c02:	f3bf 8f6f 	isb	sy
 8005c06:	f3bf 8f4f 	dsb	sy
 8005c0a:	603b      	str	r3, [r7, #0]
}
 8005c0c:	bf00      	nop
 8005c0e:	e7fe      	b.n	8005c0e <vPortEnterCritical+0x4a>
	}
}
 8005c10:	bf00      	nop
 8005c12:	370c      	adds	r7, #12
 8005c14:	46bd      	mov	sp, r7
 8005c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1a:	4770      	bx	lr
 8005c1c:	2000000c 	.word	0x2000000c
 8005c20:	e000ed04 	.word	0xe000ed04

08005c24 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005c24:	b480      	push	{r7}
 8005c26:	b083      	sub	sp, #12
 8005c28:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005c2a:	4b12      	ldr	r3, [pc, #72]	; (8005c74 <vPortExitCritical+0x50>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d10a      	bne.n	8005c48 <vPortExitCritical+0x24>
	__asm volatile
 8005c32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c36:	f383 8811 	msr	BASEPRI, r3
 8005c3a:	f3bf 8f6f 	isb	sy
 8005c3e:	f3bf 8f4f 	dsb	sy
 8005c42:	607b      	str	r3, [r7, #4]
}
 8005c44:	bf00      	nop
 8005c46:	e7fe      	b.n	8005c46 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005c48:	4b0a      	ldr	r3, [pc, #40]	; (8005c74 <vPortExitCritical+0x50>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	3b01      	subs	r3, #1
 8005c4e:	4a09      	ldr	r2, [pc, #36]	; (8005c74 <vPortExitCritical+0x50>)
 8005c50:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005c52:	4b08      	ldr	r3, [pc, #32]	; (8005c74 <vPortExitCritical+0x50>)
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d105      	bne.n	8005c66 <vPortExitCritical+0x42>
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005c64:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005c66:	bf00      	nop
 8005c68:	370c      	adds	r7, #12
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c70:	4770      	bx	lr
 8005c72:	bf00      	nop
 8005c74:	2000000c 	.word	0x2000000c
	...

08005c80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005c80:	f3ef 8009 	mrs	r0, PSP
 8005c84:	f3bf 8f6f 	isb	sy
 8005c88:	4b15      	ldr	r3, [pc, #84]	; (8005ce0 <pxCurrentTCBConst>)
 8005c8a:	681a      	ldr	r2, [r3, #0]
 8005c8c:	f01e 0f10 	tst.w	lr, #16
 8005c90:	bf08      	it	eq
 8005c92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005c96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c9a:	6010      	str	r0, [r2, #0]
 8005c9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005ca0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005ca4:	f380 8811 	msr	BASEPRI, r0
 8005ca8:	f3bf 8f4f 	dsb	sy
 8005cac:	f3bf 8f6f 	isb	sy
 8005cb0:	f7ff fd1c 	bl	80056ec <vTaskSwitchContext>
 8005cb4:	f04f 0000 	mov.w	r0, #0
 8005cb8:	f380 8811 	msr	BASEPRI, r0
 8005cbc:	bc09      	pop	{r0, r3}
 8005cbe:	6819      	ldr	r1, [r3, #0]
 8005cc0:	6808      	ldr	r0, [r1, #0]
 8005cc2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cc6:	f01e 0f10 	tst.w	lr, #16
 8005cca:	bf08      	it	eq
 8005ccc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005cd0:	f380 8809 	msr	PSP, r0
 8005cd4:	f3bf 8f6f 	isb	sy
 8005cd8:	4770      	bx	lr
 8005cda:	bf00      	nop
 8005cdc:	f3af 8000 	nop.w

08005ce0 <pxCurrentTCBConst>:
 8005ce0:	2000036c 	.word	0x2000036c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005ce4:	bf00      	nop
 8005ce6:	bf00      	nop

08005ce8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b082      	sub	sp, #8
 8005cec:	af00      	add	r7, sp, #0
	__asm volatile
 8005cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cf2:	f383 8811 	msr	BASEPRI, r3
 8005cf6:	f3bf 8f6f 	isb	sy
 8005cfa:	f3bf 8f4f 	dsb	sy
 8005cfe:	607b      	str	r3, [r7, #4]
}
 8005d00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005d02:	f7ff fc3b 	bl	800557c <xTaskIncrementTick>
 8005d06:	4603      	mov	r3, r0
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d003      	beq.n	8005d14 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005d0c:	4b06      	ldr	r3, [pc, #24]	; (8005d28 <SysTick_Handler+0x40>)
 8005d0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d12:	601a      	str	r2, [r3, #0]
 8005d14:	2300      	movs	r3, #0
 8005d16:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	f383 8811 	msr	BASEPRI, r3
}
 8005d1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005d20:	bf00      	nop
 8005d22:	3708      	adds	r7, #8
 8005d24:	46bd      	mov	sp, r7
 8005d26:	bd80      	pop	{r7, pc}
 8005d28:	e000ed04 	.word	0xe000ed04

08005d2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005d30:	4b0b      	ldr	r3, [pc, #44]	; (8005d60 <vPortSetupTimerInterrupt+0x34>)
 8005d32:	2200      	movs	r2, #0
 8005d34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005d36:	4b0b      	ldr	r3, [pc, #44]	; (8005d64 <vPortSetupTimerInterrupt+0x38>)
 8005d38:	2200      	movs	r2, #0
 8005d3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005d3c:	4b0a      	ldr	r3, [pc, #40]	; (8005d68 <vPortSetupTimerInterrupt+0x3c>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	4a0a      	ldr	r2, [pc, #40]	; (8005d6c <vPortSetupTimerInterrupt+0x40>)
 8005d42:	fba2 2303 	umull	r2, r3, r2, r3
 8005d46:	099b      	lsrs	r3, r3, #6
 8005d48:	4a09      	ldr	r2, [pc, #36]	; (8005d70 <vPortSetupTimerInterrupt+0x44>)
 8005d4a:	3b01      	subs	r3, #1
 8005d4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005d4e:	4b04      	ldr	r3, [pc, #16]	; (8005d60 <vPortSetupTimerInterrupt+0x34>)
 8005d50:	2207      	movs	r2, #7
 8005d52:	601a      	str	r2, [r3, #0]
}
 8005d54:	bf00      	nop
 8005d56:	46bd      	mov	sp, r7
 8005d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5c:	4770      	bx	lr
 8005d5e:	bf00      	nop
 8005d60:	e000e010 	.word	0xe000e010
 8005d64:	e000e018 	.word	0xe000e018
 8005d68:	20000000 	.word	0x20000000
 8005d6c:	10624dd3 	.word	0x10624dd3
 8005d70:	e000e014 	.word	0xe000e014

08005d74 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005d74:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005d84 <vPortEnableVFP+0x10>
 8005d78:	6801      	ldr	r1, [r0, #0]
 8005d7a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005d7e:	6001      	str	r1, [r0, #0]
 8005d80:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005d82:	bf00      	nop
 8005d84:	e000ed88 	.word	0xe000ed88

08005d88 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b08a      	sub	sp, #40	; 0x28
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005d90:	2300      	movs	r3, #0
 8005d92:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005d94:	f7ff fb48 	bl	8005428 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005d98:	4b5b      	ldr	r3, [pc, #364]	; (8005f08 <pvPortMalloc+0x180>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d101      	bne.n	8005da4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005da0:	f000 f920 	bl	8005fe4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005da4:	4b59      	ldr	r3, [pc, #356]	; (8005f0c <pvPortMalloc+0x184>)
 8005da6:	681a      	ldr	r2, [r3, #0]
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	4013      	ands	r3, r2
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	f040 8093 	bne.w	8005ed8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d01d      	beq.n	8005df4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005db8:	2208      	movs	r2, #8
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	4413      	add	r3, r2
 8005dbe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	f003 0307 	and.w	r3, r3, #7
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d014      	beq.n	8005df4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	f023 0307 	bic.w	r3, r3, #7
 8005dd0:	3308      	adds	r3, #8
 8005dd2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	f003 0307 	and.w	r3, r3, #7
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d00a      	beq.n	8005df4 <pvPortMalloc+0x6c>
	__asm volatile
 8005dde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005de2:	f383 8811 	msr	BASEPRI, r3
 8005de6:	f3bf 8f6f 	isb	sy
 8005dea:	f3bf 8f4f 	dsb	sy
 8005dee:	617b      	str	r3, [r7, #20]
}
 8005df0:	bf00      	nop
 8005df2:	e7fe      	b.n	8005df2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d06e      	beq.n	8005ed8 <pvPortMalloc+0x150>
 8005dfa:	4b45      	ldr	r3, [pc, #276]	; (8005f10 <pvPortMalloc+0x188>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	687a      	ldr	r2, [r7, #4]
 8005e00:	429a      	cmp	r2, r3
 8005e02:	d869      	bhi.n	8005ed8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005e04:	4b43      	ldr	r3, [pc, #268]	; (8005f14 <pvPortMalloc+0x18c>)
 8005e06:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005e08:	4b42      	ldr	r3, [pc, #264]	; (8005f14 <pvPortMalloc+0x18c>)
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005e0e:	e004      	b.n	8005e1a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e12:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e1c:	685b      	ldr	r3, [r3, #4]
 8005e1e:	687a      	ldr	r2, [r7, #4]
 8005e20:	429a      	cmp	r2, r3
 8005e22:	d903      	bls.n	8005e2c <pvPortMalloc+0xa4>
 8005e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d1f1      	bne.n	8005e10 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005e2c:	4b36      	ldr	r3, [pc, #216]	; (8005f08 <pvPortMalloc+0x180>)
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e32:	429a      	cmp	r2, r3
 8005e34:	d050      	beq.n	8005ed8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005e36:	6a3b      	ldr	r3, [r7, #32]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	2208      	movs	r2, #8
 8005e3c:	4413      	add	r3, r2
 8005e3e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e42:	681a      	ldr	r2, [r3, #0]
 8005e44:	6a3b      	ldr	r3, [r7, #32]
 8005e46:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e4a:	685a      	ldr	r2, [r3, #4]
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	1ad2      	subs	r2, r2, r3
 8005e50:	2308      	movs	r3, #8
 8005e52:	005b      	lsls	r3, r3, #1
 8005e54:	429a      	cmp	r2, r3
 8005e56:	d91f      	bls.n	8005e98 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005e58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	4413      	add	r3, r2
 8005e5e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005e60:	69bb      	ldr	r3, [r7, #24]
 8005e62:	f003 0307 	and.w	r3, r3, #7
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d00a      	beq.n	8005e80 <pvPortMalloc+0xf8>
	__asm volatile
 8005e6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e6e:	f383 8811 	msr	BASEPRI, r3
 8005e72:	f3bf 8f6f 	isb	sy
 8005e76:	f3bf 8f4f 	dsb	sy
 8005e7a:	613b      	str	r3, [r7, #16]
}
 8005e7c:	bf00      	nop
 8005e7e:	e7fe      	b.n	8005e7e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e82:	685a      	ldr	r2, [r3, #4]
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	1ad2      	subs	r2, r2, r3
 8005e88:	69bb      	ldr	r3, [r7, #24]
 8005e8a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e8e:	687a      	ldr	r2, [r7, #4]
 8005e90:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005e92:	69b8      	ldr	r0, [r7, #24]
 8005e94:	f000 f908 	bl	80060a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005e98:	4b1d      	ldr	r3, [pc, #116]	; (8005f10 <pvPortMalloc+0x188>)
 8005e9a:	681a      	ldr	r2, [r3, #0]
 8005e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e9e:	685b      	ldr	r3, [r3, #4]
 8005ea0:	1ad3      	subs	r3, r2, r3
 8005ea2:	4a1b      	ldr	r2, [pc, #108]	; (8005f10 <pvPortMalloc+0x188>)
 8005ea4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005ea6:	4b1a      	ldr	r3, [pc, #104]	; (8005f10 <pvPortMalloc+0x188>)
 8005ea8:	681a      	ldr	r2, [r3, #0]
 8005eaa:	4b1b      	ldr	r3, [pc, #108]	; (8005f18 <pvPortMalloc+0x190>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	429a      	cmp	r2, r3
 8005eb0:	d203      	bcs.n	8005eba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005eb2:	4b17      	ldr	r3, [pc, #92]	; (8005f10 <pvPortMalloc+0x188>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4a18      	ldr	r2, [pc, #96]	; (8005f18 <pvPortMalloc+0x190>)
 8005eb8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ebc:	685a      	ldr	r2, [r3, #4]
 8005ebe:	4b13      	ldr	r3, [pc, #76]	; (8005f0c <pvPortMalloc+0x184>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	431a      	orrs	r2, r3
 8005ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eca:	2200      	movs	r2, #0
 8005ecc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005ece:	4b13      	ldr	r3, [pc, #76]	; (8005f1c <pvPortMalloc+0x194>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	3301      	adds	r3, #1
 8005ed4:	4a11      	ldr	r2, [pc, #68]	; (8005f1c <pvPortMalloc+0x194>)
 8005ed6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005ed8:	f7ff fab4 	bl	8005444 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005edc:	69fb      	ldr	r3, [r7, #28]
 8005ede:	f003 0307 	and.w	r3, r3, #7
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d00a      	beq.n	8005efc <pvPortMalloc+0x174>
	__asm volatile
 8005ee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eea:	f383 8811 	msr	BASEPRI, r3
 8005eee:	f3bf 8f6f 	isb	sy
 8005ef2:	f3bf 8f4f 	dsb	sy
 8005ef6:	60fb      	str	r3, [r7, #12]
}
 8005ef8:	bf00      	nop
 8005efa:	e7fe      	b.n	8005efa <pvPortMalloc+0x172>
	return pvReturn;
 8005efc:	69fb      	ldr	r3, [r7, #28]
}
 8005efe:	4618      	mov	r0, r3
 8005f00:	3728      	adds	r7, #40	; 0x28
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bd80      	pop	{r7, pc}
 8005f06:	bf00      	nop
 8005f08:	20001060 	.word	0x20001060
 8005f0c:	20001074 	.word	0x20001074
 8005f10:	20001064 	.word	0x20001064
 8005f14:	20001058 	.word	0x20001058
 8005f18:	20001068 	.word	0x20001068
 8005f1c:	2000106c 	.word	0x2000106c

08005f20 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b086      	sub	sp, #24
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d04d      	beq.n	8005fce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005f32:	2308      	movs	r3, #8
 8005f34:	425b      	negs	r3, r3
 8005f36:	697a      	ldr	r2, [r7, #20]
 8005f38:	4413      	add	r3, r2
 8005f3a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005f3c:	697b      	ldr	r3, [r7, #20]
 8005f3e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005f40:	693b      	ldr	r3, [r7, #16]
 8005f42:	685a      	ldr	r2, [r3, #4]
 8005f44:	4b24      	ldr	r3, [pc, #144]	; (8005fd8 <vPortFree+0xb8>)
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	4013      	ands	r3, r2
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d10a      	bne.n	8005f64 <vPortFree+0x44>
	__asm volatile
 8005f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f52:	f383 8811 	msr	BASEPRI, r3
 8005f56:	f3bf 8f6f 	isb	sy
 8005f5a:	f3bf 8f4f 	dsb	sy
 8005f5e:	60fb      	str	r3, [r7, #12]
}
 8005f60:	bf00      	nop
 8005f62:	e7fe      	b.n	8005f62 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005f64:	693b      	ldr	r3, [r7, #16]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d00a      	beq.n	8005f82 <vPortFree+0x62>
	__asm volatile
 8005f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f70:	f383 8811 	msr	BASEPRI, r3
 8005f74:	f3bf 8f6f 	isb	sy
 8005f78:	f3bf 8f4f 	dsb	sy
 8005f7c:	60bb      	str	r3, [r7, #8]
}
 8005f7e:	bf00      	nop
 8005f80:	e7fe      	b.n	8005f80 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005f82:	693b      	ldr	r3, [r7, #16]
 8005f84:	685a      	ldr	r2, [r3, #4]
 8005f86:	4b14      	ldr	r3, [pc, #80]	; (8005fd8 <vPortFree+0xb8>)
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	4013      	ands	r3, r2
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d01e      	beq.n	8005fce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005f90:	693b      	ldr	r3, [r7, #16]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d11a      	bne.n	8005fce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005f98:	693b      	ldr	r3, [r7, #16]
 8005f9a:	685a      	ldr	r2, [r3, #4]
 8005f9c:	4b0e      	ldr	r3, [pc, #56]	; (8005fd8 <vPortFree+0xb8>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	43db      	mvns	r3, r3
 8005fa2:	401a      	ands	r2, r3
 8005fa4:	693b      	ldr	r3, [r7, #16]
 8005fa6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005fa8:	f7ff fa3e 	bl	8005428 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005fac:	693b      	ldr	r3, [r7, #16]
 8005fae:	685a      	ldr	r2, [r3, #4]
 8005fb0:	4b0a      	ldr	r3, [pc, #40]	; (8005fdc <vPortFree+0xbc>)
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4413      	add	r3, r2
 8005fb6:	4a09      	ldr	r2, [pc, #36]	; (8005fdc <vPortFree+0xbc>)
 8005fb8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005fba:	6938      	ldr	r0, [r7, #16]
 8005fbc:	f000 f874 	bl	80060a8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005fc0:	4b07      	ldr	r3, [pc, #28]	; (8005fe0 <vPortFree+0xc0>)
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	3301      	adds	r3, #1
 8005fc6:	4a06      	ldr	r2, [pc, #24]	; (8005fe0 <vPortFree+0xc0>)
 8005fc8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005fca:	f7ff fa3b 	bl	8005444 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005fce:	bf00      	nop
 8005fd0:	3718      	adds	r7, #24
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bd80      	pop	{r7, pc}
 8005fd6:	bf00      	nop
 8005fd8:	20001074 	.word	0x20001074
 8005fdc:	20001064 	.word	0x20001064
 8005fe0:	20001070 	.word	0x20001070

08005fe4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	b085      	sub	sp, #20
 8005fe8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005fea:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8005fee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005ff0:	4b27      	ldr	r3, [pc, #156]	; (8006090 <prvHeapInit+0xac>)
 8005ff2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	f003 0307 	and.w	r3, r3, #7
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d00c      	beq.n	8006018 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	3307      	adds	r3, #7
 8006002:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	f023 0307 	bic.w	r3, r3, #7
 800600a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800600c:	68ba      	ldr	r2, [r7, #8]
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	1ad3      	subs	r3, r2, r3
 8006012:	4a1f      	ldr	r2, [pc, #124]	; (8006090 <prvHeapInit+0xac>)
 8006014:	4413      	add	r3, r2
 8006016:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800601c:	4a1d      	ldr	r2, [pc, #116]	; (8006094 <prvHeapInit+0xb0>)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006022:	4b1c      	ldr	r3, [pc, #112]	; (8006094 <prvHeapInit+0xb0>)
 8006024:	2200      	movs	r2, #0
 8006026:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	68ba      	ldr	r2, [r7, #8]
 800602c:	4413      	add	r3, r2
 800602e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006030:	2208      	movs	r2, #8
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	1a9b      	subs	r3, r3, r2
 8006036:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	f023 0307 	bic.w	r3, r3, #7
 800603e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	4a15      	ldr	r2, [pc, #84]	; (8006098 <prvHeapInit+0xb4>)
 8006044:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006046:	4b14      	ldr	r3, [pc, #80]	; (8006098 <prvHeapInit+0xb4>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	2200      	movs	r2, #0
 800604c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800604e:	4b12      	ldr	r3, [pc, #72]	; (8006098 <prvHeapInit+0xb4>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	2200      	movs	r2, #0
 8006054:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	68fa      	ldr	r2, [r7, #12]
 800605e:	1ad2      	subs	r2, r2, r3
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006064:	4b0c      	ldr	r3, [pc, #48]	; (8006098 <prvHeapInit+0xb4>)
 8006066:	681a      	ldr	r2, [r3, #0]
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	685b      	ldr	r3, [r3, #4]
 8006070:	4a0a      	ldr	r2, [pc, #40]	; (800609c <prvHeapInit+0xb8>)
 8006072:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	685b      	ldr	r3, [r3, #4]
 8006078:	4a09      	ldr	r2, [pc, #36]	; (80060a0 <prvHeapInit+0xbc>)
 800607a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800607c:	4b09      	ldr	r3, [pc, #36]	; (80060a4 <prvHeapInit+0xc0>)
 800607e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006082:	601a      	str	r2, [r3, #0]
}
 8006084:	bf00      	nop
 8006086:	3714      	adds	r7, #20
 8006088:	46bd      	mov	sp, r7
 800608a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608e:	4770      	bx	lr
 8006090:	200004a0 	.word	0x200004a0
 8006094:	20001058 	.word	0x20001058
 8006098:	20001060 	.word	0x20001060
 800609c:	20001068 	.word	0x20001068
 80060a0:	20001064 	.word	0x20001064
 80060a4:	20001074 	.word	0x20001074

080060a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80060a8:	b480      	push	{r7}
 80060aa:	b085      	sub	sp, #20
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80060b0:	4b28      	ldr	r3, [pc, #160]	; (8006154 <prvInsertBlockIntoFreeList+0xac>)
 80060b2:	60fb      	str	r3, [r7, #12]
 80060b4:	e002      	b.n	80060bc <prvInsertBlockIntoFreeList+0x14>
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	60fb      	str	r3, [r7, #12]
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	687a      	ldr	r2, [r7, #4]
 80060c2:	429a      	cmp	r2, r3
 80060c4:	d8f7      	bhi.n	80060b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	685b      	ldr	r3, [r3, #4]
 80060ce:	68ba      	ldr	r2, [r7, #8]
 80060d0:	4413      	add	r3, r2
 80060d2:	687a      	ldr	r2, [r7, #4]
 80060d4:	429a      	cmp	r2, r3
 80060d6:	d108      	bne.n	80060ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	685a      	ldr	r2, [r3, #4]
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	685b      	ldr	r3, [r3, #4]
 80060e0:	441a      	add	r2, r3
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	685b      	ldr	r3, [r3, #4]
 80060f2:	68ba      	ldr	r2, [r7, #8]
 80060f4:	441a      	add	r2, r3
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	429a      	cmp	r2, r3
 80060fc:	d118      	bne.n	8006130 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681a      	ldr	r2, [r3, #0]
 8006102:	4b15      	ldr	r3, [pc, #84]	; (8006158 <prvInsertBlockIntoFreeList+0xb0>)
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	429a      	cmp	r2, r3
 8006108:	d00d      	beq.n	8006126 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	685a      	ldr	r2, [r3, #4]
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	685b      	ldr	r3, [r3, #4]
 8006114:	441a      	add	r2, r3
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	681a      	ldr	r2, [r3, #0]
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	601a      	str	r2, [r3, #0]
 8006124:	e008      	b.n	8006138 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006126:	4b0c      	ldr	r3, [pc, #48]	; (8006158 <prvInsertBlockIntoFreeList+0xb0>)
 8006128:	681a      	ldr	r2, [r3, #0]
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	601a      	str	r2, [r3, #0]
 800612e:	e003      	b.n	8006138 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681a      	ldr	r2, [r3, #0]
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006138:	68fa      	ldr	r2, [r7, #12]
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	429a      	cmp	r2, r3
 800613e:	d002      	beq.n	8006146 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	687a      	ldr	r2, [r7, #4]
 8006144:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006146:	bf00      	nop
 8006148:	3714      	adds	r7, #20
 800614a:	46bd      	mov	sp, r7
 800614c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006150:	4770      	bx	lr
 8006152:	bf00      	nop
 8006154:	20001058 	.word	0x20001058
 8006158:	20001060 	.word	0x20001060

0800615c <__libc_init_array>:
 800615c:	b570      	push	{r4, r5, r6, lr}
 800615e:	4d0d      	ldr	r5, [pc, #52]	; (8006194 <__libc_init_array+0x38>)
 8006160:	4c0d      	ldr	r4, [pc, #52]	; (8006198 <__libc_init_array+0x3c>)
 8006162:	1b64      	subs	r4, r4, r5
 8006164:	10a4      	asrs	r4, r4, #2
 8006166:	2600      	movs	r6, #0
 8006168:	42a6      	cmp	r6, r4
 800616a:	d109      	bne.n	8006180 <__libc_init_array+0x24>
 800616c:	4d0b      	ldr	r5, [pc, #44]	; (800619c <__libc_init_array+0x40>)
 800616e:	4c0c      	ldr	r4, [pc, #48]	; (80061a0 <__libc_init_array+0x44>)
 8006170:	f000 f8e8 	bl	8006344 <_init>
 8006174:	1b64      	subs	r4, r4, r5
 8006176:	10a4      	asrs	r4, r4, #2
 8006178:	2600      	movs	r6, #0
 800617a:	42a6      	cmp	r6, r4
 800617c:	d105      	bne.n	800618a <__libc_init_array+0x2e>
 800617e:	bd70      	pop	{r4, r5, r6, pc}
 8006180:	f855 3b04 	ldr.w	r3, [r5], #4
 8006184:	4798      	blx	r3
 8006186:	3601      	adds	r6, #1
 8006188:	e7ee      	b.n	8006168 <__libc_init_array+0xc>
 800618a:	f855 3b04 	ldr.w	r3, [r5], #4
 800618e:	4798      	blx	r3
 8006190:	3601      	adds	r6, #1
 8006192:	e7f2      	b.n	800617a <__libc_init_array+0x1e>
 8006194:	0800641c 	.word	0x0800641c
 8006198:	0800641c 	.word	0x0800641c
 800619c:	0800641c 	.word	0x0800641c
 80061a0:	08006420 	.word	0x08006420

080061a4 <__retarget_lock_acquire_recursive>:
 80061a4:	4770      	bx	lr

080061a6 <__retarget_lock_release_recursive>:
 80061a6:	4770      	bx	lr

080061a8 <memset>:
 80061a8:	4402      	add	r2, r0
 80061aa:	4603      	mov	r3, r0
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d100      	bne.n	80061b2 <memset+0xa>
 80061b0:	4770      	bx	lr
 80061b2:	f803 1b01 	strb.w	r1, [r3], #1
 80061b6:	e7f9      	b.n	80061ac <memset+0x4>

080061b8 <cleanup_glue>:
 80061b8:	b538      	push	{r3, r4, r5, lr}
 80061ba:	460c      	mov	r4, r1
 80061bc:	6809      	ldr	r1, [r1, #0]
 80061be:	4605      	mov	r5, r0
 80061c0:	b109      	cbz	r1, 80061c6 <cleanup_glue+0xe>
 80061c2:	f7ff fff9 	bl	80061b8 <cleanup_glue>
 80061c6:	4621      	mov	r1, r4
 80061c8:	4628      	mov	r0, r5
 80061ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80061ce:	f000 b869 	b.w	80062a4 <_free_r>
	...

080061d4 <_reclaim_reent>:
 80061d4:	4b2c      	ldr	r3, [pc, #176]	; (8006288 <_reclaim_reent+0xb4>)
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	4283      	cmp	r3, r0
 80061da:	b570      	push	{r4, r5, r6, lr}
 80061dc:	4604      	mov	r4, r0
 80061de:	d051      	beq.n	8006284 <_reclaim_reent+0xb0>
 80061e0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80061e2:	b143      	cbz	r3, 80061f6 <_reclaim_reent+0x22>
 80061e4:	68db      	ldr	r3, [r3, #12]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d14a      	bne.n	8006280 <_reclaim_reent+0xac>
 80061ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80061ec:	6819      	ldr	r1, [r3, #0]
 80061ee:	b111      	cbz	r1, 80061f6 <_reclaim_reent+0x22>
 80061f0:	4620      	mov	r0, r4
 80061f2:	f000 f857 	bl	80062a4 <_free_r>
 80061f6:	6961      	ldr	r1, [r4, #20]
 80061f8:	b111      	cbz	r1, 8006200 <_reclaim_reent+0x2c>
 80061fa:	4620      	mov	r0, r4
 80061fc:	f000 f852 	bl	80062a4 <_free_r>
 8006200:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006202:	b111      	cbz	r1, 800620a <_reclaim_reent+0x36>
 8006204:	4620      	mov	r0, r4
 8006206:	f000 f84d 	bl	80062a4 <_free_r>
 800620a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800620c:	b111      	cbz	r1, 8006214 <_reclaim_reent+0x40>
 800620e:	4620      	mov	r0, r4
 8006210:	f000 f848 	bl	80062a4 <_free_r>
 8006214:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8006216:	b111      	cbz	r1, 800621e <_reclaim_reent+0x4a>
 8006218:	4620      	mov	r0, r4
 800621a:	f000 f843 	bl	80062a4 <_free_r>
 800621e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8006220:	b111      	cbz	r1, 8006228 <_reclaim_reent+0x54>
 8006222:	4620      	mov	r0, r4
 8006224:	f000 f83e 	bl	80062a4 <_free_r>
 8006228:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800622a:	b111      	cbz	r1, 8006232 <_reclaim_reent+0x5e>
 800622c:	4620      	mov	r0, r4
 800622e:	f000 f839 	bl	80062a4 <_free_r>
 8006232:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8006234:	b111      	cbz	r1, 800623c <_reclaim_reent+0x68>
 8006236:	4620      	mov	r0, r4
 8006238:	f000 f834 	bl	80062a4 <_free_r>
 800623c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800623e:	b111      	cbz	r1, 8006246 <_reclaim_reent+0x72>
 8006240:	4620      	mov	r0, r4
 8006242:	f000 f82f 	bl	80062a4 <_free_r>
 8006246:	69a3      	ldr	r3, [r4, #24]
 8006248:	b1e3      	cbz	r3, 8006284 <_reclaim_reent+0xb0>
 800624a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800624c:	4620      	mov	r0, r4
 800624e:	4798      	blx	r3
 8006250:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006252:	b1b9      	cbz	r1, 8006284 <_reclaim_reent+0xb0>
 8006254:	4620      	mov	r0, r4
 8006256:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800625a:	f7ff bfad 	b.w	80061b8 <cleanup_glue>
 800625e:	5949      	ldr	r1, [r1, r5]
 8006260:	b941      	cbnz	r1, 8006274 <_reclaim_reent+0xa0>
 8006262:	3504      	adds	r5, #4
 8006264:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006266:	2d80      	cmp	r5, #128	; 0x80
 8006268:	68d9      	ldr	r1, [r3, #12]
 800626a:	d1f8      	bne.n	800625e <_reclaim_reent+0x8a>
 800626c:	4620      	mov	r0, r4
 800626e:	f000 f819 	bl	80062a4 <_free_r>
 8006272:	e7ba      	b.n	80061ea <_reclaim_reent+0x16>
 8006274:	680e      	ldr	r6, [r1, #0]
 8006276:	4620      	mov	r0, r4
 8006278:	f000 f814 	bl	80062a4 <_free_r>
 800627c:	4631      	mov	r1, r6
 800627e:	e7ef      	b.n	8006260 <_reclaim_reent+0x8c>
 8006280:	2500      	movs	r5, #0
 8006282:	e7ef      	b.n	8006264 <_reclaim_reent+0x90>
 8006284:	bd70      	pop	{r4, r5, r6, pc}
 8006286:	bf00      	nop
 8006288:	20000010 	.word	0x20000010

0800628c <__malloc_lock>:
 800628c:	4801      	ldr	r0, [pc, #4]	; (8006294 <__malloc_lock+0x8>)
 800628e:	f7ff bf89 	b.w	80061a4 <__retarget_lock_acquire_recursive>
 8006292:	bf00      	nop
 8006294:	2000170c 	.word	0x2000170c

08006298 <__malloc_unlock>:
 8006298:	4801      	ldr	r0, [pc, #4]	; (80062a0 <__malloc_unlock+0x8>)
 800629a:	f7ff bf84 	b.w	80061a6 <__retarget_lock_release_recursive>
 800629e:	bf00      	nop
 80062a0:	2000170c 	.word	0x2000170c

080062a4 <_free_r>:
 80062a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80062a6:	2900      	cmp	r1, #0
 80062a8:	d048      	beq.n	800633c <_free_r+0x98>
 80062aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80062ae:	9001      	str	r0, [sp, #4]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	f1a1 0404 	sub.w	r4, r1, #4
 80062b6:	bfb8      	it	lt
 80062b8:	18e4      	addlt	r4, r4, r3
 80062ba:	f7ff ffe7 	bl	800628c <__malloc_lock>
 80062be:	4a20      	ldr	r2, [pc, #128]	; (8006340 <_free_r+0x9c>)
 80062c0:	9801      	ldr	r0, [sp, #4]
 80062c2:	6813      	ldr	r3, [r2, #0]
 80062c4:	4615      	mov	r5, r2
 80062c6:	b933      	cbnz	r3, 80062d6 <_free_r+0x32>
 80062c8:	6063      	str	r3, [r4, #4]
 80062ca:	6014      	str	r4, [r2, #0]
 80062cc:	b003      	add	sp, #12
 80062ce:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80062d2:	f7ff bfe1 	b.w	8006298 <__malloc_unlock>
 80062d6:	42a3      	cmp	r3, r4
 80062d8:	d90b      	bls.n	80062f2 <_free_r+0x4e>
 80062da:	6821      	ldr	r1, [r4, #0]
 80062dc:	1862      	adds	r2, r4, r1
 80062de:	4293      	cmp	r3, r2
 80062e0:	bf04      	itt	eq
 80062e2:	681a      	ldreq	r2, [r3, #0]
 80062e4:	685b      	ldreq	r3, [r3, #4]
 80062e6:	6063      	str	r3, [r4, #4]
 80062e8:	bf04      	itt	eq
 80062ea:	1852      	addeq	r2, r2, r1
 80062ec:	6022      	streq	r2, [r4, #0]
 80062ee:	602c      	str	r4, [r5, #0]
 80062f0:	e7ec      	b.n	80062cc <_free_r+0x28>
 80062f2:	461a      	mov	r2, r3
 80062f4:	685b      	ldr	r3, [r3, #4]
 80062f6:	b10b      	cbz	r3, 80062fc <_free_r+0x58>
 80062f8:	42a3      	cmp	r3, r4
 80062fa:	d9fa      	bls.n	80062f2 <_free_r+0x4e>
 80062fc:	6811      	ldr	r1, [r2, #0]
 80062fe:	1855      	adds	r5, r2, r1
 8006300:	42a5      	cmp	r5, r4
 8006302:	d10b      	bne.n	800631c <_free_r+0x78>
 8006304:	6824      	ldr	r4, [r4, #0]
 8006306:	4421      	add	r1, r4
 8006308:	1854      	adds	r4, r2, r1
 800630a:	42a3      	cmp	r3, r4
 800630c:	6011      	str	r1, [r2, #0]
 800630e:	d1dd      	bne.n	80062cc <_free_r+0x28>
 8006310:	681c      	ldr	r4, [r3, #0]
 8006312:	685b      	ldr	r3, [r3, #4]
 8006314:	6053      	str	r3, [r2, #4]
 8006316:	4421      	add	r1, r4
 8006318:	6011      	str	r1, [r2, #0]
 800631a:	e7d7      	b.n	80062cc <_free_r+0x28>
 800631c:	d902      	bls.n	8006324 <_free_r+0x80>
 800631e:	230c      	movs	r3, #12
 8006320:	6003      	str	r3, [r0, #0]
 8006322:	e7d3      	b.n	80062cc <_free_r+0x28>
 8006324:	6825      	ldr	r5, [r4, #0]
 8006326:	1961      	adds	r1, r4, r5
 8006328:	428b      	cmp	r3, r1
 800632a:	bf04      	itt	eq
 800632c:	6819      	ldreq	r1, [r3, #0]
 800632e:	685b      	ldreq	r3, [r3, #4]
 8006330:	6063      	str	r3, [r4, #4]
 8006332:	bf04      	itt	eq
 8006334:	1949      	addeq	r1, r1, r5
 8006336:	6021      	streq	r1, [r4, #0]
 8006338:	6054      	str	r4, [r2, #4]
 800633a:	e7c7      	b.n	80062cc <_free_r+0x28>
 800633c:	b003      	add	sp, #12
 800633e:	bd30      	pop	{r4, r5, pc}
 8006340:	20001078 	.word	0x20001078

08006344 <_init>:
 8006344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006346:	bf00      	nop
 8006348:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800634a:	bc08      	pop	{r3}
 800634c:	469e      	mov	lr, r3
 800634e:	4770      	bx	lr

08006350 <_fini>:
 8006350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006352:	bf00      	nop
 8006354:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006356:	bc08      	pop	{r3}
 8006358:	469e      	mov	lr, r3
 800635a:	4770      	bx	lr
