/* Includes ------------------------------------------------------------------*/
#include "FreeRTOS.h"
#include "task.h"
#include "main.h"
#include "cmsis_os.h"
#include "printf.h"

#define mainDELAY_LOOP_COUNT 	(0xffffff)
/* Private function prototypes -----------------------------------------------*/
void vTask1( void *pvParameters );
void vTask2( void *pvParameters );

TaskHandle_t xTask2Handle;

void MX_FREERTOS_Init(void); /* (MISRA C 2004 rule 8.1) */

/* GetIdleTaskMemory prototype (linked to static allocation support) */
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize );

/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
  /* place for user code */
}
/* USER CODE END GET_IDLE_TASK_MEMORY */

/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {


  /* Create the thread(s) */
  xTaskCreate(vTask1, "Task 1", 128, NULL, 3, NULL);
  xTaskCreate(vTask2, "Task 2", 128, NULL, 4, &xTask2Handle);


}

void vTask1( void *pvParameters )
{
	UBaseType_t uxPriority;

	uxPriority = uxTaskPriorityGet( NULL );

	/* infinite loop. */
	for( ;; )
	{
		printf("Task1 is running\r\n");

		printf("About to raise the Task2 priority\r\n");
		vTaskPrioritySet( xTask2Handle, ( uxPriority + 1 ));
	}
}

void vTask2( void *pvParameters )
{
	UBaseType_t uxPriority;

	uxPriority = uxTaskPriorityGet( NULL );

	/* infinite loop. */
	for( ;; )
	{
		printf("Task2 is running\r\n");

		printf("About to lower the Task2 priority\r\n");
		vTaskPrioritySet( NULL, ( uxPriority - 2 ));
	}
}
