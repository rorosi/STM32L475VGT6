/* Includes ------------------------------------------------------------------*/
#include "FreeRTOS.h"
#include "task.h"
#include "main.h"
#include "cmsis_os.h"
#include "printf.h"

#define mainDELAY_LOOP_COUNT 	(0xffffff)
/* Private function prototypes -----------------------------------------------*/
void vTaskFunction(void *pvParameters);

const char *pcTextForTask1 = "Task1 is running\r\n";
const char *pcTextForTask2 = "Task2 is running\r\n";

void MX_FREERTOS_Init(void); /* (MISRA C 2004 rule 8.1) */

/* GetIdleTaskMemory prototype (linked to static allocation support) */
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize );

/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
  /* place for user code */
}
/* USER CODE END GET_IDLE_TASK_MEMORY */

/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {


  /* Create the thread(s) */
  xTaskCreate(vTaskFunction, "Task 1", 128, (void*)pcTextForTask1, 3, NULL);
  xTaskCreate(vTaskFunction, "Task 2", 128, (void*)pcTextForTask2, 3, NULL);


}

void vTaskFunction( void *pvParameters )
{
	char *pcTaskName;
	volatile uint32_t ul;

	pcTaskName = ( char * ) pvParameters;

	/* infinite loop. */
	for( ;; )
	{
		printf( pcTaskName );

		/* Delay for a period. */
		for( ul = 0; ul < mainDELAY_LOOP_COUNT; ul++)
		{
		}
	}
}
